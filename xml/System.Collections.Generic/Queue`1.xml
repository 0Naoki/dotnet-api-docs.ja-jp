<Type Name="Queue&lt;T&gt;" FullName="System.Collections.Generic.Queue&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="09d50ca31272daded9ebb05a6bec962063aa77a2" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36645641" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Queue&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Queue`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Queue`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Queue(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Queue : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type Queue&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_QueueDebugView`1))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="a3fb2-101">キュー内の要素の型を指定します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a3fb2-101">Specifies the type of elements in the queue.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="a3fb2-102">オブジェクトの先入れ先出しコレクションを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a3fb2-102">Represents a first-in, first-out collection of objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-103">このクラスは、循環を配列としてジェネリック キューを実装します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-103">This class implements a generic queue as a circular array.</span></span> <span data-ttu-id="a3fb2-104">オブジェクトに格納されている、<xref:System.Collections.Generic.Queue%601>が一方の端に挿入され、他から削除します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-104">Objects stored in a <xref:System.Collections.Generic.Queue%601> are inserted at one end and removed from the other.</span></span> <span data-ttu-id="a3fb2-105">キューおよびスタックは場合に役立ちますについて; 一時的な保存する必要があります。つまり、可能性がある場合の値を取得後に要素を破棄します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-105">Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="a3fb2-106">使用して<xref:System.Collections.Generic.Queue%601>かどうかは、これが、コレクションに格納される順序と同じ順序での情報にアクセスする必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-106">Use <xref:System.Collections.Generic.Queue%601> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="a3fb2-107">使用して<xref:System.Collections.Generic.Stack%601>逆の順序で、情報にアクセスする必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-107">Use <xref:System.Collections.Generic.Stack%601> if you need to access the information in reverse order.</span></span> <span data-ttu-id="a3fb2-108">使用して<xref:System.Collections.Concurrent.ConcurrentQueue%601>または<xref:System.Collections.Concurrent.ConcurrentStack%601>同時に複数のスレッドからコレクションにアクセスする必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-108">Use <xref:System.Collections.Concurrent.ConcurrentQueue%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> if you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="a3fb2-109">次の 3 つの主要な操作を実行できる、<xref:System.Collections.Generic.Queue%601>とその要素。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-109">Three main operations can be performed on a <xref:System.Collections.Generic.Queue%601> and its elements:</span></span>  
  
-   <span data-ttu-id="a3fb2-110"><xref:System.Collections.Generic.Queue%601.Enqueue%2A> 末尾に要素を追加、<xref:System.Collections.Generic.Queue%601>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-110"><xref:System.Collections.Generic.Queue%601.Enqueue%2A> adds an element to the end of the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
-   <span data-ttu-id="a3fb2-111"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> 先頭から最も古い要素を削除、<xref:System.Collections.Generic.Queue%601>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-111"><xref:System.Collections.Generic.Queue%601.Dequeue%2A> removes the oldest element from the start of the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
-   <span data-ttu-id="a3fb2-112"><xref:System.Collections.Generic.Queue%601.Peek%2A> ピークの開始位置にある最も古い要素を返します、<xref:System.Collections.Generic.Queue%601>からは削除されませんが、<xref:System.Collections.Generic.Queue%601>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-112"><xref:System.Collections.Generic.Queue%601.Peek%2A> peek returns the oldest element that is at the start of the <xref:System.Collections.Generic.Queue%601> but does not remove it from the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="a3fb2-113">容量、<xref:System.Collections.Generic.Queue%601>要素の数が、<xref:System.Collections.Generic.Queue%601>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-113">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="a3fb2-114">要素が追加されるにつれて、<xref:System.Collections.Generic.Queue%601>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-114">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="a3fb2-115">呼び出すことによって、容量を削減できる<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-115">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="a3fb2-116"><xref:System.Collections.Generic.Queue%601> 受け付ける`null`と参照の有効な値の型により、重複する要素。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-116"><xref:System.Collections.Generic.Queue%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3fb2-117">次のコード例をいくつかの方法を示しています、<xref:System.Collections.Generic.Queue%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-117">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="a3fb2-118">このコード例は、既定の容量を持つ文字列のキューを作成し、使用して、<xref:System.Collections.Generic.Queue%601.Enqueue%2A>メソッドの 5 つの文字列をキューに登録します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-118">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="a3fb2-119">キューの要素が表示され、キューの状態は変化しませんが列挙されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-119">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="a3fb2-120"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>最初の文字列をデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-120">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="a3fb2-121"><xref:System.Collections.Generic.Queue%601.Peek%2A>メソッドを使用して、キュー内の次の項目を確認し、<xref:System.Collections.Generic.Queue%601.Dequeue%2A>がデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-121">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="a3fb2-122"><xref:System.Collections.Generic.Queue%601.ToArray%2A>配列を作成し、キューの要素をコピーするメソッドを使用し、配列に渡されます、<xref:System.Collections.Generic.Queue%601.%23ctor%2A>を受け取るコンス トラクター<xref:System.Collections.Generic.IEnumerable%601>キューのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-122">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="a3fb2-123">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-123">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="a3fb2-124">配列 2 回、キューのサイズが作成、および<xref:System.Collections.Generic.Queue%601.CopyTo%2A>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-124">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="a3fb2-125"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>コンス トラクターは、先頭の 3 つの null 要素を含むキューの 2 番目のコピーを作成するもう一度使用されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-125">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="a3fb2-126"><xref:System.Collections.Generic.Queue%601.Contains%2A>メソッドを使用して、文字列「4」がである、キューの最初のコピーの後を表示、<xref:System.Collections.Generic.Queue%601.Clear%2A>メソッドは、コピー、クリア、<xref:System.Collections.Generic.Queue%601.Count%2A>プロパティはキューが空であることを示します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-126">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="a3fb2-127">パブリック静的 (<see langword="Shared" /> Visual Basic で) この型のメンバーは、スレッド セーフであります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a3fb2-127">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="a3fb2-128">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a3fb2-128">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="a3fb2-129">A<see cref="T:System.Collections.Generic.Queue`1" />コレクションが変更されない限り、複数のリーダーを同時にサポートできます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a3fb2-129">A <see cref="T:System.Collections.Generic.Queue`1" /> can support multiple readers concurrently, as long as the collection is not modified.</span>
      </span>
      <span data-ttu-id="a3fb2-130">それでも、コレクションの列挙は、本質的には、スレッド セーフなプロシージャではします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a3fb2-130">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="a3fb2-131">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a3fb2-131">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span>
      </span>
      <span data-ttu-id="a3fb2-132">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a3fb2-132">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a3fb2-133">
            <see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-133">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a3fb2-134">空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-134">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that is empty and has the default initial capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-135">容量、<xref:System.Collections.Generic.Queue%601>は要素の数を<xref:System.Collections.Generic.Queue%601>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-135">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="a3fb2-136">要素が追加されるにつれて、<xref:System.Collections.Generic.Queue%601>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-136">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="a3fb2-137">コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.Generic.Queue%601>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-137">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="a3fb2-138">呼び出すことによって、容量を削減できる<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-138">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="a3fb2-139">このコンス トラクターは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-139">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3fb2-140">次のコード例は、このコンス トラクターとその他のいくつかの方法を示しています、<xref:System.Collections.Generic.Queue%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-140">The following code example demonstrates this constructor and several other methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="a3fb2-141">このコード例は、既定の容量を持つ文字列のキューを作成し、使用して、<xref:System.Collections.Generic.Queue%601.Enqueue%2A>メソッドの 5 つの文字列をキューに登録します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-141">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="a3fb2-142">キューの要素が表示され、キューの状態は変化しませんが列挙されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-142">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="a3fb2-143"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>最初の文字列をデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-143">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="a3fb2-144"><xref:System.Collections.Generic.Queue%601.Peek%2A>メソッドを使用して、キュー内の次の項目を確認し、<xref:System.Collections.Generic.Queue%601.Dequeue%2A>がデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-144">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="a3fb2-145"><xref:System.Collections.Generic.Queue%601.ToArray%2A>配列を作成し、キューの要素をコピーするメソッドを使用し、配列に渡されます、<xref:System.Collections.Generic.Queue%601.%23ctor%2A>を受け取るコンス トラクター<xref:System.Collections.Generic.IEnumerable%601>キューのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-145">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="a3fb2-146">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-146">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="a3fb2-147">配列 2 回、キューのサイズが作成、および<xref:System.Collections.Generic.Queue%601.CopyTo%2A>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-147">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="a3fb2-148"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>コンス トラクターは、先頭の 3 つの null 要素を含むキューの 2 番目のコピーを作成するもう一度使用されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-148">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="a3fb2-149"><xref:System.Collections.Generic.Queue%601.Contains%2A>メソッドを使用して、文字列「4」がである、キューの最初のコピーの後を表示、<xref:System.Collections.Generic.Queue%601.Clear%2A>メソッドは、コピー、クリア、<xref:System.Collections.Generic.Queue%601.Count%2A>プロパティはキューが空であることを示します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-149">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Queue&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Queue&lt;'T&gt;" Usage="new System.Collections.Generic.Queue&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="a3fb2-150">新しい <see cref="T:System.Collections.Generic.Queue`1" /> に要素がコピーされたコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-150">The collection whose elements are copied to the new <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a3fb2-151">指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-151">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-152">容量、<xref:System.Collections.Generic.Queue%601>は要素の数を<xref:System.Collections.Generic.Queue%601>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-152">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="a3fb2-153">要素が追加されるにつれて、<xref:System.Collections.Generic.Queue%601>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-153">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="a3fb2-154">コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.Generic.Queue%601>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-154">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="a3fb2-155">呼び出すことによって、容量を削減できる<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-155">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="a3fb2-156">要素の上にコピー、<xref:System.Collections.Generic.Queue%601>によって読み取られる同じ順序で、<xref:System.Collections.Generic.IEnumerator%601>のコレクション。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-156">The elements are copied onto the <xref:System.Collections.Generic.Queue%601> in the same order they are read by the <xref:System.Collections.Generic.IEnumerator%601> of the collection.</span></span>  
  
 <span data-ttu-id="a3fb2-157">このコンス トラクターは、O (`n`) 操作では、ここで`n`内の要素の数は、`collection`です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-157">This constructor is an O(`n`) operation, where `n` is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3fb2-158">次のコード例は、このコンス トラクターとその他のいくつかの方法を示しています、<xref:System.Collections.Generic.Queue%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-158">The following code example demonstrates this constructor and several other methods of the <xref:System.Collections.Generic.Queue%601> generic class.</span></span> <span data-ttu-id="a3fb2-159">このコード例は、既定の容量を持つ文字列のキューを作成し、使用して、<xref:System.Collections.Generic.Queue%601.Enqueue%2A>メソッドの 5 つの文字列をキューに登録します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-159">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="a3fb2-160">キューの要素が表示され、キューの状態は変化しませんが列挙されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-160">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="a3fb2-161"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>最初の文字列をデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-161">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="a3fb2-162"><xref:System.Collections.Generic.Queue%601.Peek%2A>メソッドを使用して、キュー内の次の項目を確認し、<xref:System.Collections.Generic.Queue%601.Dequeue%2A>がデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-162">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="a3fb2-163"><xref:System.Collections.Generic.Queue%601.ToArray%2A>配列を作成し、キューの要素をコピーするメソッドを使用し、配列に渡されます、<xref:System.Collections.Generic.Queue%601.%23ctor%2A>を受け取るコンス トラクター<xref:System.Collections.Generic.IEnumerable%601>キューのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-163">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="a3fb2-164">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-164">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="a3fb2-165">配列 2 回、キューのサイズが作成、および<xref:System.Collections.Generic.Queue%601.CopyTo%2A>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-165">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="a3fb2-166"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>コンス トラクターは、先頭の 3 つの null 要素を含むキューの 2 番目のコピーを作成するもう一度使用されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-166">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="a3fb2-167"><xref:System.Collections.Generic.Queue%601.Contains%2A>メソッドを使用して、文字列「4」がである、キューの最初のコピーの後を表示、<xref:System.Collections.Generic.Queue%601.Clear%2A>メソッドは、コピー、クリア、<xref:System.Collections.Generic.Queue%601.Count%2A>プロパティはキューが空であることを示します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-167">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a3fb2-168">
            <paramref name="collection" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-168">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Queue&lt;'T&gt; : int -&gt; System.Collections.Generic.Queue&lt;'T&gt;" Usage="new System.Collections.Generic.Queue&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="a3fb2-169">
            <see cref="T:System.Collections.Generic.Queue`1" /> が格納できる要素数の初期値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-169">The initial number of elements that the <see cref="T:System.Collections.Generic.Queue`1" /> can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a3fb2-170">空で、指定した初期量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-170">Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1" /> class that is empty and has the specified initial capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-171">容量、<xref:System.Collections.Generic.Queue%601>は要素の数を<xref:System.Collections.Generic.Queue%601>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-171">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold.</span></span> <span data-ttu-id="a3fb2-172">要素が追加されるにつれて、<xref:System.Collections.Generic.Queue%601>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-172">As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="a3fb2-173">コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.Generic.Queue%601>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-173">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="a3fb2-174">呼び出すことによって、容量を削減できる<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-174">The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="a3fb2-175">このコンス トラクターは、O (`n`) 操作では、ここで`n`は`capacity`します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-175">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a3fb2-176">
            <paramref name="capacity" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-176">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="queue.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a3fb2-177">
            <see cref="T:System.Collections.Generic.Queue`1" /> からすべてのオブジェクトを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-177">Removes all objects from the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-178"><xref:System.Collections.Generic.Queue%601.Count%2A> 0 に設定し、コレクションの要素から他のオブジェクトへの参照も解放します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-178"><xref:System.Collections.Generic.Queue%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="a3fb2-179">容量はそのまま残ります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-179">The capacity remains unchanged.</span></span> <span data-ttu-id="a3fb2-180">容量をリセットする、 <xref:System.Collections.Generic.Queue%601>、呼び出す<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-180">To reset the capacity of the <xref:System.Collections.Generic.Queue%601>, call <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.</span></span> <span data-ttu-id="a3fb2-181">空のトリミング<xref:System.Collections.Generic.Queue%601>のキャパシティを設定、<xref:System.Collections.Generic.Queue%601>を既定の容量。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-181">Trimming an empty <xref:System.Collections.Generic.Queue%601> sets the capacity of the <xref:System.Collections.Generic.Queue%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="a3fb2-182">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.Queue%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-182">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3fb2-183">次のコード例をいくつかの方法を示しています、<xref:System.Collections.Generic.Queue%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Queue%601.Clear%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-183">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="a3fb2-184">このコード例は、既定の容量を持つ文字列のキューを作成し、使用して、<xref:System.Collections.Generic.Queue%601.Enqueue%2A>メソッドの 5 つの文字列をキューに登録します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-184">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="a3fb2-185">キューの要素が表示され、キューの状態は変化しませんが列挙されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-185">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="a3fb2-186"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>最初の文字列をデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-186">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="a3fb2-187"><xref:System.Collections.Generic.Queue%601.Peek%2A>メソッドを使用して、キュー内の次の項目を確認し、<xref:System.Collections.Generic.Queue%601.Dequeue%2A>がデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-187">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="a3fb2-188"><xref:System.Collections.Generic.Queue%601.ToArray%2A>配列を作成し、キューの要素をコピーするメソッドを使用し、配列に渡されます、<xref:System.Collections.Generic.Queue%601.%23ctor%2A>を受け取るコンス トラクター<xref:System.Collections.Generic.IEnumerable%601>キューのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-188">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="a3fb2-189">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-189">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="a3fb2-190">配列 2 回、キューのサイズが作成、および<xref:System.Collections.Generic.Queue%601.CopyTo%2A>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-190">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="a3fb2-191"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>コンス トラクターは、先頭の 3 つの null 要素を含むキューの 2 番目のコピーを作成するもう一度使用されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-191">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="a3fb2-192"><xref:System.Collections.Generic.Queue%601.Contains%2A>メソッドを使用して、文字列「4」がである、キューの最初のコピーの後を表示、<xref:System.Collections.Generic.Queue%601.Clear%2A>メソッドは、コピー、クリア、<xref:System.Collections.Generic.Queue%601.Count%2A>プロパティはキューが空であることを示します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-192">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.TrimExcess" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="queue.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="a3fb2-193">
            <see cref="T:System.Collections.Generic.Queue`1" /> 内で検索するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-193">The object to locate in the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
          <span data-ttu-id="a3fb2-194">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-194">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a3fb2-195">ある要素が <see cref="T:System.Collections.Generic.Queue`1" /> 内に存在するかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-195">Determines whether an element is in the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a3fb2-196">
            <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.Queue`1" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-196">
              <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Queue`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-197">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`キュー内の値の型。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-197">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the queue.</span></span>  
  
 <span data-ttu-id="a3fb2-198">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.Queue%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-198">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3fb2-199">次のコード例をいくつかの方法を示しています、<xref:System.Collections.Generic.Queue%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Queue%601.Contains%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-199">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="a3fb2-200">このコード例は、既定の容量を持つ文字列のキューを作成し、使用して、<xref:System.Collections.Generic.Queue%601.Enqueue%2A>メソッドの 5 つの文字列をキューに登録します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-200">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="a3fb2-201">キューの要素が表示され、キューの状態は変化しませんが列挙されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-201">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="a3fb2-202"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>最初の文字列をデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-202">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="a3fb2-203"><xref:System.Collections.Generic.Queue%601.Peek%2A>メソッドを使用して、キュー内の次の項目を確認し、<xref:System.Collections.Generic.Queue%601.Dequeue%2A>がデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-203">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="a3fb2-204"><xref:System.Collections.Generic.Queue%601.ToArray%2A>配列を作成し、キューの要素をコピーするメソッドを使用し、配列に渡されます、<xref:System.Collections.Generic.Queue%601.%23ctor%2A>を受け取るコンス トラクター<xref:System.Collections.Generic.IEnumerable%601>キューのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-204">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="a3fb2-205">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-205">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="a3fb2-206">配列 2 回、キューのサイズが作成、および<xref:System.Collections.Generic.Queue%601.CopyTo%2A>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-206">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="a3fb2-207"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>コンス トラクターは、先頭の 3 つの null 要素を含むキューの 2 番目のコピーを作成するもう一度使用されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-207">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="a3fb2-208"><xref:System.Collections.Generic.Queue%601.Contains%2A>メソッドを使用して、文字列「4」がである、キューの最初のコピーの後を表示、<xref:System.Collections.Generic.Queue%601.Clear%2A>メソッドは、コピー、クリア、<xref:System.Collections.Generic.Queue%601.Count%2A>プロパティはキューが空であることを示します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-208">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="queue.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="a3fb2-209">
            <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.Queue`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-209">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
          <span data-ttu-id="a3fb2-210">
            <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-210">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="a3fb2-211">コピーの開始位置となる、<c>array</c> の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-211">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a3fb2-212">
            <see cref="T:System.Collections.Generic.Queue`1" /> の要素を既存の 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-212">Copies the <see cref="T:System.Collections.Generic.Queue`1" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-213">要素のコピー先は、<xref:System.Array>を列挙子が反復処理する順序と同じ順序で、<xref:System.Collections.Generic.Queue%601>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-213">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="a3fb2-214">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.Queue%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-214">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a3fb2-215">
            <paramref name="array" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-215">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a3fb2-216">
            <paramref name="arrayIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-216">
              <paramref name="arrayIndex" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a3fb2-217">コピー元の <see cref="T:System.Collections.Generic.Queue`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-217">The number of elements in the source <see cref="T:System.Collections.Generic.Queue`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Queue&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a3fb2-218">
            <see cref="T:System.Collections.Generic.Queue`1" /> に格納されている要素の数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-218">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a3fb2-219">
            <see cref="T:System.Collections.Generic.Queue`1" /> に格納されている要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-219">The number of elements contained in the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-220">容量、<xref:System.Collections.Generic.Queue%601>は要素の数を<xref:System.Collections.Generic.Queue%601>格納できます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-220">The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can store.</span></span> <span data-ttu-id="a3fb2-221"><xref:System.Collections.Generic.Queue%601.Count%2A> 実際には、要素の数、<xref:System.Collections.Generic.Queue%601>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-221"><xref:System.Collections.Generic.Queue%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="a3fb2-222">容量は、常により大きいまたは等しい<xref:System.Collections.Generic.Queue%601.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-222">The capacity is always greater than or equal to <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span> <span data-ttu-id="a3fb2-223">場合<xref:System.Collections.Generic.Queue%601.Count%2A>要素を追加するときに、容量を超える場合、前の要素をコピーし、新しい要素を追加する前に、内部の配列を自動的に再割り当てによって、容量が増加します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-223">If <xref:System.Collections.Generic.Queue%601.Count%2A> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="a3fb2-224">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-224">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3fb2-225">次のコード例は、いくつかのプロパティとメソッドを示しています、<xref:System.Collections.Generic.Queue%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Queue%601.Count%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-225">The following code example demonstrates several properties and methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Count%2A> property.</span></span>  
  
 <span data-ttu-id="a3fb2-226">このコード例は、既定の容量を持つ文字列のキューを作成し、使用して、<xref:System.Collections.Generic.Queue%601.Enqueue%2A>メソッドの 5 つの文字列をキューに登録します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-226">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="a3fb2-227">キューの要素が表示され、キューの状態は変化しませんが列挙されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-227">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="a3fb2-228"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>最初の文字列をデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-228">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="a3fb2-229"><xref:System.Collections.Generic.Queue%601.Peek%2A>メソッドを使用して、キュー内の次の項目を確認し、<xref:System.Collections.Generic.Queue%601.Dequeue%2A>がデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-229">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="a3fb2-230"><xref:System.Collections.Generic.Queue%601.ToArray%2A>配列を作成し、キューの要素をコピーするメソッドを使用し、配列に渡されます、<xref:System.Collections.Generic.Queue%601.%23ctor%2A>を受け取るコンス トラクター<xref:System.Collections.Generic.IEnumerable%601>キューのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-230">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="a3fb2-231">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-231">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="a3fb2-232">配列 2 回、キューのサイズが作成、および<xref:System.Collections.Generic.Queue%601.CopyTo%2A>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-232">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="a3fb2-233"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>コンス トラクターは、先頭の 3 つの null 要素を含むキューの 2 番目のコピーを作成するもう一度使用されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-233">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="a3fb2-234"><xref:System.Collections.Generic.Queue%601.Contains%2A>メソッドを使用して、文字列「4」がである、キューの最初のコピーの後を表示、<xref:System.Collections.Generic.Queue%601.Clear%2A>メソッドは、コピー、クリア、<xref:System.Collections.Generic.Queue%601.Count%2A>プロパティはキューが空であることを示します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-234">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequeue">
      <MemberSignature Language="C#" Value="public T Dequeue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Dequeue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Dequeue" />
      <MemberSignature Language="VB.NET" Value="Public Function Dequeue () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Dequeue();" />
      <MemberSignature Language="F#" Value="member this.Dequeue : unit -&gt; 'T" Usage="queue.Dequeue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a3fb2-235">
            <see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクトを削除し、返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-235">Removes and returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a3fb2-236">
            <see cref="T:System.Collections.Generic.Queue`1" /> の先頭から削除されたオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-236">The object that is removed from the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-237">このメソッドは <xref:System.Collections.Generic.Queue%601.Peek%2A> メソッドに類似していますが、<xref:System.Collections.Generic.Queue%601.Peek%2A> は <xref:System.Collections.Generic.Queue%601> を変更しません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-237">This method is similar to the <xref:System.Collections.Generic.Queue%601.Peek%2A> method, but <xref:System.Collections.Generic.Queue%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="a3fb2-238">場合型`T`、参照型では、`null`に追加することができます、<xref:System.Collections.Generic.Queue%601>値として。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-238">If type `T` is a reference type, `null` can be added to the <xref:System.Collections.Generic.Queue%601> as a value.</span></span>  
  
 <span data-ttu-id="a3fb2-239">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-239">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3fb2-240">次のコード例をいくつかの方法を示しています、<xref:System.Collections.Generic.Queue%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Queue%601.Dequeue%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-240">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method.</span></span>  
  
 <span data-ttu-id="a3fb2-241">このコード例は、既定の容量を持つ文字列のキューを作成し、使用して、<xref:System.Collections.Generic.Queue%601.Enqueue%2A>メソッドの 5 つの文字列をキューに登録します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-241">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="a3fb2-242">キューの要素が表示され、キューの状態は変化しませんが列挙されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-242">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="a3fb2-243"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>最初の文字列をデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-243">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="a3fb2-244"><xref:System.Collections.Generic.Queue%601.Peek%2A>メソッドを使用して、キュー内の次の項目を確認し、<xref:System.Collections.Generic.Queue%601.Dequeue%2A>がデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-244">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="a3fb2-245"><xref:System.Collections.Generic.Queue%601.ToArray%2A>配列を作成し、キューの要素をコピーするメソッドを使用し、配列に渡されます、<xref:System.Collections.Generic.Queue%601.%23ctor%2A>を受け取るコンス トラクター<xref:System.Collections.Generic.IEnumerable%601>キューのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-245">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="a3fb2-246">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-246">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="a3fb2-247">配列 2 回、キューのサイズが作成、および<xref:System.Collections.Generic.Queue%601.CopyTo%2A>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-247">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="a3fb2-248"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>コンス トラクターは、先頭の 3 つの null 要素を含むキューの 2 番目のコピーを作成するもう一度使用されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-248">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="a3fb2-249"><xref:System.Collections.Generic.Queue%601.Contains%2A>メソッドを使用して、文字列「4」がである、キューの最初のコピーの後を表示、<xref:System.Collections.Generic.Queue%601.Clear%2A>メソッドは、コピー、クリア、<xref:System.Collections.Generic.Queue%601.Count%2A>プロパティはキューが空であることを示します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-249">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a3fb2-250">
            <see cref="T:System.Collections.Generic.Queue`1" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-250">The <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Peek" />
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public void Enqueue (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enqueue(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enqueue (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enqueue(T item);" />
      <MemberSignature Language="F#" Value="member this.Enqueue : 'T -&gt; unit" Usage="queue.Enqueue item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="a3fb2-251">
            <see cref="T:System.Collections.Generic.Queue`1" /> に追加するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-251">The object to add to the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
          <span data-ttu-id="a3fb2-252">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-252">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a3fb2-253">
            <see cref="T:System.Collections.Generic.Queue`1" /> の末尾にオブジェクトを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-253">Adds an object to the end of the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-254">場合<xref:System.Collections.Generic.Queue%601.Count%2A>容量の容量と既に同じ、<xref:System.Collections.Generic.Queue%601>内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-254">If <xref:System.Collections.Generic.Queue%601.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Generic.Queue%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="a3fb2-255">場合<xref:System.Collections.Generic.Queue%601.Count%2A>が小さい内部配列の容量よりも、このメソッドは、o (1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-255">If <xref:System.Collections.Generic.Queue%601.Count%2A> is less than the capacity of the internal array, this method is an O(1) operation.</span></span> <span data-ttu-id="a3fb2-256">内部の配列は、新しい要素のために再割り当てする必要がある、このメソッドが O (`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.Queue%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-256">If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3fb2-257">次のコード例をいくつかの方法を示しています、<xref:System.Collections.Generic.Queue%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Queue%601.Enqueue%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-257">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method.</span></span>  
  
 <span data-ttu-id="a3fb2-258">このコード例は、既定の容量を持つ文字列のキューを作成し、使用して、<xref:System.Collections.Generic.Queue%601.Enqueue%2A>メソッドの 5 つの文字列をキューに登録します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-258">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="a3fb2-259">キューの要素が表示され、キューの状態は変化しませんが列挙されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-259">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="a3fb2-260"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>最初の文字列をデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-260">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="a3fb2-261"><xref:System.Collections.Generic.Queue%601.Peek%2A>メソッドを使用して、キュー内の次の項目を確認し、<xref:System.Collections.Generic.Queue%601.Dequeue%2A>がデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-261">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="a3fb2-262"><xref:System.Collections.Generic.Queue%601.ToArray%2A>配列を作成し、キューの要素をコピーするメソッドを使用し、配列に渡されます、<xref:System.Collections.Generic.Queue%601.%23ctor%2A>を受け取るコンス トラクター<xref:System.Collections.Generic.IEnumerable%601>キューのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-262">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="a3fb2-263">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-263">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="a3fb2-264">配列 2 回、キューのサイズが作成、および<xref:System.Collections.Generic.Queue%601.CopyTo%2A>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-264">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="a3fb2-265"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>コンス トラクターは、先頭の 3 つの null 要素を含むキューの 2 番目のコピーを作成するもう一度使用されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-265">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="a3fb2-266"><xref:System.Collections.Generic.Queue%601.Contains%2A>メソッドを使用して、文字列「4」がである、キューの最初のコピーの後を表示、<xref:System.Collections.Generic.Queue%601.Clear%2A>メソッドは、コピー、クリア、<xref:System.Collections.Generic.Queue%601.Count%2A>プロパティはキューが空であることを示します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-266">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.Dequeue" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Peek" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Queue&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Queue`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Queue(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Queue&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Queue&lt;'T&gt;.Enumerator" Usage="queue.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Queue&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a3fb2-267">
            <see cref="T:System.Collections.Generic.Queue`1" /> を反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-267">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a3fb2-268">
            <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> の <see cref="T:System.Collections.Generic.Queue`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-268">An <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-269">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual Basic で)、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-269">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="a3fb2-270">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-270">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="a3fb2-271">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-271">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="a3fb2-272">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-272">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="a3fb2-273">この位置では、<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-273">At this position, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="a3fb2-274">そのため、<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-274">Therefore, you must call <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="a3fb2-275"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> は、<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-275"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="a3fb2-276"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> は、<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-276"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="a3fb2-277">場合<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-277">If <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="a3fb2-278">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-278">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="a3fb2-279">最後の呼び出し場合<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-279">If the last call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="a3fb2-280"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-280">You cannot set <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="a3fb2-281">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-281">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a3fb2-282">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>または<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-282">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="a3fb2-283">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-283">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a3fb2-284">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-284">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="a3fb2-285">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-285">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="a3fb2-286">既定の実装のコレクションの<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-286">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="a3fb2-287">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-287">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3fb2-288">次のコード例では、ことを示します、<xref:System.Collections.Generic.Queue%601>ジェネリック クラスは列挙可能です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-288">The following code example demonstrates that the <xref:System.Collections.Generic.Queue%601> generic class is enumerable.</span></span> <span data-ttu-id="a3fb2-289">`foreach`ステートメント (`For Each` Visual basic で`for each`C++ で)、キューを列挙するために使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-289">The `foreach` statement (`For Each` in Visual Basic, `for each` in C++) is used to enumerate the queue.</span></span>  
  
 <span data-ttu-id="a3fb2-290">このコード例は、既定の容量を持つ文字列のキューを作成し、使用して、<xref:System.Collections.Generic.Queue%601.Enqueue%2A>メソッドの 5 つの文字列をキューに登録します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-290">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="a3fb2-291">キューの要素が表示され、キューの状態は変化しませんが列挙されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-291">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="a3fb2-292"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>最初の文字列をデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-292">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="a3fb2-293"><xref:System.Collections.Generic.Queue%601.Peek%2A>メソッドを使用して、キュー内の次の項目を確認し、<xref:System.Collections.Generic.Queue%601.Dequeue%2A>がデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-293">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="a3fb2-294"><xref:System.Collections.Generic.Queue%601.ToArray%2A>配列を作成し、キューの要素をコピーするメソッドを使用し、配列に渡されます、<xref:System.Collections.Generic.Queue%601.%23ctor%2A>を受け取るコンス トラクター<xref:System.Collections.Generic.IEnumerable%601>キューのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-294">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="a3fb2-295">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-295">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="a3fb2-296">配列 2 回、キューのサイズが作成、および<xref:System.Collections.Generic.Queue%601.CopyTo%2A>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-296">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="a3fb2-297"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>コンス トラクターは、先頭の 3 つの null 要素を含むキューの 2 番目のコピーを作成するもう一度使用されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-297">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="a3fb2-298"><xref:System.Collections.Generic.Queue%601.Contains%2A>メソッドを使用して、文字列「4」がである、キューの最初のコピーの後を表示、<xref:System.Collections.Generic.Queue%601.Clear%2A>メソッドは、コピー、クリア、<xref:System.Collections.Generic.Queue%601.Count%2A>プロパティはキューが空であることを示します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-298">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Queue`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="queue.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a3fb2-299">
            <see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクトを削除せずに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-299">Returns the object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" /> without removing it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a3fb2-300">
            <see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-300">The object at the beginning of the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-301">このメソッドは <xref:System.Collections.Generic.Queue%601.Dequeue%2A> メソッドに類似していますが、<xref:System.Collections.Generic.Queue%601.Peek%2A> は <xref:System.Collections.Generic.Queue%601> を変更しません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-301">This method is similar to the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method, but <xref:System.Collections.Generic.Queue%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Queue%601>.</span></span>  
  
 <span data-ttu-id="a3fb2-302">場合型`T`、参照型では、`null`に追加することができます、<xref:System.Collections.Generic.Queue%601>値として。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-302">If type `T` is a reference type, `null` can be added to the <xref:System.Collections.Generic.Queue%601> as a value.</span></span>  
  
 <span data-ttu-id="a3fb2-303">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-303">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3fb2-304">次のコード例をいくつかの方法を示しています、<xref:System.Collections.Generic.Queue%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Queue%601.Peek%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-304">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="a3fb2-305">このコード例は、既定の容量を持つ文字列のキューを作成し、使用して、<xref:System.Collections.Generic.Queue%601.Enqueue%2A>メソッドの 5 つの文字列をキューに登録します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-305">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="a3fb2-306">キューの要素が表示され、キューの状態は変化しませんが列挙されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-306">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="a3fb2-307"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>最初の文字列をデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-307">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="a3fb2-308"><xref:System.Collections.Generic.Queue%601.Peek%2A>メソッドを使用して、キュー内の次の項目を確認し、<xref:System.Collections.Generic.Queue%601.Dequeue%2A>がデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-308">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="a3fb2-309"><xref:System.Collections.Generic.Queue%601.ToArray%2A>配列を作成し、キューの要素をコピーするメソッドを使用し、配列に渡されます、<xref:System.Collections.Generic.Queue%601.%23ctor%2A>を受け取るコンス トラクター<xref:System.Collections.Generic.IEnumerable%601>キューのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-309">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="a3fb2-310">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-310">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="a3fb2-311">配列 2 回、キューのサイズが作成、および<xref:System.Collections.Generic.Queue%601.CopyTo%2A>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-311">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="a3fb2-312"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>コンス トラクターは、先頭の 3 つの null 要素を含むキューの 2 番目のコピーを作成するもう一度使用されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-312">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="a3fb2-313"><xref:System.Collections.Generic.Queue%601.Contains%2A>メソッドを使用して、文字列「4」がである、キューの最初のコピーの後を表示、<xref:System.Collections.Generic.Queue%601.Clear%2A>メソッドは、コピー、クリア、<xref:System.Collections.Generic.Queue%601.Count%2A>プロパティはキューが空であることを示します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-313">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a3fb2-314">
            <see cref="T:System.Collections.Generic.Queue`1" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-314">The <see cref="T:System.Collections.Generic.Queue`1" /> is empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enqueue(`0)" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Dequeue" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a3fb2-315">コレクションを反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-315">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a3fb2-316">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-316">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-317">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual Basic で)、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-317">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="a3fb2-318">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-318">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="a3fb2-319">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-319">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="a3fb2-320">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-320">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="a3fb2-321">この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-321">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="a3fb2-322">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-322">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="a3fb2-323"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-323"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="a3fb2-324"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-324"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="a3fb2-325">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-325">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="a3fb2-326">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-326">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="a3fb2-327">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.IEnumerator%601.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-327">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="a3fb2-328"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-328">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="a3fb2-329">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-329">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a3fb2-330">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-330">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="a3fb2-331">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-331">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a3fb2-332">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-332">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="a3fb2-333">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-333">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="a3fb2-334">既定の実装のコレクションの<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-334">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="a3fb2-335">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-335">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.GetEnumerator" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="a3fb2-336">
            <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-336">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="a3fb2-337">
            <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-337">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="a3fb2-338">コピーの開始位置となる、<c>array</c> の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-338">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a3fb2-339">
            <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。コピーは特定の <see cref="T:System.Array" /> のインデックスから開始されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-339">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a3fb2-340">場合、ソースの種類<xref:System.Collections.ICollection>変換先の型に自動的にキャストすることはできません`array`の非ジェネリックの実装<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>スロー<xref:System.InvalidCastException>汎用実装でスローされ、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-340">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="a3fb2-341">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.Queue%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-341">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a3fb2-342">
            <paramref name="array" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-342">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a3fb2-343">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-343">
              <paramref name="index" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a3fb2-344">
            <paramref name="array" /> が多次元です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-344">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="a3fb2-345">または、<paramref name="array" /> に 0 から始まるインデックス番号がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-345">-or-  <paramref name="array" /> does not have zero-based indexing.</span>
          </span>
          <span data-ttu-id="a3fb2-346">または、コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-346">-or-  The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="a3fb2-347">または、コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-347">-or-  The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.Queue&lt;'T&gt;.System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a3fb2-348">
            <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-348">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a3fb2-349">
            <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-349">
              <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="a3fb2-350">
            <see cref="T:System.Collections.Generic.Queue`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-350">In the default implementation of <see cref="T:System.Collections.Generic.Queue`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-351">既定の実装のコレクションの<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-351">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="a3fb2-352">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-352">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="a3fb2-353">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-353">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="a3fb2-354">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-354">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="a3fb2-355"><xref:System.Collections.ICollection.SyncRoot%2A> は、<xref:System.Collections.ICollection> へのアクセスを同期するために使用できるオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-355"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="a3fb2-356">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-356">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="a3fb2-357">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-357">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.Queue&lt;'T&gt;.System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a3fb2-358">
            <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-358">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a3fb2-359">
            <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-359">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="a3fb2-360">
            <see cref="T:System.Collections.Generic.Queue`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-360">In the default implementation of <see cref="T:System.Collections.Generic.Queue`1" />, this property always returns the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-361">既定の実装のコレクションの<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-361">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="a3fb2-362">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-362">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="a3fb2-363">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-363">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="a3fb2-364">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-364">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="a3fb2-365"><xref:System.Collections.ICollection.SyncRoot%2A> は、<xref:System.Collections.ICollection> へのアクセスを同期するために使用できるオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-365"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="a3fb2-366">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-366">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="a3fb2-367">次のコードの使用を示しています、 <xref:System.Collections.ICollection.SyncRoot%2A> c#、C++、および Visual Basic のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-367">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As IColletion = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="a3fb2-368">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-368">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a3fb2-369">コレクションを反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-369">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a3fb2-370">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-370">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-371">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual Basic で)、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-371">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="a3fb2-372">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-372">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="a3fb2-373">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-373">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="a3fb2-374">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-374">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="a3fb2-375"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-375"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="a3fb2-376">この位置では、<xref:System.Collections.IEnumerator.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-376">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="a3fb2-377">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-377">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="a3fb2-378"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-378"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="a3fb2-379"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-379"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="a3fb2-380">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-380">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="a3fb2-381">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-381">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="a3fb2-382">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-382">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="a3fb2-383"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-383">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="a3fb2-384">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-384">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a3fb2-385">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-385">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> 
  
 <span data-ttu-id="a3fb2-386">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-386">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="a3fb2-387">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-387">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="a3fb2-388">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-388">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="a3fb2-389">既定の実装のコレクションの<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-389">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="a3fb2-390">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-390">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="queue.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a3fb2-391">
            <see cref="T:System.Collections.Generic.Queue`1" /> の要素を新しい配列にコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-391">Copies the <see cref="T:System.Collections.Generic.Queue`1" /> elements to a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a3fb2-392">
            <see cref="T:System.Collections.Generic.Queue`1" /> からコピーした要素を格納する新しい配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-392">A new array containing elements copied from the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-393"><xref:System.Collections.Generic.Queue%601>は変更されません。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-393">The <xref:System.Collections.Generic.Queue%601> is not modified.</span></span> <span data-ttu-id="a3fb2-394">先頭から要素の順序と同じ新しい配列の要素の順序は、<xref:System.Collections.Generic.Queue%601>の末尾にします。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-394">The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref:System.Collections.Generic.Queue%601> to its end.</span></span>  
  
 <span data-ttu-id="a3fb2-395">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.Queue%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-395">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a3fb2-396">次のコード例をいくつかの方法を示しています、<xref:System.Collections.Generic.Queue%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Queue%601.ToArray%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-396">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the <xref:System.Collections.Generic.Queue%601.ToArray%2A> method.</span></span>  
  
 <span data-ttu-id="a3fb2-397">このコード例は、既定の容量を持つ文字列のキューを作成し、使用して、<xref:System.Collections.Generic.Queue%601.Enqueue%2A>メソッドの 5 つの文字列をキューに登録します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-397">The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings.</span></span> <span data-ttu-id="a3fb2-398">キューの要素が表示され、キューの状態は変化しませんが列挙されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-398">The elements of the queue are enumerated, which does not change the state of the queue.</span></span> <span data-ttu-id="a3fb2-399"><xref:System.Collections.Generic.Queue%601.Dequeue%2A>最初の文字列をデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-399">The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string.</span></span> <span data-ttu-id="a3fb2-400"><xref:System.Collections.Generic.Queue%601.Peek%2A>メソッドを使用して、キュー内の次の項目を確認し、<xref:System.Collections.Generic.Queue%601.Dequeue%2A>がデキューするメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-400">The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.</span></span>  
  
 <span data-ttu-id="a3fb2-401"><xref:System.Collections.Generic.Queue%601.ToArray%2A>配列を作成し、キューの要素をコピーするメソッドを使用し、配列に渡されます、<xref:System.Collections.Generic.Queue%601.%23ctor%2A>を受け取るコンス トラクター<xref:System.Collections.Generic.IEnumerable%601>キューのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-401">The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue.</span></span> <span data-ttu-id="a3fb2-402">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-402">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="a3fb2-403">配列 2 回、キューのサイズが作成、および<xref:System.Collections.Generic.Queue%601.CopyTo%2A>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-403">An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="a3fb2-404"><xref:System.Collections.Generic.Queue%601.%23ctor%2A>コンス トラクターは、先頭の 3 つの null 要素を含むキューの 2 番目のコピーを作成するもう一度使用されます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-404">The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</span></span>  
  
 <span data-ttu-id="a3fb2-405"><xref:System.Collections.Generic.Queue%601.Contains%2A>メソッドを使用して、文字列「4」がである、キューの最初のコピーの後を表示、<xref:System.Collections.Generic.Queue%601.Clear%2A>メソッドは、コピー、クリア、<xref:System.Collections.Generic.Queue%601.Count%2A>プロパティはキューが空であることを示します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-405">The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string "four" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.</span></span>  
  
 [!code-csharp[Generic.Queue#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Queue/cs/source.cs#1)]
 [!code-vb[Generic.Queue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Queue/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="queue.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a3fb2-406">
            <see cref="T:System.Collections.Generic.Queue`1" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a3fb2-406">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Queue`1" />, if that number is less than 90 percent of current capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a3fb2-407">このメソッドは、コレクションのメモリ オーバーヘッドを最小要素がコレクションに追加されない場合に使用できます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-407">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="a3fb2-408">再割り当てすることや、大規模なコピーのコスト<xref:System.Collections.Generic.Queue%601>考慮する必要が、ただし、ため、<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>メソッドは何もリストが容量の 90% 以上である場合。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-408">The cost of reallocating and copying a large <xref:System.Collections.Generic.Queue%601> can be considerable, however, so the <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="a3fb2-409">これは、比較的小さい向上のための大規模な再割り当てコストをかけず回避できます。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-409">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="a3fb2-410">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.Queue%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-410">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="a3fb2-411">リセットする、<xref:System.Collections.Generic.Queue%601>を初期状態に呼び出し、<xref:System.Collections.Generic.Queue%601.Clear%2A>メソッドを呼び出す前に<xref:System.Collections.Generic.Queue%601.TrimExcess%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-411">To reset a <xref:System.Collections.Generic.Queue%601> to its initial state, call the <xref:System.Collections.Generic.Queue%601.Clear%2A> method before calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="a3fb2-412">空のトリミング<xref:System.Collections.Generic.Queue%601>のキャパシティを設定、<xref:System.Collections.Generic.Queue%601>を既定の容量。</span><span class="sxs-lookup"><span data-stu-id="a3fb2-412">Trimming an empty <xref:System.Collections.Generic.Queue%601> sets the capacity of the <xref:System.Collections.Generic.Queue%601> to the default capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Queue`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Queue`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryDequeue">
      <MemberSignature Language="C#" Value="public bool TryDequeue (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryDequeue([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryDequeue (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryDequeue([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryDequeue :  -&gt; bool" Usage="queue.TryDequeue result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="queue.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>