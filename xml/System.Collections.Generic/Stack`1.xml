<Type Name="Stack&lt;T&gt;" FullName="System.Collections.Generic.Stack&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f93b267f24809f9669fdf1a5e15c2e1916424428" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52244305" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Stack`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_StackDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="034a3-101">スタック内の要素の型を指定します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="034a3-101">Specifies the type of elements in the stack.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="034a3-102">指定した同じ型のインスタンスの、後入れ先出し (LIFO) の可変サイズのコレクションを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="034a3-102">Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-103"><xref:System.Collections.Generic.Stack%601> 配列として実装されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-103"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span>  
  
 <span data-ttu-id="034a3-104">スタックやキューは便利な情報の一時的なストレージが必要な場合つまり、可能性がある場合の値を取得後に要素を破棄します。</span><span class="sxs-lookup"><span data-stu-id="034a3-104">Stacks and queues are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="034a3-105">使用<xref:System.Collections.Generic.Queue%601>かどうかは、コレクションに保存されていることと同じ順序で情報にアクセスする必要があります。</span><span class="sxs-lookup"><span data-stu-id="034a3-105">Use <xref:System.Collections.Generic.Queue%601> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="034a3-106">使用<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>逆の順序で情報にアクセスする必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="034a3-106">Use <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> if you need to access the information in reverse order.</span></span>  
  
 <span data-ttu-id="034a3-107">使用して、<xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType>と<xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType>型の場合、同時に複数のスレッドからコレクションにアクセスする必要があります。</span><span class="sxs-lookup"><span data-stu-id="034a3-107">Use the <xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType> and <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType> types when you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="034a3-108">一般的な用途<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>他のプロシージャの呼び出し中に変数の状態を維持しています。</span><span class="sxs-lookup"><span data-stu-id="034a3-108">A common use for <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> is to preserve variable states during calls to other procedures.</span></span>  
  
 <span data-ttu-id="034a3-109">次の 3 つの主な操作を実行できる、<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>とその要素。</span><span class="sxs-lookup"><span data-stu-id="034a3-109">Three main operations can be performed on a <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> and its elements:</span></span>  
  
-   <span data-ttu-id="034a3-110"><xref:System.Collections.Generic.Stack%601.Push%2A> 上部にある要素を挿入、<xref:System.Collections.Stack>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-110"><xref:System.Collections.Generic.Stack%601.Push%2A> inserts an element at the top of the <xref:System.Collections.Stack>.</span></span>  
  
-   <span data-ttu-id="034a3-111"><xref:System.Collections.Generic.Stack%601.Pop%2A> 先頭から要素を削除、<xref:System.Collections.Generic.Stack%601>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-111"><xref:System.Collections.Generic.Stack%601.Pop%2A> removes an element from the top of the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
-   <span data-ttu-id="034a3-112"><xref:System.Collections.Generic.Stack%601.Peek%2A> 上部にある要素を返します、<xref:System.Collections.Generic.Stack%601>からは削除されませんが、<xref:System.Collections.Generic.Stack%601>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-112"><xref:System.Collections.Generic.Stack%601.Peek%2A> returns an element that is at the top of the <xref:System.Collections.Generic.Stack%601> but does not remove it from the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="034a3-113">容量を<xref:System.Collections.Generic.Stack%601>要素の数が、<xref:System.Collections.Generic.Stack%601>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="034a3-113">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="034a3-114">要素が追加される、<xref:System.Collections.Generic.Stack%601>容量は自動的に増加内部配列を再割り当てすることで必要とします。</span><span class="sxs-lookup"><span data-stu-id="034a3-114">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="034a3-115">呼び出すことによって、容量を削減できる<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-115">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="034a3-116">場合<xref:System.Collections.Generic.Stack%601.Count%2A>がスタックの容量より小さい<xref:System.Collections.Generic.Stack%601.Push%2A>は o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="034a3-116">If <xref:System.Collections.Generic.Stack%601.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Generic.Stack%601.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="034a3-117">容量は、新しい要素を格納するために必要がある場合<xref:System.Collections.Generic.Stack%601.Push%2A>O になります (`n`) 操作、`n`は<xref:System.Collections.Generic.Stack%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-117">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Generic.Stack%601.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span> <span data-ttu-id="034a3-118"><xref:System.Collections.Generic.Stack%601.Pop%2A> o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="034a3-118"><xref:System.Collections.Generic.Stack%601.Pop%2A> is an O(1) operation.</span></span>  
  
 <span data-ttu-id="034a3-119"><xref:System.Collections.Generic.Stack%601> 受け入れる`null`参照の有効な値の型し、重複する要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-119"><xref:System.Collections.Generic.Stack%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="034a3-120">次のコード例をいくつかの方法を示します、<xref:System.Collections.Generic.Stack%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="034a3-120">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span> <span data-ttu-id="034a3-121">コード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <xref:System.Collections.Generic.Stack%601.Push%2A> 5 つの文字列をスタックにプッシュするメソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-121">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="034a3-122">スタックの要素が列挙されますが、スタックの状態は変化しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-122">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="034a3-123"><xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドを使用して、最初の文字列、スタックからポップします。</span><span class="sxs-lookup"><span data-stu-id="034a3-123">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="034a3-124"><xref:System.Collections.Generic.Stack%601.Peek%2A>メソッドを使用して、スタックの次の項目を確認し、<xref:System.Collections.Generic.Stack%601.Pop%2A>ポップしてメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-124">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="034a3-125"><xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッドは、配列を作成して、スタック要素のコピーを使用し、配列に渡されます、<xref:System.Collections.Generic.Stack%601.%23ctor%2A>を受け取るコンス トラクター <xref:System.Collections.Generic.IEnumerable%601>、逆に、要素の順序でスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="034a3-125">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="034a3-126">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-126">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="034a3-127">配列 2 回、スタックのサイズを作成、および<xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッドを使用して、配列の真中で始まる配列の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="034a3-127">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="034a3-128"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>は元に戻すの要素の順序でスタックのコピーを作成するコンス トラクターをもう一度使用されます。 そのため、3 つの null 要素が最後には。</span><span class="sxs-lookup"><span data-stu-id="034a3-128">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="034a3-129"><xref:System.Collections.Generic.Stack%601.Contains%2A> 「4」文字列がその後が、スタックの最初のコピーのことを示すメソッドを使用、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドは、コピーをクリアし、<xref:System.Collections.Generic.Stack%601.Count%2A>プロパティがスタックが空であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="034a3-129">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="034a3-130">パブリック静的 (<see langword="Shared" /> Visual Basic で) この型のメンバーはスレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="034a3-130">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="034a3-131">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="034a3-131">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="034a3-132">A<see cref="T:System.Collections.Generic.Stack`1" />コレクションが変更されない限り、複数のリーダーを同時にサポートできます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="034a3-132">A <see cref="T:System.Collections.Generic.Stack`1" /> can support multiple readers concurrently, as long as the collection is not modified.</span>
      </span>
      <span data-ttu-id="034a3-133">それでも、コレクションの列挙は、本質的には、スレッド セーフなプロシージャでは。</span>
      <span class="sxs-lookup">
        <span data-stu-id="034a3-133">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="034a3-134">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="034a3-134">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span>
      </span>
      <span data-ttu-id="034a3-135">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="034a3-135">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span>
      </span>
    </threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">
      <span data-ttu-id="034a3-136">反復子 (C# および Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="034a3-136">Iterators (C# and Visual Basic)</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="034a3-137">
            <see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-137">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="034a3-138">空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-138">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the default initial capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-139">容量を<xref:System.Collections.Generic.Stack%601>は要素の数を<xref:System.Collections.Generic.Stack%601>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="034a3-139">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="034a3-140">要素が追加される、<xref:System.Collections.Generic.Stack%601>容量は自動的に増加内部配列を再割り当てすることで必要とします。</span><span class="sxs-lookup"><span data-stu-id="034a3-140">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="034a3-141">数の要素を追加するときにサイズ変更操作を実行する必要はありませんの初期量を指定する場合は、コレクションのサイズを推定することができます、<xref:System.Collections.Generic.Stack%601>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-141">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="034a3-142">呼び出すことによって、容量を削減できる<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-142">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="034a3-143">このコンス トラクターは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="034a3-143">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="034a3-144">次のコード例は、このコンス トラクターをいくつかの方法を示して、<xref:System.Collections.Generic.Stack%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="034a3-144">The following code example demonstrates this constructor and several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span>  
  
 <span data-ttu-id="034a3-145">コード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <xref:System.Collections.Generic.Stack%601.Push%2A> 5 つの文字列をスタックにプッシュするメソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-145">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="034a3-146">スタックの要素が列挙されますが、スタックの状態は変化しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-146">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="034a3-147"><xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドを使用して、最初の文字列、スタックからポップします。</span><span class="sxs-lookup"><span data-stu-id="034a3-147">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="034a3-148"><xref:System.Collections.Generic.Stack%601.Peek%2A>メソッドを使用して、スタックの次の項目を確認し、<xref:System.Collections.Generic.Stack%601.Pop%2A>ポップしてメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-148">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="034a3-149"><xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッドは、配列を作成して、スタック要素のコピーを使用し、配列に渡されます、<xref:System.Collections.Generic.Stack%601.%23ctor%2A>を受け取るコンス トラクター <xref:System.Collections.Generic.IEnumerable%601>、逆に、要素の順序でスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="034a3-149">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="034a3-150">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-150">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="034a3-151">配列 2 回、スタックのサイズを作成、および<xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッドを使用して、配列の真中で始まる配列の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="034a3-151">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="034a3-152"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>は元に戻すの要素の順序でスタックのコピーを作成するコンス トラクターをもう一度使用されます。 そのため、3 つの null 要素が最後には。</span><span class="sxs-lookup"><span data-stu-id="034a3-152">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="034a3-153"><xref:System.Collections.Generic.Stack%601.Contains%2A> 「4」文字列がその後が、スタックの最初のコピーのことを示すメソッドを使用、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドは、コピーをクリアし、<xref:System.Collections.Generic.Stack%601.Count%2A>プロパティがスタックが空であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="034a3-153">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="034a3-154">要素のコピー元のコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-154">The collection to copy elements from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="034a3-155">指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-155">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-156">容量を<xref:System.Collections.Generic.Stack%601>は要素の数を<xref:System.Collections.Generic.Stack%601>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="034a3-156">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="034a3-157">要素が追加される、<xref:System.Collections.Generic.Stack%601>容量は自動的に増加内部配列を再割り当てすることで必要とします。</span><span class="sxs-lookup"><span data-stu-id="034a3-157">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="034a3-158">数の要素を追加するときにサイズ変更操作を実行する必要はありませんの初期量を指定する場合は、コレクションのサイズを推定することができます、<xref:System.Collections.Generic.Stack%601>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-158">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="034a3-159">呼び出すことによって、容量を削減できる<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-159">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="034a3-160">要素の上にコピー、<xref:System.Collections.Generic.Stack%601>によって読み取られるときと同じ順序で、<xref:System.Collections.Generic.IEnumerator%601>のコレクション。</span><span class="sxs-lookup"><span data-stu-id="034a3-160">The elements are copied onto the <xref:System.Collections.Generic.Stack%601> in the same order they are read by the <xref:System.Collections.Generic.IEnumerator%601> of the collection.</span></span>  
  
 <span data-ttu-id="034a3-161">このコンス トラクターは、O (`n`) 操作、`n`内の要素の数は、`collection`します。</span><span class="sxs-lookup"><span data-stu-id="034a3-161">This constructor is an O(`n`) operation, where `n` is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="034a3-162">次のコード例は、このコンス トラクターをいくつかの方法を示して、<xref:System.Collections.Generic.Stack%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="034a3-162">The following code example demonstrates this constructor and several methods of the <xref:System.Collections.Generic.Stack%601> generic class.</span></span>  
  
 <span data-ttu-id="034a3-163">コード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <xref:System.Collections.Generic.Stack%601.Push%2A> 5 つの文字列をスタックにプッシュするメソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-163">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="034a3-164">スタックの要素が列挙されますが、スタックの状態は変化しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-164">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="034a3-165"><xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドを使用して、最初の文字列、スタックからポップします。</span><span class="sxs-lookup"><span data-stu-id="034a3-165">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="034a3-166"><xref:System.Collections.Generic.Stack%601.Peek%2A>メソッドを使用して、スタックの次の項目を確認し、<xref:System.Collections.Generic.Stack%601.Pop%2A>ポップしてメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-166">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="034a3-167"><xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッドは、配列を作成して、スタック要素のコピーを使用し、配列に渡されます、<xref:System.Collections.Generic.Stack%601.%23ctor%2A>を受け取るコンス トラクター <xref:System.Collections.Generic.IEnumerable%601>、逆に、要素の順序でスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="034a3-167">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="034a3-168">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-168">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="034a3-169">配列 2 回、スタックのサイズを作成、および<xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッドを使用して、配列の真中で始まる配列の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="034a3-169">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="034a3-170"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>は元に戻すの要素の順序でスタックのコピーを作成するコンス トラクターをもう一度使用されます。 そのため、3 つの null 要素が最後には。</span><span class="sxs-lookup"><span data-stu-id="034a3-170">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="034a3-171"><xref:System.Collections.Generic.Stack%601.Contains%2A> 「4」文字列がその後が、スタックの最初のコピーのことを示すメソッドを使用、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドは、コピーをクリアし、<xref:System.Collections.Generic.Stack%601.Count%2A>プロパティがスタックが空であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="034a3-171">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="034a3-172">
            <paramref name="collection" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-172">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : int -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="034a3-173">
            <see cref="T:System.Collections.Generic.Stack`1" /> が格納できる要素数の初期値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-173">The initial number of elements that the <see cref="T:System.Collections.Generic.Stack`1" /> can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="034a3-174">空で、指定した初期量または既定の初期量のうち大きい方の初期量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-174">Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-175">容量を<xref:System.Collections.Generic.Stack%601>は要素の数を<xref:System.Collections.Generic.Stack%601>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="034a3-175">The capacity of a <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can hold.</span></span> <span data-ttu-id="034a3-176">要素が追加される、<xref:System.Collections.Generic.Stack%601>容量は自動的に増加内部配列を再割り当てすることで必要とします。</span><span class="sxs-lookup"><span data-stu-id="034a3-176">As elements are added to a <xref:System.Collections.Generic.Stack%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="034a3-177">数の要素を追加するときにサイズ変更操作を実行する必要はありませんの初期量を指定する場合は、コレクションのサイズを推定することができます、<xref:System.Collections.Generic.Stack%601>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-177">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="034a3-178">呼び出すことによって、容量を削減できる<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-178">The capacity can be decreased by calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span>  
  
 <span data-ttu-id="034a3-179">このコンス トラクターは、O (`n`) 操作、`n`は`capacity`します。</span><span class="sxs-lookup"><span data-stu-id="034a3-179">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="034a3-180">
            <paramref name="capacity" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-180">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="stack.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="034a3-181">
            <see cref="T:System.Collections.Generic.Stack`1" /> からすべてのオブジェクトを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-181">Removes all objects from the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-182"><xref:System.Collections.Generic.Stack%601.Count%2A> 0 に設定し、コレクションの要素からその他のオブジェクトへの参照も解放します。</span><span class="sxs-lookup"><span data-stu-id="034a3-182"><xref:System.Collections.Generic.Stack%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="034a3-183">容量は変更されません。</span><span class="sxs-lookup"><span data-stu-id="034a3-183">The capacity remains unchanged.</span></span> <span data-ttu-id="034a3-184">容量をリセットする、 <xref:System.Collections.Generic.Stack%601>、呼び出す<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-184">To reset the capacity of the <xref:System.Collections.Generic.Stack%601>, call <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>.</span></span> <span data-ttu-id="034a3-185">空のトリミング<xref:System.Collections.Generic.Stack%601>の容量設定、<xref:System.Collections.Generic.Stack%601>を既定の容量。</span><span class="sxs-lookup"><span data-stu-id="034a3-185">Trimming an empty <xref:System.Collections.Generic.Stack%601> sets the capacity of the <xref:System.Collections.Generic.Stack%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="034a3-186">このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.Generic.Stack%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-186">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="034a3-187">次のコード例をいくつかの方法を示します、<xref:System.Collections.Generic.Stack%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-187">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="034a3-188">コード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <xref:System.Collections.Generic.Stack%601.Push%2A> 5 つの文字列をスタックにプッシュするメソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-188">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="034a3-189">スタックの要素が列挙されますが、スタックの状態は変化しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-189">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="034a3-190"><xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドを使用して、最初の文字列、スタックからポップします。</span><span class="sxs-lookup"><span data-stu-id="034a3-190">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="034a3-191"><xref:System.Collections.Generic.Stack%601.Peek%2A>メソッドを使用して、スタックの次の項目を確認し、<xref:System.Collections.Generic.Stack%601.Pop%2A>ポップしてメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-191">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="034a3-192"><xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッドは、配列を作成して、スタック要素のコピーを使用し、配列に渡されます、<xref:System.Collections.Generic.Stack%601.%23ctor%2A>を受け取るコンス トラクター <xref:System.Collections.Generic.IEnumerable%601>、逆に、要素の順序でスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="034a3-192">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="034a3-193">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-193">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="034a3-194">配列 2 回、スタックのサイズを作成、および<xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッドを使用して、配列の真中で始まる配列の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="034a3-194">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="034a3-195"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>は元に戻すの要素の順序でスタックのコピーを作成するコンス トラクターをもう一度使用されます。 そのため、3 つの null 要素が最後には。</span><span class="sxs-lookup"><span data-stu-id="034a3-195">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="034a3-196"><xref:System.Collections.Generic.Stack%601.Contains%2A> 「4」文字列がその後が、スタックの最初のコピーのことを示すメソッドを使用、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドは、コピーをクリアし、<xref:System.Collections.Generic.Stack%601.Count%2A>プロパティがスタックが空であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="034a3-196">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="stack.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="034a3-197">
            <see cref="T:System.Collections.Generic.Stack`1" /> 内で検索するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-197">The object to locate in the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
          <span data-ttu-id="034a3-198">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-198">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="034a3-199">ある要素が <see cref="T:System.Collections.Generic.Stack`1" /> 内に存在するかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-199">Determines whether an element is in the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="034a3-200">
            <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.Stack`1" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-200">
              <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Stack`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-201">このメソッドは、既定の等値比較子を使用して等しいかどうかを判断します<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>の`T`リスト内の値の型。</span><span class="sxs-lookup"><span data-stu-id="034a3-201">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="034a3-202">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (`n`) 操作、`n`は<xref:System.Collections.Generic.Stack%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-202">This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="034a3-203">次のコード例をいくつかの方法を示します、<xref:System.Collections.Generic.Stack%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Stack%601.Contains%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-203">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="034a3-204">コード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <xref:System.Collections.Generic.Stack%601.Push%2A> 5 つの文字列をスタックにプッシュするメソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-204">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="034a3-205">スタックの要素が列挙されますが、スタックの状態は変化しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-205">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="034a3-206"><xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドを使用して、最初の文字列、スタックからポップします。</span><span class="sxs-lookup"><span data-stu-id="034a3-206">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="034a3-207"><xref:System.Collections.Generic.Stack%601.Peek%2A>メソッドを使用して、スタックの次の項目を確認し、<xref:System.Collections.Generic.Stack%601.Pop%2A>ポップしてメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-207">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="034a3-208"><xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッドは、配列を作成して、スタック要素のコピーを使用し、配列に渡されます、<xref:System.Collections.Generic.Stack%601.%23ctor%2A>を受け取るコンス トラクター <xref:System.Collections.Generic.IEnumerable%601>、逆に、要素の順序でスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="034a3-208">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="034a3-209">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-209">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="034a3-210">配列 2 回、スタックのサイズを作成、および<xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッドを使用して、配列の真中で始まる配列の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="034a3-210">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="034a3-211"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>は元に戻すの要素の順序でスタックのコピーを作成するコンス トラクターをもう一度使用されます。 そのため、3 つの null 要素が最後には。</span><span class="sxs-lookup"><span data-stu-id="034a3-211">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="034a3-212"><xref:System.Collections.Generic.Stack%601.Contains%2A> 「4」文字列がその後が、スタックの最初のコピーのことを示すメソッドを使用、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドは、コピーをクリアし、<xref:System.Collections.Generic.Stack%601.Count%2A>プロパティがスタックが空であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="034a3-212">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">
          <span data-ttu-id="034a3-213">カルチャを認識しないコレクションの操作の実行</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-213">Performing Culture-Insensitive String Operations in Collections</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="stack.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="034a3-214">
            <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.Stack`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-214">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
          <span data-ttu-id="034a3-215">
            <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-215">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="034a3-216">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-216">The zero-based index in <paramref name="array" /> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="034a3-217">既存の 1 次元の <see cref="T:System.Collections.Generic.Stack`1" /> に <see cref="T:System.Array" /> をコピーします。コピー操作は、配列の指定したインデックスから始まります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-217">Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-218">要素は、後入れ先出し (LIFO) の順序、順序、連続するへの呼び出しによって返された要素と同様に、配列にコピーされます<xref:System.Collections.Generic.Stack%601.Pop%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-218">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Generic.Stack%601.Pop%2A>.</span></span>  
  
 <span data-ttu-id="034a3-219">このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.Generic.Stack%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-219">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="034a3-220">次のコード例をいくつかの方法を示します、<xref:System.Collections.Generic.Stack%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-220">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method.</span></span>  
  
 <span data-ttu-id="034a3-221">コード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <xref:System.Collections.Generic.Stack%601.Push%2A> 5 つの文字列をスタックにプッシュするメソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-221">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="034a3-222">スタックの要素が列挙されますが、スタックの状態は変化しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-222">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="034a3-223"><xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドを使用して、最初の文字列、スタックからポップします。</span><span class="sxs-lookup"><span data-stu-id="034a3-223">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="034a3-224"><xref:System.Collections.Generic.Stack%601.Peek%2A>メソッドを使用して、スタックの次の項目を確認し、<xref:System.Collections.Generic.Stack%601.Pop%2A>ポップしてメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-224">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="034a3-225"><xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッドは、配列を作成して、スタック要素のコピーを使用し、配列に渡されます、<xref:System.Collections.Generic.Stack%601.%23ctor%2A>を受け取るコンス トラクター <xref:System.Collections.Generic.IEnumerable%601>、逆に、要素の順序でスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="034a3-225">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="034a3-226">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-226">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="034a3-227">配列 2 回、スタックのサイズを作成、および<xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッドを使用して、配列の真中で始まる配列の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="034a3-227">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="034a3-228"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>は元に戻すの要素の順序でスタックのコピーを作成するコンス トラクターをもう一度使用されます。 そのため、3 つの null 要素が最後には。</span><span class="sxs-lookup"><span data-stu-id="034a3-228">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="034a3-229"><xref:System.Collections.Generic.Stack%601.Contains%2A> 「4」文字列がその後が、スタックの最初のコピーのことを示すメソッドを使用、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドは、コピーをクリアし、<xref:System.Collections.Generic.Stack%601.Count%2A>プロパティがスタックが空であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="034a3-229">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="034a3-230">
            <paramref name="array" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-230">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="034a3-231">
            <paramref name="arrayIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-231">
              <paramref name="arrayIndex" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="034a3-232">コピー元の <see cref="T:System.Collections.Generic.Stack`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-232">The number of elements in the source <see cref="T:System.Collections.Generic.Stack`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.ToArray" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Stack&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="034a3-233">
            <see cref="T:System.Collections.Generic.Stack`1" /> に格納されている要素の数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-233">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="034a3-234">
            <see cref="T:System.Collections.Generic.Stack`1" /> に格納されている要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-234">The number of elements contained in the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-235">容量、<xref:System.Collections.Generic.Stack%601>は要素の数を<xref:System.Collections.Generic.Stack%601>格納できます。</span><span class="sxs-lookup"><span data-stu-id="034a3-235">The capacity of the <xref:System.Collections.Generic.Stack%601> is the number of elements that the <xref:System.Collections.Generic.Stack%601> can store.</span></span> <span data-ttu-id="034a3-236"><xref:System.Collections.Generic.Stack%601.Count%2A> 実際には要素の数が、<xref:System.Collections.Generic.Stack%601>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-236"><xref:System.Collections.Generic.Stack%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="034a3-237">以上の値を容量は常に<xref:System.Collections.Generic.Stack%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-237">The capacity is always greater than or equal to <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span> <span data-ttu-id="034a3-238">場合<xref:System.Collections.Generic.Stack%601.Count%2A>要素を追加するときに容量を超える、変更前の要素をコピーして、新しい要素を追加する前に、内部配列を自動的に再割り当てによって、容量が増やされます。</span><span class="sxs-lookup"><span data-stu-id="034a3-238">If <xref:System.Collections.Generic.Stack%601.Count%2A> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="034a3-239">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="034a3-239">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="034a3-240">次のコード例は、いくつかのプロパティとメソッドを示して、<xref:System.Collections.Generic.Stack%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Stack%601.Count%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="034a3-240">The following code example demonstrates several properties and methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Count%2A> property.</span></span>  
  
 <span data-ttu-id="034a3-241">コード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <xref:System.Collections.Generic.Stack%601.Push%2A> 5 つの文字列をスタックにプッシュするメソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-241">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="034a3-242">スタックの要素が列挙されますが、スタックの状態は変化しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-242">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="034a3-243"><xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドを使用して、最初の文字列、スタックからポップします。</span><span class="sxs-lookup"><span data-stu-id="034a3-243">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="034a3-244"><xref:System.Collections.Generic.Stack%601.Peek%2A>メソッドを使用して、スタックの次の項目を確認し、<xref:System.Collections.Generic.Stack%601.Pop%2A>ポップしてメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-244">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="034a3-245"><xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッドは、配列を作成して、スタック要素のコピーを使用し、配列に渡されます、<xref:System.Collections.Generic.Stack%601.%23ctor%2A>を受け取るコンス トラクター <xref:System.Collections.Generic.IEnumerable%601>、逆に、要素の順序でスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="034a3-245">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="034a3-246">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-246">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="034a3-247">配列 2 回、スタックのサイズを作成、および<xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッドを使用して、配列の真中で始まる配列の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="034a3-247">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="034a3-248"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>は元に戻すの要素の順序でスタックのコピーを作成するコンス トラクターをもう一度使用されます。 そのため、3 つの null 要素が最後には。</span><span class="sxs-lookup"><span data-stu-id="034a3-248">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="034a3-249"><xref:System.Collections.Generic.Stack%601.Contains%2A> 「4」文字列がその後が、スタックの最初のコピーのことを示すメソッドを使用、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドは、コピーをクリアし、<xref:System.Collections.Generic.Stack%601.Count%2A>プロパティがスタックが空であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="034a3-249">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Stack&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Stack`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Stack(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Stack&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Stack&lt;'T&gt;.Enumerator" Usage="stack.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Stack&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="034a3-250">
            <see cref="T:System.Collections.Generic.Stack`1" /> の列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-250">Returns an enumerator for the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="034a3-251">
            <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> の <see cref="T:System.Collections.Generic.Stack`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-251">An <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-252">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual basic) 列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="034a3-252">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="034a3-253">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="034a3-253">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="034a3-254">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="034a3-254">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="034a3-255">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="034a3-255">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="034a3-256">この位置では、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="034a3-256">At this position, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="034a3-257">そのため、<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="034a3-257">Therefore, you must call <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="034a3-258"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> は、<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="034a3-258"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="034a3-259"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> は、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="034a3-259"><xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="034a3-260">場合<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>列挙子、コレクションの末尾がコレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="034a3-260">If <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="034a3-261">この位置では、後続の呼び出しで列挙子の場合<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="034a3-261">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="034a3-262">最後の呼び出し場合<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="034a3-262">If the last call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="034a3-263"><xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="034a3-263">You cannot set <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="034a3-264">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="034a3-264">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="034a3-265">無効になり、次の呼び出しは変更を追加するなど、コレクション変更、または要素を削除するには、列挙子が不可能<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>または<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>スロー、<xref:System.InvalidOperationException>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-265">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="034a3-266">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="034a3-266">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="034a3-267">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="034a3-267">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="034a3-268">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="034a3-268">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="034a3-269">コレクションの既定の実装<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="034a3-269">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="034a3-270">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="034a3-270">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="034a3-271">次のコード例を示します<xref:System.Collections.Generic.Stack%601>ジェネリック クラスは列挙可能です。</span><span class="sxs-lookup"><span data-stu-id="034a3-271">The following code example demonstrates that the <xref:System.Collections.Generic.Stack%601> generic class is enumerable.</span></span> <span data-ttu-id="034a3-272">`foreach`ステートメント (`For Each` Visual basic で`for each`C++ で) キューを列挙するために使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-272">The `foreach` statement (`For Each` in Visual Basic, `for each` in C++) is used to enumerate the queue.</span></span>  
  
 <span data-ttu-id="034a3-273">コード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <xref:System.Collections.Generic.Stack%601.Push%2A> 5 つの文字列をスタックにプッシュするメソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-273">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="034a3-274">スタックの要素が列挙されますが、スタックの状態は変化しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-274">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="034a3-275"><xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドを使用して、最初の文字列、スタックからポップします。</span><span class="sxs-lookup"><span data-stu-id="034a3-275">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="034a3-276"><xref:System.Collections.Generic.Stack%601.Peek%2A>メソッドを使用して、スタックの次の項目を確認し、<xref:System.Collections.Generic.Stack%601.Pop%2A>ポップしてメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-276">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="034a3-277"><xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッドは、配列を作成して、スタック要素のコピーを使用し、配列に渡されます、<xref:System.Collections.Generic.Stack%601.%23ctor%2A>を受け取るコンス トラクター <xref:System.Collections.Generic.IEnumerable%601>、逆に、要素の順序でスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="034a3-277">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="034a3-278">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-278">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="034a3-279">配列 2 回、スタックのサイズを作成、および<xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッドを使用して、配列の真中で始まる配列の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="034a3-279">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="034a3-280"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>は元に戻すの要素の順序でスタックのコピーを作成するコンス トラクターをもう一度使用されます。 そのため、3 つの null 要素が最後には。</span><span class="sxs-lookup"><span data-stu-id="034a3-280">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="034a3-281"><xref:System.Collections.Generic.Stack%601.Contains%2A> 「4」文字列がその後が、スタックの最初のコピーのことを示すメソッドを使用、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドは、コピーをクリアし、<xref:System.Collections.Generic.Stack%601.Count%2A>プロパティがスタックが空であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="034a3-281">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Stack`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="stack.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="034a3-282">
            <see cref="T:System.Collections.Generic.Stack`1" /> の先頭にあるオブジェクトを削除せずに返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-282">Returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" /> without removing it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="034a3-283">
            <see cref="T:System.Collections.Generic.Stack`1" /> の一番上にあるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-283">The object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-284">このメソッドは <xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドに類似していますが、<xref:System.Collections.Generic.Stack%601.Peek%2A> は <xref:System.Collections.Generic.Stack%601> を変更しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-284">This method is similar to the <xref:System.Collections.Generic.Stack%601.Pop%2A> method, but <xref:System.Collections.Generic.Stack%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="034a3-285">場合型`T`、参照型では、`null`にプッシュされることができます、<xref:System.Collections.Generic.Stack%601>必要な場合のプレース ホルダーとして。</span><span class="sxs-lookup"><span data-stu-id="034a3-285">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span>  
  
 <span data-ttu-id="034a3-286">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="034a3-286">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="034a3-287">次のコード例をいくつかの方法を示します、<xref:System.Collections.Generic.Stack%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Stack%601.Peek%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-287">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Peek%2A> method.</span></span>  
  
 <span data-ttu-id="034a3-288">コード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <xref:System.Collections.Generic.Stack%601.Push%2A> 5 つの文字列をスタックにプッシュするメソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-288">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="034a3-289">スタックの要素が列挙されますが、スタックの状態は変化しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-289">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="034a3-290"><xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドを使用して、最初の文字列、スタックからポップします。</span><span class="sxs-lookup"><span data-stu-id="034a3-290">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="034a3-291"><xref:System.Collections.Generic.Stack%601.Peek%2A>メソッドを使用して、スタックの次の項目を確認し、<xref:System.Collections.Generic.Stack%601.Pop%2A>ポップしてメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-291">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="034a3-292"><xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッドは、配列を作成して、スタック要素のコピーを使用し、配列に渡されます、<xref:System.Collections.Generic.Stack%601.%23ctor%2A>を受け取るコンス トラクター <xref:System.Collections.Generic.IEnumerable%601>、逆に、要素の順序でスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="034a3-292">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="034a3-293">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-293">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="034a3-294">配列 2 回、スタックのサイズを作成、および<xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッドを使用して、配列の真中で始まる配列の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="034a3-294">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="034a3-295"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>は元に戻すの要素の順序でスタックのコピーを作成するコンス トラクターをもう一度使用されます。 そのため、3 つの null 要素が最後には。</span><span class="sxs-lookup"><span data-stu-id="034a3-295">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="034a3-296"><xref:System.Collections.Generic.Stack%601.Contains%2A> 「4」文字列がその後が、スタックの最初のコピーのことを示すメソッドを使用、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドは、コピーをクリアし、<xref:System.Collections.Generic.Stack%601.Count%2A>プロパティがスタックが空であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="034a3-296">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="034a3-297">
            <see cref="T:System.Collections.Generic.Stack`1" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-297">The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public T Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Pop();" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; 'T" Usage="stack.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="034a3-298">
            <see cref="T:System.Collections.Generic.Stack`1" /> の先頭にあるオブジェクトを削除し、返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-298">Removes and returns the object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="034a3-299">
            <see cref="T:System.Collections.Generic.Stack`1" /> の一番上から削除されたオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-299">The object removed from the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-300">このメソッドは <xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドに類似していますが、<xref:System.Collections.Generic.Stack%601.Peek%2A> は <xref:System.Collections.Generic.Stack%601> を変更しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-300">This method is similar to the <xref:System.Collections.Generic.Stack%601.Peek%2A> method, but <xref:System.Collections.Generic.Stack%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Stack%601>.</span></span>  
  
 <span data-ttu-id="034a3-301">場合型`T`、参照型では、`null`にプッシュされることができます、<xref:System.Collections.Generic.Stack%601>必要な場合のプレース ホルダーとして。</span><span class="sxs-lookup"><span data-stu-id="034a3-301">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span>  
  
 <span data-ttu-id="034a3-302"><xref:System.Collections.Generic.Stack%601> 配列として実装されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-302"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span> <span data-ttu-id="034a3-303">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="034a3-303">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="034a3-304">次のコード例をいくつかの方法を示します、<xref:System.Collections.Generic.Stack%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Stack%601.Pop%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-304">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Pop%2A> method.</span></span>  
  
 <span data-ttu-id="034a3-305">コード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <xref:System.Collections.Generic.Stack%601.Push%2A> 5 つの文字列をスタックにプッシュするメソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-305">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="034a3-306">スタックの要素が列挙されますが、スタックの状態は変化しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-306">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="034a3-307"><xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドを使用して、最初の文字列、スタックからポップします。</span><span class="sxs-lookup"><span data-stu-id="034a3-307">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="034a3-308"><xref:System.Collections.Generic.Stack%601.Peek%2A>メソッドを使用して、スタックの次の項目を確認し、<xref:System.Collections.Generic.Stack%601.Pop%2A>ポップしてメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-308">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="034a3-309"><xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッドは、配列を作成して、スタック要素のコピーを使用し、配列に渡されます、<xref:System.Collections.Generic.Stack%601.%23ctor%2A>を受け取るコンス トラクター <xref:System.Collections.Generic.IEnumerable%601>、逆に、要素の順序でスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="034a3-309">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="034a3-310">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-310">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="034a3-311">配列 2 回、スタックのサイズを作成、および<xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッドを使用して、配列の真中で始まる配列の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="034a3-311">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="034a3-312"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>は元に戻すの要素の順序でスタックのコピーを作成するコンス トラクターをもう一度使用されます。 そのため、3 つの null 要素が最後には。</span><span class="sxs-lookup"><span data-stu-id="034a3-312">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="034a3-313"><xref:System.Collections.Generic.Stack%601.Contains%2A> 「4」文字列がその後が、スタックの最初のコピーのことを示すメソッドを使用、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドは、コピーをクリアし、<xref:System.Collections.Generic.Stack%601.Count%2A>プロパティがスタックが空であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="034a3-313">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="034a3-314">
            <see cref="T:System.Collections.Generic.Stack`1" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-314">The <see cref="T:System.Collections.Generic.Stack`1" /> is empty.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push(T item);" />
      <MemberSignature Language="F#" Value="member this.Push : 'T -&gt; unit" Usage="stack.Push item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="034a3-315">
            <see cref="T:System.Collections.Generic.Stack`1" /> にプッシュするオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-315">The object to push onto the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
          <span data-ttu-id="034a3-316">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-316">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="034a3-317">
            <see cref="T:System.Collections.Generic.Stack`1" /> の先頭にオブジェクトを挿入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-317">Inserts an object at the top of the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-318"><xref:System.Collections.Generic.Stack%601> 配列として実装されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-318"><xref:System.Collections.Generic.Stack%601> is implemented as an array.</span></span>  
  
 <span data-ttu-id="034a3-319">場合<xref:System.Collections.Generic.Stack%601.Count%2A>既に、容量の容量に等しい、<xref:System.Collections.Generic.Stack%601>は内部の配列を自動的に再割り当てによって向上し、新しい要素を追加する前に、既存の要素が新しい配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="034a3-319">If <xref:System.Collections.Generic.Stack%601.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Generic.Stack%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="034a3-320">場合型`T`、参照型では、`null`にプッシュされることができます、<xref:System.Collections.Generic.Stack%601>必要な場合のプレース ホルダーとして。</span><span class="sxs-lookup"><span data-stu-id="034a3-320">If type `T` is a reference type, `null` can be pushed onto the <xref:System.Collections.Generic.Stack%601> as a placeholder, if needed.</span></span> <span data-ttu-id="034a3-321">スタックのスロットを占有し、任意のオブジェクトと同様に扱われます。</span><span class="sxs-lookup"><span data-stu-id="034a3-321">It occupies a slot in the stack and is treated like any object.</span></span>  
  
 <span data-ttu-id="034a3-322">場合<xref:System.Collections.Generic.Stack%601.Count%2A>がスタックの容量より小さい<xref:System.Collections.Generic.Stack%601.Push%2A>は o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="034a3-322">If <xref:System.Collections.Generic.Stack%601.Count%2A> is less than the capacity of the stack, <xref:System.Collections.Generic.Stack%601.Push%2A> is an O(1) operation.</span></span> <span data-ttu-id="034a3-323">容量は、新しい要素を格納するために必要がある場合<xref:System.Collections.Generic.Stack%601.Push%2A>O になります (`n`) 操作、`n`は<xref:System.Collections.Generic.Stack%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-323">If the capacity needs to be increased to accommodate the new element, <xref:System.Collections.Generic.Stack%601.Push%2A> becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="034a3-324">次のコード例をいくつかの方法を示します、<xref:System.Collections.Generic.Stack%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Stack%601.Push%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-324">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.Push%2A> method.</span></span>  
  
 <span data-ttu-id="034a3-325">コード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <xref:System.Collections.Generic.Stack%601.Push%2A> 5 つの文字列をスタックにプッシュするメソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-325">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="034a3-326">スタックの要素が列挙されますが、スタックの状態は変化しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-326">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="034a3-327"><xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドを使用して、最初の文字列、スタックからポップします。</span><span class="sxs-lookup"><span data-stu-id="034a3-327">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="034a3-328"><xref:System.Collections.Generic.Stack%601.Peek%2A>メソッドを使用して、スタックの次の項目を確認し、<xref:System.Collections.Generic.Stack%601.Pop%2A>ポップしてメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-328">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="034a3-329"><xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッドは、配列を作成して、スタック要素のコピーを使用し、配列に渡されます、<xref:System.Collections.Generic.Stack%601.%23ctor%2A>を受け取るコンス トラクター <xref:System.Collections.Generic.IEnumerable%601>、逆に、要素の順序でスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="034a3-329">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="034a3-330">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-330">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="034a3-331">配列 2 回、スタックのサイズを作成、および<xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッドを使用して、配列の真中で始まる配列の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="034a3-331">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="034a3-332"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>は元に戻すの要素の順序でスタックのコピーを作成するコンス トラクターをもう一度使用されます。 そのため、3 つの null 要素が最後には。</span><span class="sxs-lookup"><span data-stu-id="034a3-332">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="034a3-333"><xref:System.Collections.Generic.Stack%601.Contains%2A> 「4」文字列がその後が、スタックの最初のコピーのことを示すメソッドを使用、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドは、コピーをクリアし、<xref:System.Collections.Generic.Stack%601.Count%2A>プロパティがスタックが空であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="034a3-333">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="034a3-334">コレクションを反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-334">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="034a3-335">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-335">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-336">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual basic) 列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="034a3-336">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="034a3-337">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="034a3-337">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="034a3-338">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="034a3-338">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="034a3-339">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="034a3-339">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="034a3-340">この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="034a3-340">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="034a3-341">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="034a3-341">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="034a3-342"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="034a3-342"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="034a3-343"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="034a3-343"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="034a3-344">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子、コレクションの末尾がコレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="034a3-344">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="034a3-345">この位置では、後続の呼び出しで列挙子の場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="034a3-345">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="034a3-346">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.IEnumerator%601.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="034a3-346">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="034a3-347"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="034a3-347">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="034a3-348">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="034a3-348">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="034a3-349">無効になり、次の呼び出しは変更を追加するなど、コレクション変更、または要素を削除するには、列挙子が不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-349">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="034a3-350">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="034a3-350">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="034a3-351">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="034a3-351">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="034a3-352">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="034a3-352">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="034a3-353">コレクションの既定の実装<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="034a3-353">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="034a3-354">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="034a3-354">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="034a3-355">
            <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-355">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="034a3-356">
            <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-356">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="034a3-357">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-357">The zero-based index in <paramref name="array" /> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="034a3-358">
            <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-358">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="034a3-359">場合、ソースの種類<xref:System.Collections.ICollection>変換先の型に自動的にキャストすることはできません`array`の非ジェネリック実装<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>スロー<xref:System.InvalidCastException>ジェネリック実装スローする一方、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-359">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="034a3-360">このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.Generic.Stack%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-360">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="034a3-361">
            <paramref name="array" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-361">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="034a3-362">
            <paramref name="arrayIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-362">
              <paramref name="arrayIndex" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="034a3-363">
            <paramref name="array" /> が多次元です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-363">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="034a3-364">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-364">-or-</span>
          </span>
          <span data-ttu-id="034a3-365">
            <paramref name="array" /> には、0 から始まるインデックス番号がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-365">
              <paramref name="array" /> does not have zero-based indexing.</span>
          </span>
          <span data-ttu-id="034a3-366">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-366">-or-</span>
          </span>
          <span data-ttu-id="034a3-367">コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-367">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="034a3-368">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-368">-or-</span>
          </span>
          <span data-ttu-id="034a3-369">コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-369">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="034a3-370">
            <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-370">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="034a3-371">
            <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-371">
              <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="034a3-372">
            <see cref="T:System.Collections.Generic.Stack`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-372">In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-373">コレクションの既定の実装<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="034a3-373">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="034a3-374">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="034a3-374">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="034a3-375">列挙体が書き込みアクセスで競合発生するまれなケース、列挙中にコレクションをロックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="034a3-375">In the rare case where enumerations contend with write accesses, you must lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="034a3-376">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="034a3-376">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="034a3-377"><xref:System.Collections.ICollection.SyncRoot%2A> アクセスを同期するために使用できるオブジェクトを返します、<xref:System.Collections.ICollection>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-377"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="034a3-378">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</span><span class="sxs-lookup"><span data-stu-id="034a3-378">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="034a3-379">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="034a3-379">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="034a3-380">
            <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-380">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="034a3-381">
            <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-381">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="034a3-382">
            <see cref="T:System.Collections.Generic.Stack`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-382">In the default implementation of <see cref="T:System.Collections.Generic.Stack`1" />, this property always returns the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-383">コレクションの既定の実装<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="034a3-383">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="034a3-384">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="034a3-384">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="034a3-385">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="034a3-385">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="034a3-386">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="034a3-386">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="034a3-387"><xref:System.Collections.ICollection.SyncRoot%2A> アクセスを同期するために使用できるオブジェクトを返します、<xref:System.Collections.ICollection>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-387"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="034a3-388">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</span><span class="sxs-lookup"><span data-stu-id="034a3-388">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="034a3-389">次のコードは、使用、 <xref:System.Collections.ICollection.SyncRoot%2A> c#、C++、および Visual Basic のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="034a3-389">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="034a3-390">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="034a3-390">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="034a3-391">コレクションを反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-391">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="034a3-392">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-392">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-393">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual basic) 列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="034a3-393">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="034a3-394">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="034a3-394">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="034a3-395">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="034a3-395">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="034a3-396">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="034a3-396">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="034a3-397"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-397"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="034a3-398">この位置では、<xref:System.Collections.IEnumerator.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="034a3-398">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="034a3-399">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="034a3-399">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="034a3-400"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="034a3-400"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="034a3-401"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="034a3-401"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="034a3-402">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子、コレクションの末尾がコレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="034a3-402">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="034a3-403">この位置では、後続の呼び出しで列挙子の場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="034a3-403">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="034a3-404">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="034a3-404">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="034a3-405"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="034a3-405">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="034a3-406">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="034a3-406">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="034a3-407">無効になり、次の呼び出しは変更を追加するなど、コレクション変更、または要素を削除するには、列挙子が不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-407">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="034a3-408">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="034a3-408">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="034a3-409">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="034a3-409">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="034a3-410">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="034a3-410">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="034a3-411">コレクションの既定の実装<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="034a3-411">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="034a3-412">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="034a3-412">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="stack.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="034a3-413">
            <see cref="T:System.Collections.Generic.Stack`1" /> を新しい配列にコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-413">Copies the <see cref="T:System.Collections.Generic.Stack`1" /> to a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="034a3-414">
            <see cref="T:System.Collections.Generic.Stack`1" /> の要素のコピーを格納する新しい配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-414">A new array containing copies of the elements of the <see cref="T:System.Collections.Generic.Stack`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-415">要素は、後入れ先出し (LIFO) の順序、順序、連続するへの呼び出しによって返された要素と同様に、配列にコピーされます<xref:System.Collections.Generic.Stack%601.Pop%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-415">The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref:System.Collections.Generic.Stack%601.Pop%2A>.</span></span>  
  
 <span data-ttu-id="034a3-416">このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.Generic.Stack%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-416">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="034a3-417">次のコード例をいくつかの方法を示します、<xref:System.Collections.Generic.Stack%601>ジェネリック クラスなど、<xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-417">The following code example demonstrates several methods of the <xref:System.Collections.Generic.Stack%601> generic class, including the <xref:System.Collections.Generic.Stack%601.ToArray%2A> method.</span></span>  
  
 <span data-ttu-id="034a3-418">コード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <xref:System.Collections.Generic.Stack%601.Push%2A> 5 つの文字列をスタックにプッシュするメソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-418">The code example creates a stack of strings with default capacity and uses the <xref:System.Collections.Generic.Stack%601.Push%2A> method to push five strings onto the stack.</span></span> <span data-ttu-id="034a3-419">スタックの要素が列挙されますが、スタックの状態は変化しません。</span><span class="sxs-lookup"><span data-stu-id="034a3-419">The elements of the stack are enumerated, which does not change the state of the stack.</span></span> <span data-ttu-id="034a3-420"><xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドを使用して、最初の文字列、スタックからポップします。</span><span class="sxs-lookup"><span data-stu-id="034a3-420">The <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop the first string off the stack.</span></span> <span data-ttu-id="034a3-421"><xref:System.Collections.Generic.Stack%601.Peek%2A>メソッドを使用して、スタックの次の項目を確認し、<xref:System.Collections.Generic.Stack%601.Pop%2A>ポップしてメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="034a3-421">The <xref:System.Collections.Generic.Stack%601.Peek%2A> method is used to look at the next item on the stack, and then the <xref:System.Collections.Generic.Stack%601.Pop%2A> method is used to pop it off.</span></span>  
  
 <span data-ttu-id="034a3-422"><xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッドは、配列を作成して、スタック要素のコピーを使用し、配列に渡されます、<xref:System.Collections.Generic.Stack%601.%23ctor%2A>を受け取るコンス トラクター <xref:System.Collections.Generic.IEnumerable%601>、逆に、要素の順序でスタックのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="034a3-422">The <xref:System.Collections.Generic.Stack%601.ToArray%2A> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the stack with the order of the elements reversed.</span></span> <span data-ttu-id="034a3-423">コピーの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="034a3-423">The elements of the copy are displayed.</span></span>  
  
 <span data-ttu-id="034a3-424">配列 2 回、スタックのサイズを作成、および<xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッドを使用して、配列の真中で始まる配列の要素をコピーします。</span><span class="sxs-lookup"><span data-stu-id="034a3-424">An array twice the size of the stack is created, and the <xref:System.Collections.Generic.Stack%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array.</span></span> <span data-ttu-id="034a3-425"><xref:System.Collections.Generic.Stack%601.%23ctor%2A>は元に戻すの要素の順序でスタックのコピーを作成するコンス トラクターをもう一度使用されます。 そのため、3 つの null 要素が最後には。</span><span class="sxs-lookup"><span data-stu-id="034a3-425">The <xref:System.Collections.Generic.Stack%601.%23ctor%2A> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</span></span>  
  
 <span data-ttu-id="034a3-426"><xref:System.Collections.Generic.Stack%601.Contains%2A> 「4」文字列がその後が、スタックの最初のコピーのことを示すメソッドを使用、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドは、コピーをクリアし、<xref:System.Collections.Generic.Stack%601.Count%2A>プロパティがスタックが空であることを示しています。</span><span class="sxs-lookup"><span data-stu-id="034a3-426">The <xref:System.Collections.Generic.Stack%601.Contains%2A> method is used to show that the string "four" is in the first copy of the stack, after which the <xref:System.Collections.Generic.Stack%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Stack%601.Count%2A> property shows that the stack is empty.</span></span>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="stack.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="034a3-427">
            <see cref="T:System.Collections.Generic.Stack`1" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="034a3-427">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.Stack`1" />, if that number is less than 90 percent of current capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="034a3-428">このメソッドは、コレクションのメモリ オーバーヘッドを最小要素がコレクションに追加されない場合に使用できます。</span><span class="sxs-lookup"><span data-stu-id="034a3-428">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="034a3-429">再割り当てすることと、大規模なコピーのコスト<xref:System.Collections.Generic.Stack%601>は適さない、ただし、そのため、<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>一覧は、「容量の 90% を超える場合メソッドは何も行いません。</span><span class="sxs-lookup"><span data-stu-id="034a3-429">The cost of reallocating and copying a large <xref:System.Collections.Generic.Stack%601> can be considerable, however, so the <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="034a3-430">比較的小規模の向上のための大規模な再割り当てコストの発生を回避できます。</span><span class="sxs-lookup"><span data-stu-id="034a3-430">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="034a3-431">このメソッドは O (`n`) 操作、`n`は<xref:System.Collections.Generic.Stack%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="034a3-431">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Stack%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="034a3-432">リセットする、<xref:System.Collections.Generic.Stack%601>を初期状態を呼び出し、<xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドを呼び出す前に<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="034a3-432">To reset a <xref:System.Collections.Generic.Stack%601> to its initial state, call the <xref:System.Collections.Generic.Stack%601.Clear%2A> method before calling <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="034a3-433">空のトリミング<xref:System.Collections.Generic.Stack%601>の容量設定、<xref:System.Collections.Generic.Stack%601>を既定の容量。</span><span class="sxs-lookup"><span data-stu-id="034a3-433">Trimming an empty <xref:System.Collections.Generic.Stack%601> sets the capacity of the <xref:System.Collections.Generic.Stack%601> to the default capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="stack.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop">
      <MemberSignature Language="C#" Value="public bool TryPop (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPop([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPop(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPop (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPop([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPop :  -&gt; bool" Usage="stack.TryPop result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>