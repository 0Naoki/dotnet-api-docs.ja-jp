<Type Name="Stack&lt;T&gt;" FullName="System.Collections.Generic.Stack&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aab26b9c2d23749c4d13cae365541686e6c2ad96" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69334642" /></Metadata><TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Stack`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_StackDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">スタック内の要素の型を指定します。</typeparam>
    <summary>指定した同じ型のインスタンスの、後入れ先出し (LIFO) の可変サイズのコレクションを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601>は配列として実装されます。  
  
 スタックとキューは、情報のために一時的なストレージが必要な場合に便利です。つまり、値を取得した後に要素を破棄することが必要になる場合があります。 コレクション<xref:System.Collections.Generic.Queue%601>に格納されているのと同じ順序で情報にアクセスする必要がある場合は、を使用します。 情報<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>に逆の順序でアクセスする必要がある場合は、を使用します。  
  
 複数の<xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType>スレッド<xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType>から同時にコレクションにアクセスする必要がある場合は、型と型を使用します。  
  
 の<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>一般的な使用方法は、他のプロシージャの呼び出し時に変数の状態を保持することです。  
  
 とその要素に対して、次<xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType>の3つの主要な操作を実行できます。  
  
-   <xref:System.Collections.Generic.Stack%601.Push%2A>の先頭に要素を挿入<xref:System.Collections.Stack>します。  
  
-   <xref:System.Collections.Generic.Stack%601.Pop%2A>の先頭から要素を削除<xref:System.Collections.Generic.Stack%601>します。  
  
-   <xref:System.Collections.Generic.Stack%601.Peek%2A>の先頭<xref:System.Collections.Generic.Stack%601>にある要素を返しますが、 <xref:System.Collections.Generic.Stack%601>からは削除しません。  
  
 <xref:System.Collections.Generic.Stack%601>の容量は、<xref:System.Collections.Generic.Stack%601>が保持できる要素の数です。 要素がに<xref:System.Collections.Generic.Stack%601>追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。 を呼び出す<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>と、容量を減らすことができます。  
  
 が<xref:System.Collections.Generic.Stack%601.Count%2A>スタックの容量より小さい場合、 <xref:System.Collections.Generic.Stack%601.Push%2A>は O (1) 操作になります。 新しい要素を格納するために容量を増やす必要がある<xref:System.Collections.Generic.Stack%601.Push%2A>場合、は O`n`() 操作に`n`なり<xref:System.Collections.Generic.Stack%601.Count%2A>ます。ここで、はです。 <xref:System.Collections.Generic.Stack%601.Pop%2A>は O (1) 操作です。  
  
 <xref:System.Collections.Generic.Stack%601>は`null` 、参照型の有効な値としてを受け入れ、重複する要素を許可します。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Collections.Generic.Stack%601>ジェネリッククラスのいくつかのメソッドを示しています。 このコード例では、既定の容量を持つ文字列のスタック<xref:System.Collections.Generic.Stack%601.Push%2A>を作成し、メソッドを使用して5つの文字列をスタックにプッシュします。 スタックの要素が列挙され、スタックの状態が変更されることはありません。 <xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドは、スタックから最初の文字列をポップするために使用されます。 メソッドは、スタック上の次の項目を確認するために使用され<xref:System.Collections.Generic.Stack%601.Pop%2A> 、その後、メソッドを使用してポップします。 <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 メソッド<xref:System.Collections.Generic.Stack%601.ToArray%2A>は、配列を作成してスタック要素をコピーするために使用されます。次に、 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>によって<xref:System.Collections.Generic.IEnumerable%601>取得されるコンストラクターに配列が渡されます。その後、要素の順序を逆にしてスタックのコピーが作成されます。 コピーの要素が表示されます。  
  
 スタックのサイズの2倍の配列が作成<xref:System.Collections.Generic.Stack%601.CopyTo%2A>され、メソッドを使用して配列の途中から配列の要素がコピーされます。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するために再び使用されます。したがって、3つの null 要素が末尾にあります。  
  
 メソッドは、文字列 "4" がスタックの最初のコピーに含まれていることを示すために使用<xref:System.Collections.Generic.Stack%601.Clear%2A>されます。その後<xref:System.Collections.Generic.Stack%601.Count%2A> 、メソッドはコピーをクリアし、プロパティはスタックが空であることを示します。 <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>パブリック静的 (Visual Basic では<see langword="Shared" />) なこの型のメンバーはスレッド セーフです インスタンス メンバーの場合は、スレッド セーフであるとは限りません。  
  
は<see cref="T:System.Collections.Generic.Stack`1" /> 、コレクションが変更されていない限り、複数のリーダーを同時にサポートできます。  それでも、コレクションを列挙することは、本質的にはスレッドセーフなプロシージャではありません。  列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">反復子 (C# および Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の<xref:System.Collections.Generic.Stack%601>容量は、 <xref:System.Collections.Generic.Stack%601>が保持できる要素の数です。 要素がに<xref:System.Collections.Generic.Stack%601>追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。  
  
 コレクションのサイズを推定できる場合、初期容量を指定すると、 <xref:System.Collections.Generic.Stack%601>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。  
  
 を呼び出す<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>と、容量を減らすことができます。  
  
 このコンストラクターは O (1) 操作です。  
  
   
  
## Examples  
 次のコード例は、このコンストラクターと、 <xref:System.Collections.Generic.Stack%601>ジェネリッククラスのいくつかのメソッドを示しています。  
  
 このコード例では、既定の容量を持つ文字列のスタック<xref:System.Collections.Generic.Stack%601.Push%2A>を作成し、メソッドを使用して5つの文字列をスタックにプッシュします。 スタックの要素が列挙され、スタックの状態が変更されることはありません。 <xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドは、スタックから最初の文字列をポップするために使用されます。 メソッドは、スタック上の次の項目を確認するために使用され<xref:System.Collections.Generic.Stack%601.Pop%2A> 、その後、メソッドを使用してポップします。 <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 メソッド<xref:System.Collections.Generic.Stack%601.ToArray%2A>は、配列を作成してスタック要素をコピーするために使用されます。次に、 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>によって<xref:System.Collections.Generic.IEnumerable%601>取得されるコンストラクターに配列が渡されます。その後、要素の順序を逆にしてスタックのコピーが作成されます。 コピーの要素が表示されます。  
  
 スタックのサイズの2倍の配列が作成<xref:System.Collections.Generic.Stack%601.CopyTo%2A>され、メソッドを使用して配列の途中から配列の要素がコピーされます。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するために再び使用されます。したがって、3つの null 要素が末尾にあります。  
  
 メソッドは、文字列 "4" がスタックの最初のコピーに含まれていることを示すために使用<xref:System.Collections.Generic.Stack%601.Clear%2A>されます。その後<xref:System.Collections.Generic.Stack%601.Count%2A> 、メソッドはコピーをクリアし、プロパティはスタックが空であることを示します。 <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">要素のコピー元のコレクション。</param>
        <summary>指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の<xref:System.Collections.Generic.Stack%601>容量は、 <xref:System.Collections.Generic.Stack%601>が保持できる要素の数です。 要素がに<xref:System.Collections.Generic.Stack%601>追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。  
  
 コレクションのサイズを推定できる場合、初期容量を指定すると、 <xref:System.Collections.Generic.Stack%601>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。  
  
 を呼び出す<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>と、容量を減らすことができます。  
  
 要素は、コレクション<xref:System.Collections.Generic.Stack%601> <xref:System.Collections.Generic.IEnumerator%601>ので読み取られた順序で、にコピーされます。  
  
 このコンストラクターは O (`n`) 操作です。ここ`n`で、は内`collection`の要素の数です。  
  
   
  
## Examples  
 次のコード例は、このコンストラクターと、 <xref:System.Collections.Generic.Stack%601>ジェネリッククラスのいくつかのメソッドを示しています。  
  
 このコード例では、既定の容量を持つ文字列のスタック<xref:System.Collections.Generic.Stack%601.Push%2A>を作成し、メソッドを使用して5つの文字列をスタックにプッシュします。 スタックの要素が列挙され、スタックの状態が変更されることはありません。 <xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドは、スタックから最初の文字列をポップするために使用されます。 メソッドは、スタック上の次の項目を確認するために使用され<xref:System.Collections.Generic.Stack%601.Pop%2A> 、その後、メソッドを使用してポップします。 <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 メソッド<xref:System.Collections.Generic.Stack%601.ToArray%2A>は、配列を作成してスタック要素をコピーするために使用されます。次に、 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>によって<xref:System.Collections.Generic.IEnumerable%601>取得されるコンストラクターに配列が渡されます。その後、要素の順序を逆にしてスタックのコピーが作成されます。 コピーの要素が表示されます。  
  
 スタックのサイズの2倍の配列が作成<xref:System.Collections.Generic.Stack%601.CopyTo%2A>され、メソッドを使用して配列の途中から配列の要素がコピーされます。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するために再び使用されます。したがって、3つの null 要素が末尾にあります。  
  
 メソッドは、文字列 "4" がスタックの最初のコピーに含まれていることを示すために使用<xref:System.Collections.Generic.Stack%601.Clear%2A>されます。その後<xref:System.Collections.Generic.Stack%601.Count%2A> 、メソッドはコピーをクリアし、プロパティはスタックが空であることを示します。 <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> は <see langword="null" />です。</exception>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : int -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><see cref="T:System.Collections.Generic.Stack`1" /> が格納できる要素数の初期値。</param>
        <summary>空で、指定した初期量または既定の初期量のうち大きい方の初期量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の<xref:System.Collections.Generic.Stack%601>容量は、 <xref:System.Collections.Generic.Stack%601>が保持できる要素の数です。 要素がに<xref:System.Collections.Generic.Stack%601>追加されると、内部配列を再割り当てすることで、必要に応じて容量が自動的に増加します。  
  
 コレクションのサイズを推定できる場合、初期容量を指定すると、 <xref:System.Collections.Generic.Stack%601>に要素を追加するときに、さまざまなサイズ変更操作を実行する必要がなくなります。  
  
 を呼び出す<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>と、容量を減らすことができます。  
  
 このコンストラクターは O (`n`) 操作です。ここ`n`で、は`capacity`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> が 0 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="stack.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" /> からすべてのオブジェクトを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601.Count%2A>が0に設定され、コレクションの要素から他のオブジェクトへの参照も解放されます。  
  
 容量は変更されません。 の<xref:System.Collections.Generic.Stack%601>容量をリセットするには、 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>を呼び出します。 空<xref:System.Collections.Generic.Stack%601>のをトリミングすると、 <xref:System.Collections.Generic.Stack%601>の容量が既定の容量に設定されます。  
  
 このメソッドは O(`n`) 操作で、`n`は <xref:System.Collections.Generic.Stack%601.Count%2A> です。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Collections.Generic.Stack%601> <xref:System.Collections.Generic.Stack%601.Clear%2A>メソッドを含む、ジェネリッククラスのいくつかのメソッドを示しています。  
  
 このコード例では、既定の容量を持つ文字列のスタック<xref:System.Collections.Generic.Stack%601.Push%2A>を作成し、メソッドを使用して5つの文字列をスタックにプッシュします。 スタックの要素が列挙され、スタックの状態が変更されることはありません。 <xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドは、スタックから最初の文字列をポップするために使用されます。 メソッドは、スタック上の次の項目を確認するために使用され<xref:System.Collections.Generic.Stack%601.Pop%2A> 、その後、メソッドを使用してポップします。 <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 メソッド<xref:System.Collections.Generic.Stack%601.ToArray%2A>は、配列を作成してスタック要素をコピーするために使用されます。次に、 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>によって<xref:System.Collections.Generic.IEnumerable%601>取得されるコンストラクターに配列が渡されます。その後、要素の順序を逆にしてスタックのコピーが作成されます。 コピーの要素が表示されます。  
  
 スタックのサイズの2倍の配列が作成<xref:System.Collections.Generic.Stack%601.CopyTo%2A>され、メソッドを使用して配列の途中から配列の要素がコピーされます。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するために再び使用されます。したがって、3つの null 要素が末尾にあります。  
  
 メソッドは、文字列 "4" がスタックの最初のコピーに含まれていることを示すために使用<xref:System.Collections.Generic.Stack%601.Clear%2A>されます。その後<xref:System.Collections.Generic.Stack%601.Count%2A> 、メソッドはコピーをクリアし、プロパティはスタックが空であることを示します。 <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="stack.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><see cref="T:System.Collections.Generic.Stack`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>ある要素が <see cref="T:System.Collections.Generic.Stack`1" /> 内に存在するかどうかを判断します。</summary>
        <returns><see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.Stack`1" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、リスト内の値の<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>型`T`の既定の等値比較子を使用して、等しいかどうかを判断します。  
  
 このメソッドは、線形検索を実行します。したがって、このメソッドは O (`n`) 演算です。 `n`ここ<xref:System.Collections.Generic.Stack%601.Count%2A>で、はです。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Collections.Generic.Stack%601> <xref:System.Collections.Generic.Stack%601.Contains%2A>メソッドを含む、ジェネリッククラスのいくつかのメソッドを示しています。  
  
 このコード例では、既定の容量を持つ文字列のスタック<xref:System.Collections.Generic.Stack%601.Push%2A>を作成し、メソッドを使用して5つの文字列をスタックにプッシュします。 スタックの要素が列挙され、スタックの状態が変更されることはありません。 <xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドは、スタックから最初の文字列をポップするために使用されます。 メソッドは、スタック上の次の項目を確認するために使用され<xref:System.Collections.Generic.Stack%601.Pop%2A> 、その後、メソッドを使用してポップします。 <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 メソッド<xref:System.Collections.Generic.Stack%601.ToArray%2A>は、配列を作成してスタック要素をコピーするために使用されます。次に、 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>によって<xref:System.Collections.Generic.IEnumerable%601>取得されるコンストラクターに配列が渡されます。その後、要素の順序を逆にしてスタックのコピーが作成されます。 コピーの要素が表示されます。  
  
 スタックのサイズの2倍の配列が作成<xref:System.Collections.Generic.Stack%601.CopyTo%2A>され、メソッドを使用して配列の途中から配列の要素がコピーされます。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するために再び使用されます。したがって、3つの null 要素が末尾にあります。  
  
 メソッドは、文字列 "4" がスタックの最初のコピーに含まれていることを示すために使用<xref:System.Collections.Generic.Stack%601.Clear%2A>されます。その後<xref:System.Collections.Generic.Stack%601.Count%2A> 、メソッドはコピーをクリアし、プロパティはスタックが空であることを示します。 <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">カルチャを認識しないコレクションの操作の実行</related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="stack.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.Stack`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
        <summary>既存の 1 次元の <see cref="T:System.Collections.Generic.Stack`1" /> に <see cref="T:System.Array" /> をコピーします。コピー操作は、配列の指定したインデックスから始まります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要素は、の連続した呼び出し<xref:System.Collections.Generic.Stack%601.Pop%2A>によって返される要素の順序と同様に、後入れ先出し (LIFO) の順序で配列にコピーされます。  
  
 このメソッドは O(`n`) 操作で、`n`は <xref:System.Collections.Generic.Stack%601.Count%2A> です。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Collections.Generic.Stack%601> <xref:System.Collections.Generic.Stack%601.CopyTo%2A>メソッドを含む、ジェネリッククラスのいくつかのメソッドを示しています。  
  
 このコード例では、既定の容量を持つ文字列のスタック<xref:System.Collections.Generic.Stack%601.Push%2A>を作成し、メソッドを使用して5つの文字列をスタックにプッシュします。 スタックの要素が列挙され、スタックの状態が変更されることはありません。 <xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドは、スタックから最初の文字列をポップするために使用されます。 メソッドは、スタック上の次の項目を確認するために使用され<xref:System.Collections.Generic.Stack%601.Pop%2A> 、その後、メソッドを使用してポップします。 <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 メソッド<xref:System.Collections.Generic.Stack%601.ToArray%2A>は、配列を作成してスタック要素をコピーするために使用されます。次に、 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>によって<xref:System.Collections.Generic.IEnumerable%601>取得されるコンストラクターに配列が渡されます。その後、要素の順序を逆にしてスタックのコピーが作成されます。 コピーの要素が表示されます。  
  
 スタックのサイズの2倍の配列が作成<xref:System.Collections.Generic.Stack%601.CopyTo%2A>され、メソッドを使用して配列の途中から配列の要素がコピーされます。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するために再び使用されます。したがって、3つの null 要素が末尾にあります。  
  
 メソッドは、文字列 "4" がスタックの最初のコピーに含まれていることを示すために使用<xref:System.Collections.Generic.Stack%601.Clear%2A>されます。その後<xref:System.Collections.Generic.Stack%601.Count%2A> 、メソッドはコピーをクリアし、プロパティはスタックが空であることを示します。 <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.Stack`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.ToArray" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Stack&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" /> に格納されている要素の数を取得します。</summary>
        <value><see cref="T:System.Collections.Generic.Stack`1" /> に格納されている要素の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の容量<xref:System.Collections.Generic.Stack%601>は、 <xref:System.Collections.Generic.Stack%601>が格納できる要素の数です。 <xref:System.Collections.Generic.Stack%601.Count%2A>は、 <xref:System.Collections.Generic.Stack%601>実際に内にある要素の数です。  
  
 容量は常に <xref:System.Collections.Generic.Stack%601.Count%2A> 以上です。 要素を追加するときに <xref:System.Collections.Generic.Stack%601.Count%2A> が容量を上回る場合、容量は、古い要素をコピーして新しい要素を追加する前に、内部配列を自動的に再割り当てすることによって増加します。  
  
 このプロパティ値を取得することは、O(1) 操作になります。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Collections.Generic.Stack%601> <xref:System.Collections.Generic.Stack%601.Count%2A>プロパティを含む、ジェネリッククラスのいくつかのプロパティとメソッドを示しています。  
  
 このコード例では、既定の容量を持つ文字列のスタック<xref:System.Collections.Generic.Stack%601.Push%2A>を作成し、メソッドを使用して5つの文字列をスタックにプッシュします。 スタックの要素が列挙され、スタックの状態が変更されることはありません。 <xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドは、スタックから最初の文字列をポップするために使用されます。 メソッドは、スタック上の次の項目を確認するために使用され<xref:System.Collections.Generic.Stack%601.Pop%2A> 、その後、メソッドを使用してポップします。 <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 メソッド<xref:System.Collections.Generic.Stack%601.ToArray%2A>は、配列を作成してスタック要素をコピーするために使用されます。次に、 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>によって<xref:System.Collections.Generic.IEnumerable%601>取得されるコンストラクターに配列が渡されます。その後、要素の順序を逆にしてスタックのコピーが作成されます。 コピーの要素が表示されます。  
  
 スタックのサイズの2倍の配列が作成<xref:System.Collections.Generic.Stack%601.CopyTo%2A>され、メソッドを使用して配列の途中から配列の要素がコピーされます。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するために再び使用されます。したがって、3つの null 要素が末尾にあります。  
  
 メソッドは、文字列 "4" がスタックの最初のコピーに含まれていることを示すために使用<xref:System.Collections.Generic.Stack%601.Clear%2A>されます。その後<xref:System.Collections.Generic.Stack%601.Count%2A> 、メソッドはコピーをクリアし、プロパティはスタックが空であることを示します。 <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Stack&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Stack`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Stack(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Stack&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Stack&lt;'T&gt;.Enumerator" Usage="stack.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Stack&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" /> の列挙子を返します。</summary>
        <returns><see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> の <see cref="T:System.Collections.Generic.Stack`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。 したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。  
  
 列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。 この位置では、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> が未定義です。 そのため、<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。  
  
 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> は、<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> は、<xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> を次の要素に設定します。  
  
 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> は `false` を返します。 列挙子がこの位置にある場合、後続の <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 呼び出しも `false` を返します。 の最後の呼び出し<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>が返さ`false`れた場合、 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>が未定義になります。 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。  
  
 コレクションが変更されない限り、列挙子は有効です。 要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに<xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>無効化され、次のまたは<xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>の呼び出しでがスロー <xref:System.InvalidOperationException>されます。  
  
 列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。 列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 の<xref:System.Collections.Generic?displayProperty=nameWithType>コレクションの既定の実装は同期されていません。  
  
 このメソッドは、O(1) 操作です。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Collections.Generic.Stack%601>ジェネリッククラスが列挙可能であることを示しています。 ステートメント (`For Each` VisualBasic`for each`ではC++) は、キューを列挙するために使用されます。 `foreach`  
  
 このコード例では、既定の容量を持つ文字列のスタック<xref:System.Collections.Generic.Stack%601.Push%2A>を作成し、メソッドを使用して5つの文字列をスタックにプッシュします。 スタックの要素が列挙され、スタックの状態が変更されることはありません。 <xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドは、スタックから最初の文字列をポップするために使用されます。 メソッドは、スタック上の次の項目を確認するために使用され<xref:System.Collections.Generic.Stack%601.Pop%2A> 、その後、メソッドを使用してポップします。 <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 メソッド<xref:System.Collections.Generic.Stack%601.ToArray%2A>は、配列を作成してスタック要素をコピーするために使用されます。次に、 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>によって<xref:System.Collections.Generic.IEnumerable%601>取得されるコンストラクターに配列が渡されます。その後、要素の順序を逆にしてスタックのコピーが作成されます。 コピーの要素が表示されます。  
  
 スタックのサイズの2倍の配列が作成<xref:System.Collections.Generic.Stack%601.CopyTo%2A>され、メソッドを使用して配列の途中から配列の要素がコピーされます。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するために再び使用されます。したがって、3つの null 要素が末尾にあります。  
  
 メソッドは、文字列 "4" がスタックの最初のコピーに含まれていることを示すために使用<xref:System.Collections.Generic.Stack%601.Clear%2A>されます。その後<xref:System.Collections.Generic.Stack%601.Count%2A> 、メソッドはコピーをクリアし、プロパティはスタックが空であることを示します。 <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Stack`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="stack.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" /> の先頭にあるオブジェクトを削除せずに返します。</summary>
        <returns><see cref="T:System.Collections.Generic.Stack`1" /> の一番上にあるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは <xref:System.Collections.Generic.Stack%601.Pop%2A> メソッドに類似していますが、<xref:System.Collections.Generic.Stack%601.Peek%2A> は <xref:System.Collections.Generic.Stack%601> を変更しません。  
  
 型 `T` が参照型の場合、必要に応じて `null` をプレースホルダーとして <xref:System.Collections.Generic.Stack%601> にプッシュすることができます。  
  
 このメソッドは、O(1) 操作です。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Collections.Generic.Stack%601> <xref:System.Collections.Generic.Stack%601.Peek%2A>メソッドを含む、ジェネリッククラスのいくつかのメソッドを示しています。  
  
 このコード例では、既定の容量を持つ文字列のスタック<xref:System.Collections.Generic.Stack%601.Push%2A>を作成し、メソッドを使用して5つの文字列をスタックにプッシュします。 スタックの要素が列挙され、スタックの状態が変更されることはありません。 <xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドは、スタックから最初の文字列をポップするために使用されます。 メソッドは、スタック上の次の項目を確認するために使用され<xref:System.Collections.Generic.Stack%601.Pop%2A> 、その後、メソッドを使用してポップします。 <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 メソッド<xref:System.Collections.Generic.Stack%601.ToArray%2A>は、配列を作成してスタック要素をコピーするために使用されます。次に、 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>によって<xref:System.Collections.Generic.IEnumerable%601>取得されるコンストラクターに配列が渡されます。その後、要素の順序を逆にしてスタックのコピーが作成されます。 コピーの要素が表示されます。  
  
 スタックのサイズの2倍の配列が作成<xref:System.Collections.Generic.Stack%601.CopyTo%2A>され、メソッドを使用して配列の途中から配列の要素がコピーされます。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するために再び使用されます。したがって、3つの null 要素が末尾にあります。  
  
 メソッドは、文字列 "4" がスタックの最初のコピーに含まれていることを示すために使用<xref:System.Collections.Generic.Stack%601.Clear%2A>されます。その後<xref:System.Collections.Generic.Stack%601.Count%2A> 、メソッドはコピーをクリアし、プロパティはスタックが空であることを示します。 <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.Stack`1" /> が空です。</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public T Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Pop();" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; 'T" Usage="stack.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" /> の先頭にあるオブジェクトを削除し、返します。</summary>
        <returns><see cref="T:System.Collections.Generic.Stack`1" /> の一番上から削除されたオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは <xref:System.Collections.Generic.Stack%601.Peek%2A> メソッドに類似していますが、<xref:System.Collections.Generic.Stack%601.Peek%2A> は <xref:System.Collections.Generic.Stack%601> を変更しません。  
  
 型 `T` が参照型の場合、必要に応じて `null` をプレースホルダーとして <xref:System.Collections.Generic.Stack%601> にプッシュすることができます。  
  
 <xref:System.Collections.Generic.Stack%601>は配列として実装されます。 このメソッドは、O(1) 操作です。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Collections.Generic.Stack%601> <xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドを含む、ジェネリッククラスのいくつかのメソッドを示しています。  
  
 このコード例では、既定の容量を持つ文字列のスタック<xref:System.Collections.Generic.Stack%601.Push%2A>を作成し、メソッドを使用して5つの文字列をスタックにプッシュします。 スタックの要素が列挙され、スタックの状態が変更されることはありません。 <xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドは、スタックから最初の文字列をポップするために使用されます。 メソッドは、スタック上の次の項目を確認するために使用され<xref:System.Collections.Generic.Stack%601.Pop%2A> 、その後、メソッドを使用してポップします。 <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 メソッド<xref:System.Collections.Generic.Stack%601.ToArray%2A>は、配列を作成してスタック要素をコピーするために使用されます。次に、 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>によって<xref:System.Collections.Generic.IEnumerable%601>取得されるコンストラクターに配列が渡されます。その後、要素の順序を逆にしてスタックのコピーが作成されます。 コピーの要素が表示されます。  
  
 スタックのサイズの2倍の配列が作成<xref:System.Collections.Generic.Stack%601.CopyTo%2A>され、メソッドを使用して配列の途中から配列の要素がコピーされます。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するために再び使用されます。したがって、3つの null 要素が末尾にあります。  
  
 メソッドは、文字列 "4" がスタックの最初のコピーに含まれていることを示すために使用<xref:System.Collections.Generic.Stack%601.Clear%2A>されます。その後<xref:System.Collections.Generic.Stack%601.Count%2A> 、メソッドはコピーをクリアし、プロパティはスタックが空であることを示します。 <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.Stack`1" /> が空です。</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push(T item);" />
      <MemberSignature Language="F#" Value="member this.Push : 'T -&gt; unit" Usage="stack.Push item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><see cref="T:System.Collections.Generic.Stack`1" /> にプッシュするオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary><see cref="T:System.Collections.Generic.Stack`1" /> の先頭にオブジェクトを挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601>は配列として実装されます。  
  
 が<xref:System.Collections.Generic.Stack%601.Count%2A>既に容量に等しい場合、の容量<xref:System.Collections.Generic.Stack%601>は、内部配列が自動的に再割り当てされ、新しい要素が追加される前に既存の要素が新しい配列にコピーされます。  
  
 型 `T` が参照型の場合、必要に応じて `null` をプレースホルダーとして <xref:System.Collections.Generic.Stack%601> にプッシュすることができます。 スタック内のスロットを占有し、任意のオブジェクトとして扱われます。  
  
 が<xref:System.Collections.Generic.Stack%601.Count%2A>スタックの容量より小さい場合、 <xref:System.Collections.Generic.Stack%601.Push%2A>は O (1) 操作になります。 新しい要素を格納するために容量を増やす必要がある<xref:System.Collections.Generic.Stack%601.Push%2A>場合、は O`n`() 操作に`n`なり<xref:System.Collections.Generic.Stack%601.Count%2A>ます。ここで、はです。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Collections.Generic.Stack%601> <xref:System.Collections.Generic.Stack%601.Push%2A>メソッドを含む、ジェネリッククラスのいくつかのメソッドを示しています。  
  
 このコード例では、既定の容量を持つ文字列のスタック<xref:System.Collections.Generic.Stack%601.Push%2A>を作成し、メソッドを使用して5つの文字列をスタックにプッシュします。 スタックの要素が列挙され、スタックの状態が変更されることはありません。 <xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドは、スタックから最初の文字列をポップするために使用されます。 メソッドは、スタック上の次の項目を確認するために使用され<xref:System.Collections.Generic.Stack%601.Pop%2A> 、その後、メソッドを使用してポップします。 <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 メソッド<xref:System.Collections.Generic.Stack%601.ToArray%2A>は、配列を作成してスタック要素をコピーするために使用されます。次に、 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>によって<xref:System.Collections.Generic.IEnumerable%601>取得されるコンストラクターに配列が渡されます。その後、要素の順序を逆にしてスタックのコピーが作成されます。 コピーの要素が表示されます。  
  
 スタックのサイズの2倍の配列が作成<xref:System.Collections.Generic.Stack%601.CopyTo%2A>され、メソッドを使用して配列の途中から配列の要素がコピーされます。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するために再び使用されます。したがって、3つの null 要素が末尾にあります。  
  
 メソッドは、文字列 "4" がスタックの最初のコピーに含まれていることを示すために使用<xref:System.Collections.Generic.Stack%601.Clear%2A>されます。その後<xref:System.Collections.Generic.Stack%601.Count%2A> 、メソッドはコピーをクリアし、プロパティはスタックが空であることを示します。 <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理する列挙子を返します。</summary>
        <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。 したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。  
  
 列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。 この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> が未定義です。 そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。 <xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。  
  
 <xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。 列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。 の最後の呼び出し<xref:System.Collections.IEnumerator.MoveNext%2A>が返さ`false`れた場合、 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>が未定義になります。 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。  
  
 コレクションが変更されない限り、列挙子は有効です。 要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに<xref:System.Collections.IEnumerator.MoveNext%2A>無効化され、次のまたは<xref:System.Collections.IEnumerator.Reset%2A>の呼び出しでがスロー <xref:System.InvalidOperationException>されます。  
  
 列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。 列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 の<xref:System.Collections.Generic?displayProperty=nameWithType>コレクションの既定の実装は同期されていません。  
  
 このメソッドは、O(1) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
        <summary><see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  ソース<xref:System.Collections.ICollection>の型を変換先`array`の型に自動的にキャストできない場合、スロー <xref:System.InvalidCastException> <xref:System.ArgumentException>の<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>非ジェネリック実装はスローされます。  
  
 このメソッドは O(`n`) 操作で、`n`は <xref:System.Collections.Generic.Stack%601.Count%2A> です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="array" /> が多次元です。  
  
または 
 <paramref name="array" /> には、0 から始まるインデックス番号がありません。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。  
  
または 
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
        <value><see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Stack`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の<xref:System.Collections.Generic?displayProperty=nameWithType>コレクションの既定の実装は同期されていません。  
  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。  列挙が書き込みアクセスによって競合するまれなケースとして、列挙全体の間にコレクションをロックする必要があります。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 <xref:System.Collections.ICollection.SyncRoot%2A>への<xref:System.Collections.ICollection>アクセスを同期するために使用できるオブジェクトを返します。 同期は、コレクションにアクセスする前にすべてのスレッドがこのオブジェクトをロックする場合にのみ有効です。  
  
 このプロパティ値を取得することは、O(1) 操作になります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
        <value><see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。  <see cref="T:System.Collections.Generic.Stack`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の<xref:System.Collections.Generic?displayProperty=nameWithType>コレクションの既定の実装は同期されていません。  
  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。  列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 <xref:System.Collections.ICollection.SyncRoot%2A>への<xref:System.Collections.ICollection>アクセスを同期するために使用できるオブジェクトを返します。 同期は、コレクションにアクセスする前にすべてのスレッドがこのオブジェクトをロックする場合にのみ有効です。 次のコードは、、 <xref:System.Collections.ICollection.SyncRoot%2A> C++、および Visual Basic のC#プロパティを使用する方法を示しています。  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 このプロパティ値を取得することは、O(1) 操作になります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理する列挙子を返します。</summary>
        <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C# 言語の `foreach` ステートメント (C++ では `for each`、Visual Basic では `For Each`) では、列挙子の複雑さが隠されています。 したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。  
  
 列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。 <xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。  この位置では、<xref:System.Collections.IEnumerator.Current%2A> は未定義です。 そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。  
  
 <xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。 <xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。  
  
 <xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。 列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。 の最後の呼び出し<xref:System.Collections.IEnumerator.MoveNext%2A>が返さ`false`れた場合、 <xref:System.Collections.IEnumerator.Current%2A>が未定義になります。 <xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。  
  
 コレクションが変更されない限り、列挙子は有効です。 要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子はなりに<xref:System.Collections.IEnumerator.MoveNext%2A>無効化され、次のまたは<xref:System.Collections.IEnumerator.Reset%2A>の呼び出しでがスロー <xref:System.InvalidOperationException>されます。  
  
 列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。  列挙処理でスレッド セーフを確保するために、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 の<xref:System.Collections.Generic?displayProperty=nameWithType>コレクションの既定の実装は同期されていません。  
  
 このメソッドは、O(1) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="stack.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" /> を新しい配列にコピーします。</summary>
        <returns><see cref="T:System.Collections.Generic.Stack`1" /> の要素のコピーを格納する新しい配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要素は、の連続した呼び出し<xref:System.Collections.Generic.Stack%601.Pop%2A>によって返される要素の順序と同様に、後入れ先出し (LIFO) の順序で配列にコピーされます。  
  
 このメソッドは O(`n`) 操作で、`n`は <xref:System.Collections.Generic.Stack%601.Count%2A> です。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Collections.Generic.Stack%601> <xref:System.Collections.Generic.Stack%601.ToArray%2A>メソッドを含む、ジェネリッククラスのいくつかのメソッドを示しています。  
  
 このコード例では、既定の容量を持つ文字列のスタック<xref:System.Collections.Generic.Stack%601.Push%2A>を作成し、メソッドを使用して5つの文字列をスタックにプッシュします。 スタックの要素が列挙され、スタックの状態が変更されることはありません。 <xref:System.Collections.Generic.Stack%601.Pop%2A>メソッドは、スタックから最初の文字列をポップするために使用されます。 メソッドは、スタック上の次の項目を確認するために使用され<xref:System.Collections.Generic.Stack%601.Pop%2A> 、その後、メソッドを使用してポップします。 <xref:System.Collections.Generic.Stack%601.Peek%2A>  
  
 メソッド<xref:System.Collections.Generic.Stack%601.ToArray%2A>は、配列を作成してスタック要素をコピーするために使用されます。次に、 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>によって<xref:System.Collections.Generic.IEnumerable%601>取得されるコンストラクターに配列が渡されます。その後、要素の順序を逆にしてスタックのコピーが作成されます。 コピーの要素が表示されます。  
  
 スタックのサイズの2倍の配列が作成<xref:System.Collections.Generic.Stack%601.CopyTo%2A>され、メソッドを使用して配列の途中から配列の要素がコピーされます。 <xref:System.Collections.Generic.Stack%601.%23ctor%2A>コンストラクターは、要素の順序を逆にしてスタックのコピーを作成するために再び使用されます。したがって、3つの null 要素が末尾にあります。  
  
 メソッドは、文字列 "4" がスタックの最初のコピーに含まれていることを示すために使用<xref:System.Collections.Generic.Stack%601.Clear%2A>されます。その後<xref:System.Collections.Generic.Stack%601.Count%2A> 、メソッドはコピーをクリアし、プロパティはスタックが空であることを示します。 <xref:System.Collections.Generic.Stack%601.Contains%2A>  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="stack.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コレクションに新しい要素が追加されない場合は、このメソッドを使用してコレクションのメモリオーバーヘッドを最小限に抑えることができます。 ただし、大規模なの再割り当て<xref:System.Collections.Generic.Stack%601>とコピーにかかるコストはかなり大きく<xref:System.Collections.Generic.Stack%601.TrimExcess%2A>なる可能性があるため、この方法では、リストの容量が 90% を超える場合は何も行われません。 これにより、比較的小さな増加に対して大きな再割り当てコストが発生することを回避できます。  
  
 このメソッドは O(`n`) 操作で、`n`は <xref:System.Collections.Generic.Stack%601.Count%2A> です。  
  
 を<xref:System.Collections.Generic.Stack%601>初期状態にリセットするには、 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>メソッド<xref:System.Collections.Generic.Stack%601.Clear%2A>を呼び出す前にメソッドを呼び出します。 空<xref:System.Collections.Generic.Stack%601>のをトリミングすると、 <xref:System.Collections.Generic.Stack%601>の容量が既定の容量に設定されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="stack.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop">
      <MemberSignature Language="C#" Value="public bool TryPop (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPop([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPop(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPop (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPop([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPop :  -&gt; bool" Usage="stack.TryPop result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
