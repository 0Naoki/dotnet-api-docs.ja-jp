<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Stack`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">037e736f-f76f-422a-bcb7-5d2d599f851d0d3cbe5b2e0bda1ffadfdb2cce2e45dedae79516.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d3cbe5b2e0bda1ffadfdb2cce2e45dedae79516</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fc53860cd2661bb7bde6e4b2858fcda4ec4c889</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/10/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Specifies the type of elements in the stack.</source>
          <target state="translated">スタック内の要素の型を指定します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.Stack`1">
          <source>Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.</source>
          <target state="translated">指定した同じ型のインスタンスの、後入れ先出し (LIFO) の可変サイズのコレクションを表します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is implemented as an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> 配列として実装されます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Stacks and queues are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</source>
          <target state="translated">スタックやキューは場合に役立ちますについて; 一時的な保存する必要があります。つまり、可能性がある場合の値を取得後に要素を破棄します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> if you need to access the information in the same order that it is stored in the collection.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>かどうかは、これが、コレクションに格納される順序と同じ順序での情報にアクセスする必要があります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> if you need to access the information in reverse order.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph>逆の順序で、情報にアクセスする必要がある場合。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Use the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType&gt;</ph> types when you need to access the collection from multiple threads concurrently.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType&gt;</ph>型の場合、同時に複数のスレッドからコレクションにアクセスする必要があります。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>A common use for <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> is to preserve variable states during calls to other procedures.</source>
          <target state="translated">一般的な用途<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph>を他のプロシージャの呼び出し中に変数の状態を維持しています。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Three main operations can be performed on a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> and its elements:</source>
          <target state="translated">次の 3 つの主要な操作を実行できる、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph>とその要素。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> inserts an element at the top of the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> 上部にある要素を挿入、<ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> removes an element from the top of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> 先頭から要素を削除、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> returns an element that is at the top of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> but does not remove it from the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> 上部にある要素を返します、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>からは削除されませんが、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">容量、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>要素の数が、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>を保持できます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">要素が追加されるにつれて、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">呼び出すことによって、容量を削減できる<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>がスタックの容量よりも小さい<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph>は、o (1) 操作になります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>If the capacity needs to be increased to accommodate the new element, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> becomes an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">容量が、新しい要素を格納するためにする必要がある場合<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph>O になります (<ph id="ph2">`n`</ph>) 操作では、ここで<ph id="ph3">`n`</ph>は<ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> 受け付ける<ph id="ph2">`null`</ph>と参照の有効な値の型により、重複する要素。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class.</source>
          <target state="translated">次のコード例をいくつかの方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>ジェネリック クラスです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">このコード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> 5 つの文字列をスタックにプッシュするメソッド。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">スタックの要素が表示され、スタックの状態は変化しませんが列挙されます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>スタックから最初の文字列を表示するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>メソッドを使用して、スタックの次の項目を確認し、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>からポップするメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph>メソッドは、配列を作成し、スタック要素のコピーに使用し、配列に渡されます、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>を受け取るコンス トラクター <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>、逆に、要素の順序でスタックのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">コピーの要素が表示されます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">配列 2 回、スタックのサイズが作成、および<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>コンス トラクターは、元に戻す要素の順序でスタックのコピーを作成するもう一度使用されます。 そのため、3 つの null 要素が最後には。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph>メソッドを使用するまで、スタックの最初のコピーで「4」文字列が表示して、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドは、コピー、クリア、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>スタックが空であるプロパティを示しています。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">パブリック静的 (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> Visual Basic で) この型のメンバーは、スレッド セーフであります。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> can support multiple readers concurrently, as long as the collection is not modified.</source>
          <target state="translated">A<ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>コレクションが変更されない限り、複数のリーダーを同時にサポートできます。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">それでも、コレクションの列挙は、本質的には、スレッド セーフなプロシージャではします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.Stack`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class that is empty and has the default initial capacity.</source>
          <target state="translated">空で、既定の初期量を備えた、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">容量、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>は要素の数を<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>を保持できます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">要素が追加されるにつれて、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">呼び出すことによって、容量を削減できる<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The following code example demonstrates this constructor and several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class.</source>
          <target state="translated">次のコード例は、このコンス トラクターをいくつかの方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>ジェネリック クラスです。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">このコード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> 5 つの文字列をスタックにプッシュするメソッド。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">スタックの要素が表示され、スタックの状態は変化しませんが列挙されます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>スタックから最初の文字列を表示するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>メソッドを使用して、スタックの次の項目を確認し、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>からポップするメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph>メソッドは、配列を作成し、スタック要素のコピーに使用し、配列に渡されます、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>を受け取るコンス トラクター <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>、逆に、要素の順序でスタックのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">コピーの要素が表示されます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">配列 2 回、スタックのサイズが作成、および<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>コンス トラクターは、元に戻す要素の順序でスタックのコピーを作成するもう一度使用されます。 そのため、3 つの null 要素が最後には。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph>メソッドを使用するまで、スタックの最初のコピーで「4」文字列が表示して、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドは、コピー、クリア、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>スタックが空であるプロパティを示しています。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection to copy elements from.</source>
          <target state="translated">要素のコピー元のコレクション。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</source>
          <target state="translated">指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">容量、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>は要素の数を<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>を保持できます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">要素が追加されるにつれて、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">呼び出すことによって、容量を削減できる<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements are copied onto the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> in the same order they are read by the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> of the collection.</source>
          <target state="translated">要素の上にコピー、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>によって読み取られる同じ順序で、<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>のコレクション。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`collection`</ph>.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>内の要素の数は、<ph id="ph3">`collection`</ph>です。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The following code example demonstrates this constructor and several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class.</source>
          <target state="translated">次のコード例は、このコンス トラクターをいくつかの方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>ジェネリック クラスです。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">このコード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> 5 つの文字列をスタックにプッシュするメソッド。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">スタックの要素が表示され、スタックの状態は変化しませんが列挙されます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>スタックから最初の文字列を表示するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>メソッドを使用して、スタックの次の項目を確認し、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>からポップするメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph>メソッドは、配列を作成し、スタック要素のコピーに使用し、配列に渡されます、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>を受け取るコンス トラクター <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>、逆に、要素の順序でスタックのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">コピーの要素が表示されます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">配列 2 回、スタックのサイズが作成、および<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>コンス トラクターは、元に戻す要素の順序でスタックのコピーを作成するもう一度使用されます。 そのため、3 つの null 要素が最後には。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph>メソッドを使用するまで、スタックの最初のコピーで「4」文字列が表示して、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドは、コピー、クリア、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>スタックが空であるプロパティを示しています。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>The initial number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> can contain.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> が格納できる要素数の初期値。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</source>
          <target state="translated">空で、指定した初期量または既定の初期量のうち大きい方の初期量を備えた、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">容量、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>は要素の数を<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>を保持できます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">要素が追加されるにつれて、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">呼び出すことによって、容量を削減できる<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">`capacity`</ph>します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>Removes all objects from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> からすべてのオブジェクトを削除します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> 0 に設定し、コレクションの要素から他のオブジェクトへの参照も解放します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The capacity remains unchanged.</source>
          <target state="translated">容量はそのまま残ります。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>To reset the capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, call <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">容量をリセットする、 <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>、呼び出す<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> to the default capacity.</source>
          <target state="translated">空のトリミング<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>のキャパシティを設定、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>を既定の容量。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method.</source>
          <target state="translated">次のコード例をいくつかの方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>ジェネリック クラスなど、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">このコード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> 5 つの文字列をスタックにプッシュするメソッド。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">スタックの要素が表示され、スタックの状態は変化しませんが列挙されます。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>スタックから最初の文字列を表示するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>メソッドを使用して、スタックの次の項目を確認し、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>からポップするメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph>メソッドは、配列を作成し、スタック要素のコピーに使用し、配列に渡されます、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>を受け取るコンス トラクター <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>、逆に、要素の順序でスタックのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">コピーの要素が表示されます。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">配列 2 回、スタックのサイズが作成、および<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>コンス トラクターは、元に戻す要素の順序でスタックのコピーを作成するもう一度使用されます。 そのため、3 つの null 要素が最後には。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph>メソッドを使用するまで、スタックの最初のコピーで「4」文字列が表示して、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドは、コピー、クリア、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>スタックが空であるプロパティを示しています。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> 内で検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>Determines whether an element is in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">ある要素が <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> 内に存在するかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が <ph id="ph2">&lt;paramref name="item" /&gt;</ph> に存在する場合は <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`T`</ph>リスト内の値の型。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method.</source>
          <target state="translated">次のコード例をいくつかの方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>ジェネリック クラスなど、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">このコード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> 5 つの文字列をスタックにプッシュするメソッド。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">スタックの要素が表示され、スタックの状態は変化しませんが列挙されます。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>スタックから最初の文字列を表示するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>メソッドを使用して、スタックの次の項目を確認し、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>からポップするメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph>メソッドは、配列を作成し、スタック要素のコピーに使用し、配列に渡されます、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>を受け取るコンス トラクター <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>、逆に、要素の順序でスタックのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">コピーの要素が表示されます。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">配列 2 回、スタックのサイズが作成、および<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>コンス トラクターは、元に戻す要素の順序でスタックのコピーを作成するもう一度使用されます。 そのため、3 つの null 要素が最後には。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph>メソッドを使用するまで、スタックの最初のコピーで「4」文字列が表示して、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドは、コピー、クリア、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>スタックが空であるプロパティを示しています。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> から要素がコピーされる 1 次元の <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> には、0 から始まるインデックス番号が必要です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">コピーの開始位置となる、<bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> to an existing one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified array index.</source>
          <target state="translated">既存の 1 次元の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> に <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> をコピーします。コピー操作は、配列の指定したインデックスから始まります。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</source>
          <target state="translated">要素の最後で先出し (LIFO) の順序への呼び出しの連続してによって返される要素の順序と似ての配列にコピー<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">次のコード例をいくつかの方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>ジェネリック クラスなど、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">このコード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> 5 つの文字列をスタックにプッシュするメソッド。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">スタックの要素が表示され、スタックの状態は変化しませんが列挙されます。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>スタックから最初の文字列を表示するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>メソッドを使用して、スタックの次の項目を確認し、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>からポップするメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph>メソッドは、配列を作成し、スタック要素のコピーに使用し、配列に渡されます、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>を受け取るコンス トラクター <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>、逆に、要素の順序でスタックのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">コピーの要素が表示されます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">配列 2 回、スタックのサイズが作成、および<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>コンス トラクターは、元に戻す要素の順序でスタックのコピーを作成するもう一度使用されます。 そのため、3 つの null 要素が最後には。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph>メソッドを使用するまで、スタックの最初のコピーで「4」文字列が表示して、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドは、コピー、クリア、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>スタックが空であるプロパティを示しています。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> の要素数が、コピー先 <ph id="ph3">&lt;paramref name="array" /&gt;</ph> の <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> から最後までの使用可能領域を超えています。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> に格納されている要素の数を取得します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> に格納されている要素の数。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can store.</source>
          <target state="translated">容量、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>は要素の数を<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>格納できます。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> 実際には、要素の数、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The capacity is always greater than or equal to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">容量は、常により大きいまたは等しい<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>要素を追加するときに、容量を超える場合、前の要素をコピーし、新しい要素を追加する前に、内部の配列を自動的に再割り当てによって、容量が増加します。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The following code example demonstrates several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property.</source>
          <target state="translated">次のコード例は、いくつかのプロパティとメソッドを示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>ジェネリック クラスなど、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">このコード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> 5 つの文字列をスタックにプッシュするメソッド。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">スタックの要素が表示され、スタックの状態は変化しませんが列挙されます。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>スタックから最初の文字列を表示するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>メソッドを使用して、スタックの次の項目を確認し、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>からポップするメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph>メソッドは、配列を作成し、スタック要素のコピーに使用し、配列に渡されます、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>を受け取るコンス トラクター <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>、逆に、要素の順序でスタックのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">コピーの要素が表示されます。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">配列 2 回、スタックのサイズが作成、および<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>コンス トラクターは、元に戻す要素の順序でスタックのコピーを作成するもう一度使用されます。 そのため、3 つの null 要素が最後には。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph>メソッドを使用するまで、スタックの最初のコピーで「4」文字列が表示して、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドは、コピー、クリア、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>スタックが空であるプロパティを示しています。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Returns an enumerator for the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> の列挙子を返します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1.Enumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1.Enumerator" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> C++ では、 <ph id="ph3">`For Each`</ph> Visual Basic で)、列挙子の複雑さが隠されています。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがって、列挙子を直接操作するのではなく、<ph id="ph1">`foreach`</ph> を使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">この位置では、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> が未定義です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">そのため、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> の値を読み取る前に、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> が呼び出されるまでは同じオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> を次の要素に設定します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph>返します<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph>を返すことも<ph id="ph2">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">最後の呼び出し場合<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph>返される<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph>が定義されていません。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A&gt;</ph>スロー、<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If the collection is modified between calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> method and obtaining the value of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> property, <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">呼び出し元のコレクションが変更された場合<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph>メソッドとの値を取得する、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph>プロパティ、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph>列挙子が既に無効になっている場合でもに設定されている要素を返します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">既定の実装のコレクションの<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>が同期されていません。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The following code example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class is enumerable.</source>
          <target state="translated">次のコード例では、ことを示します、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>ジェネリック クラスは列挙可能です。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in C++) is used to enumerate the queue.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph>ステートメント (<ph id="ph2">`For Each`</ph> Visual basic で<ph id="ph3">`for each`</ph>C++ で)、キューを列挙するために使用します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">このコード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> 5 つの文字列をスタックにプッシュするメソッド。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">スタックの要素が表示され、スタックの状態は変化しませんが列挙されます。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>スタックから最初の文字列を表示するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>メソッドを使用して、スタックの次の項目を確認し、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>からポップするメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph>メソッドは、配列を作成し、スタック要素のコピーに使用し、配列に渡されます、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>を受け取るコンス トラクター <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>、逆に、要素の順序でスタックのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">コピーの要素が表示されます。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">配列 2 回、スタックのサイズが作成、および<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>コンス トラクターは、元に戻す要素の順序でスタックのコピーを作成するもう一度使用されます。 そのため、3 つの null 要素が最後には。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph>メソッドを使用するまで、スタックの最初のコピーで「4」文字列が表示して、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドは、コピー、クリア、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>スタックが空であるプロパティを示しています。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>Returns the object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> without removing it.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> の先頭にあるオブジェクトを削除せずに返します。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> の一番上にあるオブジェクト。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">このメソッドは <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> メソッドに類似していますが、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> は <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> を変更しません。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be pushed onto the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>、参照型では、<ph id="ph2">`null`</ph>にプッシュされることができます、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>必要な場合は、プレース ホルダーとして。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method.</source>
          <target state="translated">次のコード例をいくつかの方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>ジェネリック クラスなど、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">このコード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> 5 つの文字列をスタックにプッシュするメソッド。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">スタックの要素が表示され、スタックの状態は変化しませんが列挙されます。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>スタックから最初の文字列を表示するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>メソッドを使用して、スタックの次の項目を確認し、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>からポップするメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph>メソッドは、配列を作成し、スタック要素のコピーに使用し、配列に渡されます、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>を受け取るコンス トラクター <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>、逆に、要素の順序でスタックのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">コピーの要素が表示されます。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">配列 2 回、スタックのサイズが作成、および<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>コンス トラクターは、元に戻す要素の順序でスタックのコピーを作成するもう一度使用されます。 そのため、3 つの null 要素が最後には。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph>メソッドを使用するまで、スタックの最初のコピーで「4」文字列が表示して、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドは、コピー、クリア、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>スタックが空であるプロパティを示しています。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> is empty.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> が空です。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>Removes and returns the object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> の先頭にあるオブジェクトを削除し、返します。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The object removed from the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> の一番上から削除されたオブジェクト。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">このメソッドは <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> メソッドに類似していますが、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> は <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> を変更しません。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be pushed onto the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>、参照型では、<ph id="ph2">`null`</ph>にプッシュされることができます、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>必要な場合は、プレース ホルダーとして。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is implemented as an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> 配列として実装されます。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method.</source>
          <target state="translated">次のコード例をいくつかの方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>ジェネリック クラスなど、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">このコード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> 5 つの文字列をスタックにプッシュするメソッド。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">スタックの要素が表示され、スタックの状態は変化しませんが列挙されます。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>スタックから最初の文字列を表示するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>メソッドを使用して、スタックの次の項目を確認し、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>からポップするメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph>メソッドは、配列を作成し、スタック要素のコピーに使用し、配列に渡されます、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>を受け取るコンス トラクター <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>、逆に、要素の順序でスタックのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">コピーの要素が表示されます。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">配列 2 回、スタックのサイズが作成、および<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>コンス トラクターは、元に戻す要素の順序でスタックのコピーを作成するもう一度使用されます。 そのため、3 つの null 要素が最後には。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph>メソッドを使用するまで、スタックの最初のコピーで「4」文字列が表示して、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドは、コピー、クリア、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>スタックが空であるプロパティを示しています。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> is empty.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> が空です。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The object to push onto the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> にプッシュするオブジェクト。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>Inserts an object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> の先頭にオブジェクトを挿入します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is implemented as an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> 配列として実装されます。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> already equals the capacity, the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>容量の容量と既に同じ、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be pushed onto the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>、参照型では、<ph id="ph2">`null`</ph>にプッシュされることができます、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>必要な場合は、プレース ホルダーとして。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>It occupies a slot in the stack and is treated like any object.</source>
          <target state="translated">スタック内のスロットを占有し、任意のオブジェクトと同様に扱われます。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>がスタックの容量よりも小さい<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph>は、o (1) 操作になります。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If the capacity needs to be increased to accommodate the new element, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> becomes an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">容量が、新しい要素を格納するためにする必要がある場合<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph>O になります (<ph id="ph2">`n`</ph>) 操作では、ここで<ph id="ph3">`n`</ph>は<ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method.</source>
          <target state="translated">次のコード例をいくつかの方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>ジェネリック クラスなど、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">このコード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> 5 つの文字列をスタックにプッシュするメソッド。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">スタックの要素が表示され、スタックの状態は変化しませんが列挙されます。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>スタックから最初の文字列を表示するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>メソッドを使用して、スタックの次の項目を確認し、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>からポップするメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph>メソッドは、配列を作成し、スタック要素のコピーに使用し、配列に渡されます、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>を受け取るコンス トラクター <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>、逆に、要素の順序でスタックのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">コピーの要素が表示されます。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">配列 2 回、スタックのサイズが作成、および<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>コンス トラクターは、元に戻す要素の順序でスタックのコピーを作成するもう一度使用されます。 そのため、3 つの null 要素が最後には。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph>メソッドを使用するまで、スタックの最初のコピーで「4」文字列が表示して、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドは、コピー、クリア、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>スタックが空であるプロパティを示しています。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">コレクションを反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">コレクションを反復処理するために使用できる <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> C++ では、 <ph id="ph3">`For Each`</ph> Visual Basic で)、列挙子の複雑さが隠されています。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがって、列挙子を直接操作するのではなく、<ph id="ph1">`foreach`</ph> を使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">この位置では、<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> が未定義です。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">そのため、<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> の値を読み取る前に、<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> が呼び出されるまでは同じオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> を次の要素に設定します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返します<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>を返すことも<ph id="ph2">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">最後の呼び出し場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返される<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>が定義されていません。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>スロー、<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If the collection is modified between calling <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method and obtaining the value of the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">呼び出し元のコレクションが変更された場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>メソッドとの値を取得する、<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>プロパティ、<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>列挙子が既に無効になっている場合でもに設定されている要素を返します。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">既定の実装のコレクションの<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>が同期されていません。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> から要素がコピーされる 1 次元の <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> には、0 から始まるインデックス番号が必要です。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">コピーの開始位置となる、<bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> の要素を <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> にコピーします。コピーは特定の <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> のインデックスから開始されます。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the non-generic implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">場合、ソースの種類<ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>変換先の型に自動的にキャストすることはできません<ph id="ph2">`array`</ph>の非ジェネリックの実装<ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph>スロー<ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>汎用実装でスローされ、<ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> が多次元です。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> には、0 から始まるインデックス番号がありません。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> の要素数が、コピー先 <ph id="ph3">&lt;paramref name="array" /&gt;</ph> の <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> から最後までの使用可能領域を超えています。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> の型をコピー先の <ph id="ph2">&lt;paramref name="array" /&gt;</ph> の型に自動的にキャストすることはできません。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> へのアクセスが同期されている (スレッド セーフである) 場合は <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> の既定の実装では、このプロパティは常に <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">既定の実装のコレクションの<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>が同期されていません。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>In the rare case where enumerations contend with write accesses, you must lock the collection during the entire enumeration.</source>
          <target state="translated">まれに、列挙型どうしは競合して書き込みアクセスでは、列挙中にコレクションをロックする必要があります。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> アクセスを同期するために使用できるオブジェクトを返します、<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスを同期するために使用できるオブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスの同期に使用できるオブジェクト。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, this property always returns the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">既定の実装のコレクションの<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>が同期されていません。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> アクセスを同期するために使用できるオブジェクトを返します、<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">次のコードの使用を示しています、 <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> c#、C++、および Visual Basic のプロパティです。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">コレクションを反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">コレクションを反復処理するために使用できる <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> C++ では、 <ph id="ph3">`For Each`</ph> Visual Basic で)、列挙子の複雑さが隠されています。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがって、列挙子を直接操作するのではなく、<ph id="ph1">`foreach`</ph> を使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> を実行した場合も、列挙子はこの位置に戻されます。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">この位置では、<ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> が未定義です。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">そのため、<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> の値を読み取る前に、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> または <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> が呼び出されるまでは同じオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> を次の要素に設定します。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返します<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>を返すことも<ph id="ph2">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">最後の呼び出し場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返される<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>が定義されていません。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> をコレクションの最初の要素にもう一度設定するには、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> を呼び出してから <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>スロー、<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the collection is modified between calling <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method and obtaining the value of the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">呼び出し元のコレクションが変更された場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>メソッドとの値を取得する、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>プロパティ、<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>列挙子が既に無効になっている場合でもに設定されている要素を返します。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">既定の実装のコレクションの<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>が同期されていません。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> to a new array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> を新しい配列にコピーします。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>A new array containing copies of the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> の要素のコピーを格納する新しい配列。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</source>
          <target state="translated">要素の最後で先出し (LIFO) の順序への呼び出しの連続してによって返される要素の順序と似ての配列にコピー<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method.</source>
          <target state="translated">次のコード例をいくつかの方法を示しています、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>ジェネリック クラスなど、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">このコード例は、既定の容量を持つ文字列のスタックを作成し、使用して、 <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> 5 つの文字列をスタックにプッシュするメソッド。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">スタックの要素が表示され、スタックの状態は変化しませんが列挙されます。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>スタックから最初の文字列を表示するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>メソッドを使用して、スタックの次の項目を確認し、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>からポップするメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph>メソッドは、配列を作成し、スタック要素のコピーに使用し、配列に渡されます、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>を受け取るコンス トラクター <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>、逆に、要素の順序でスタックのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">コピーの要素が表示されます。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">配列 2 回、スタックのサイズが作成、および<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph>メソッドは、配列の中央にある開始配列要素のコピーに使用します。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph>コンス トラクターは、元に戻す要素の順序でスタックのコピーを作成するもう一度使用されます。 そのため、3 つの null 要素が最後には。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph>メソッドを使用するまで、スタックの最初のコピーで「4」文字列が表示して、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドは、コピー、クリア、<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>スタックが空であるプロパティを示しています。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>Sets the capacity to the actual number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, if that number is less than 90 percent of current capacity.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</source>
          <target state="translated">このメソッドは、コレクションのメモリ オーバーヘッドを最小要素がコレクションに追加されない場合に使用できます。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>The cost of reallocating and copying a large <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can be considerable, however, so the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> method does nothing if the list is at more than 90 percent of capacity.</source>
          <target state="translated">再割り当てすることや、大規模なコピーのコスト<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>考慮する必要が、ただし、ため、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>メソッドは何もリストが容量の 90% 以上である場合。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>This avoids incurring a large reallocation cost for a relatively small gain.</source>
          <target state="translated">これは、比較的小さい向上のための大規模な再割り当てコストをかけず回避できます。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>To reset a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> to its initial state, call the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method before calling <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> method.</source>
          <target state="translated">リセットする、<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>を初期状態に呼び出し、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph>メソッドを呼び出す前に<ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> to the default capacity.</source>
          <target state="translated">空のトリミング<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>のキャパシティを設定、<ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>を既定の容量。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>