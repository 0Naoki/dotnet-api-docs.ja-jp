<Type Name="SortedList&lt;TKey,TValue&gt;" FullName="System.Collections.Generic.SortedList&lt;TKey,TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2273c0dfa4bf99daec33bc8e748e3205c0f63b2d" />
    <Meta Name="ms.sourcegitcommit" Value="b3480b6208c3cad466469e76294a96f5ab1ef04c" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/16/2018" />
    <Meta Name="ms.locfileid" Value="35691834" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SortedList&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;, System.Collections.IDictionary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SortedList`2&lt;TKey, TValue&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IReadOnlyDictionary`2&lt;!TKey, !TValue&gt;, class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.SortedList`2" />
  <TypeSignature Language="VB.NET" Value="Public Class SortedList(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, TValue)), IDictionary, IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IReadOnlyDictionary(Of TKey, TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public ref class SortedList : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IDictionary&lt;TKey, TValue&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IReadOnlyCollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IReadOnlyDictionary&lt;TKey, TValue&gt;, System::Collections::IDictionary" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_DictionaryDebugView`2))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">
      <span data-ttu-id="a2bf8-101">コレクション内のキーの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2bf8-101">The type of keys in the collection.</span>
      </span>
    </typeparam>
    <typeparam name="TValue">
      <span data-ttu-id="a2bf8-102">コレクション内の値の型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2bf8-102">The type of values in the collection.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="a2bf8-103">関連付けられた <see cref="T:System.Collections.Generic.IComparer`1" /> 実装に基づいて、キーにより並べ替えられた、キーと値のペアのコレクションを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2bf8-103">Represents a collection of key/value pairs that are sorted by key based on the associated <see cref="T:System.Collections.Generic.IComparer`1" /> implementation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-104"><xref:System.Collections.Generic.SortedList%602>ジェネリック クラスは、O にキー/値ペアの配列 (ログ`n`)、n はディクショナリ内の要素の数を取得します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-104">The <xref:System.Collections.Generic.SortedList%602> generic class is an array of key/value pairs with O(log `n`) retrieval, where n is the number of elements in the dictionary.</span></span> <span data-ttu-id="a2bf8-105">似ていますが、この、<xref:System.Collections.Generic.SortedDictionary%602>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-105">In this, it is similar to the <xref:System.Collections.Generic.SortedDictionary%602> generic class.</span></span> <span data-ttu-id="a2bf8-106">2 つのクラスと同様のオブジェクト モデルがあり両方 O (ログ`n`) を取得します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-106">The two classes have similar object models, and both have O(log `n`) retrieval.</span></span> <span data-ttu-id="a2bf8-107">メモリ使用量と挿入、削除の速度では、2 つのクラスが異なります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-107">Where the two classes differ is in memory use and speed of insertion and removal:</span></span>  
  
-   <span data-ttu-id="a2bf8-108"><xref:System.Collections.Generic.SortedList%602> 少ないメモリ<xref:System.Collections.Generic.SortedDictionary%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-108"><xref:System.Collections.Generic.SortedList%602> uses less memory than <xref:System.Collections.Generic.SortedDictionary%602>.</span></span>  
  
-   <span data-ttu-id="a2bf8-109"><xref:System.Collections.Generic.SortedDictionary%602> 高速な挿入および削除操作、並べ替えられていないデータの O (ログ`n`) O ではなく (`n`) の<xref:System.Collections.Generic.SortedList%602>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-109"><xref:System.Collections.Generic.SortedDictionary%602> has faster insertion and removal operations for unsorted data, O(log `n`) as opposed to O(`n`) for <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
-   <span data-ttu-id="a2bf8-110">一覧が並べ替え済みのデータから 1 回に設定されている場合<xref:System.Collections.Generic.SortedList%602>よりも高速<xref:System.Collections.Generic.SortedDictionary%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-110">If the list is populated all at once from sorted data, <xref:System.Collections.Generic.SortedList%602> is faster than <xref:System.Collections.Generic.SortedDictionary%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-111">別の違い、<xref:System.Collections.Generic.SortedDictionary%602>と<xref:System.Collections.Generic.SortedList%602>クラスは、<xref:System.Collections.Generic.SortedList%602>キーと値によって返されるコレクションの間での効率的なインデックス付きの取得をサポートする、<xref:System.Collections.Generic.SortedList%602.Keys%2A>と<xref:System.Collections.Generic.SortedList%602.Values%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-111">Another difference between the <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> classes is that <xref:System.Collections.Generic.SortedList%602> supports efficient indexed retrieval of keys and values through the collections returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> and <xref:System.Collections.Generic.SortedList%602.Values%2A> properties.</span></span> <span data-ttu-id="a2bf8-112">リストがキーと値の内部の配列の単なるラッパーであるため、プロパティがアクセスされたときにリストを再生成する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-112">It is not necessary to regenerate the lists when the properties are accessed, because the lists are just wrappers for the internal arrays of keys and values.</span></span> <span data-ttu-id="a2bf8-113">次のコードの使用を示しています、<xref:System.Collections.Generic.SortedList%602.Values%2A>文字列の並べ替えられたリストからの値のインデックス検索のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-113">The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:</span></span>  
  
 [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]
 [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]
 [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  
  
 <span data-ttu-id="a2bf8-114"><xref:System.Collections.Generic.SortedList%602> キーにより並べ替えキーと値のペアの配列として実装されます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-114"><xref:System.Collections.Generic.SortedList%602> is implemented as an array of key/value pairs, sorted by the key.</span></span>  <span data-ttu-id="a2bf8-115">各要素を取得することができます、<xref:System.Collections.Generic.KeyValuePair%602>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-115">Each element can be retrieved as a <xref:System.Collections.Generic.KeyValuePair%602> object.</span></span>  
  
 <span data-ttu-id="a2bf8-116">内のキーとして使用される限りに主要なオブジェクトが変更可能にする必要があります、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-116">Key objects must be immutable as long as they are used as keys in the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="a2bf8-117">内のすべてのキー、<xref:System.Collections.Generic.SortedList%602>一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-117">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique.</span></span> <span data-ttu-id="a2bf8-118">キーには`null`、ですが場合の値が一覧で、値の型`TValue`参照型であります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-118">A key cannot be `null`, but a value can be, if the type of values in the list, `TValue`, is a reference type.</span></span>  
  
 <span data-ttu-id="a2bf8-119"><xref:System.Collections.Generic.SortedList%602> 並べ替えと比較を実行する比較子の実装が必要です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-119"><xref:System.Collections.Generic.SortedList%602> requires a comparer implementation to sort and to perform comparisons.</span></span>  <span data-ttu-id="a2bf8-120">既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>キーを入力するかどうかを確認`TKey`を実装する<xref:System.IComparable%601?displayProperty=nameWithType>し、使用可能な場合は、その実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-120">The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="a2bf8-121">ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>キーを入力するかどうかを確認`TKey`実装<xref:System.IComparable?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-121">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="a2bf8-122">場合は、キー入力`TKey`インターフェイスを実装しないか、指定することができます、<xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType>を受け入れるコンス トラクター オーバー ロードでの実装、`comparer`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-122">If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> implementation in a constructor overload that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="a2bf8-123">容量、<xref:System.Collections.Generic.SortedList%602>要素の数が、<xref:System.Collections.Generic.SortedList%602>を保持できます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-123">The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements the <xref:System.Collections.Generic.SortedList%602> can hold.</span></span> <span data-ttu-id="a2bf8-124">要素が追加されるにつれて、<xref:System.Collections.Generic.SortedList%602>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-124">As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="a2bf8-125">呼び出すことによって、容量を削減できる<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>かを設定して、<xref:System.Collections.Generic.SortedList%602.Capacity%2A>プロパティに明示的にします。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-125">The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="a2bf8-126">メモリを再割り当ての容量を削減し、内のすべての要素をコピー、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-126">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-127">非常に大きな<xref:System.Collections.Generic.SortedList%602>オブジェクト、設定して、64 ビット システム上の 20億要素に最大の容量を増やすことができます、`enabled`する構成要素の属性`true`実行時環境でします。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-127">For very large <xref:System.Collections.Generic.SortedList%602> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="a2bf8-128">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual Basic で)、コレクション内の要素の型のオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-128">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="a2bf8-129">要素から、<xref:System.Collections.Generic.SortedList%602>キー/値ペアは、要素型は、キーの型または値の型ではありません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-129">Since the elements of the <xref:System.Collections.Generic.SortedList%602> are key/value pairs, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="a2bf8-130">要素の型は、代わりに、<xref:System.Collections.Generic.KeyValuePair%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-130">Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>.</span></span> <span data-ttu-id="a2bf8-131">例:</span><span class="sxs-lookup"><span data-stu-id="a2bf8-131">For example:</span></span>  
  
 [!code-cpp[Generic.SortedList#12](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#12)]
 [!code-csharp[Generic.SortedList#12](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#12)]
 [!code-vb[Generic.SortedList#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#12)]  
  
 <span data-ttu-id="a2bf8-132">`foreach`ステートメントがしか書き込まないことから、コレクションへの読み取りを許可する列挙子のラッパー。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-132">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-133">次のコード例は、空を作成<xref:System.Collections.Generic.SortedList%602>string キーと使用方法を使用した文字列の<xref:System.Collections.Generic.SortedList%602.Add%2A>をいくつかの要素を追加するメソッド。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-133">The following code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="a2bf8-134">この例では、ことを示します、<xref:System.Collections.Generic.SortedList%602.Add%2A>メソッドがスローされます、<xref:System.ArgumentException>重複するキーを追加しようとするとき。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-134">The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="a2bf8-135">この例では、<xref:System.Collections.Generic.SortedList%602.Item%2A>プロパティ (c# のインデクサー) を示す値を取得する、<xref:System.Collections.Generic.KeyNotFoundException>要求されたキーが存在しないと、値がキーに関連付けられていることを示すを置き換えることができる場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-135">The example uses the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="a2bf8-136">例を使用する方法を示します、<xref:System.Collections.Generic.SortedList%602.TryGetValue%2A>メソッド値を取得する場合は、プログラムは多くの場合、並べ替えられたリストに含まれていないキーの値を試行する必要があり、使用する方法を示しますより効率的な方法として、 <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> を呼び出す前に、キーが存在するかどうかをテストする方法を<xref:System.Collections.Generic.SortedList%602.Add%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-136">The example shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list, and it shows how to use the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method to test whether a key exists before calling the <xref:System.Collections.Generic.SortedList%602.Add%2A> method.</span></span>  
  
 <span data-ttu-id="a2bf8-137">この例は、キーと並べ替えられたリスト内の値を列挙する方法と、キーを列挙する方法を示していて、単独で使用して値を<xref:System.Collections.Generic.SortedList%602.Keys%2A>プロパティおよび<xref:System.Collections.Generic.SortedList%602.Values%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-137">The example shows how to enumerate the keys and values in the sorted list and how to enumerate the keys and values alone using the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property and the <xref:System.Collections.Generic.SortedList%602.Values%2A> property.</span></span>  
  
 <span data-ttu-id="a2bf8-138">最後に、この例は、<xref:System.Collections.Generic.SortedList%602.Remove%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-138">Finally, the example demonstrates the <xref:System.Collections.Generic.SortedList%602.Remove%2A> method.</span></span>  
  
 [!code-cpp[Generic.SortedList#1](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#1)]
 [!code-csharp[Generic.SortedList#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#1)]
 [!code-vb[Generic.SortedList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="a2bf8-139">パブリック静的 (<see langword="Shared" /> Visual Basic で) この型のメンバーは、スレッド セーフであります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2bf8-139">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="a2bf8-140">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2bf8-140">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="a2bf8-141">A<see cref="T:System.Collections.Generic.SortedList`2" />コレクションが変更されない限り、複数のリーダーを同時にサポートできます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2bf8-141">A <see cref="T:System.Collections.Generic.SortedList`2" /> can support multiple readers concurrently, as long as the collection is not modified.</span>
      </span>
      <span data-ttu-id="a2bf8-142">それでも、コレクションの列挙は、本質的には、スレッド セーフなプロシージャではします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2bf8-142">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="a2bf8-143">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2bf8-143">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span>
      </span>
      <span data-ttu-id="a2bf8-144">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2bf8-144">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Collections.Generic.IDictionary`2" />
    <altmember cref="T:System.Collections.Generic.Dictionary`2" />
    <altmember cref="T:System.Collections.Generic.SortedDictionary`2" />
    <altmember cref="T:System.Collections.Generic.KeyValuePair`2" />
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-145">
            <see cref="T:System.Collections.Generic.SortedList`2" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-145">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-146">空で、既定の初期量を備え、既定の <see cref="T:System.Collections.Generic.SortedList`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-146">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has the default initial capacity, and uses the default <see cref="T:System.Collections.Generic.IComparer`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-147">内のすべてのキー、<xref:System.Collections.Generic.SortedList%602>既定の比較子に従って一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-147">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer.</span></span>  
  
 <span data-ttu-id="a2bf8-148">このコンス トラクターの初期容量の既定値を使用して、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-148">This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="a2bf8-149">初期量を設定するには、使用、<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-149">To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="a2bf8-150">コレクションの最終的なサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-150">If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-151">このコンス トラクターの既定の比較子を使用して`TKey`です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-151">This constructor uses the default comparer for `TKey`.</span></span> <span data-ttu-id="a2bf8-152">比較演算子を指定するには、使用、<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-152">To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="a2bf8-153">既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>キーを入力するかどうかを確認`TKey`を実装する<xref:System.IComparable%601?displayProperty=nameWithType>し、使用可能な場合は、その実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-153">The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="a2bf8-154">ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>キーを入力するかどうかを確認`TKey`実装<xref:System.IComparable?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-154">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="a2bf8-155">場合は、キー入力`TKey`インターフェイスを実装しないか、指定することができます、<xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType>を受け入れるコンス トラクター オーバー ロードでの実装、`comparer`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-155">If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> implementation in a constructor overload that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="a2bf8-156">このコンス トラクターは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-156">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-157">次のコード例は、空を作成<xref:System.Collections.Generic.SortedList%602>string キーと使用方法を使用した文字列の<xref:System.Collections.Generic.SortedList%602.Add%2A>をいくつかの要素を追加するメソッド。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-157">The following code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="a2bf8-158">この例では、ことを示します、<xref:System.Collections.Generic.SortedList%602.Add%2A>メソッドがスローされます、<xref:System.ArgumentException>重複するキーを追加しようとするとき。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-158">The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="a2bf8-159">このコード例に示されている例の一部である、<xref:System.Collections.Generic.SortedList%602>クラスです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-159">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#2)]
 [!code-csharp[Generic.SortedList#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#2)]
 [!code-vb[Generic.SortedList#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="a2bf8-160">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-160">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="a2bf8-161">-または-  キーの型に既定の <see cref="T:System.Collections.Generic.Comparer`1" /> を使用する場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-161">-or-  <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.Comparer`1" /> for the type of the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-162">空で、既定の初期量を備え、指定した <see cref="T:System.Collections.Generic.SortedList`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-162">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-163">内のすべてのキー、<xref:System.Collections.Generic.SortedList%602>指定した比較子に従って一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-163">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer.</span></span>  
  
 <span data-ttu-id="a2bf8-164">このコンス トラクターの初期容量の既定値を使用して、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-164">This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="a2bf8-165">初期量を設定するには、使用、<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-165">To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="a2bf8-166">コレクションの最終的なサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-166">If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-167">このコンス トラクターは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-167">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-168">次のコード例では、現在のカルチャの大文字と小文字の比較子を並べ替えられたリストを作成します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-168">The following code example creates a sorted list with a case-insensitive comparer for the current culture.</span></span> <span data-ttu-id="a2bf8-169">例では、小文字のキーを使用して一部使用と、大文字のキーを使用して一部を使用する、4 つの要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-169">The example adds four elements, some with lower-case keys and some with upper-case keys.</span></span> <span data-ttu-id="a2bf8-170">大文字小文字によってのみ、既存のキーとは異なるキーを持つ要素を追加する操作は、結果として得られる例外をキャッチし、エラー メッセージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-170">The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</span></span> <span data-ttu-id="a2bf8-171">最後に、例では、大文字と小文字の並べ替え順序において、要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-171">Finally, the example displays the elements in case-insensitive sort order.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_IComp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_IComp/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_IComp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_IComp/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt; dictionary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dictionary As IDictionary(Of TKey, TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::Generic::IDictionary&lt;TKey, TValue&gt; ^ dictionary);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="dictionary">
          <span data-ttu-id="a2bf8-172">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.SortedList`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-172">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-173">指定した <see cref="T:System.Collections.Generic.SortedList`2" /> からコピーした要素を格納し、コピーした要素の数を格納できるだけの容量を備え、既定の <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-173">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" />, has sufficient capacity to accommodate the number of elements copied, and uses the default <see cref="T:System.Collections.Generic.IComparer`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-174">内のすべてのキー、<xref:System.Collections.Generic.SortedList%602>既定に従って一意である必要がありますの比較子です。 同様に、ソース内のすべてのキー`dictionary`既定の比較子に従って一意もする必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-174">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer; likewise, every key in the source `dictionary` must also be unique according to the default comparer.</span></span>  
  
 <span data-ttu-id="a2bf8-175">新しい容量<xref:System.Collections.Generic.SortedList%602>内の要素の数に設定されている`dictionary`ので、サイズ変更は行われませんリストが設定されているときにします。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-175">The capacity of the new <xref:System.Collections.Generic.SortedList%602> is set to the number of elements in `dictionary`, so no resizing takes place while the list is being populated.</span></span>  
  
 <span data-ttu-id="a2bf8-176">このコンス トラクターの既定の比較子を使用して`TKey`です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-176">This constructor uses the default comparer for `TKey`.</span></span> <span data-ttu-id="a2bf8-177">比較演算子を指定するには、使用、<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-177">To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="a2bf8-178">既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>キーを入力するかどうかを確認`TKey`を実装する<xref:System.IComparable%601?displayProperty=nameWithType>し、使用可能な場合は、その実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-178">The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="a2bf8-179">ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>キーを入力するかどうかを確認`TKey`実装<xref:System.IComparable?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-179">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="a2bf8-180">場合は、キー入力`TKey`インターフェイスを実装しないか、指定することができます、<xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType>を受け入れるコンス トラクター オーバー ロードでの実装、`comparer`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-180">If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> implementation in a constructor overload that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="a2bf8-181">場合内のデータ`dictionary`が並べ替えられて、このコンス トラクターは、O (`n`) 操作、場所`n`内の要素の数は、`dictionary`です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-181">If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`.</span></span> <span data-ttu-id="a2bf8-182">それ以外の場合これは、O (`n`\*`n`) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-182">Otherwise it is an O(`n`\*`n`) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-183">次のコード例は、使用する方法を示しています。<xref:System.Collections.Generic.SortedList%602>内の情報の並べ替えられたコピーを作成する、 <xref:System.Collections.Generic.Dictionary%602>、を渡すことによって、<xref:System.Collections.Generic.Dictionary%602>を、<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-183">The following code example shows how to use <xref:System.Collections.Generic.SortedList%602> to create a sorted copy of the information in a <xref:System.Collections.Generic.Dictionary%602>, by passing the <xref:System.Collections.Generic.Dictionary%602> to the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%29> constructor.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_IDic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_IDic/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_IDic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_IDic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2bf8-184">
            <paramref name="dictionary" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-184">
              <paramref name="dictionary" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a2bf8-185">
            <paramref name="dictionary" /> には 1 つまたは複数の重複するキーが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-185">
              <paramref name="dictionary" /> contains one or more duplicate keys.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="a2bf8-186">
            <see cref="T:System.Collections.Generic.SortedList`2" /> が格納できる要素数の初期値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-186">The initial number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-187">空で、指定した初期量を備え、既定の <see cref="T:System.Collections.Generic.SortedList`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-187">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has the specified initial capacity, and uses the default <see cref="T:System.Collections.Generic.IComparer`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-188">内のすべてのキー、<xref:System.Collections.Generic.SortedList%602>既定の比較子に従って一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-188">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer.</span></span>  
  
 <span data-ttu-id="a2bf8-189">容量、<xref:System.Collections.Generic.SortedList%602>は要素の数を<xref:System.Collections.Generic.SortedList%602>のサイズを変更する前に保持できます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-189">The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing.</span></span> <span data-ttu-id="a2bf8-190">要素が追加されるにつれて、<xref:System.Collections.Generic.SortedList%602>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-190">As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="a2bf8-191">コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-191">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-192">呼び出すことによって、容量を削減できる<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>かを設定して、<xref:System.Collections.Generic.SortedList%602.Capacity%2A>プロパティに明示的にします。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-192">The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="a2bf8-193">メモリを再割り当ての容量を削減し、内のすべての要素をコピー、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-193">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-194">このコンス トラクターの既定の比較子を使用して`TKey`です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-194">This constructor uses the default comparer for `TKey`.</span></span> <span data-ttu-id="a2bf8-195">比較演算子を指定するには、使用、<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-195">To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="a2bf8-196">既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>キーを入力するかどうかを確認`TKey`を実装する<xref:System.IComparable%601?displayProperty=nameWithType>し、使用可能な場合は、その実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-196">The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="a2bf8-197">ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>キーを入力するかどうかを確認`TKey`実装<xref:System.IComparable?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-197">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="a2bf8-198">場合は、キー入力`TKey`インターフェイスを実装しないか、指定することができます、<xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType>を受け入れるコンス トラクター オーバー ロードでの実装、`comparer`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-198">If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> implementation in a constructor overload that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="a2bf8-199">このコンス トラクターは、O (`n`) 操作では、ここで`n`は`capacity`します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-199">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-200">次のコード例では、4 分の初期容量と、並べ替えられたリストを作成し、4 つのエントリが挿入されます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-200">The following code example creates a sorted list with an initial capacity of 4 and populates it with 4 entries.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_Int32#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_Int32/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_Int32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_Int32/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2bf8-201">
            <paramref name="capacity" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-201">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Capacity" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt; dictionary, class System.Collections.Generic.IComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dictionary As IDictionary(Of TKey, TValue), comparer As IComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::Generic::IDictionary&lt;TKey, TValue&gt; ^ dictionary, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="dictionary">
          <span data-ttu-id="a2bf8-202">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.SortedList`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-202">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="a2bf8-203">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-203">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="a2bf8-204">-または-  キーの型に既定の <see cref="T:System.Collections.Generic.Comparer`1" /> を使用する場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-204">-or-  <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.Comparer`1" /> for the type of the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-205">指定した <see cref="T:System.Collections.Generic.SortedList`2" /> からコピーした要素を格納し、コピーした要素の数を格納できるだけの容量を備え、指定した <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-205">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" />, has sufficient capacity to accommodate the number of elements copied, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-206">内のすべてのキー、<xref:System.Collections.Generic.SortedList%602>に従って、指定された一意である必要がありますの比較子です。 同様に、ソース内のすべてのキー`dictionary`指定した比較子に従って一意もする必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-206">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer; likewise, every key in the source `dictionary` must also be unique according to the specified comparer.</span></span>  
  
 <span data-ttu-id="a2bf8-207">新しい容量<xref:System.Collections.Generic.SortedList%602>内の要素の数に設定されている`dictionary`ので、サイズ変更は行われませんリストが設定されているときにします。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-207">The capacity of the new <xref:System.Collections.Generic.SortedList%602> is set to the number of elements in `dictionary`, so no resizing takes place while the list is being populated.</span></span>  
  
 <span data-ttu-id="a2bf8-208">場合内のデータ`dictionary`が並べ替えられて、このコンス トラクターは、O (`n`) 操作、場所`n`内の要素の数は、`dictionary`です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-208">If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`.</span></span> <span data-ttu-id="a2bf8-209">それ以外の場合これは、O (`n`\*`n`) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-209">Otherwise it is an O(`n`\*`n`) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-210">次のコード例は、使用する方法を示しています。<xref:System.Collections.Generic.SortedList%602>大文字小文字の区別を作成する、大文字と小文字の情報は、のコピーを並べ替える<xref:System.Collections.Generic.Dictionary%602>、を渡すことによって、<xref:System.Collections.Generic.Dictionary%602>を、<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-210">The following code example shows how to use <xref:System.Collections.Generic.SortedList%602> to create a case-insensitive sorted copy of the information in a case-insensitive <xref:System.Collections.Generic.Dictionary%602>, by passing the <xref:System.Collections.Generic.Dictionary%602> to the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="a2bf8-211">この例では大文字と小文字の比較子は、現在のカルチャです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-211">In this example, the case-insensitive comparers are for the current culture.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_IDicIComp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_IDicIComp/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_IDicIComp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_IDicIComp/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2bf8-212">
            <paramref name="dictionary" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-212">
              <paramref name="dictionary" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a2bf8-213">
            <paramref name="dictionary" /> には 1 つまたは複数の重複するキーが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-213">
              <paramref name="dictionary" /> contains one or more duplicate keys.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (int capacity, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, class System.Collections.Generic.IComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, comparer As IComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(int capacity, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="a2bf8-214">
            <see cref="T:System.Collections.Generic.SortedList`2" /> が格納できる要素数の初期値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-214">The initial number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="a2bf8-215">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-215">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="a2bf8-216">-または-  キーの型に既定の <see cref="T:System.Collections.Generic.Comparer`1" /> を使用する場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-216">-or-  <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.Comparer`1" /> for the type of the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-217">空で、指定した初期量を備え、指定した <see cref="T:System.Collections.Generic.SortedList`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-217">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-218">内のすべてのキー、<xref:System.Collections.Generic.SortedList%602>指定した比較子に従って一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-218">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer.</span></span>  
  
 <span data-ttu-id="a2bf8-219">容量、<xref:System.Collections.Generic.SortedList%602>は要素の数を<xref:System.Collections.Generic.SortedList%602>のサイズを変更する前に保持できます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-219">The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing.</span></span> <span data-ttu-id="a2bf8-220">要素が追加されるにつれて、<xref:System.Collections.Generic.SortedList%602>容量を増やすは自動的に内部の配列を再割り当てによる要求どおりです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-220">As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="a2bf8-221">コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-221">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-222">呼び出すことによって、容量を削減できる<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>かを設定して、<xref:System.Collections.Generic.SortedList%602.Capacity%2A>プロパティに明示的にします。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-222">The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="a2bf8-223">メモリを再割り当ての容量を削減し、内のすべての要素をコピー、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-223">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-224">このコンス トラクターは、O (`n`) 操作では、ここで`n`は`capacity`します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-224">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-225">次のコード例では、5 と大文字と小文字の比較子の現在のカルチャの初期量を並べ替えられたリストを作成します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-225">The following code example creates a sorted list with an initial capacity of 5 and a case-insensitive comparer for the current culture.</span></span> <span data-ttu-id="a2bf8-226">例では、小文字のキーを使用して一部使用と、大文字のキーを使用して一部を使用する、4 つの要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-226">The example adds four elements, some with lower-case keys and some with upper-case keys.</span></span> <span data-ttu-id="a2bf8-227">大文字小文字によってのみ、既存のキーとは異なるキーを持つ要素を追加する操作は、結果として得られる例外をキャッチし、エラー メッセージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-227">The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</span></span> <span data-ttu-id="a2bf8-228">最後に、例では、大文字と小文字の並べ替え順序において、要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-228">Finally, the example displays the elements in case-insensitive sort order.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_Int32IComp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_Int32IComp/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_Int32IComp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_Int32IComp/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2bf8-229">
            <paramref name="capacity" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-229">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Capacity" />
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(TKey key, TValue value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Add(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2bf8-230">追加する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-230">The key of the element to add.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a2bf8-231">追加する要素の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-231">The value of the element to add.</span>
          </span>
          <span data-ttu-id="a2bf8-232">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-232">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-233">指定したキーおよび値を持つ要素を <see cref="T:System.Collections.Generic.SortedList`2" /> に追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-233">Adds an element with the specified key and value into the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-234">キーには`null`、ですが場合の値が並べ替えられたリスト内の値の型`TValue`参照型であります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-234">A key cannot be `null`, but a value can be, if the type of values in the sorted list, `TValue`, is a reference type.</span></span>  
  
 <span data-ttu-id="a2bf8-235">使用することも、<xref:System.Collections.Generic.SortedList%602.Item%2A>にキーの値を設定して、新しい要素を追加するプロパティが存在しません、 <xref:System.Collections.Generic.SortedList%602>。 たとえば、`myCollection["myNonexistentKey"] = myValue`です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-235">You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="a2bf8-236">ただしで指定したキーが既に存在する場合、 <xref:System.Collections.Generic.SortedList%602>、設定、<xref:System.Collections.Generic.SortedList%602.Item%2A>プロパティに古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-236">However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="a2bf8-237">これに対し、<xref:System.Collections.Generic.SortedList%602.Add%2A>メソッドでは、既存の要素は変更しません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-237">In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="a2bf8-238">場合<xref:System.Collections.Generic.SortedList%602.Count%2A>既に同じ<xref:System.Collections.Generic.SortedList%602.Capacity%2A>、容量、<xref:System.Collections.Generic.SortedList%602>内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-238">If <xref:System.Collections.Generic.SortedList%602.Count%2A> already equals <xref:System.Collections.Generic.SortedList%602.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.SortedList%602> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="a2bf8-239">このメソッドは、O (`n`)、並べ替えられていないデータの操作を`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-239">This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="a2bf8-240">これは、O (ログ`n`) 操作の場合は、新しい要素は、リストの末尾に追加します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-240">It is an O(log `n`) operation if the new element is added at the end of the list.</span></span> <span data-ttu-id="a2bf8-241">カーソルでは、サイズ変更が発生する場合、操作は O (`n`)。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-241">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-242">次のコード例は、空を作成<xref:System.Collections.Generic.SortedList%602>string キーと使用方法を使用した文字列の<xref:System.Collections.Generic.SortedList%602.Add%2A>をいくつかの要素を追加するメソッド。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-242">The following code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="a2bf8-243">この例では、ことを示します、<xref:System.Collections.Generic.SortedList%602.Add%2A>メソッドがスローされます、<xref:System.ArgumentException>重複するキーを追加しようとするとき。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-243">The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="a2bf8-244">このコード例に示されている例の一部である、<xref:System.Collections.Generic.SortedList%602>クラスです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-244">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#2)]
 [!code-csharp[Generic.SortedList#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#2)]
 [!code-vb[Generic.SortedList#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2bf8-245">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-245">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a2bf8-246">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.SortedList`2" /> に既に存在します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-246">An element with the same key already exists in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Item(`0)" />
        <altmember cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-247">
            <see cref="T:System.Collections.Generic.SortedList`2" /> に格納できる要素の数を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-247">Gets or sets the number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2bf8-248">
            <see cref="T:System.Collections.Generic.SortedList`2" /> に格納できる要素の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-248">The number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-249"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 要素の数を<xref:System.Collections.Generic.SortedList%602>格納できます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-249"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store.</span></span> <span data-ttu-id="a2bf8-250"><xref:System.Collections.Generic.SortedList%602.Count%2A> 実際には、要素の数、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-250"><xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-251"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 常により大きいまたは等しい<xref:System.Collections.Generic.SortedList%602.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-251"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="a2bf8-252">場合<xref:System.Collections.Generic.SortedList%602.Count%2A>を超える<xref:System.Collections.Generic.SortedList%602.Capacity%2A>前の要素をコピーし、新しい要素を追加する前に、内部の配列を自動的に再割り当てして要素を追加するには、中に容量が増加します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-252">If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="a2bf8-253">呼び出すことによって、容量を削減できる<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>かを設定して、<xref:System.Collections.Generic.SortedList%602.Capacity%2A>プロパティに明示的にします。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-253">The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="a2bf8-254">ときに、値の<xref:System.Collections.Generic.SortedList%602.Capacity%2A>が設定されている、明示的に指定した容量、それに合わせて内部の配列が再割り当てもします。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-254">When the value of <xref:System.Collections.Generic.SortedList%602.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</span></span>  
  
 <span data-ttu-id="a2bf8-255">このプロパティの値を取得する場合は、o (1) 操作です。O は、プロパティの設定 (`n`) 操作、場所`n`新しい容量します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-255">Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2bf8-256">
            <see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> は <see cref="P:System.Collections.Generic.SortedList`2.Count" /> より小さい値に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-256">
              <see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.Generic.SortedList`2.Count" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="a2bf8-257">システムで使用可能なメモリが不足しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-257">There is not enough memory available on the system.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Count" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.TrimExcess" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-258">
            <see cref="T:System.Collections.Generic.SortedList\`2" /> からすべての要素を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-258">Removes all elements from the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-259"><xref:System.Collections.Generic.SortedList%602.Count%2A> 0 に設定し、コレクションの要素から他のオブジェクトへの参照も解放します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-259"><xref:System.Collections.Generic.SortedList%602.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="a2bf8-260"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 変更されません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-260"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="a2bf8-261">容量をリセットする、 <xref:System.Collections.Generic.SortedList%602>、呼び出す<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>設定や、<xref:System.Collections.Generic.SortedList%602.Capacity%2A>プロパティを直接です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-261">To reset the capacity of the <xref:System.Collections.Generic.SortedList%602>, call <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or set the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property directly.</span></span> <span data-ttu-id="a2bf8-262">空のトリミング<xref:System.Collections.Generic.SortedList%602>のキャパシティを設定、<xref:System.Collections.Generic.SortedList%602>を既定の容量。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-262">Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.</span></span>  
  
 <span data-ttu-id="a2bf8-263">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-263">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.TrimExcess" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IComparer&lt;TKey&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-264">並べ替えられたリストの <see cref="T:System.Collections.Generic.IComparer`1" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-264">Gets the <see cref="T:System.Collections.Generic.IComparer`1" /> for the sorted list.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2bf8-265">現在の <see cref="T:System.IComparable`1" /> の <see cref="T:System.Collections.Generic.SortedList`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-265">The <see cref="T:System.IComparable`1" /> for the current <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-266">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-266">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(TKey key);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2bf8-267">
            <see cref="T:System.Collections.Generic.SortedList\`2" /> 内で検索されるキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-267">The key to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-268">
            <see cref="T:System.Collections.Generic.SortedList`2" /> に特定のキーが格納されているかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-268">Determines whether the <see cref="T:System.Collections.Generic.SortedList`2" /> contains a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2bf8-269">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedList`2" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-269">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.SortedList`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-270">このメソッドは、O (ログ`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-270">This method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-271">次のコード例を使用する方法を示しています、<xref:System.Collections.Generic.SortedList%602.ContainsKey%2A>メソッドを呼び出す前に、キーが存在するかどうかをテストする、<xref:System.Collections.Generic.SortedList%602.Add%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-271">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.SortedList%602.Add%2A> method.</span></span> <span data-ttu-id="a2bf8-272">使用する方法も示します、<xref:System.Collections.Generic.SortedList%602.TryGetValue%2A>を効率よくプログラム頻繁にしようとすると、並べ替えられたリストに含まれていないキーの値を取得するには、値を取得するメソッド。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-272">It also shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the sorted list.</span></span> <span data-ttu-id="a2bf8-273">さらに、その説明をテストする最も非効率的な方法では、<xref:System.Collections.Generic.SortedList%602.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-273">Finally, it shows the least efficient way to test whether keys exist, by using the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#).</span></span>  
  
 <span data-ttu-id="a2bf8-274">このコード例に示されている例の一部である、<xref:System.Collections.Generic.SortedList%602>クラスです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-274">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#6](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#6)]
 [!code-csharp[Generic.SortedList#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#6)]
 [!code-vb[Generic.SortedList#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#6)]  
[!code-cpp[Generic.SortedList#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#5)]
[!code-csharp[Generic.SortedList#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#5)]
[!code-vb[Generic.SortedList#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#5)]  
[!code-cpp[Generic.SortedList#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#4)]
[!code-csharp[Generic.SortedList#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#4)]
[!code-vb[Generic.SortedList#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2bf8-275">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-275">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
      </Docs>
    </Member>
    <Member MemberName="ContainsValue">
      <MemberSignature Language="C#" Value="public bool ContainsValue (TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsValue(!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsValue (value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsValue(TValue value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="a2bf8-276">
            <see cref="T:System.Collections.Generic.SortedList\`2" /> 内で検索される値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-276">The value to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
          <span data-ttu-id="a2bf8-277">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-277">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-278">
            <see cref="T:System.Collections.Generic.SortedList`2" /> に特定の値が格納されているかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-278">Determines whether the <see cref="T:System.Collections.Generic.SortedList`2" /> contains a specific value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2bf8-279">指定した値を持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedList`2" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-279">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.SortedList`2" /> contains an element with the specified value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-280">このメソッドは、既定の比較子を使用して等しいかどうかを決定<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>値型の`TValue`します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-280">This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for the value type `TValue`.</span></span>  <span data-ttu-id="a2bf8-281"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 値を入力するかどうかを確認`TValue`実装<xref:System.IComparable%601?displayProperty=nameWithType>使用可能な場合は、その実装を使用しています。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-281"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="a2bf8-282">ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>値を入力するかどうかを確認`TValue`実装<xref:System.IComparable?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-282">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="a2bf8-283">型の値場合`TValue`はいずれのインターフェイスでは、このメソッドを使用して実装されていない<xref:System.Object.Equals%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-283">If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="a2bf8-284">このメソッドは、一方向の検索を実行します。したがって、平均実行時間に比例して<xref:System.Collections.Generic.SortedList%602.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-284">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="a2bf8-285">つまり、このメソッドは、O (`n`) 操作、場所`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-285">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-286">
            <see cref="T:System.Collections.Generic.SortedList`2" /> に格納されているキー/値ペアの数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-286">Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2bf8-287">
            <see cref="T:System.Collections.Generic.SortedList`2" /> に格納されているキー/値ペアの数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-287">The number of key/value pairs contained in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-288"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 要素の数を<xref:System.Collections.Generic.SortedList%602>格納できます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-288"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store.</span></span> <span data-ttu-id="a2bf8-289"><xref:System.Collections.Generic.SortedList%602.Count%2A> 実際には、要素の数、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-289"><xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-290"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 常により大きいまたは等しい<xref:System.Collections.Generic.SortedList%602.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-290"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="a2bf8-291">場合<xref:System.Collections.Generic.SortedList%602.Count%2A>を超える<xref:System.Collections.Generic.SortedList%602.Capacity%2A>前の要素をコピーし、新しい要素を追加する前に、内部の配列を自動的に再割り当てして要素を追加するには、中に容量が増加します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-291">If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="a2bf8-292">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-292">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of TKey, TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-293">
            <see cref="T:System.Collections.Generic.SortedList`2" /> を反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-293">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2bf8-294">
            <see cref="T:System.Collections.Generic.IEnumerator`1" /> の <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の <see cref="T:System.Collections.Generic.SortedList`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-294">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> for the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-295">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual Basic で)、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-295">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="a2bf8-296">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-296">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="a2bf8-297">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-297">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="a2bf8-298">ディクショナリは、内部ツリーを使用して並べ替え順序で維持されます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-298">The dictionary is maintained in a sorted order using an internal tree.</span></span> <span data-ttu-id="a2bf8-299">すべての新しい要素は、正しい並べ替えの位置に配置し、要素が削除されるたびに、並べ替え順序を維持するために、ツリーを調整します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-299">Every new element is positioned at the correct sort position, and the tree is adjusted to maintain the sort order whenever an element is removed.</span></span> <span data-ttu-id="a2bf8-300">列挙中は、並べ替え順序は維持されます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-300">While enumerating, the sort order is maintained.</span></span>  
  
 <span data-ttu-id="a2bf8-301">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-301">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="a2bf8-302">この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-302">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="a2bf8-303">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-303">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="a2bf8-304"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-304"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="a2bf8-305"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-305"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="a2bf8-306">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-306">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="a2bf8-307">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>返す`false`です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-307">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> return `false`.</span></span> <span data-ttu-id="a2bf8-308">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.IEnumerator%601.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-308">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="a2bf8-309"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-309">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="a2bf8-310">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-310">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a2bf8-311">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-311">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="a2bf8-312">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-312">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a2bf8-313">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-313">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="a2bf8-314">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-314">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="a2bf8-315">既定の実装のコレクションの<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-315">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="a2bf8-316">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-316">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public int IndexOfKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfKey (key As TKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfKey(TKey key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2bf8-317">
            <see cref="T:System.Collections.Generic.SortedList\`2" /> 内で検索されるキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-317">The key to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-318">指定したキーを検索し、<see cref="T:System.Collections.Generic.SortedList`2" /> 全体内でそのキーが見つかった位置の 0 から始まるインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-318">Searches for the specified key and returns the zero-based index within the entire <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2bf8-319">
            <paramref name="key" /> 全体内で <see cref="T:System.Collections.Generic.SortedList`2" /> が見つかった場合は、見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-319">The zero-based index of <paramref name="key" /> within the entire <see cref="T:System.Collections.Generic.SortedList`2" />, if found; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-320">このメソッドは、バイナリ検索を実行します。そのため、このメソッドは、O (ログ`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-320">This method performs a binary search; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2bf8-321">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-321">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfValue">
      <MemberSignature Language="C#" Value="public int IndexOfValue (TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfValue(!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfValue (value As TValue) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfValue(TValue value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="a2bf8-322">
            <see cref="T:System.Collections.Generic.SortedList\`2" /> 内で検索される値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-322">The value to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
          <span data-ttu-id="a2bf8-323">参照型の場合は <see langword="null" /> の値を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-323">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-324">指定した値を検索し、<see cref="T:System.Collections.Generic.SortedList`2" /> 全体内で最初に見つかった位置の 0 から始まるインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-324">Searches for the specified value and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2bf8-325">
            <paramref name="value" /> 全体を対象に <see cref="T:System.Collections.Generic.SortedList`2" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-325">The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Collections.Generic.SortedList`2" />, if found; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-326">このメソッドは、既定の比較子を使用して等しいかどうかを決定<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>値型の`TValue`します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-326">This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for the value type `TValue`.</span></span>  <span data-ttu-id="a2bf8-327"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 値を入力するかどうかを確認`TValue`実装<xref:System.IComparable%601?displayProperty=nameWithType>使用可能な場合は、その実装を使用しています。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-327"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="a2bf8-328">ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>値を入力するかどうかを確認`TValue`実装<xref:System.IComparable?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-328">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="a2bf8-329">型の値場合`TValue`はいずれのインターフェイスでは、このメソッドを使用して実装されていない<xref:System.Object.Equals%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-329">If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="a2bf8-330">このメソッドは、一方向の検索を実行します。したがって、平均実行時間に比例して<xref:System.Collections.Generic.SortedList%602.Count%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-330">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="a2bf8-331">つまり、このメソッドは、O (`n`) 操作、場所`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-331">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[TKey] { TValue get(TKey key); void set(TKey key, TValue value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Item(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2bf8-332">値を取得または設定する対象のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-332">The key whose value to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-333">指定されたキーに関連付けられている値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-333">Gets or sets the value associated with the specified key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2bf8-334">指定されたキーに関連付けられている値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-334">The value associated with the specified key.</span>
          </span>
          <span data-ttu-id="a2bf8-335">指定したキーが見つからなかった場合、get 操作は <see cref="T:System.Collections.Generic.KeyNotFoundException" /> をスローし、set 操作は指定したキーを使用して新しい要素を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-335">If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" /> and a set operation creates a new element using the specified key.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-336">このプロパティでは、`myCollection[key]` という構文を使用して、コレクション内の特定の要素にアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-336">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="a2bf8-337">キーには`null`、ですが場合の値が一覧で、値の型`TValue`参照型であります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-337">A key cannot be `null`, but a value can be, if the type of values in the list, `TValue`, is a reference type.</span></span>  
  
 <span data-ttu-id="a2bf8-338">キーでが見つからない場合、値を取得するときに<xref:System.Collections.Generic.KeyNotFoundException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-338">If the key is not found when a value is being retrieved, <xref:System.Collections.Generic.KeyNotFoundException> is thrown.</span></span> <span data-ttu-id="a2bf8-339">キーが見つからない場合、値が設定されている場合は、キーと値が追加されます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-339">If the key is not found when a value is being set, the key and value are added.</span></span>  
  
 <span data-ttu-id="a2bf8-340">使用することも、<xref:System.Collections.Generic.SortedList%602.Item%2A>にキーの値を設定して、新しい要素を追加するプロパティが存在しません、 <xref:System.Collections.Generic.SortedList%602>。 たとえば、`myCollection["myNonexistentKey"] = myValue`です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-340">You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="a2bf8-341">ただしで指定したキーが既に存在する場合、 <xref:System.Collections.Generic.SortedList%602>、設定、<xref:System.Collections.Generic.SortedList%602.Item%2A>プロパティに古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-341">However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="a2bf8-342">これに対し、<xref:System.Collections.Generic.SortedList%602.Add%2A>メソッドでは、既存の要素は変更しません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-342">In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="a2bf8-343">C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、<xref:System.Collections.Generic.SortedList%602.Item%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-343">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.Item%2A> property.</span></span> <span data-ttu-id="a2bf8-344">Visual Basic は、<xref:System.Collections.Generic.SortedList%602.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-344">Visual Basic implements <xref:System.Collections.Generic.SortedList%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="a2bf8-345">このプロパティの値を取得する場合は、O (ログ`n`) 操作、n は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-345">Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="a2bf8-346">プロパティの設定は、O (ログ`n`) 操作の場合は、キーは既に、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-346">Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="a2bf8-347">キーがない場合、一覧で、プロパティの設定は O (`n`)、並べ替えられていないデータまたは O の操作 (ログ`n`) 場合は、新しい要素は、リストの末尾に追加します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-347">If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list.</span></span> <span data-ttu-id="a2bf8-348">カーソルでは、サイズ変更が発生する場合、操作は O (`n`)。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-348">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-349">次のコード例では、<xref:System.Collections.Generic.SortedList%602.Item%2A>プロパティ (c# のインデクサー) を示す値を取得する、<xref:System.Collections.Generic.KeyNotFoundException>要求されたキーが存在しないと、値がキーに関連付けられていることを示すを置き換えることができる場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-349">The following code example uses the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="a2bf8-350">使用する方法も示します、<xref:System.Collections.Generic.SortedList%602.TryGetValue%2A>メソッドとして場合に、プログラムは多くの場合、並べ替えられたリストに含まれていないキーの値を試行する必要があります値を取得する方法がより効率的です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-350">The example also shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list.</span></span>  
  
 <span data-ttu-id="a2bf8-351">このコード例に示されている例の一部である、<xref:System.Collections.Generic.SortedList%602>クラスです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-351">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#3](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#3)]
 [!code-csharp[Generic.SortedList#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#3)]
 [!code-vb[Generic.SortedList#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#3)]  
[!code-cpp[Generic.SortedList#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#4)]
[!code-csharp[Generic.SortedList#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#4)]
[!code-vb[Generic.SortedList#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#4)]  
[!code-cpp[Generic.SortedList#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#5)]
[!code-csharp[Generic.SortedList#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#5)]
[!code-vb[Generic.SortedList#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2bf8-352">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-352">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="a2bf8-353">プロパティが取得されましたが、コレクション内に <paramref name="key" /> が存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-353">The property is retrieved and <paramref name="key" /> does not exist in the collection.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;TKey&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;!TKey&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As IList(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;TKey&gt; ^ Keys { System::Collections::Generic::IList&lt;TKey&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-354">並べ替えられた順序で、<see cref="T:System.Collections.Generic.SortedList`2" /> 内のキーを含むコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-354">Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.SortedList`2" />, in sorted order.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2bf8-355">
            <see cref="T:System.Collections.Generic.IList`1" /> 内のキーを格納している <see cref="T:System.Collections.Generic.SortedList`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-355">A <see cref="T:System.Collections.Generic.IList`1" /> containing the keys in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-356">内のキーの順序、<xref:System.Collections.Generic.IList%601>内での順序と同じ、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-356">The order of the keys in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-357">返された<xref:System.Collections.Generic.IList%601>静的コピーではありません。 代わりに、、<xref:System.Collections.Generic.IList%601>は元のキーを逆参照<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-357">The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the keys in the original <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="a2bf8-358">そのため、変更、<xref:System.Collections.Generic.SortedList%602>に反映されるまでに続行、<xref:System.Collections.Generic.IList%601>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-358">Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.</span></span>  
  
 <span data-ttu-id="a2bf8-359">によって返されるコレクション、<xref:System.Collections.Generic.SortedList%602.Keys%2A>プロパティがインデックスを使用してキーを取得する効率的な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-359">The collection returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property provides an efficient way to retrieve keys by index.</span></span> <span data-ttu-id="a2bf8-360">リストがキーの内部の配列のラッパーだけであるため、プロパティにアクセスするときにリストを再生成する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-360">It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of keys.</span></span> <span data-ttu-id="a2bf8-361">次のコードの使用を示しています、<xref:System.Collections.Generic.SortedList%602.Keys%2A>文字列キーを持つ要素の並べ替えられたリストからキーのインデックス検索のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-361">The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property for indexed retrieval of keys from a sorted list of elements with string keys:</span></span>  
  
 [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]
 [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]
 [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  
  
 <span data-ttu-id="a2bf8-362">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-362">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-363">次のコード例を使用して、並べ替えられたリスト内のキーを列挙する方法を示しています、<xref:System.Collections.Generic.SortedList%602.Keys%2A>プロパティ、およびキーと並べ替えられたリスト内の値を列挙する方法です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-363">The following code example shows how to enumerate the keys in the sorted list using the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property, and how to enumerate the keys and values in the sorted list.</span></span>  
  
 <span data-ttu-id="a2bf8-364">使用する方法も示します、<xref:System.Collections.Generic.SortedList%602.Keys%2A>キーの効率的なインデックス付きの取得のためのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-364">The example also shows how to use the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property for efficient indexed retrieval of keys.</span></span>  
  
 <span data-ttu-id="a2bf8-365">このコードは、コンパイルして実行することができる例の一部です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-365">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="a2bf8-366">「<xref:System.Collections.Generic.SortedList%602>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-366">See <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 [!code-cpp[Generic.SortedList#9](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#9)]
 [!code-csharp[Generic.SortedList#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#9)]
 [!code-vb[Generic.SortedList#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#9)]  
[!code-cpp[Generic.SortedList#7](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#7)]
[!code-csharp[Generic.SortedList#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#7)]
[!code-vb[Generic.SortedList#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IList`1" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Values" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(TKey key);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2bf8-367">削除する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-367">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-368">指定したキーを持つ要素を <see cref="T:System.Collections.Generic.SortedList`2" /> から削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-368">Removes the element with the specified key from the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2bf8-369">要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-369">
              <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="a2bf8-370">このメソッドは、元の <see langword="false" /> で <paramref name="key" /> が見つからなかった場合にも <see cref="T:System.Collections.Generic.SortedList`2" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-370">This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-371">このメソッドは、バイナリ検索を実行します。ただし、要素は上に移動、オープン スポットのため、このメソッドは O を埋めるために (`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-371">This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-372">次のコード例を使用して、並べ替えられたリストから、キー/値ペアを削除する方法を示しています、<xref:System.Collections.Generic.SortedList%602.Remove%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-372">The following code example shows how to remove a key/value pair from the sorted list using the <xref:System.Collections.Generic.SortedList%602.Remove%2A> method.</span></span>  
  
 <span data-ttu-id="a2bf8-373">このコード例に示されている例の一部である、<xref:System.Collections.Generic.SortedList%602>クラスです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-373">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#10](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#10)]
 [!code-csharp[Generic.SortedList#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#10)]
 [!code-vb[Generic.SortedList#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2bf8-374">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-374">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Clear" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="a2bf8-375">削除する要素の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-375">The zero-based index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-376">
            <see cref="T:System.Collections.Generic.SortedList`2" /> の指定したインデックスにある要素を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-376">Removes the element at the specified index of the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-377">このメソッドは、バイナリ検索を実行します。ただし、要素は上に移動、オープン スポットのため、このメソッドは O を埋めるために (`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-377">This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2bf8-378">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-378">
              <paramref name="index" /> is less than zero.</span>
          </span>
          <span data-ttu-id="a2bf8-379">-または-  <paramref name="index" /> が <see cref="P:System.Collections.Generic.SortedList`2.Count" /> 以上になっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-379">-or-  <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.SortedList`2.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Clear" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Add (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#Add(System.Collections.Generic.KeyValuePair{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Sub Add (keyValuePair As KeyValuePair(Of TKey, TValue)) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add(System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; keyValuePair) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#Contains(System.Collections.Generic.KeyValuePair{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Function Contains (keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains(System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; keyValuePair) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As KeyValuePair(Of TKey, TValue)(), arrayIndex As Integer) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo(cli::array &lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ array, int arrayIndex) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#Remove(System.Collections.Generic.KeyValuePair{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Function Remove (keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove(System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; keyValuePair) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;TKey&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary&lt;TKey,TValue&gt;#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As ICollection(Of TKey) Implements IDictionary(Of TKey, TValue).Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::ICollection&lt;TKey&gt; ^ System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys { System::Collections::Generic::ICollection&lt;TKey&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;TValue&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TValue&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary&lt;TKey,TValue&gt;#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As ICollection(Of TValue) Implements IDictionary(Of TKey, TValue).Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::ICollection&lt;TValue&gt; ^ System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values { System::Collections::Generic::ICollection&lt;TValue&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of TKey, TValue)) Implements IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;TKey&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TKey&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary&lt;TKey,TValue&gt;#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As IEnumerable(Of TKey) Implements IReadOnlyDictionary(Of TKey, TValue).Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::IEnumerable&lt;TKey&gt; ^ System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys { System::Collections::Generic::IEnumerable&lt;TKey&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;TValue&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TValue&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary&lt;TKey,TValue&gt;#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As IEnumerable(Of TValue) Implements IReadOnlyDictionary(Of TKey, TValue).Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::IEnumerable&lt;TValue&gt; ^ System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values { System::Collections::Generic::IEnumerable&lt;TValue&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="a2bf8-380">
            <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-380">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="a2bf8-381">
            <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-381">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="a2bf8-382">コピーの開始位置となる、<c>array</c> の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-382">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-383">
            <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。コピーは特定の <see cref="T:System.Array" /> のインデックスから開始されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-383">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a2bf8-384">場合、ソースの種類<xref:System.Collections.ICollection>変換先の型に自動的にキャストすることはできません`array`の非ジェネリックの実装<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>スロー<xref:System.InvalidCastException>汎用実装でスローされ、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-384">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="a2bf8-385">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-385">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2bf8-386">
            <paramref name="array" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-386">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2bf8-387">
            <paramref name="arrayIndex" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-387">
              <paramref name="arrayIndex" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a2bf8-388">
            <paramref name="array" /> が多次元です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-388">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="a2bf8-389">-または-  <paramref name="array" /> に 0 から始まるインデックス番号がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-389">-or-  <paramref name="array" /> does not have zero-based indexing.</span>
          </span>
          <span data-ttu-id="a2bf8-390">-または-  コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-390">-or-  The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="a2bf8-391">-または-  コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-391">-or-  The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-392">
            <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-392">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2bf8-393">
            <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-393">
              <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="a2bf8-394">
            <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-394">In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-395">既定の実装のコレクションの<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-395">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="a2bf8-396">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-396">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="a2bf8-397">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-397">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="a2bf8-398">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-398">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="a2bf8-399"><xref:System.Collections.ICollection.SyncRoot%2A>プロパティへのアクセスを同期するために使用できるオブジェクトを返します、<xref:System.Collections.ICollection>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-399">The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="a2bf8-400">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-400">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="a2bf8-401">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-401">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-402">
            <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-402">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2bf8-403">
            <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-403">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="a2bf8-404">
            <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-404">In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2" />, this property always returns the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-405">既定の実装のコレクションの<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-405">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="a2bf8-406">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-406">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a2bf8-407">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-407">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="a2bf8-408">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-408">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="a2bf8-409"><xref:System.Collections.ICollection.SyncRoot%2A>プロパティへのアクセスを同期するために使用できるオブジェクトを返します、<xref:System.Collections.ICollection>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-409">The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="a2bf8-410">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-410">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="a2bf8-411">次のコードの使用を示しています、 <xref:System.Collections.ICollection.SyncRoot%2A> c#、C++、および Visual Basic のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-411">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="a2bf8-412">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-412">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Add">
      <MemberSignature Language="C#" Value="void IDictionary.Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (key As Object, value As Object) Implements IDictionary.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Add(System::Object ^ key, System::Object ^ value) = System::Collections::IDictionary::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2bf8-413">追加する要素のキーとして使用する <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-413">The <see cref="T:System.Object" /> to use as the key of the element to add.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a2bf8-414">追加する要素の値として使用する <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-414">The <see cref="T:System.Object" /> to use as the value of the element to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-415">指定したキーおよび値を持つ要素を <see cref="T:System.Collections.IDictionary" /> オブジェクトに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-415">Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-416">使用することも、 <xref:System.Collections.IDictionary.Item%2A> ; ディクショナリに存在しないキーの値を設定して、新しい要素を追加するプロパティなど、`myCollection["myNonexistentKey"] = myValue`です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-416">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="a2bf8-417">ただし、ディクショナリ内で指定したキーが既に存在する場合は、設定、<xref:System.Collections.IDictionary.Item%2A>プロパティに古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-417">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="a2bf8-418">これに対し、<xref:System.Collections.IDictionary.Add%2A>メソッドでは、既存の要素は変更しません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-418">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="a2bf8-419">このメソッドは、O (`n`)、並べ替えられていないデータの操作を`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-419">This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="a2bf8-420">これは、O (ログ`n`) 操作の場合は、新しい要素は、リストの末尾に追加します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-420">It is an O(log `n`) operation if the new element is added at the end of the list.</span></span> <span data-ttu-id="a2bf8-421">カーソルでは、サイズ変更が発生する場合、操作は O (`n`)。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-421">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-422">次のコード例にアクセスする方法を示しています、<xref:System.Collections.Generic.SortedList%602>クラスを通じて、<xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-422">The following code example shows how to access the <xref:System.Collections.Generic.SortedList%602> class through the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="a2bf8-423">このコード例は、空を作成<xref:System.Collections.Generic.SortedList%602>string キーと使用方法を使用した文字列の<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>をいくつかの要素を追加するメソッド。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-423">The code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method to add some elements.</span></span> <span data-ttu-id="a2bf8-424">この例では、ことを示します、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>メソッドがスローされます、<xref:System.ArgumentException>が重複キーを追加しようとするとき、または、キーまたは正しくないデータ型の値が指定されている場合。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-424">The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key, or when a key or value of the wrong data type is supplied.</span></span>  
  
 <span data-ttu-id="a2bf8-425">他のいくつかのメンバーの使用のコード例を<xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-425">The code example demonstrates the use of several other members of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.IDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2bf8-426">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-426">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a2bf8-427">
            <paramref name="key" /> が、<see cref="T:System.Collections.IDictionary" /> のキーの型 <paramref name="TKey" /> に代入できない型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-427">
              <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
          <span data-ttu-id="a2bf8-428">-または-  <paramref name="value" /> が、<see cref="T:System.Collections.IDictionary" /> の値型 <paramref name="TValue" /> に代入できない型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-428">-or-  <paramref name="value" /> is of a type that is not assignable to the value type <paramref name="TValue" /> of the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
          <span data-ttu-id="a2bf8-429">-または-  同じキーを持つ要素が、<see cref="T:System.Collections.IDictionary" /> に既に存在します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-429">-or-  An element with the same key already exists in the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.IDictionary.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Contains">
      <MemberSignature Language="C#" Value="bool IDictionary.Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IDictionary.Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (key As Object) As Boolean Implements IDictionary.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IDictionary.Contains(System::Object ^ key) = System::Collections::IDictionary::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2bf8-430">
            <see cref="T:System.Collections.IDictionary" /> 内で検索されるキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-430">The key to locate in the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-431">指定したキーの要素が <see cref="T:System.Collections.IDictionary" /> に格納されているかどうかを確認します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-431">Determines whether the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2bf8-432">指定したキーを持つ要素を <see langword="true" /> が保持している場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-432">
              <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-433">このメソッドが戻る`false`場合`key`のキー型に割り当てることはできません型`TKey`の<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-433">This method returns `false` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-434">このメソッドは、O (ログ`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-434">This method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-435">次のコード例を使用する方法を示しています、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Contains%2A>のメソッド、<xref:System.Collections.IDictionary?displayProperty=nameWithType>とのインターフェイス、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-435">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Contains%2A> method of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="a2bf8-436">例は、メソッドを返す`false`不適切なデータ型のキーを指定した場合。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-436">The example demonstrates that the method returns `false` if a key of the wrong data type is supplied.</span></span>  
  
 <span data-ttu-id="a2bf8-437">コード例は、指定された出力を含む例の一部、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-437">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#6)]
[!code-vb[Generic.SortedList.IDictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#6)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2bf8-438">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-438">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IDictionaryEnumerator Implements IDictionary.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IDictionaryEnumerator ^ System.Collections.IDictionary.GetEnumerator() = System::Collections::IDictionary::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-439">
            <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-439">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2bf8-440">
            <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-440">An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-441">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual Basic で)、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-441">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="a2bf8-442">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-442">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="a2bf8-443">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-443">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="a2bf8-444">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-444">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="a2bf8-445"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-445"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="a2bf8-446">この位置では、<xref:System.Collections.IDictionaryEnumerator.Entry%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-446">At this position, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined.</span></span> <span data-ttu-id="a2bf8-447">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IDictionaryEnumerator.Entry%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-447">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Entry%2A>.</span></span>  
  
 <span data-ttu-id="a2bf8-448"><xref:System.Collections.IDictionaryEnumerator.Entry%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-448"><xref:System.Collections.IDictionaryEnumerator.Entry%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="a2bf8-449"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IDictionaryEnumerator.Entry%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-449"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the next element.</span></span>  
  
 <span data-ttu-id="a2bf8-450">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-450">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="a2bf8-451">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-451">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="a2bf8-452">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.IDictionaryEnumerator.Entry%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-452">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined.</span></span> <span data-ttu-id="a2bf8-453"><xref:System.Collections.IDictionaryEnumerator.Entry%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-453">To set <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="a2bf8-454">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-454">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a2bf8-455">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-455">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="a2bf8-456">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-456">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="a2bf8-457">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-457">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="a2bf8-458">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-458">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="a2bf8-459">既定の実装のコレクションの<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-459">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="a2bf8-460">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-460">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-461">次のコード例を使用して並べ替えられたリスト内のキー/値ペアを列挙する方法を示しています、`foreach`ステートメント (`For Each` Visual basic で`for each`C++ で)、列挙子の使用を非表示になります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-461">The following code example shows how to enumerate the key/value pairs in the sorted list by using the `foreach` statement (`For Each` in Visual Basic, `for each` in C++), which hides the use of the enumerator.</span></span> <span data-ttu-id="a2bf8-462">具体的には、なおの列挙子、<xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスを返します<xref:System.Collections.DictionaryEntry>オブジェクトなく<xref:System.Collections.Generic.KeyValuePair%602>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-462">In particular, note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.</span></span>  
  
 <span data-ttu-id="a2bf8-463">コード例は、指定された出力を含む例の一部、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-463">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#7)]
[!code-vb[Generic.SortedList.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#7)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.GetEnumerator" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IDictionary.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IDictionary.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-464">
            <see cref="T:System.Collections.IDictionary" /> が固定サイズかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-464">Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> has a fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2bf8-465">
            <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-465">
              <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="a2bf8-466">
            <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-466">In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-467">固定サイズのコレクションでは、コレクションの作成後に要素の追加または削除はできませんが、既存の要素の変更はできます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-467">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="a2bf8-468">固定サイズ コレクションが追加および削除する要素を防止するラッパーで単純なコレクションそのための追加または削除、要素を含む、基になるコレクションが変更された場合、固定サイズ コレクションにはそれらの変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-468">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="a2bf8-469">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-469">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.IDictionary.IsFixedSize" />
        <altmember cref="P:System.Collections.IDictionary.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IDictionary.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IDictionary.IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-470">
            <see cref="T:System.Collections.IDictionary" /> が読み取り専用かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-470">Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2bf8-471">
            <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-471">
              <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="a2bf8-472">
            <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-472">In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-473">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-473">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="a2bf8-474">読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-474">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="a2bf8-475">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-475">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.IDictionary.IsReadOnly" />
        <altmember cref="P:System.Collections.IDictionary.IsFixedSize" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IDictionary.Item[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IDictionary.Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(key As Object) As Object Implements IDictionary.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IDictionary.Item[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2bf8-476">取得または設定する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-476">The key of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-477">指定したキーを持つ要素を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-477">Gets or sets the element with the specified key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2bf8-478">指定したキーを持つ要素。<see langword="null" /> がディクショナリに存在しない場合、または <paramref name="key" /> が <paramref name="key" /> のキーの型 <paramref name="TKey" /> に代入できない型である場合は <see cref="T:System.Collections.Generic.SortedList`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-478">The element with the specified key, or <see langword="null" /> if <paramref name="key" /> is not in the dictionary or <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-479">このプロパティを返します`null`場合`key`のキー型に割り当てることはできません型`TKey`の<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-479">This property returns `null` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-480">このプロパティでは、`myCollection[key]` という構文を使用して、コレクション内の特定の要素にアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-480">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="a2bf8-481">使用することも、 <xref:System.Collections.IDictionary.Item%2A> ; ディクショナリに存在しないキーの値を設定して、新しい要素を追加するプロパティなど、`myCollection["myNonexistentKey"] = myValue`です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-481">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="a2bf8-482">ただし、ディクショナリ内で指定したキーが既に存在する場合は、設定、<xref:System.Collections.IDictionary.Item%2A>プロパティに古い値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-482">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="a2bf8-483">これに対し、<xref:System.Collections.IDictionary.Add%2A>メソッドでは、既存の要素は変更しません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-483">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="a2bf8-484">C# 言語を使用して、[この](~/docs/csharp/language-reference/keywords/this.md)キーワードを実装する代わりに、インデクサーの定義、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-484">The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> property.</span></span> <span data-ttu-id="a2bf8-485">Visual Basic は、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-485">Visual Basic implements <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="a2bf8-486">このプロパティの値を取得する場合は、O (ログ`n`) 操作、n は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-486">Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="a2bf8-487">プロパティの設定は、O (ログ`n`) 操作の場合は、キーは既に、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-487">Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="a2bf8-488">キーがない場合、一覧で、プロパティの設定は O (`n`)、並べ替えられていないデータまたは O の操作 (ログ`n`) 場合は、新しい要素は、リストの末尾に追加します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-488">If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list.</span></span> <span data-ttu-id="a2bf8-489">カーソルでは、サイズ変更が発生する場合、操作は O (`n`)。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-489">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-490">次のコード例を使用する方法を示しています、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A>のプロパティ (c# のインデクサー)、<xref:System.Collections.IDictionary?displayProperty=nameWithType>とのインターフェイス、 <xref:System.Collections.Generic.SortedList%602>、および方法は、プロパティと異なります、<xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-490">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> property (the indexer in C#) of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedList%602>, and ways the property differs from the <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a2bf8-491">同様に、例、<xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType>プロパティ、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType>プロパティが既存のキーに関連付けられている値を変更でき、指定したキーが並べ替えられたリスト内にない場合は、新しいキー/値ペアを追加するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-491">The example shows that, like the <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType> property, the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> property can change the value associated with an existing key and can be used to add a new key/value pair if the specified key is not in the sorted list.</span></span> <span data-ttu-id="a2bf8-492">示しますとは異なり、<xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType>プロパティ、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType>場合に、プロパティが例外をスローしません`key`が並べ替えられたリストに返されない、null 参照代わりにします。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-492">The example also shows that unlike the <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType> property, the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> property does not throw an exception if `key` is not in the sorted list, returning a null reference instead.</span></span> <span data-ttu-id="a2bf8-493">最後に、この例はその作業、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType>場合、プロパティが null 参照を返します`key`正しいデータ型ではないと、プロパティの設定は例外をスロー`key`正しいデータ型ではありません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-493">Finally, the example demonstrates that getting the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> property returns a null reference if `key` is not the correct data type, and that setting the property throws an exception if `key` is not the correct data type.</span></span>  
  
 <span data-ttu-id="a2bf8-494">コード例は、指定された出力を含む例の一部、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-494">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#3)]
[!code-vb[Generic.SortedList.IDictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#3)]  
[!code-csharp[Generic.SortedList.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.SortedList.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#4)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2bf8-495">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-495">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a2bf8-496">値を代入しようとしていますが、<paramref name="key" /> は、<see cref="T:System.Collections.Generic.SortedList`2" /> のキーの型 <paramref name="TKey" /> に代入できない型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-496">A value is being assigned, and <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
          <span data-ttu-id="a2bf8-497">-または-  値を代入しようとしていますが、<paramref name="value" /> は、<see cref="T:System.Collections.Generic.SortedList`2" /> の値型 <paramref name="TValue" /> に代入できない型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-497">-or-  A value is being assigned, and <paramref name="value" /> is of a type that is not assignable to the value type <paramref name="TValue" /> of the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Item(`0)" />
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Keys">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As ICollection Implements IDictionary.Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System.Collections.IDictionary.Keys { System::Collections::ICollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-498">
            <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-498">Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2bf8-499">
            <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-499">An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-500">内のキーの順序、<xref:System.Collections.ICollection>内での順序と同じ、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-500">The order of the keys in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-501">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-501">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-502">次のコード例を使用する方法を示しています、<xref:System.Collections.IDictionary.Keys%2A>のプロパティ、<xref:System.Collections.IDictionary?displayProperty=nameWithType>とのインターフェイス、<xref:System.Collections.Generic.SortedDictionary%602>ディクショナリのキーを一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-502">The following code example shows how to use the <xref:System.Collections.IDictionary.Keys%2A> property of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedDictionary%602>, to list the keys in the dictionary.</span></span> <span data-ttu-id="a2bf8-503">この例では、並べ替えられたリスト内のキー/値ペアを列挙する方法も示していますなおの列挙子、<xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスを返します<xref:System.Collections.DictionaryEntry>オブジェクトなく<xref:System.Collections.Generic.KeyValuePair%602>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-503">The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.</span></span>  
  
 <span data-ttu-id="a2bf8-504">コード例は、指定された出力を含む例の一部、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-504">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#9)]
[!code-vb[Generic.SortedList.IDictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#9)]  
[!code-csharp[Generic.SortedList.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#7)]
[!code-vb[Generic.SortedList.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#7)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Keys" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Values" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Remove">
      <MemberSignature Language="C#" Value="void IDictionary.Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (key As Object) Implements IDictionary.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Remove(System::Object ^ key) = System::Collections::IDictionary::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2bf8-505">削除する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-505">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-506">指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> から削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-506">Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-507">このメソッドは、バイナリ検索を実行します。ただし、要素は上に移動、オープン スポットのため、このメソッドは O を埋めるために (`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-507">This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-508">次のコード例を使用する方法を示しています、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Remove%2A>の<xref:System.Collections.IDictionary?displayProperty=nameWithType>とのインターフェイス、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-508">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Remove%2A> of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-509">コード例は、指定された出力を含む例の一部、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-509">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#10)]
[!code-vb[Generic.SortedList.IDictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#10)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2bf8-510">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-510">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Values">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As ICollection Implements IDictionary.Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System.Collections.IDictionary.Values { System::Collections::ICollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-511">
            <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-511">Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2bf8-512">
            <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-512">An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-513">内の値の順序、<xref:System.Collections.ICollection>内での順序と同じ、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-513">The order of the values in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-514">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-514">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-515">次のコード例を使用する方法を示しています、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Values%2A>のプロパティ、<xref:System.Collections.IDictionary?displayProperty=nameWithType>とのインターフェイス、 <xref:System.Collections.Generic.SortedList%602>、並べ替えられたリスト内の値の一覧を表示します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-515">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Values%2A> property of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedList%602>, to list the values in the sorted list.</span></span> <span data-ttu-id="a2bf8-516">この例では、並べ替えられたリスト内のキー/値ペアを列挙する方法も示していますなおの列挙子、<xref:System.Collections.IDictionary?displayProperty=nameWithType>インターフェイスを返します<xref:System.Collections.DictionaryEntry>オブジェクトなく<xref:System.Collections.Generic.KeyValuePair%602>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-516">The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.</span></span>  
  
 <span data-ttu-id="a2bf8-517">コード例は、指定された出力を含む例の一部、<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-517">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#8)]
[!code-vb[Generic.SortedList.IDictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#8)]  
[!code-csharp[Generic.SortedList.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#7)]
[!code-vb[Generic.SortedList.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#7)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Keys" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Values" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-518">コレクションを反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-518">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2bf8-519">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-519">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-520">`foreach` C# 言語のステートメント (`for each` C++ では、 `For Each` Visual Basic で)、列挙子の複雑さが隠されています。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-520">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="a2bf8-521">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-521">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="a2bf8-522">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-522">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="a2bf8-523">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-523">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="a2bf8-524"><xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-524"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="a2bf8-525">この位置では、<xref:System.Collections.IEnumerator.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-525">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="a2bf8-526">そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-526">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="a2bf8-527"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-527"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="a2bf8-528"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-528"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="a2bf8-529">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-529">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="a2bf8-530">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-530">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="a2bf8-531">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-531">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="a2bf8-532"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-532">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="a2bf8-533">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-533">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a2bf8-534">無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-534">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="a2bf8-535">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-535">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="a2bf8-536">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-536">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="a2bf8-537">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-537">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="a2bf8-538">既定の実装のコレクションの<xref:System.Collections.Generic?displayProperty=nameWithType>が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-538">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="a2bf8-539">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-539">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-540">
            <see cref="T:System.Collections.Generic.SortedList`2" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-540">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.SortedList`2" />, if that number is less than 90 percent of current capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-541">このメソッドは、コレクションのメモリ オーバーヘッドを最小要素がコレクションに追加されない場合に使用できます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-541">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="a2bf8-542">再割り当てすることや、大規模なコピーのコスト<xref:System.Collections.Generic.SortedList%602>考慮する必要が、ただし、ため、<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>メソッドは何もリストが容量の 90% 以上である場合。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-542">The cost of reallocating and copying a large <xref:System.Collections.Generic.SortedList%602> can be considerable, however, so the <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="a2bf8-543">これは、比較的小さい向上のための大規模な再割り当てコストをかけず回避できます。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-543">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="a2bf8-544">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-544">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 <span data-ttu-id="a2bf8-545">リセットする、<xref:System.Collections.Generic.SortedList%602>を初期状態に呼び出し、<xref:System.Collections.Generic.SortedList%602.Clear%2A>メソッドを呼び出す前に<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-545">To reset a <xref:System.Collections.Generic.SortedList%602> to its initial state, call the <xref:System.Collections.Generic.SortedList%602.Clear%2A> method before calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method.</span></span> <span data-ttu-id="a2bf8-546">空のトリミング<xref:System.Collections.Generic.SortedList%602>のキャパシティを設定、<xref:System.Collections.Generic.SortedList%602>を既定の容量。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-546">Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.</span></span>  
  
 <span data-ttu-id="a2bf8-547">使用して、容量を設定することも、<xref:System.Collections.Generic.SortedList%602.Capacity%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-547">The capacity can also be set using the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Clear" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Capacity" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2bf8-548">値を取得する対象のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-548">The key whose value to get.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a2bf8-549">このメソッドが返ったときに、キーが見つかった場合は、指定したキーに関連付けられている値、それ以外の場合は <c>value</c> パラメーターの型に対する既定の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-549">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <c>value</c> parameter.</span>
          </span>
          <span data-ttu-id="a2bf8-550">このパラメーターは初期化せずに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-550">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2bf8-551">指定したキーに関連付けられている値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-551">Gets the value associated with the specified key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2bf8-552">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedList`2" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-552">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.SortedList`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-553">このメソッドの機能を組み合わせて、<xref:System.Collections.Generic.SortedList%602.ContainsKey%2A>メソッドおよび<xref:System.Collections.Generic.SortedList%602.Item%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-553">This method combines the functionality of the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.SortedList%602.Item%2A> property.</span></span>  
  
 <span data-ttu-id="a2bf8-554">キーが見つからない場合、`value`パラメーター値の型の適切な既定値を取得する`TValue`; たとえば、整数型のゼロ (0)`false`ブール型の場合と`null`参照型の場合。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-554">If the key is not found, then the `value` parameter gets the appropriate default value for the value type `TValue`; for example, zero (0) for integer types, `false` for Boolean types, and `null` for reference types.</span></span>  
  
 <span data-ttu-id="a2bf8-555">このメソッドは、バイナリ検索を実行します。そのため、このメソッドは、O (ログ`n`) 操作では、ここで`n`は<xref:System.Collections.Generic.SortedList%602.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-555">This method performs a binary search; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-556">例を使用する方法を示します、<xref:System.Collections.Generic.SortedList%602.TryGetValue%2A>メソッドとしてより効率的に並べ替えられたリストに含まれていないキーを頻繁に試行するプログラムで値を取得します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-556">The example shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the sorted list.</span></span> <span data-ttu-id="a2bf8-557">これに対しても示しますが、どのように<xref:System.Collections.Generic.SortedList%602.Item%2A>プロパティ (c# のインデクサー) が存在しないキーを取得中に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-557">For contrast, the example also shows how the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.</span></span>  
  
 <span data-ttu-id="a2bf8-558">このコード例に示されている例の一部である、<xref:System.Collections.Generic.SortedList%602>クラスです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-558">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#5)]
 [!code-csharp[Generic.SortedList#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#5)]
 [!code-vb[Generic.SortedList#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#5)]  
[!code-cpp[Generic.SortedList#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#4)]
[!code-csharp[Generic.SortedList#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#4)]
[!code-vb[Generic.SortedList#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2bf8-559">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-559">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Item(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;TValue&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;!TValue&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As IList(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;TValue&gt; ^ Values { System::Collections::Generic::IList&lt;TValue&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2bf8-560">
            <see cref="T:System.Collections.Generic.SortedList`2" /> 内の値を格納しているコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-560">Gets a collection containing the values in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2bf8-561">
            <see cref="T:System.Collections.Generic.IList`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.SortedList`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2bf8-561">A <see cref="T:System.Collections.Generic.IList`1" /> containing the values in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2bf8-562">内の値の順序、<xref:System.Collections.Generic.IList%601>内での順序と同じ、<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-562">The order of the values in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="a2bf8-563">返された<xref:System.Collections.Generic.IList%601>静的コピーではありません。 代わりに、、<xref:System.Collections.Generic.IList%601>は元の値を逆参照<xref:System.Collections.Generic.SortedList%602>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-563">The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the values in the original <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="a2bf8-564">そのため、変更、<xref:System.Collections.Generic.SortedList%602>に反映されるまでに続行、<xref:System.Collections.Generic.IList%601>です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-564">Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.</span></span>  
  
 <span data-ttu-id="a2bf8-565">によって返されるコレクション、<xref:System.Collections.Generic.SortedList%602.Values%2A>プロパティが値を取得するインデックスを使用して効率的な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-565">The collection returned by the <xref:System.Collections.Generic.SortedList%602.Values%2A> property provides an efficient way to retrieve values by index.</span></span> <span data-ttu-id="a2bf8-566">リストは単なる値の内部配列のラッパーであるため、プロパティにアクセスするときにリストを再生成する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-566">It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of values.</span></span> <span data-ttu-id="a2bf8-567">次のコードの使用を示しています、<xref:System.Collections.Generic.SortedList%602.Values%2A>文字列の並べ替えられたリストからの値のインデックス検索のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-567">The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:</span></span>  
  
 [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]
 [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]
 [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  
  
 <span data-ttu-id="a2bf8-568">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-568">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2bf8-569">このコード例を使用して、並べ替えられたリスト内の値を列挙する方法を示しています、<xref:System.Collections.Generic.SortedList%602.Values%2A>プロパティ、およびキーと並べ替えられたリスト内の値を列挙する方法です。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-569">This code example shows how to enumerate the values in the sorted list using the <xref:System.Collections.Generic.SortedList%602.Values%2A> property, and how to enumerate the keys and values in the sorted list.</span></span>  
  
 <span data-ttu-id="a2bf8-570">使用する方法も示します、<xref:System.Collections.Generic.SortedList%602.Values%2A>プロパティの値の効率的なインデックスの検索します。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-570">The example also shows how to use the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for efficient indexed retrieval of values.</span></span>  
  
 <span data-ttu-id="a2bf8-571">このコード例に示されている例の一部である、<xref:System.Collections.Generic.SortedList%602>クラスです。</span><span class="sxs-lookup"><span data-stu-id="a2bf8-571">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#8](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#8)]
 [!code-csharp[Generic.SortedList#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#8)]
 [!code-vb[Generic.SortedList#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#8)]  
[!code-cpp[Generic.SortedList#7](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#7)]
[!code-csharp[Generic.SortedList#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#7)]
[!code-vb[Generic.SortedList#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IList`1" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Keys" />
      </Docs>
    </Member>
  </Members>
</Type>