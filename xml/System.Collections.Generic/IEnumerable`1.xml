<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67d8bd93d39deef2a4d4ae6f1198768fda753482" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58745679" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">列挙するオブジェクトの型。</typeparam>
    <summary>指定した型のコレクションに対する単純な反復処理をサポートする列挙子を公開します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601> コレクションの基本インターフェイスは、<xref:System.Collections.Generic>などの名前空間<xref:System.Collections.Generic.List%601>、<xref:System.Collections.Generic.Dictionary%602>と<xref:System.Collections.Generic.Stack%601>などの他のジェネリック コレクションと<xref:System.Collections.ObjectModel.ObservableCollection%601>と<xref:System.Collections.Concurrent.ConcurrentStack%601>。 実装するコレクション<xref:System.Collections.Generic.IEnumerable%601>を使用して列挙することができます、`foreach`ステートメント。  
  
 このインターフェイスの非ジェネリック バージョンでは、次を参照してください。<xref:System.Collections.IEnumerable?displayProperty=nameWithType>します。  
  
 <xref:System.Collections.Generic.IEnumerable%601> このインターフェイスを実装する場合に実装する必要があります、1 つのメソッドが含まれています<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>、返された、<xref:System.Collections.Generic.IEnumerator%601>オブジェクト。 返された<xref:System.Collections.Generic.IEnumerator%601>公開することで、コレクションを反復処理する機能を提供する<xref:System.Collections.Generic.IEnumerator%601.Current%2A>プロパティ。  
  
   
  
## Examples  
 次の例は、実装する方法を示します、<xref:System.Collections.Generic.IEnumerable%601>インターフェイスとその実装を使用して LINQ クエリを作成する方法。 実装する場合<xref:System.Collections.Generic.IEnumerable%601>、実装する必要がありますも<xref:System.Collections.Generic.IEnumerator%601>または、C# のみで使用することができます、 [yield](~/docs/csharp/language-reference/keywords/yield.md)キーワード。 実装する<xref:System.Collections.Generic.IEnumerator%601>も必要です<xref:System.IDisposable>を実装するこの例では表示されます。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 実装する方法を示す別の C# 例については、<xref:System.Collections.Generic.IEnumerable%601>インターフェイスを参照してください、[ジェネリック サンプル](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)します。 このサンプルでは、`yield`キーワードの実装ではなく<xref:System.Collections.Generic.IEnumerator%601>します。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 非ジェネリック コレクションと同等が含まれます実装する<see cref="T:System.Collections.Generic.IEnumerable`1" />ジェネリック コレクションを必要とするメソッドに渡される、<see cref="T:System.Collections.IEnumerable" />オブジェクト。</para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
    <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">チュートリアル: Visual Basic での IEnumerable(Of T) の実装</related>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">反復子 (C# および Visual Basic)</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593">ジェネリックのサンプル</related>
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理する列挙子を返します。</summary>
        <returns>コレクションの反復処理に使用できる列挙子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返された<xref:System.Collections.Generic.IEnumerator%601>公開することで、コレクションを反復処理する機能を提供する<xref:System.Collections.Generic.IEnumerator%601.Current%2A>プロパティ。コレクションでは、データを読み取ることが、コレクションを変更することがなく、列挙子を使用できます。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。 この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> が未定義です。 そのため、呼び出す必要がある、<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドの値を読み取る前に、コレクションの最初の要素を列挙子を進める<xref:System.Collections.Generic.IEnumerator%601.Current%2A>します。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> まで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>としてもう一度呼び出される<xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.Generic.IEnumerator%601.Current%2A>次の要素にします。  
  
 場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子、コレクションの末尾がコレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`します。 この位置では、後続の呼び出しで列挙子の場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。 最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.IEnumerator%601.Current%2A>が定義されていません。 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。  

 追加、変更、または、要素を削除するなど、コレクションに変更された場合、列挙子の動作は未定義です。  
  
 列挙子には、コレクションへの排他アクセスはありませんので、コレクションが変更されない限り、列挙子は無効です。 コレクションの変更が加えられた場合など、追加、変更、または要素の削除、列挙子が無効になるし、予期しない結果を取得することがあります。 また、コレクションの列挙は、スレッド セーフなプロシージャではありません。 スレッド セーフを保証するためには、列挙子コレクションをロックまたは、コレクションの同期を実装する必要があります。  
  
 コレクションの既定の実装、<xref:System.Collections.Generic?displayProperty=nameWithType>名前空間が同期されていません。  
  
   
  
## Examples  
 次の例は、実装する方法を示します、<xref:System.Collections.Generic.IEnumerable%601>インターフェイスし、その実装を使用して LINQ クエリを作成します。 実装する場合<xref:System.Collections.Generic.IEnumerable%601>、実装する必要がありますも<xref:System.Collections.Generic.IEnumerator%601>または、C# のみで使用することができます、 [yield](~/docs/csharp/language-reference/keywords/yield.md)キーワード。 実装する<xref:System.Collections.Generic.IEnumerator%601>も必要です<xref:System.IDisposable>を実装するこの例では表示されます。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 実装する方法を示す別の C# 例については、<xref:System.Collections.Generic.IEnumerable%601>インターフェイスを参照してください、[ジェネリック サンプル](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)します。 このサンプルでの使用、`yield`キーワードの実装ではなく<xref:System.Collections.Generic.IEnumerator%601>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
        <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">チュートリアル: Visual Basic での IEnumerable(Of T) の実装</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">反復子 (C# および Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>