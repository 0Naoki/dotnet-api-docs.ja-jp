<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c7628000b2c4025ed54ca68bbecc86cda707f970" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33682396" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="0b4c8-101">列挙するオブジェクトの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0b4c8-101">The type of objects to enumerate.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="0b4c8-102">指定した型のコレクションに対する単純な反復処理をサポートする列挙子を公開します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0b4c8-102">Exposes the enumerator, which supports a simple iteration over a collection of a specified type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b4c8-103"><xref:System.Collections.Generic.IEnumerable%601> 内のコレクションの基本インターフェイスは、<xref:System.Collections.Generic>などの名前空間<xref:System.Collections.Generic.List%601>、<xref:System.Collections.Generic.Dictionary%602>と<xref:System.Collections.Generic.Stack%601>やなどの他のジェネリック コレクション<xref:System.Collections.ObjectModel.ObservableCollection%601>と<xref:System.Collections.Concurrent.ConcurrentStack%601>です。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-103"><xref:System.Collections.Generic.IEnumerable%601> is the base interface for collections in the <xref:System.Collections.Generic> namespace such as <xref:System.Collections.Generic.List%601>, <xref:System.Collections.Generic.Dictionary%602>, and <xref:System.Collections.Generic.Stack%601> and other generic collections such as <xref:System.Collections.ObjectModel.ObservableCollection%601> and <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span></span> <span data-ttu-id="0b4c8-104">実装するコレクション<xref:System.Collections.Generic.IEnumerable%601>を使用して列挙することができます、`foreach`ステートメントです。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-104">Collections that implement <xref:System.Collections.Generic.IEnumerable%601> can be enumerated by using the `foreach` statement.</span></span> <span data-ttu-id="0b4c8-105">このインターフェイスの非ジェネリック バージョンは、<xref:System.Collections.IEnumerable?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-105">For the non-generic version of this interface, see <xref:System.Collections.IEnumerable?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0b4c8-106">このインターフェイスの非ジェネリック バージョンは、<xref:System.Collections.IEnumerable?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-106">For the non-generic version of this interface, see <xref:System.Collections.IEnumerable?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0b4c8-107"><xref:System.Collections.Generic.IEnumerable%601> このインターフェイスを実装する場合に実装する必要があります単一のメソッドが含まれています<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>、返された、<xref:System.Collections.Generic.IEnumerator%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-107"><xref:System.Collections.Generic.IEnumerable%601> contains a single method that you must implement when implementing this interface; <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>, which returns an <xref:System.Collections.Generic.IEnumerator%601> object.</span></span> <span data-ttu-id="0b4c8-108">返された<xref:System.Collections.Generic.IEnumerator%601>公開することにより、コレクションを反復処理する機能を提供する<xref:System.Collections.Generic.IEnumerator%601.Current%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-108">The returned <xref:System.Collections.Generic.IEnumerator%601> provides the ability to iterate through the collection by exposing a <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4c8-109">次の例は、実装する方法を示します、<xref:System.Collections.Generic.IEnumerable%601>インターフェイスとその実装を使用して LINQ クエリを作成する方法です。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-109">The following example demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface and how to use that implementation to create a LINQ query.</span></span> <span data-ttu-id="0b4c8-110">実装する場合<xref:System.Collections.Generic.IEnumerable%601>、実装する必要がありますも<xref:System.Collections.Generic.IEnumerator%601>または、C# の場合のみ、使用することができます、 [yield](~/docs/csharp/language-reference/keywords/yield.md)キーワード。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-110">When you implement <xref:System.Collections.Generic.IEnumerable%601>, you must also implement <xref:System.Collections.Generic.IEnumerator%601> or, for C# only, you can use the [yield](~/docs/csharp/language-reference/keywords/yield.md) keyword.</span></span> <span data-ttu-id="0b4c8-111">実装する<xref:System.Collections.Generic.IEnumerator%601>必要もあります<xref:System.IDisposable>実装するには、この例では表示されます。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-111">Implementing <xref:System.Collections.Generic.IEnumerator%601> also requires <xref:System.IDisposable> to be implemented, which you will see in this example.</span></span>  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 <span data-ttu-id="0b4c8-112">実装する方法を示す別の C# コード例を<xref:System.Collections.Generic.IEnumerable%601>インターフェイスを参照してください、[ジェネリック サンプル](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)です。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-112">For another C# example that demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface, see the [Generics Sample](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593).</span></span> <span data-ttu-id="0b4c8-113">このサンプルでは、`yield`キーワードの実装ではなく<xref:System.Collections.Generic.IEnumerator%601>です。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-113">This sample uses the `yield` keyword instead of implementing <xref:System.Collections.Generic.IEnumerator%601>.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="0b4c8-114">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> 非ジェネリック コレクションと同等の機能の含まれています実装する<see cref="T:System.Collections.Generic.IEnumerable`1" />により必要とするメソッドに渡されるジェネリック コレクション、<see cref="T:System.Collections.IEnumerable" />オブジェクト。</span>
        <span class="sxs-lookup">
          <span data-stu-id="0b4c8-114">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> is included for parity with non-generic collections; implementing <see cref="T:System.Collections.Generic.IEnumerable`1" /> allows a generic collection to be passed to a method that expects an <see cref="T:System.Collections.IEnumerable" /> object.</span>
        </span>
      </para>
    </block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0b4c8-115">コレクションを反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0b4c8-115">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="0b4c8-116">コレクションの反復処理に使用できる列挙子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0b4c8-116">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b4c8-117">返された<xref:System.Collections.Generic.IEnumerator%601>公開することにより、コレクションを反復処理する機能を提供する<xref:System.Collections.Generic.IEnumerator%601.Current%2A>プロパティです。列挙子を使用してコレクションを変更することがなくが、コレクションでは、データを読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-117">The returned <xref:System.Collections.Generic.IEnumerator%601> provides the ability to iterate through the collection by exposing a <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property .You can use enumerators to read the data in a collection, but not to modify the collection.</span></span>  
  
 <span data-ttu-id="0b4c8-118">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-118">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="0b4c8-119">この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> が未定義です。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-119">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="0b4c8-120">そのため、呼び出す必要があります、<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<xref:System.Collections.Generic.IEnumerator%601.Current%2A>です。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-120">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="0b4c8-121"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> まで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>としてもう一度呼び出される<xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.Generic.IEnumerator%601.Current%2A>次の要素にします。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-121"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called again as <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="0b4c8-122">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-122">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="0b4c8-123">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-123">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="0b4c8-124">最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.IEnumerator%601.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-124">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="0b4c8-125"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-125">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="0b4c8-126">コレクションが変更されない限り、列挙子は有効なために、列挙子はコレクションへの排他アクセスをありません。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-126">An enumerator does not have exclusive access to the collection so an enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="0b4c8-127">コレクションの変更が加えられた場合など、追加、変更、または要素を削除すると、列挙子が無効になったし、予期しない結果を得ることがあります。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-127">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is invalidated and you may get unexpected results.</span></span> <span data-ttu-id="0b4c8-128">また、コレクションの列挙処理は、スレッド セーフなプロシージャではできません。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-128">Also, enumerating a collection is not a thread-safe procedure.</span></span> <span data-ttu-id="0b4c8-129">スレッド セーフを確保するには、するには、列挙子の中にコレクションをロックするか、コレクションの同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-129">To guarantee thread-safety, you should lock the collection during enumerator or implement synchronization on the collection.</span></span>  
  
 <span data-ttu-id="0b4c8-130">内のコレクションの既定の実装、<xref:System.Collections.Generic?displayProperty=nameWithType>名前空間が同期されていません。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-130">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace aren't synchronized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b4c8-131">次の例は、実装する方法を示します、<xref:System.Collections.Generic.IEnumerable%601>インターフェイスし、その実装を使用して LINQ クエリを作成します。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-131">The following example demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface and uses that implementation to create a LINQ query.</span></span> <span data-ttu-id="0b4c8-132">実装する場合<xref:System.Collections.Generic.IEnumerable%601>、実装する必要がありますも<xref:System.Collections.Generic.IEnumerator%601>または、C# の場合のみ、使用することができます、 [yield](~/docs/csharp/language-reference/keywords/yield.md)キーワード。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-132">When you implement <xref:System.Collections.Generic.IEnumerable%601>, you must also implement <xref:System.Collections.Generic.IEnumerator%601> or, for C# only, you can use the [yield](~/docs/csharp/language-reference/keywords/yield.md) keyword.</span></span> <span data-ttu-id="0b4c8-133">実装する<xref:System.Collections.Generic.IEnumerator%601>必要もあります<xref:System.IDisposable>実装するには、この例では表示されます。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-133">Implementing <xref:System.Collections.Generic.IEnumerator%601> also requires <xref:System.IDisposable> to be implemented, which you will see in this example.</span></span>  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 <span data-ttu-id="0b4c8-134">実装する方法を示す別の C# コード例を<xref:System.Collections.Generic.IEnumerable%601>インターフェイスを参照してください、[ジェネリック サンプル](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)です。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-134">For another C# example that demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface, see the [Generics Sample](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593).</span></span> <span data-ttu-id="0b4c8-135">このサンプルでの使用、`yield`キーワードの実装ではなく<xref:System.Collections.Generic.IEnumerator%601>です。</span><span class="sxs-lookup"><span data-stu-id="0b4c8-135">This sample uses of the `yield` keyword instead of implementing <xref:System.Collections.Generic.IEnumerator%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
  </Members>
</Type>