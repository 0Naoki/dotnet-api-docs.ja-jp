<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ef1716b0f847cfc6624c254364fec60ee14d317e" /><Meta Name="ms.sourcegitcommit" Value="06cd98bd344709107798cbd8e01c905801b69f80" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/01/2019" /><Meta Name="ms.locfileid" Value="71701521" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="f184c-101">列挙するオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="f184c-101">The type of objects to enumerate.</span></span></typeparam>
    <summary><span data-ttu-id="f184c-102">指定した型のコレクションに対する単純な反復処理をサポートする列挙子を公開します。</span><span class="sxs-lookup"><span data-stu-id="f184c-102">Exposes the enumerator, which supports a simple iteration over a collection of a specified type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f184c-103"><xref:System.Collections.Generic.IEnumerable%601> は、<xref:System.Collections.Generic.List%601>、<xref:System.Collections.Generic.Dictionary%602>、<xref:System.Collections.Generic.Stack%601> などの @no__t の名前空間のコレクションの基本インターフェイスであり、<xref:System.Collections.ObjectModel.ObservableCollection%601> や <xref:System.Collections.Concurrent.ConcurrentStack%601> などのジェネリックコレクションです。</span><span class="sxs-lookup"><span data-stu-id="f184c-103"><xref:System.Collections.Generic.IEnumerable%601> is the base interface for collections in the <xref:System.Collections.Generic> namespace such as <xref:System.Collections.Generic.List%601>, <xref:System.Collections.Generic.Dictionary%602>, and <xref:System.Collections.Generic.Stack%601> and other generic collections such as <xref:System.Collections.ObjectModel.ObservableCollection%601> and <xref:System.Collections.Concurrent.ConcurrentStack%601>.</span></span> <span data-ttu-id="f184c-104">@No__t 0 を実装するコレクションは、`foreach` ステートメントを使用して列挙できます。</span><span class="sxs-lookup"><span data-stu-id="f184c-104">Collections that implement <xref:System.Collections.Generic.IEnumerable%601> can be enumerated by using the `foreach` statement.</span></span>  
  
 <span data-ttu-id="f184c-105">このインターフェイスの非ジェネリックバージョンについては、「<xref:System.Collections.IEnumerable?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f184c-105">For the non-generic version of this interface, see <xref:System.Collections.IEnumerable?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="f184c-106"><xref:System.Collections.Generic.IEnumerable%601> には、このインターフェイスを実装するときに実装する必要がある1つのメソッドが含まれています。<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>。これにより、@no__t 2 つのオブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="f184c-106"><xref:System.Collections.Generic.IEnumerable%601> contains a single method that you must implement when implementing this interface; <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>, which returns an <xref:System.Collections.Generic.IEnumerator%601> object.</span></span> <span data-ttu-id="f184c-107">返された <xref:System.Collections.Generic.IEnumerator%601> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> プロパティを公開することによってコレクションを反復処理する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="f184c-107">The returned <xref:System.Collections.Generic.IEnumerator%601> provides the ability to iterate through the collection by exposing a <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f184c-108">次の例は、<xref:System.Collections.Generic.IEnumerable%601> インターフェイスを実装する方法と、その実装を使用して LINQ クエリを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f184c-108">The following example demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface and how to use that implementation to create a LINQ query.</span></span> <span data-ttu-id="f184c-109">@No__t-0 を実装する場合は、<xref:System.Collections.Generic.IEnumerator%601> またはを実装するC#必要があります。また、の場合は、 [yield](~/docs/csharp/language-reference/keywords/yield.md)キーワードを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="f184c-109">When you implement <xref:System.Collections.Generic.IEnumerable%601>, you must also implement <xref:System.Collections.Generic.IEnumerator%601> or, for C# only, you can use the [yield](~/docs/csharp/language-reference/keywords/yield.md) keyword.</span></span> <span data-ttu-id="f184c-110">@No__t-0 を実装するには、<xref:System.IDisposable> を実装する必要があります。これについては、この例で示します。</span><span class="sxs-lookup"><span data-stu-id="f184c-110">Implementing <xref:System.Collections.Generic.IEnumerator%601> also requires <xref:System.IDisposable> to be implemented, which you will see in this example.</span></span>  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 <span data-ttu-id="f184c-111">@No__t- C# 1 インターフェイスを実装する方法を示す別の例については、「[ジェネリックサンプル](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f184c-111">For another C# example that demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface, see the [Generics Sample](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593).</span></span> <span data-ttu-id="f184c-112">このサンプルでは、<xref:System.Collections.Generic.IEnumerator%601> を実装する代わりに、`yield` キーワードを使用します。</span><span class="sxs-lookup"><span data-stu-id="f184c-112">This sample uses the `yield` keyword instead of implementing <xref:System.Collections.Generic.IEnumerator%601>.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="f184c-113">非ジェネリックコレクションを反復処理するメソッドとの互換性を維持するために、<see cref="T:System.Collections.Generic.IEnumerable`1" /> は <see cref="T:System.Collections.IEnumerable" /> を実装します。</span><span class="sxs-lookup"><span data-stu-id="f184c-113">To remain compatible with methods that iterate non-generic collections, <see cref="T:System.Collections.Generic.IEnumerable`1" /> implements <see cref="T:System.Collections.IEnumerable" />.</span></span> <span data-ttu-id="f184c-114">これにより、@no__t 0 のオブジェクトを想定しているメソッドにジェネリックコレクションを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="f184c-114">This allows a generic collection to be passed to a method that expects an <see cref="T:System.Collections.IEnumerable" /> object.</span></span></para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
    <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554"><span data-ttu-id="f184c-115">チュートリアル: Visual Basic での IEnumerable(Of T) の実装</span><span class="sxs-lookup"><span data-stu-id="f184c-115">Walkthrough: Implementing IEnumerable(Of T) in Visual Basic</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7"><span data-ttu-id="f184c-116">反復子 (C# および Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f184c-116">Iterators (C# and Visual Basic)</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593"><span data-ttu-id="f184c-117">ジェネリックのサンプル</span><span class="sxs-lookup"><span data-stu-id="f184c-117">Generics Sample</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of T)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f184c-118">コレクションを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="f184c-118">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="f184c-119">コレクションの反復処理に使用できる列挙子。</span><span class="sxs-lookup"><span data-stu-id="f184c-119">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f184c-120">返された <xref:System.Collections.Generic.IEnumerator%601> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> プロパティを公開することによってコレクションを反復処理する機能を提供します。列挙子を使用してコレクション内のデータを読み取ることはできますが、コレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="f184c-120">The returned <xref:System.Collections.Generic.IEnumerator%601> provides the ability to iterate through the collection by exposing a <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property .You can use enumerators to read the data in a collection, but not to modify the collection.</span></span>  
  
 <span data-ttu-id="f184c-121">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="f184c-121">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="f184c-122">この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> は未定義です。</span><span class="sxs-lookup"><span data-stu-id="f184c-122">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="f184c-123">そのため、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.MoveNext%2A> メソッドを呼び出し、列挙子をコレクションの最初の要素に進める必要があります。</span><span class="sxs-lookup"><span data-stu-id="f184c-123">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="f184c-124"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> が再度呼び出されるまで同じオブジェクトを返します。 <xref:System.Collections.IEnumerator.MoveNext%2A> は、次の要素に <xref:System.Collections.Generic.IEnumerator%601.Current%2A> を設定します。</span><span class="sxs-lookup"><span data-stu-id="f184c-124"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called again as <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="f184c-125"><xref:System.Collections.IEnumerator.MoveNext%2A> がコレクションの末尾を通過した場合、列挙子がコレクション内の最後の要素の後に配置され、<xref:System.Collections.IEnumerator.MoveNext%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="f184c-125">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="f184c-126">列挙子がこの位置にある場合、後続の <xref:System.Collections.IEnumerator.MoveNext%2A> 呼び出しも `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="f184c-126">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="f184c-127">@No__t-0 への最後の呼び出しで `false` が返された場合、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="f184c-127">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="f184c-128"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f184c-128">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  

 <span data-ttu-id="f184c-129">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子の動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="f184c-129">If changes are made to the collection, such as adding, modifying, or deleting elements, the behavior of the enumerator is undefined.</span></span>  
  
 <span data-ttu-id="f184c-130">列挙子はコレクションに排他的にアクセスできないため、コレクションが変更されていない限り、列挙子は有効なままです。</span><span class="sxs-lookup"><span data-stu-id="f184c-130">An enumerator does not have exclusive access to the collection so an enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="f184c-131">要素の追加、変更、削除などの変更がコレクションに対して行われた場合、列挙子は無効になり、予期しない結果が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f184c-131">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is invalidated and you may get unexpected results.</span></span> <span data-ttu-id="f184c-132">また、コレクションの列挙はスレッドセーフなプロシージャではありません。</span><span class="sxs-lookup"><span data-stu-id="f184c-132">Also, enumerating a collection is not a thread-safe procedure.</span></span> <span data-ttu-id="f184c-133">スレッドセーフを保証するには、列挙子の間にコレクションをロックするか、コレクションに対して同期を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f184c-133">To guarantee thread-safety, you should lock the collection during enumerator or implement synchronization on the collection.</span></span>  
  
 <span data-ttu-id="f184c-134">@No__t-0 名前空間のコレクションの既定の実装は同期されません。</span><span class="sxs-lookup"><span data-stu-id="f184c-134">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace aren't synchronized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f184c-135">次の例は、<xref:System.Collections.Generic.IEnumerable%601> インターフェイスを実装し、その実装を使用して LINQ クエリを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f184c-135">The following example demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface and uses that implementation to create a LINQ query.</span></span> <span data-ttu-id="f184c-136">@No__t-0 を実装する場合は、<xref:System.Collections.Generic.IEnumerator%601> またはを実装するC#必要があります。また、の場合は、 [yield](~/docs/csharp/language-reference/keywords/yield.md)キーワードを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="f184c-136">When you implement <xref:System.Collections.Generic.IEnumerable%601>, you must also implement <xref:System.Collections.Generic.IEnumerator%601> or, for C# only, you can use the [yield](~/docs/csharp/language-reference/keywords/yield.md) keyword.</span></span> <span data-ttu-id="f184c-137">@No__t-0 を実装するには、<xref:System.IDisposable> を実装する必要があります。これについては、この例で示します。</span><span class="sxs-lookup"><span data-stu-id="f184c-137">Implementing <xref:System.Collections.Generic.IEnumerator%601> also requires <xref:System.IDisposable> to be implemented, which you will see in this example.</span></span>  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 <span data-ttu-id="f184c-138">@No__t- C# 1 インターフェイスを実装する方法を示す別の例については、「[ジェネリックサンプル](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f184c-138">For another C# example that demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface, see the [Generics Sample](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593).</span></span> <span data-ttu-id="f184c-139">このサンプルでは、<xref:System.Collections.Generic.IEnumerator%601> を実装するのではなく、`yield` キーワードを使用しています。</span><span class="sxs-lookup"><span data-stu-id="f184c-139">This sample uses of the `yield` keyword instead of implementing <xref:System.Collections.Generic.IEnumerator%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
        <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554"><span data-ttu-id="f184c-140">チュートリアル: Visual Basic での IEnumerable(Of T) の実装</span><span class="sxs-lookup"><span data-stu-id="f184c-140">Walkthrough: Implementing IEnumerable(Of T) in Visual Basic</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7"><span data-ttu-id="f184c-141">反復子 (C# および Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f184c-141">Iterators (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
