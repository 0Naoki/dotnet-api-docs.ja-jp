<Type Name="SpeechEventInfo" FullName="System.Speech.Synthesis.TtsEngine.SpeechEventInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="94ce54252ffa9ab3f37762c9ea8e4e801ac5885b" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70600103" /></Metadata><TypeSignature Language="C#" Value="public struct SpeechEventInfo : IEquatable&lt;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpeechEventInfo extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpeechEventInfo&#xA;Implements IEquatable(Of SpeechEventInfo)" />
  <TypeSignature Language="C++ CLI" Value="public value class SpeechEventInfo : IEquatable&lt;System::Speech::Synthesis::TtsEngine::SpeechEventInfo&gt;" />
  <TypeSignature Language="F#" Value="type SpeechEventInfo = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ImmutableObject(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8dab4-101">イベントの種類を指定し、その引数 (ある場合) はカスタム合成音声エンジンによるテキストから音声への変換の一部として生成されることを指定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-101">Used to specify the type of event, and its arguments (if any)  to be generated as part of the rendering of text to speech by a custom synthetic speech engine.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8dab4-102">カスタム音声合成エンジンは<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> 、の<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>実装に渡された<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>エンジンサイトオブジェクトのメンバーに適切な<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.AddEvents%2A>インスタンスを提供することにより、speech プラットフォームでイベントの生成を要求します。、、  <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> および。  <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A></span><span class="sxs-lookup"><span data-stu-id="8dab4-102">A custom speech synthesis engine requests the generation of events under the Speech Platform by providing an appropriate <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance to <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.AddEvents%2A> member of the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> engine site object passed to implementations of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8dab4-103">次の例<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>は、を継承し、、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.FragmentState>、、およびの使用を使用しているカスタム音声合成実装の一部です。<xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span><span class="sxs-lookup"><span data-stu-id="8dab4-103">The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span></span>  
  
 <span data-ttu-id="8dab4-104">の実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span><span class="sxs-lookup"><span data-stu-id="8dab4-104">The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span></span>  
  
1.  <span data-ttu-id="8dab4-105">インスタンスの<xref:System.Speech.Synthesis.TtsEngine.TextFragment>配列を受け取り、基になる合成エンジン<xref:System.Speech.Synthesis.TtsEngine.TextFragment>の`Speak`メソッドに渡されるインスタンスの新しい配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-105">Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.</span></span>  
  
2.  <span data-ttu-id="8dab4-106"><xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>各インスタンスのプロパティによって返されるのプロパティによって検出された列挙値がの場合、実装 <xref:System.Speech.Synthesis.TtsEngine.TextFragment></span><span class="sxs-lookup"><span data-stu-id="8dab4-106">If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, the implementation</span></span>  
  
    -   <span data-ttu-id="8dab4-107">読み上げられるテキストの Americanism を Britishisms に変換します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-107">Translates Americanism to Britishisms in the text to be spoken.</span></span>  
  
    -   <span data-ttu-id="8dab4-108">実装<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> に提供 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> されるインターフェイスのプロパティがイベントの種類をサポートしている場合は、のインスタンスを使用して、シンセサイザーの進行状況メーターを作成するためのイベントを作成します。 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary></span><span class="sxs-lookup"><span data-stu-id="8dab4-108">If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.</span></span>  
  
3.  <span data-ttu-id="8dab4-109">その後、変更<xref:System.Speech.Synthesis.TtsEngine.TextFragment>された配列を使用して音声レンダリングエンジンが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-109">A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.</span></span>  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechEventInfo (short eventId, short parameterType, int param1, IntPtr param2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 eventId, int16 parameterType, int32 param1, native int param2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.#ctor(System.Int16,System.Int16,System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventId As Short, parameterType As Short, param1 As Integer, param2 As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechEventInfo(short eventId, short parameterType, int param1, IntPtr param2);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.SpeechEventInfo : int16 * int16 * int * nativeint -&gt; System.Speech.Synthesis.TtsEngine.SpeechEventInfo" Usage="new System.Speech.Synthesis.TtsEngine.SpeechEventInfo (eventId, parameterType, param1, param2)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="eventId" Type="System.Int16" />
        <Parameter Name="parameterType" Type="System.Int16" />
        <Parameter Name="param1" Type="System.Int32" />
        <Parameter Name="param2" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="eventId"><span data-ttu-id="8dab4-110"><see cref="T:System.Speech.Synthesis.TtsEngine.TtsEventId" /> オブジェクトが処理する音声プラットフォームのイベントの種類を示す <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="8dab4-110">An instance of <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEventId" /> indicating the sort of Speech platform event the <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> object is to handle.</span></span></param>
        <param name="parameterType"><span data-ttu-id="8dab4-111"><paramref name="param2" /> の <see langword="System.IntPtr" /> の参照がどのように解釈されるかを示す <see cref="T:System.Speech.Synthesis.TtsEngine.EventParameterType" /> のインスタンスと、暗黙の <paramref name="param1" /> の使用。</span><span class="sxs-lookup"><span data-stu-id="8dab4-111">An instance of <see cref="T:System.Speech.Synthesis.TtsEngine.EventParameterType" /> indicating how the <see langword="System.IntPtr" /> reference of <paramref name="param2" /> is to be interpreted, and, by implication, the use of <paramref name="param1" />.</span></span></param>
        <param name="param1"><span data-ttu-id="8dab4-112">構築する <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> のインスタンスで要求されたイベントの生成時に、音声のプラットフォームに渡される整数値。</span><span class="sxs-lookup"><span data-stu-id="8dab4-112">An integer value to be passed to the Speech platform when the event requested by the instance of <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> to be constructed is generated.</span></span>  
  
<span data-ttu-id="8dab4-113">この整数の厳密な意味は <paramref name="parameterType" /> の値によって暗黙的に決定されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-113">The exact meaning of this integer is implicitly determined by the value of <paramref name="parameterType" />.</span></span></param>
        <param name="param2"><span data-ttu-id="8dab4-114">オブジェクトを参照する <see langword="System.IntPtr" /> インスタンスです。</span><span class="sxs-lookup"><span data-stu-id="8dab4-114">A <see langword="System.IntPtr" /> instance referencing an object.</span></span> <span data-ttu-id="8dab4-115">これは、構築する <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> のインスタンスで要求されたイベントの生成時に、音声のプラットフォームに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-115">to be passed to the Speech platform when the event requested by the instance of <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> to be constructed is generated.</span></span>  
  
<span data-ttu-id="8dab4-116">参照する必要がある型は値 <paramref name="parameterType" />によって明示的に定義されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-116">The type which must be referenced is explicitly defined by the value <paramref name="parameterType" />.</span></span> <span data-ttu-id="8dab4-117">値 <see langword="System.IntPtr.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="8dab4-117">The value <see langword="System.IntPtr.Zero" />.</span></span></param>
        <summary><span data-ttu-id="8dab4-118">適切な <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> を構築します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-118">Constructs an appropriate <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8dab4-119">`parameterType`、、および<xref:System.Speech.Synthesis.TtsEngine.TtsEventId> `param1` `eventId`に使用される許容値は、に使用されるのメンバーによって指定されるように、要求されるイベントの種類によって決まります。 `param2`</span><span class="sxs-lookup"><span data-stu-id="8dab4-119">Permitted values used for `parameterType`, `param1`, and `param2` and their meaning is dictated by the type of event being requested, as specified by the member of <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> used for `eventId`.</span></span>  
  
 <span data-ttu-id="8dab4-120">、 `parameterType` 、 `param1` およびの適切な値の詳細については、のドキュメントを参照 `param2` してください。<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A></span><span class="sxs-lookup"><span data-stu-id="8dab4-120">For detailed information on appropriate values for `parameterType`, `param1`, and `param2`, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A></span></span>  
  
 <span data-ttu-id="8dab4-121">Speech プラットフォームインフラストラクチャで処理できるイベントの種類は、の<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>シンセサイザーエンジンサイト実装のプロパティを使用して取得できます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-121">The type of the events which can be handled by the Speech platform infrastructure can be obtained through the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the synthesizer engine site implementation of <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8dab4-122">次の例<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>は、を継承し、、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.FragmentState>、、およびの使用を使用しているカスタム音声合成実装の一部です。<xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span><span class="sxs-lookup"><span data-stu-id="8dab4-122">The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span></span>  
  
 <span data-ttu-id="8dab4-123">の実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span><span class="sxs-lookup"><span data-stu-id="8dab4-123">The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span></span>  
  
1.  <span data-ttu-id="8dab4-124">インスタンスの<xref:System.Speech.Synthesis.TtsEngine.TextFragment>配列を受け取り、基になる合成エンジン<xref:System.Speech.Synthesis.TtsEngine.TextFragment>の`Speak`メソッドに渡されるインスタンスの新しい配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-124">Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.</span></span>  
  
2.  <span data-ttu-id="8dab4-125"><xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>各インスタンスのプロパティによって返されるのプロパティによって検出された列挙値がの場合、実装 <xref:System.Speech.Synthesis.TtsEngine.TextFragment></span><span class="sxs-lookup"><span data-stu-id="8dab4-125">If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, the implementation</span></span>  
  
    -   <span data-ttu-id="8dab4-126">読み上げられるテキストの Americanism を Britishisms に変換します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-126">Translates Americanism to Britishisms in the text to be spoken.</span></span>  
  
    -   <span data-ttu-id="8dab4-127">実装<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> に提供 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> されるインターフェイスのプロパティがイベントの種類をサポートしている場合は、のインスタンスを使用して、シンセサイザーの進行状況メーターを作成するためのイベントを作成します。 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary></span><span class="sxs-lookup"><span data-stu-id="8dab4-127">If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.</span></span>  
  
3.  <span data-ttu-id="8dab4-128">その後、変更<xref:System.Speech.Synthesis.TtsEngine.TextFragment>された配列を使用して音声レンダリングエンジンが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-128">A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.</span></span>  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8dab4-129"><c>SpeechEventInfo</c> インスタンスが別のオブジェクトと等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-129">Determines whether a <c>SpeechEventInfo</c> instance is equal to another object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="speechEventInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="8dab4-130">評価するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8dab4-130">The object to evaluate.</span></span></param>
        <summary><span data-ttu-id="8dab4-131">指定したオブジェクトが <c>SpeechEventInfo</c> のインスタンスで、現在の <c>SpeechEventInfo</c> インスタンスと等しいかどうかを判定します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-131">Determines whether a specified object is an instance of <c>SpeechEventInfo</c> and equal to the current instance of <c>SpeechEventInfo</c>.</span></span></summary>
        <returns><span data-ttu-id="8dab4-132"><paramref name="obj" /> が現在の <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> オブジェクトに等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8dab4-132"><see langword="true" /> if <paramref name="obj" /> is equal to the current <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Speech.Synthesis.TtsEngine.SpeechEventInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Speech.Synthesis.TtsEngine.SpeechEventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As SpeechEventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Speech::Synthesis::TtsEngine::SpeechEventInfo other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Speech.Synthesis.TtsEngine.SpeechEventInfo -&gt; bool" Usage="speechEventInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="8dab4-133">評価する <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8dab4-133">The <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> object to evaluate.</span></span></param>
        <summary><span data-ttu-id="8dab4-134">指定した <c>SpeechEventInfo</c> オブジェクトが、現在の <c>SpeechEventInfo</c> インスタンスと等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-134">Determines whether a specified <c>SpeechEventInfo</c> object is equal to the current instance of <c>SpeechEventInfo</c>.</span></span></summary>
        <returns><span data-ttu-id="8dab4-135"><paramref name="other" /> が現在の <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> オブジェクトに等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8dab4-135"><see langword="true" /> if <paramref name="other" /> is equal to the current <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventId">
      <MemberSignature Language="C#" Value="public short EventId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 EventId" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventId As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short EventId { short get(); };" />
      <MemberSignature Language="F#" Value="member this.EventId : int16" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8dab4-136"><see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> インスタンスが要求を行うために使用される音声プラットフォーム イベントを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-136">Gets and set the Speech platform event which an instance of <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> is used to request.</span></span></summary>
        <value><span data-ttu-id="8dab4-137"><see langword="short" /> として <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEventId" /> のメンバーを返し、<see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> オブジェクトが生成するイベント型を示します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-137">Returns a member of <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEventId" /> as a <see langword="short" />, indicating the event type the <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> object is to generate.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8dab4-138">次の例<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>は、を継承し、、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.FragmentState>、、およびの使用を使用しているカスタム音声合成実装の一部です。<xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span><span class="sxs-lookup"><span data-stu-id="8dab4-138">The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span></span>  
  
 <span data-ttu-id="8dab4-139">の実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span><span class="sxs-lookup"><span data-stu-id="8dab4-139">The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span></span>  
  
1.  <span data-ttu-id="8dab4-140">インスタンスの<xref:System.Speech.Synthesis.TtsEngine.TextFragment>配列を受け取り、基になる合成エンジン<xref:System.Speech.Synthesis.TtsEngine.TextFragment>の`Speak`メソッドに渡されるインスタンスの新しい配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-140">Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.</span></span>  
  
2.  <span data-ttu-id="8dab4-141"><xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>各インスタンスのプロパティによって返されるのプロパティによって検出された列挙値がの場合、実装 <xref:System.Speech.Synthesis.TtsEngine.TextFragment></span><span class="sxs-lookup"><span data-stu-id="8dab4-141">If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, the implementation</span></span>  
  
    -   <span data-ttu-id="8dab4-142">読み上げられるテキストの Americanism を Britishisms に変換します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-142">Translates Americanism to Britishisms in the text to be spoken.</span></span>  
  
    -   <span data-ttu-id="8dab4-143">実装<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> に提供 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> されるインターフェイスのプロパティがイベントの種類をサポートしている場合は、のインスタンスを使用して、シンセサイザーの進行状況メーターを作成するためのイベントを作成します。 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary></span><span class="sxs-lookup"><span data-stu-id="8dab4-143">If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.</span></span>  
  
         <span data-ttu-id="8dab4-144">を含む<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>のパラメーターは、 `LogSpeechEvent`メソッドを使用して生成されたイベントを記録するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-144">The parameters on <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, including <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> are used to log the event generated through the `LogSpeechEvent` method.</span></span>  
  
3.  <span data-ttu-id="8dab4-145">その後、変更<xref:System.Speech.Synthesis.TtsEngine.TextFragment>された配列を使用して音声レンダリングエンジンが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-145">A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.</span></span>  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="speechEventInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8dab4-146"><c>SpeechEventInfo</c> オブジェクトにハッシュ コードを提供します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-146">Provides a hash code for a <c>SpeechEventInfo</c> object.</span></span></summary>
        <returns><span data-ttu-id="8dab4-147"><see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> オブジェクト用のハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="8dab4-147">A hash code for a <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (event1 As SpeechEventInfo, event2 As SpeechEventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Speech::Synthesis::TtsEngine::SpeechEventInfo event1, System::Speech::Synthesis::TtsEngine::SpeechEventInfo event2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Speech.Synthesis.TtsEngine.SpeechEventInfo * System.Speech.Synthesis.TtsEngine.SpeechEventInfo -&gt; bool" Usage="event1 = event2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="event1" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
        <Parameter Name="event2" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
      </Parameters>
      <Docs>
        <param name="event1"><span data-ttu-id="8dab4-148"><paramref name="event2" /> と比較される <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8dab4-148">The <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> object to compare to <paramref name="event2" />.</span></span></param>
        <param name="event2"><span data-ttu-id="8dab4-149"><paramref name="event1" /> と比較される <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8dab4-149">The <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> object to compare to <paramref name="event1" />.</span></span></param>
        <summary><span data-ttu-id="8dab4-150"><c>SpeechEventInfo</c> の 2 つのインスタンスが等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-150">Determines whether two instances of <c>SpeechEventInfo</c> are equal.</span></span></summary>
        <returns><span data-ttu-id="8dab4-151"><paramref name="event1" /> が <paramref name="event2" /> と同じである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8dab4-151"><see langword="true" /> if <paramref name="event1" /> is the same as <paramref name="event2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="8dab4-152">この演算子の同等のメソッドは<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals%28System.Speech.Synthesis.TtsEngine.SpeechEventInfo%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="8dab4-152">The equivalent method for this operator is <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals%28System.Speech.Synthesis.TtsEngine.SpeechEventInfo%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, valuetype System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (event1 As SpeechEventInfo, event2 As SpeechEventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Speech::Synthesis::TtsEngine::SpeechEventInfo event1, System::Speech::Synthesis::TtsEngine::SpeechEventInfo event2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Speech.Synthesis.TtsEngine.SpeechEventInfo * System.Speech.Synthesis.TtsEngine.SpeechEventInfo -&gt; bool" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality (event1, event2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="event1" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
        <Parameter Name="event2" Type="System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
      </Parameters>
      <Docs>
        <param name="event1"><span data-ttu-id="8dab4-153"><paramref name="event2" /> と比較される <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8dab4-153">The <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> object to compare to <paramref name="event2" />.</span></span></param>
        <param name="event2"><span data-ttu-id="8dab4-154"><paramref name="event1" /> と比較される <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8dab4-154">The <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> object to compare to <paramref name="event1" />.</span></span></param>
        <summary><span data-ttu-id="8dab4-155"><c>SpeechEventInfo</c>の 2 つのインスタンスが等しくないかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-155">Determines whether two instances of <c>SpeechEventInfo</c> are not equal.</span></span></summary>
        <returns><span data-ttu-id="8dab4-156"><paramref name="event1" /> が <paramref name="event2" /> と異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8dab4-156"><see langword="true" /> if <paramref name="event1" /> is different from <paramref name="event2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="8dab4-157">この演算子の同等のメソッドは<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals%28System.Speech.Synthesis.TtsEngine.SpeechEventInfo%29?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="8dab4-157">The equivalent method for this operator is <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals%28System.Speech.Synthesis.TtsEngine.SpeechEventInfo%29?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Param1">
      <MemberSignature Language="C#" Value="public int Param1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Param1" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Param1 As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Param1 { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Param1 : int" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8dab4-158"><see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> の現在のインスタンスが要求を行うために使用されるイベントを生成するために音声プラットフォームに渡される <see langword="integer" /> 値 (コンストラクター内の <paramref name="param1" />) を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-158">Gets and set the <see langword="integer" /> value (<paramref name="param1" /> in the constructor) to be passed to the Speech platform to generate an event the current instance of <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> is used to request.</span></span></summary>
        <value><span data-ttu-id="8dab4-159"><see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> の現在のインスタンスで指定されたイベントの生成時に、音声のプラットフォームに渡される <see langword="integer" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-159">Returns the <see langword="integer" /> to be passed to Speech platform when the event specified by the current instance of <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> is generated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8dab4-160">の<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1%2A> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>プロパティの要件と意味は、の値によって一意に決定され、インスタンスのプロパティによって決まります。 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo></span><span class="sxs-lookup"><span data-stu-id="8dab4-160">The requirements and meaning of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1%2A> property of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> are uniquely determined by the values of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> and <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> properties the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance.</span></span>  
  
 <span data-ttu-id="8dab4-161">の使用<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1%2A>方法の詳細については、 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8dab4-161">For detailed information on how use <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1%2A>, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8dab4-162">次の例<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>は、を継承し、、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.FragmentState>、、およびの使用を使用しているカスタム音声合成実装の一部です。<xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span><span class="sxs-lookup"><span data-stu-id="8dab4-162">The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span></span>  
  
 <span data-ttu-id="8dab4-163">の実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span><span class="sxs-lookup"><span data-stu-id="8dab4-163">The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span></span>  
  
1.  <span data-ttu-id="8dab4-164">インスタンスの<xref:System.Speech.Synthesis.TtsEngine.TextFragment>配列を受け取り、基になる合成エンジン<xref:System.Speech.Synthesis.TtsEngine.TextFragment>の`Speak`メソッドに渡されるインスタンスの新しい配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-164">Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.</span></span>  
  
2.  <span data-ttu-id="8dab4-165"><xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>各インスタンスのプロパティによって返されるのプロパティによって検出された列挙値がの場合、実装 <xref:System.Speech.Synthesis.TtsEngine.TextFragment></span><span class="sxs-lookup"><span data-stu-id="8dab4-165">If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, the implementation</span></span>  
  
    -   <span data-ttu-id="8dab4-166">読み上げられるテキストの Americanism を Britishisms に変換します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-166">Translates Americanism to Britishisms in the text to be spoken.</span></span>  
  
    -   <span data-ttu-id="8dab4-167">実装<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> に提供 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> されるインターフェイスのプロパティがイベントの種類をサポートしている場合は、のインスタンスを使用して、シンセサイザーの進行状況メーターを作成するためのイベントを作成します。 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary></span><span class="sxs-lookup"><span data-stu-id="8dab4-167">If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.</span></span>  
  
         <span data-ttu-id="8dab4-168">を含む<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1%2A>のパラメーターは、 `LogSpeechEvent`メソッドを使用して生成されたイベントを記録するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-168">The parameters on <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, including <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1%2A> are used to log the event generated through the `LogSpeechEvent` method.</span></span>  
  
3.  <span data-ttu-id="8dab4-169">その後、変更<xref:System.Speech.Synthesis.TtsEngine.TextFragment>された配列を使用して音声レンダリングエンジンが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-169">A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.</span></span>  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Param2">
      <MemberSignature Language="C#" Value="public IntPtr Param2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Param2" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Param2 As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Param2 { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Param2 : nativeint" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8dab4-170"><see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> の現在のインスタンスが要求を行うために使用するイベントを生成するために音声プラットフォームに渡されるオブジェクトを参照する <see langword="System.IntPtr" /> インスタンス (コンストラクター内の <paramref name="param2" />) を取得および設定します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-170">Gets and set the <see langword="System.IntPtr" /> instance (<paramref name="param2" /> in the constructor) referencing the object to be passed to the Speech platform to generate an event the current instance of <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> is used to request.</span></span></summary>
        <value><span data-ttu-id="8dab4-171"><see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> の現在のインスタンスで指定されたイベントの生成時に、音声のプラットフォームに渡されるオブジェクトを参照する <see langword="System.IntPtr" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-171">Returns the <see langword="System.IntPtr" /> referencing the object to be passed to Speech platform when the event specified by the current instance of <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> is generated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8dab4-172">の`System.IntPtr` <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A>プロパティの参照に関する要件は、の値と、インスタンスのプロパティによって一意に決定されます。 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo></span><span class="sxs-lookup"><span data-stu-id="8dab4-172">The requirements on the `System.IntPtr` reference of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A> property of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> are uniquely determined by the values of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> and <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> properties the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance.</span></span>  
  
 <span data-ttu-id="8dab4-173">の使用<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>方法の詳細については、 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8dab4-173">For detailed information on how use <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8dab4-174">次の例<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>は、を継承し、、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.FragmentState>、、およびの使用を使用しているカスタム音声合成実装の一部です。<xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span><span class="sxs-lookup"><span data-stu-id="8dab4-174">The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span></span>  
  
 <span data-ttu-id="8dab4-175">の実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span><span class="sxs-lookup"><span data-stu-id="8dab4-175">The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span></span>  
  
1.  <span data-ttu-id="8dab4-176">インスタンスの<xref:System.Speech.Synthesis.TtsEngine.TextFragment>配列を受け取り、基になる合成エンジン<xref:System.Speech.Synthesis.TtsEngine.TextFragment>の`Speak`メソッドに渡されるインスタンスの新しい配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-176">Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.</span></span>  
  
2.  <span data-ttu-id="8dab4-177"><xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>各インスタンスのプロパティによって返されるのプロパティによって検出された列挙値がの場合、実装 <xref:System.Speech.Synthesis.TtsEngine.TextFragment></span><span class="sxs-lookup"><span data-stu-id="8dab4-177">If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, the implementation</span></span>  
  
    -   <span data-ttu-id="8dab4-178">読み上げられるテキストの Americanism を Britishisms に変換します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-178">Translates Americanism to Britishisms in the text to be spoken.</span></span>  
  
    -   <span data-ttu-id="8dab4-179">実装<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> に提供 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> されるインターフェイスのプロパティがイベントの種類をサポートしている場合は、のインスタンスを使用して、シンセサイザーの進行状況メーターを作成するためのイベントを作成します。 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary></span><span class="sxs-lookup"><span data-stu-id="8dab4-179">If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.</span></span>  
  
         <span data-ttu-id="8dab4-180">を含む<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>のパラメーターは、 `LogSpeechEvent`メソッドを使用して生成されたイベントを記録するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-180">The parameters on <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, including <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A> are used to log the event generated through the `LogSpeechEvent` method.</span></span>  
  
3.  <span data-ttu-id="8dab4-181">その後、変更<xref:System.Speech.Synthesis.TtsEngine.TextFragment>された配列を使用して音声レンダリングエンジンが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-181">A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.</span></span>  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterType">
      <MemberSignature Language="C#" Value="public short ParameterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 ParameterType" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParameterType As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short ParameterType { short get(); };" />
      <MemberSignature Language="F#" Value="member this.ParameterType : int16" Usage="System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8dab4-182">現在の <see cref="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" /> オブジェクトの <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> パラメーターが返す <see langword="IntPtr" /> によってポイントされるオブジェクトのデータ型を返します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-182">Returns the data type of the object pointed to by the <see langword="IntPtr" /> returned by the <see cref="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" /> parameter on the current <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> object.</span></span></summary>
        <value><span data-ttu-id="8dab4-183"><see cref="T:System.Speech.Synthesis.TtsEngine.EventParameterType" /> の列挙体のメンバーに対応し、<see cref="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" /> パラメーターによって返される <see langword="short" /> でポイントされるオブジェクトのデータ型を示し、現在の <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> オブジェクトのコンストラクターに 2 番目の引数として使用される <see langword="IntPtr" /> 値。</span><span class="sxs-lookup"><span data-stu-id="8dab4-183">A <see langword="short" /> value corresponding to a member of the <see cref="T:System.Speech.Synthesis.TtsEngine.EventParameterType" /> enumeration and indicating the data type of the object pointed to by the <see langword="IntPtr" /> returned by the <see cref="P:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2" /> parameter and used as the second argument for the constructor of the current <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8dab4-184">の`System.IntPtr` <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A>プロパティの参照に関する要件は、の値と、インスタンスのプロパティによって一意に決定されます。 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo></span><span class="sxs-lookup"><span data-stu-id="8dab4-184">The requirements on the `System.IntPtr` reference of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A> property of <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> are uniquely determined by the values of the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> and <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> properties the <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance.</span></span>  
  
 <span data-ttu-id="8dab4-185">の使用<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>方法の詳細については、 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8dab4-185">For detailed information on how use <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>, see documentation for <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8dab4-186">次の例<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>は、を継承し、、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.FragmentState>、、およびの使用を使用しているカスタム音声合成実装の一部です。<xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span><span class="sxs-lookup"><span data-stu-id="8dab4-186">The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span></span>  
  
 <span data-ttu-id="8dab4-187">の実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span><span class="sxs-lookup"><span data-stu-id="8dab4-187">The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span></span>  
  
1.  <span data-ttu-id="8dab4-188">インスタンスの<xref:System.Speech.Synthesis.TtsEngine.TextFragment>配列を受け取り、基になる合成エンジン<xref:System.Speech.Synthesis.TtsEngine.TextFragment>の`Speak`メソッドに渡されるインスタンスの新しい配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-188">Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.</span></span>  
  
2.  <span data-ttu-id="8dab4-189"><xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>各インスタンスのプロパティによって返されるのプロパティによって検出された列挙値がの場合、実装 <xref:System.Speech.Synthesis.TtsEngine.TextFragment></span><span class="sxs-lookup"><span data-stu-id="8dab4-189">If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, the implementation</span></span>  
  
    -   <span data-ttu-id="8dab4-190">読み上げられるテキストの Americanism を Britishisms に変換します。</span><span class="sxs-lookup"><span data-stu-id="8dab4-190">Translates Americanism to Britishisms in the text to be spoken.</span></span>  
  
    -   <span data-ttu-id="8dab4-191">実装<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> に提供 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> されるインターフェイスのプロパティがイベントの種類をサポートしている場合は、のインスタンスを使用して、シンセサイザーの進行状況メーターを作成するためのイベントを作成します。 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary></span><span class="sxs-lookup"><span data-stu-id="8dab4-191">If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.</span></span>  
  
         <span data-ttu-id="8dab4-192">を含む<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A>のパラメーターは、 `LogSpeechEvent`メソッドを使用して生成されたイベントを記録するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-192">The parameters on <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, including <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> are used to log the event generated through the `LogSpeechEvent` method.</span></span>  
  
3.  <span data-ttu-id="8dab4-193">その後、変更<xref:System.Speech.Synthesis.TtsEngine.TextFragment>された配列を使用して音声レンダリングエンジンが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8dab4-193">A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.</span></span>  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
