<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f997637b2e580bde8d2113499021c961c4dc139d" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52216771" /></Metadata><TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TtsEngineSsml" />
  <TypeSignature Language="C++ CLI" Value="public ref class TtsEngineSsml abstract" />
  <TypeSignature Language="F#" Value="type TtsEngineSsml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>すべての音声読み上げ合成エンジンによって実装される抽象基本クラス。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタム音声エンジンを構築するアプリケーション常に実装する必要あります抽象基本クラスから派生したクラス<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>します。  
  
 登録済みの正しく実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>によってシンセサイザー音声として使用できます<xref:System.Speech.Synthesis>ベースのアプリケーションの名前空間。  
  
 オブジェクトから継承する<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>、次のメンバーをオーバーライドする必要があります: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>と<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>します。  
  
 最も重要なメンバー、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>を実装するクラスは、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>メソッド。  
  
 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>メソッドは受信インフラストラクチャ テキスト パーサーによって呼び出されます。  
  
1.  参照、<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>もキューやオーディオ出力の書き込みなどのシステム サービスへのアクセスを提供するインターフェイス。  
  
2.  配列の<xref:System.Speech.Synthesis.TtsEngine.TextFragment>インスタンスによって生成されたマークアップ言語 SSML (Speech Synthesis) 入力します。 音声として表示するテキストをに加えて SSML の解析で音声の要求の属性に関する情報を格納する<xref:System.Speech.Synthesis.TtsEngine.FragmentState>インスタンスに関連付けられた各着信<xref:System.Speech.Synthesis.TtsEngine.TextFragment>オブジェクト。  
  
 音声シンセサイザー アプリケーションで、実装することでの指定した出力形式の要求を行うことが必要に応じてできます<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>正しいオーディオ出力を提供するときに、プラットフォームによって呼び出されます。  
  
 実装するときは、の実装を発音の辞書、外部の定義を管理するためのサポートも提供<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>と<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (registryKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TtsEngineSsml(System::String ^ registryKey);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml : string -&gt; System.Speech.Synthesis.TtsEngine.TtsEngineSsml" Usage="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml registryKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey"><see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 実装エンジンに関連付けられた音声トークンのレジストリ キーの完全な名前 。</param>
        <summary>適切な音声トークン レジストリ キーに基づいて <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> の新しいインスタンスを構築します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターの呼び出しが生成される通常<xref:System.Speech.Synthesis>ベースのアプリケーションのシンセサイザーの音声を選択するのインスタンスによって使用される<xref:System.Speech.Synthesis.SpeechSynthesizer>します。  
  
 A <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens の下にある必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddLexicon(Uri ^ uri, System::String ^ mediaType, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member AddLexicon : Uri * string * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.AddLexicon (uri, mediaType, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">用語集情報の場所を示す <see langword="System.Uri" /> の有効なインスタンス。</param>
        <param name="mediaType">用語集のメディアの種類を含む文字列。 メディアの種類は大文字と小文字が区別されます。</param>
        <param name="site">プラットフォームのインフラストラクチャとの対話に使用される <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> インターフェイスへの参照。</param>
        <summary>現在の <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> インスタンスによって実装された <see langword="Synthesizer" /><see langword="Voice" /> に用語集を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 発音辞書は、単語または語句とその発音の適切な発音アルファベットを使用して指定のコレクションです。  
  
 このメソッドへの応答でプラットフォーム インフラストラクチャによって呼び出されます、<xref:System.Speech.Synthesis>ベースのアプリケーションを呼び出す<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>シンセサイザー音声を現在の実装を使用して、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>インスタンス。  
  
 値`mediaType`SSML の仕様が MIME を使用してメディアの仕様については、MIME 仕様では通常します。  
  
   
  
## Examples  
 実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>を使用して、<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>インターフェイスに渡されるリソースから用語集を読み込みます。 格納し、`System.IO.Stream`の辞書を`System.Collections.Generic.Dictionary`辞書 URI によってインデックス付けされたインスタンス。  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>完全に精通することしに格納されている辞書を処理できるようにする実装の責任<paramref name="uri" />します。 この実装は、追跡を追加するすべての辞書の有効期間を管理する必要がありますも。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IntPtr GetOutputFormat(System::Speech::Synthesis::TtsEngine::SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputFormat : System.Speech.Synthesis.TtsEngine.SpeakOutputFormat * nativeint -&gt; nativeint" Usage="ttsEngineSsml.GetOutputFormat (speakOutputFormat, targetWaveFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat">要求されたオーディオ出力形式の種類を示す <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" /> 列挙体の有効なメンバー。</param>
        <param name="targetWaveFormat"><paramref name="speakOutputFormat" /> の引数で要求された、オーディオ形式の種類の詳細設定を含む <see langword="struct" /> へのポインター。</param>
        <summary>特定の出力形式をサポートする合成エンジンへの要求に対する、特定の合成エンジン応答によってサポートされた、最も一致するオーディオ出力を返します。</summary>
        <returns>出力形式に関する詳細情報を含む <see langword="IntPtr" /> を参照する <see langword="struct" /> の有効なインスタンスを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 として使用する構造体`targetWaveFormat`によって返されるとメソッドと互換性のある、 `WAVEFORMATEX` SAPI で使用可能な戻り値を使用して割り当てる必要があると`CoTaskMemAlloc`します。  
  
 `struct`に相当する機能を提供する必要があります。  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 次のサンプル実装は、許容範囲内にある場合、それらを使用して、それ以外の場合の既定値を使用して、選択した入力を検証します。  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>継承するオブジェクト<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />で指定された要求の出力形式を調べる必要があります<paramref name="targetWaveFormat" />でサポートされる最も近い形式を返します。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveLexicon(Uri ^ uri, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member RemoveLexicon : Uri * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.RemoveLexicon (uri, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">用語集情報の場所を示す <see langword="System.Uri" /> の有効なインスタンス。</param>
        <param name="site">インフラストラクチャのリソースにアクセスできるようにするために、プラットフォームのインフラストラクチャによって渡される <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> インターフェイスへの参照。</param>
        <summary>現在の <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> インスタンスによって実装される <see langword="Synthesizer" /><see langword="Voice" /> によって現在読み込まれている辞書を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 発音辞書は、単語または語句とその発音の適切な発音アルファベットを使用して指定のコレクションです。  
  
 このメソッドは通常への応答と呼ばれる、<xref:System.Speech.Synthesis>ベースのアプリケーションを呼び出す<xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A>シンセサイザー音声を現在の実装を使用して、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>インスタンス。  
  
   
  
## Examples  
 実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>辞書の URI を使用してインスタンスを照会`System.Collections.Generic.Dictionary`の`System.IO.Stream`ストリームを閉じるし、用語集を参照する uri を削除します。  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>完全に精通することしに格納されている辞書を処理できるようにする実装の責任<paramref name="uri" />します。 実装する必要がありますも追跡し、削除されるすべての辞書の有効期間を管理します。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Speak (fragment As TextFragment(), waveHeader As IntPtr, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Speak(cli::array &lt;System::Speech::Synthesis::TtsEngine::TextFragment ^&gt; ^ fragment, IntPtr waveHeader, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member Speak : System.Speech.Synthesis.TtsEngine.TextFragment[] * nativeint * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.Speak (fragment, waveHeader, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment">音声にレンダリングされるテキストを含む <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> インスタンスの配列。</param>
        <param name="waveHeader">オーディオ出力の形式を含む構造体を指している <see langword="IntPtr" />。</param>
        <param name="site">インフラストラクチャのリソースにアクセスできるようにするために、プラットフォームのインフラストラクチャによって渡される <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> インターフェイスへの参照。</param>
        <summary>指定した出力形式で、指定した <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> 配列をレンダリングします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 として使用する構造体`waveHeader`によって返されると、メソッドと互換性のある、 `WAVEFORMATEX` SAPI で使用できます。  
  
 `struct`に相当する機能を提供する必要があります。  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 次の例から継承するカスタムの音声合成の実装の一部は、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>の使用を使用して、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment>、 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>、<xref:System.Speech.Synthesis.TtsEngine.FragmentState>と <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 実装 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  配列を受け取る<xref:System.Speech.Synthesis.TtsEngine.TextFragment>インスタンスし、の新しい配列を作成します。<xref:System.Speech.Synthesis.TtsEngine.TextFragment>に渡されるインスタンス、`Speak`メソッドを基になるの合成エンジン。  
  
2.  場合、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>から列挙値がによって検出された、<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>プロパティを<xref:System.Speech.Synthesis.TtsEngine.FragmentState>によって返される、<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>の各プロパティ<xref:System.Speech.Synthesis.TtsEngine.TextFragment>インスタンスが<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>、実装  
  
    -   読み上げるテキストで Americanism Britishisms に変換します。  
  
    -   場合、<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>プロパティを<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>実装のサポートを提供するインターフェイス、<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>イベントの種類、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>シンセサイザーの進行状況バーが作成されたドライブにイベントを作成するインスタンスを使用します。  
  
3.  音声のレンダリング エンジンが呼び出され、変更されたと<xref:System.Speech.Synthesis.TtsEngine.TextFragment>配列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>カスタムの音声合成の実装を使用して<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />と<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />フィルターまたはのメンバーをプラットフォームのインフラストラクチャを使用して構築シンセサイザー アプリケーション間の仲介役として機能、<see cref="N:System.Speech.Synthesis" />名前空間とシステムの音声合成エンジンを基になります。  
  
A<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />実装。 
1.  トラップまたは受信の側面を変更する<see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />オブジェクト 
2.  サイトへの参照を使用して、必要なイベントを生成、<see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />インスタンス 
3.  実際の合成の音声を生成します。  
  
音声の生成が呼び出すことによって行われます最も一般的<c>Speak</c>レンダリング エンジンは、オペレーティング システムによって提供される音声のいずれかにします。  
  
1 つの使用可能な音声のレンダリング エンジンを使用しない場合から継承するオブジェクト<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />独自の音声のレンダリング エンジンを作成する必要があります。  
  
アクセス、 <c>Speak</c>レジストリとリフレクションを使用して取得したメソッド。 である必要があります。  
  
継承する場合<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />、次のメンバーをオーバーライドする必要があります: <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />、 <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />、 <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />、 <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />、および<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />します。</para></block>
      </Docs>
    </Member>
  </Members>
</Type>