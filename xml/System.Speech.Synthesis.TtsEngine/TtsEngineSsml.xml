<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f997637b2e580bde8d2113499021c961c4dc139d" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52216771" /></Metadata><TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TtsEngineSsml" />
  <TypeSignature Language="C++ CLI" Value="public ref class TtsEngineSsml abstract" />
  <TypeSignature Language="F#" Value="type TtsEngineSsml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="89b1d-101">すべての音声読み上げ合成エンジンによって実装される抽象基本クラス。</span><span class="sxs-lookup"><span data-stu-id="89b1d-101">Abstract base class to be implemented by all text to speech synthesis engines.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89b1d-102">カスタム音声エンジンを構築するアプリケーション常に実装する必要あります抽象基本クラスから派生したクラス<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-102">To construct a custom text to speech engine, an application must always implement a class derived from the abstract base class <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>.</span></span>  
  
 <span data-ttu-id="89b1d-103">登録済みの正しく実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>によってシンセサイザー音声として使用できます<xref:System.Speech.Synthesis>ベースのアプリケーションの名前空間。</span><span class="sxs-lookup"><span data-stu-id="89b1d-103">A properly registered implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> can then be used as a synthesizer voice by <xref:System.Speech.Synthesis> name space based applications.</span></span>  
  
 <span data-ttu-id="89b1d-104">オブジェクトから継承する<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>、次のメンバーをオーバーライドする必要があります: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>と<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-104">Objects inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> must override the following members: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>.</span></span>  
  
 <span data-ttu-id="89b1d-105">最も重要なメンバー、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>を実装するクラスは、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="89b1d-105">The most important member of the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> class to be implemented is the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> method.</span></span>  
  
 <span data-ttu-id="89b1d-106"><xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>メソッドは受信インフラストラクチャ テキスト パーサーによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="89b1d-106">The <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> method is called by the infrastructures text parser receiving:</span></span>  
  
1.  <span data-ttu-id="89b1d-107">参照、<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>もキューやオーディオ出力の書き込みなどのシステム サービスへのアクセスを提供するインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="89b1d-107">A reference to the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interface, which provides access to system services such as even queuing and writing audio output.</span></span>  
  
2.  <span data-ttu-id="89b1d-108">配列の<xref:System.Speech.Synthesis.TtsEngine.TextFragment>インスタンスによって生成されたマークアップ言語 SSML (Speech Synthesis) 入力します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-108">An array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance produced from Speech Synthesis Markup Language (SSML) input.</span></span> <span data-ttu-id="89b1d-109">音声として表示するテキストをに加えて SSML の解析で音声の要求の属性に関する情報を格納する<xref:System.Speech.Synthesis.TtsEngine.FragmentState>インスタンスに関連付けられた各着信<xref:System.Speech.Synthesis.TtsEngine.TextFragment>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="89b1d-109">In addition to text to be rendered as speech, the parsing of the SSML stores information about the requested attributes of the speech in a <xref:System.Speech.Synthesis.TtsEngine.FragmentState> instance associated with each incoming <xref:System.Speech.Synthesis.TtsEngine.TextFragment> object.</span></span>  
  
 <span data-ttu-id="89b1d-110">音声シンセサイザー アプリケーションで、実装することでの指定した出力形式の要求を行うことが必要に応じてできます<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>正しいオーディオ出力を提供するときに、プラットフォームによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="89b1d-110">A speech synthesizer application can optionally make requests for a specified output format by implementing <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> to be called by the platform when it tries to provide the correct audio output.</span></span>  
  
 <span data-ttu-id="89b1d-111">実装するときは、の実装を発音の辞書、外部の定義を管理するためのサポートも提供<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>と<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-111">An implementer can also provide support for managing external definitions of pronunciations, or lexicons, by their implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> and <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (registryKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TtsEngineSsml(System::String ^ registryKey);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml : string -&gt; System.Speech.Synthesis.TtsEngine.TtsEngineSsml" Usage="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml registryKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey"><span data-ttu-id="89b1d-112"><see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 実装エンジンに関連付けられた音声トークンのレジストリ キーの完全な名前</span><span class="sxs-lookup"><span data-stu-id="89b1d-112">Full name of the registry key for the Voice Token associated with the <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> implementation.</span></span> <span data-ttu-id="89b1d-113">。</span><span class="sxs-lookup"><span data-stu-id="89b1d-113">engine.</span></span></param>
        <summary><span data-ttu-id="89b1d-114">適切な音声トークン レジストリ キーに基づいて <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> の新しいインスタンスを構築します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-114">Constructs a new instance of <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> based on an appropriate Voice Token registry key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89b1d-115">このコンス トラクターの呼び出しが生成される通常<xref:System.Speech.Synthesis>ベースのアプリケーションのシンセサイザーの音声を選択するのインスタンスによって使用される<xref:System.Speech.Synthesis.SpeechSynthesizer>します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-115">Calls to this constructor are typically generated by <xref:System.Speech.Synthesis> based applications selecting a synthesizer voice to be used by an instance of <xref:System.Speech.Synthesis.SpeechSynthesizer>.</span></span>  
  
 <span data-ttu-id="89b1d-116">A <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens の下にある必要があります。</span><span class="sxs-lookup"><span data-stu-id="89b1d-116">A <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> must be register under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddLexicon(Uri ^ uri, System::String ^ mediaType, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member AddLexicon : Uri * string * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.AddLexicon (uri, mediaType, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="89b1d-117">用語集情報の場所を示す <see langword="System.Uri" /> の有効なインスタンス。</span><span class="sxs-lookup"><span data-stu-id="89b1d-117">A valid instance of <see langword="System.Uri" /> indicating the location of the lexicon information.</span></span></param>
        <param name="mediaType"><span data-ttu-id="89b1d-118">用語集のメディアの種類を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="89b1d-118">A string containing the media type of the lexicon.</span></span> <span data-ttu-id="89b1d-119">メディアの種類は大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="89b1d-119">Media types are case insensitive.</span></span></param>
        <param name="site"><span data-ttu-id="89b1d-120">プラットフォームのインフラストラクチャとの対話に使用される <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> インターフェイスへの参照。</span><span class="sxs-lookup"><span data-stu-id="89b1d-120">A reference to an <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interface used to interact with the platform infrastructure.</span></span></param>
        <summary><span data-ttu-id="89b1d-121">現在の <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> インスタンスによって実装された <see langword="Synthesizer" /><see langword="Voice" /> に用語集を追加します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-121">Adds a lexicon to the <see langword="Synthesizer" /><see langword="Voice" /> implemented by the current <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89b1d-122">発音辞書は、単語または語句とその発音の適切な発音アルファベットを使用して指定のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="89b1d-122">A pronunciation lexicon is a collection of words or phrases together with their pronunciations specified using an appropriate pronunciation alphabet.</span></span>  
  
 <span data-ttu-id="89b1d-123">このメソッドへの応答でプラットフォーム インフラストラクチャによって呼び出されます、<xref:System.Speech.Synthesis>ベースのアプリケーションを呼び出す<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>シンセサイザー音声を現在の実装を使用して、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="89b1d-123">This method is typically called by the platform infrastructure in response to a <xref:System.Speech.Synthesis> based applications calling <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> and using the synthesizer voice implemented by the current <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> instance.</span></span>  
  
 <span data-ttu-id="89b1d-124">値`mediaType`SSML の仕様が MIME を使用してメディアの仕様については、MIME 仕様では通常します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-124">The value of `mediaType` is typically a MIME specification, as the SSML specification uses MIME for media specifications.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="89b1d-125">実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>を使用して、<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>インターフェイスに渡されるリソースから用語集を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="89b1d-125">The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> uses the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interface passed in to load a lexicon from a resource.</span></span> <span data-ttu-id="89b1d-126">格納し、`System.IO.Stream`の辞書を`System.Collections.Generic.Dictionary`辞書 URI によってインデックス付けされたインスタンス。</span><span class="sxs-lookup"><span data-stu-id="89b1d-126">It then stores a `System.IO.Stream` to the lexicon in a `System.Collections.Generic.Dictionary` instance, indexed by the lexicon URI.</span></span>  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="89b1d-127">完全に精通することしに格納されている辞書を処理できるようにする実装の責任<paramref name="uri" />します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-127">It is the responsibility of the implementation to be fully familiar with and be able to process the lexicon stored at <paramref name="uri" />.</span></span> <span data-ttu-id="89b1d-128">この実装は、追跡を追加するすべての辞書の有効期間を管理する必要がありますも。</span><span class="sxs-lookup"><span data-stu-id="89b1d-128">The implementation must also keep track and manage the lifetimes of all lexicons it adds.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IntPtr GetOutputFormat(System::Speech::Synthesis::TtsEngine::SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputFormat : System.Speech.Synthesis.TtsEngine.SpeakOutputFormat * nativeint -&gt; nativeint" Usage="ttsEngineSsml.GetOutputFormat (speakOutputFormat, targetWaveFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat"><span data-ttu-id="89b1d-129">要求されたオーディオ出力形式の種類を示す <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" /> 列挙体の有効なメンバー。</span><span class="sxs-lookup"><span data-stu-id="89b1d-129">Valid member of the <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" /> enumeration indicating the type of requested audio output format.</span></span></param>
        <param name="targetWaveFormat"><span data-ttu-id="89b1d-130"><paramref name="speakOutputFormat" /> の引数で要求された、オーディオ形式の種類の詳細設定を含む <see langword="struct" /> へのポインター。</span><span class="sxs-lookup"><span data-stu-id="89b1d-130">A pointer to a <see langword="struct" /> containing detail setting for the audio format type requested by the <paramref name="speakOutputFormat" /> argument.</span></span></param>
        <summary><span data-ttu-id="89b1d-131">特定の出力形式をサポートする合成エンジンへの要求に対する、特定の合成エンジン応答によってサポートされた、最も一致するオーディオ出力を返します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-131">Returns the best matching audio output supported by a given synthesize engine response to a request to the synthesizer engine for the support of a particular output format.</span></span></summary>
        <returns><span data-ttu-id="89b1d-132">出力形式に関する詳細情報を含む <see langword="IntPtr" /> を参照する <see langword="struct" /> の有効なインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-132">Returns a valid <see langword="IntPtr" /> instance referring to a <see langword="struct" /> containing detailed information about the output format.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89b1d-133">として使用する構造体`targetWaveFormat`によって返されるとメソッドと互換性のある、 `WAVEFORMATEX` SAPI で使用可能な戻り値を使用して割り当てる必要があると`CoTaskMemAlloc`します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-133">The structure used as `targetWaveFormat` and returned by the method should compatible with the `WAVEFORMATEX` available under SAPI, and the returned value should be allocated using `CoTaskMemAlloc`.</span></span>  
  
 <span data-ttu-id="89b1d-134">`struct`に相当する機能を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="89b1d-134">The `struct` must provide functionality equivalent to:</span></span>  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 <span data-ttu-id="89b1d-135">次のサンプル実装は、許容範囲内にある場合、それらを使用して、それ以外の場合の既定値を使用して、選択した入力を検証します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-135">The sample implementation below validates selected inputs, using them if they are within tolerances, otherwise using default values.</span></span>  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="89b1d-136">継承するオブジェクト<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />で指定された要求の出力形式を調べる必要があります<paramref name="targetWaveFormat" />でサポートされる最も近い形式を返します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-136">Object inheriting from <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> should examine the requested output format as specified by <paramref name="targetWaveFormat" /> and return the closest format that it supports.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveLexicon(Uri ^ uri, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member RemoveLexicon : Uri * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.RemoveLexicon (uri, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="89b1d-137">用語集情報の場所を示す <see langword="System.Uri" /> の有効なインスタンス。</span><span class="sxs-lookup"><span data-stu-id="89b1d-137">A valid instance of <see langword="System.Uri" /> indicating the location of the lexicon information.</span></span></param>
        <param name="site"><span data-ttu-id="89b1d-138">インフラストラクチャのリソースにアクセスできるようにするために、プラットフォームのインフラストラクチャによって渡される <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> インターフェイスへの参照。</span><span class="sxs-lookup"><span data-stu-id="89b1d-138">A reference to an <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interface passed in by the platform infrastructure to allow access to the infrastructure resources.</span></span></param>
        <summary><span data-ttu-id="89b1d-139">現在の <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> インスタンスによって実装される <see langword="Synthesizer" /><see langword="Voice" /> によって現在読み込まれている辞書を削除します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-139">Removes a lexicon currently loaded by the <see langword="Synthesizer" /><see langword="Voice" /> implemented by the current <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89b1d-140">発音辞書は、単語または語句とその発音の適切な発音アルファベットを使用して指定のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="89b1d-140">A pronunciation lexicon is a collection of words or phrases together with their pronunciations specified using an appropriate pronunciation alphabet.</span></span>  
  
 <span data-ttu-id="89b1d-141">このメソッドは通常への応答と呼ばれる、<xref:System.Speech.Synthesis>ベースのアプリケーションを呼び出す<xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A>シンセサイザー音声を現在の実装を使用して、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="89b1d-141">This method is typically called in response to a <xref:System.Speech.Synthesis> based applications calling <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> and using the synthesizer voice implemented by the current <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="89b1d-142">実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>辞書の URI を使用してインスタンスを照会`System.Collections.Generic.Dictionary`の`System.IO.Stream`ストリームを閉じるし、用語集を参照する uri を削除します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-142">The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> uses the lexicon URI to query an instance `System.Collections.Generic.Dictionary` for the `System.IO.Stream`, closes the stream and removes the uri referring to the lexicon.</span></span>  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="89b1d-143">完全に精通することしに格納されている辞書を処理できるようにする実装の責任<paramref name="uri" />します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-143">It is the responsibility of the implementation to be fully familiar with and be able to process the lexicon stored at <paramref name="uri" />.</span></span> <span data-ttu-id="89b1d-144">実装する必要がありますも追跡し、削除されるすべての辞書の有効期間を管理します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-144">The implementation must also keep track and manage the lifetimes of all lexicons it removes.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Speak (fragment As TextFragment(), waveHeader As IntPtr, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Speak(cli::array &lt;System::Speech::Synthesis::TtsEngine::TextFragment ^&gt; ^ fragment, IntPtr waveHeader, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member Speak : System.Speech.Synthesis.TtsEngine.TextFragment[] * nativeint * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.Speak (fragment, waveHeader, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment"><span data-ttu-id="89b1d-145">音声にレンダリングされるテキストを含む <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="89b1d-145">An array of <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> instances containing the text to be rendered into speech.</span></span></param>
        <param name="waveHeader"><span data-ttu-id="89b1d-146">オーディオ出力の形式を含む構造体を指している <see langword="IntPtr" />。</span><span class="sxs-lookup"><span data-stu-id="89b1d-146">An <see langword="IntPtr" /> pointing to a structure containing audio output format.</span></span></param>
        <param name="site"><span data-ttu-id="89b1d-147">インフラストラクチャのリソースにアクセスできるようにするために、プラットフォームのインフラストラクチャによって渡される <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> インターフェイスへの参照。</span><span class="sxs-lookup"><span data-stu-id="89b1d-147">A reference to an <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> interface passed in by the platform infrastructure to allow access to the infrastructure resources.</span></span></param>
        <summary><span data-ttu-id="89b1d-148">指定した出力形式で、指定した <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> 配列をレンダリングします。</span><span class="sxs-lookup"><span data-stu-id="89b1d-148">Renders specified <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> array in the specified output format.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89b1d-149">として使用する構造体`waveHeader`によって返されると、メソッドと互換性のある、 `WAVEFORMATEX` SAPI で使用できます。</span><span class="sxs-lookup"><span data-stu-id="89b1d-149">The structure used as `waveHeader` and returned by the method should compatible with the `WAVEFORMATEX` available under SAPI.</span></span>  
  
 <span data-ttu-id="89b1d-150">`struct`に相当する機能を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="89b1d-150">The `struct` must provide functionality equivalent to:</span></span>  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 <span data-ttu-id="89b1d-151">次の例から継承するカスタムの音声合成の実装の一部は、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>の使用を使用して、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment>、 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>、<xref:System.Speech.Synthesis.TtsEngine.FragmentState>と <xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span><span class="sxs-lookup"><span data-stu-id="89b1d-151">The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId></span></span>  
  
 <span data-ttu-id="89b1d-152">実装 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span><span class="sxs-lookup"><span data-stu-id="89b1d-152">The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A></span></span>  
  
1.  <span data-ttu-id="89b1d-153">配列を受け取る<xref:System.Speech.Synthesis.TtsEngine.TextFragment>インスタンスし、の新しい配列を作成します。<xref:System.Speech.Synthesis.TtsEngine.TextFragment>に渡されるインスタンス、`Speak`メソッドを基になるの合成エンジン。</span><span class="sxs-lookup"><span data-stu-id="89b1d-153">Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.</span></span>  
  
2.  <span data-ttu-id="89b1d-154">場合、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>から列挙値がによって検出された、<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A>プロパティを<xref:System.Speech.Synthesis.TtsEngine.FragmentState>によって返される、<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>の各プロパティ<xref:System.Speech.Synthesis.TtsEngine.TextFragment>インスタンスが<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>、実装</span><span class="sxs-lookup"><span data-stu-id="89b1d-154">If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, the implementation</span></span>  
  
    -   <span data-ttu-id="89b1d-155">読み上げるテキストで Americanism Britishisms に変換します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-155">Translates Americanism to Britishisms in the text to be spoken.</span></span>  
  
    -   <span data-ttu-id="89b1d-156">場合、<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>プロパティを<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>実装のサポートを提供するインターフェイス、<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>イベントの種類、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>シンセサイザーの進行状況バーが作成されたドライブにイベントを作成するインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-156">If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.</span></span>  
  
3.  <span data-ttu-id="89b1d-157">音声のレンダリング エンジンが呼び出され、変更されたと<xref:System.Speech.Synthesis.TtsEngine.TextFragment>配列。</span><span class="sxs-lookup"><span data-stu-id="89b1d-157">A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.</span></span>  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="89b1d-158">カスタムの音声合成の実装を使用して<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />と<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />フィルターまたはのメンバーをプラットフォームのインフラストラクチャを使用して構築シンセサイザー アプリケーション間の仲介役として機能、<see cref="N:System.Speech.Synthesis" />名前空間とシステムの音声合成エンジンを基になります。</span><span class="sxs-lookup"><span data-stu-id="89b1d-158">Custom speech synthesizer implements using <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> and <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> work as filters or intermediaries between synthesizer applications constructed using the platform infrastructure through the members of the <see cref="N:System.Speech.Synthesis" /> namespace and underlying system speech synthesis engines.</span></span>  
  
<span data-ttu-id="89b1d-159">A<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />実装。</span><span class="sxs-lookup"><span data-stu-id="89b1d-159">A <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> implementation:</span></span> 
<span data-ttu-id="89b1d-160">1.</span><span class="sxs-lookup"><span data-stu-id="89b1d-160">1.</span></span>  <span data-ttu-id="89b1d-161">トラップまたは受信の側面を変更する<see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />オブジェクト</span><span class="sxs-lookup"><span data-stu-id="89b1d-161">Traps or modify aspects of the incoming <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> objects</span></span> 
<span data-ttu-id="89b1d-162">2.</span><span class="sxs-lookup"><span data-stu-id="89b1d-162">2.</span></span>  <span data-ttu-id="89b1d-163">サイトへの参照を使用して、必要なイベントを生成、<see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />インスタンス</span><span class="sxs-lookup"><span data-stu-id="89b1d-163">Generates any necessary events using the site reference to a <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> instance</span></span> 
<span data-ttu-id="89b1d-164">3.</span><span class="sxs-lookup"><span data-stu-id="89b1d-164">3.</span></span>  <span data-ttu-id="89b1d-165">実際の合成の音声を生成します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-165">Generates the actual synthesized speech.</span></span>  
  
<span data-ttu-id="89b1d-166">音声の生成が呼び出すことによって行われます最も一般的<c>Speak</c>レンダリング エンジンは、オペレーティング システムによって提供される音声のいずれかにします。</span><span class="sxs-lookup"><span data-stu-id="89b1d-166">Generation of speech is most typically done by calling <c>Speak</c> on one of the speech rendering engines provided by the operating system.</span></span>  
  
<span data-ttu-id="89b1d-167">1 つの使用可能な音声のレンダリング エンジンを使用しない場合から継承するオブジェクト<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />独自の音声のレンダリング エンジンを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="89b1d-167">If one of the available speech rendering engines is not used, a object inheriting from <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> must create its own speech rendering engine.</span></span>  
  
<span data-ttu-id="89b1d-168">アクセス、 <c>Speak</c>レジストリとリフレクションを使用して取得したメソッド。</span><span class="sxs-lookup"><span data-stu-id="89b1d-168">Access to the <c>Speak</c> method on obtained using the registry and reflection.</span></span> <span data-ttu-id="89b1d-169">である必要があります。</span><span class="sxs-lookup"><span data-stu-id="89b1d-169">.</span></span>  
  
<span data-ttu-id="89b1d-170">継承する場合<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />、次のメンバーをオーバーライドする必要があります: <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />、 <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />、 <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />、 <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />、および<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />します。</span><span class="sxs-lookup"><span data-stu-id="89b1d-170">When you inherit from <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />, you must override the following members: <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />, and <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>