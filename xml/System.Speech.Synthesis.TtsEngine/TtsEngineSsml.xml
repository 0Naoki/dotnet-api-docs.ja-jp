<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8b2dcfe883fdf948ef1cbb68701b810d55d6e1ef" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70707367" /></Metadata><TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TtsEngineSsml" />
  <TypeSignature Language="C++ CLI" Value="public ref class TtsEngineSsml abstract" />
  <TypeSignature Language="F#" Value="type TtsEngineSsml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>すべての音声読み上げ合成エンジンによって実装される抽象基本クラス。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタムテキストを speech エンジンに構築するには、アプリケーションは常に抽象基本クラス<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>から派生したクラスを実装する必要があります。  
  
 適切に登録され<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>たの実装は、名前空間ベースの<xref:System.Speech.Synthesis>アプリケーションで、シンセサイザーの音声として使用できます。  
  
 を継承<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>するオブジェクトは<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>、、、、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>および<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>の各メンバーをオーバーライドする必要があります。  
  
 実装する<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>クラスの<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>中で最も重要なメンバーは、メソッドです。  
  
 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>メソッドは、受信するインフラストラクチャテキストパーサーによって呼び出されます。  
  
1.  オーディオ出力をキュー <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>に置いたり書き込んだりするなど、システムサービスへのアクセスを提供するインターフェイスへの参照。  
  
2.  音声合成マーク<xref:System.Speech.Synthesis.TtsEngine.TextFragment>アップ言語 (SSML) 入力から生成されたインスタンスの配列。 音声として表示されるテキストに加えて、SSML を解析すると、受信<xref:System.Speech.Synthesis.TtsEngine.FragmentState> <xref:System.Speech.Synthesis.TtsEngine.TextFragment>した各オブジェクトに関連付けられているインスタンスに音声の要求された属性に関する情報が格納されます。  
  
 Speech シンセサイザーアプリケーションでは、必要に応じて、を実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>して、正しいオーディオ出力を提供しようとしたときにプラットフォームによって呼び出されるようにすることで、指定した出力形式に対する要求を行うことができます。  
  
 また、実装者は、および<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>の実装によって、発音 (辞書) の外部定義を管理するためのサポートを提供することもできます。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (registryKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TtsEngineSsml(System::String ^ registryKey);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml : string -&gt; System.Speech.Synthesis.TtsEngine.TtsEngineSsml" Usage="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml registryKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey"><see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 実装エンジンに関連付けられた音声トークンのレジストリ キーの完全な名前 。</param>
        <summary>適切な音声トークン レジストリ キーに基づいて <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> の新しいインスタンスを構築します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターの呼び出しは、通常、 <xref:System.Speech.Synthesis>のインスタンスによって使用されるシンセサイザー音声を選択する<xref:System.Speech.Synthesis.SpeechSynthesizer>ベースのアプリケーションによって生成されます。  
  
 は<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens. の下で登録する必要があります  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddLexicon(Uri ^ uri, System::String ^ mediaType, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member AddLexicon : Uri * string * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.AddLexicon (uri, mediaType, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">用語集情報の場所を示す <see langword="System.Uri" /> の有効なインスタンス。</param>
        <param name="mediaType">用語集のメディアの種類を含む文字列。 メディアの種類は大文字と小文字が区別されます。</param>
        <param name="site">プラットフォームのインフラストラクチャとの対話に使用される <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> インターフェイスへの参照。</param>
        <summary>現在の <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> インスタンスによって実装された <see langword="Synthesizer" /><see langword="Voice" /> に用語集を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 発音辞書は、適切な発音アルファベットを使用して指定された発音と、単語または語句のコレクションです。  
  
 このメソッドは、通常、現在<xref:System.Speech.Synthesis> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>のインスタンスによって実装されて<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>いるシンセサイザー音声を呼び出して使用するベースのアプリケーションに応答して、プラットフォームインフラストラクチャによって呼び出されます。  
  
 SSML 仕様で`mediaType`は、メディア仕様に mime が使用されるため、の値は通常、mime 仕様です。  
  
   
  
## Examples  
 の<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>実装では、 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>渡されたインターフェイスを使用して、リソースから辞書を読み込みます。 次に、を`System.IO.Stream`辞書 URI でインデックス付け`System.Collections.Generic.Dictionary`されたインスタンスに辞書に格納します。  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>の実装は、に格納され<paramref name="uri" />ている辞書を完全に理解し、処理できるようにする必要があります。 実装では、追加するすべての辞書の有効期間を追跡し、管理する必要もあります。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IntPtr GetOutputFormat(System::Speech::Synthesis::TtsEngine::SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputFormat : System.Speech.Synthesis.TtsEngine.SpeakOutputFormat * nativeint -&gt; nativeint" Usage="ttsEngineSsml.GetOutputFormat (speakOutputFormat, targetWaveFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat">要求されたオーディオ出力形式の種類を示す <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" /> 列挙体の有効なメンバー。</param>
        <param name="targetWaveFormat"><paramref name="speakOutputFormat" /> の引数で要求された、オーディオ形式の種類の詳細設定を含む <see langword="struct" /> へのポインター。</param>
        <summary>特定の出力形式をサポートする合成エンジンへの要求に対する、特定の合成エンジン応答によってサポートされた、最も一致するオーディオ出力を返します。</summary>
        <returns>出力形式に関する詳細情報を含む <see langword="IntPtr" /> を参照する <see langword="struct" /> の有効なインスタンスを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッドによって`targetWaveFormat`返され、メソッドによって返される`WAVEFORMATEX`構造体は、SAPI で使用可能なと互換性が`CoTaskMemAlloc`ある必要があり、戻り値はを使用して割り当てる必要があります。  
  
 は`struct` 、と同等の機能を提供する必要があります。  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 次のサンプル実装は、選択された入力を、許容範囲内にある場合はそれを使用して検証します。それ以外の場合は既定値を使用します。  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>から<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />継承するオブジェクトでは、によっ<paramref name="targetWaveFormat" />て指定された要求された出力形式を確認し、サポートされる最も近い形式を返す必要があります。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveLexicon(Uri ^ uri, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member RemoveLexicon : Uri * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.RemoveLexicon (uri, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">用語集情報の場所を示す <see langword="System.Uri" /> の有効なインスタンス。</param>
        <param name="site">インフラストラクチャのリソースにアクセスできるようにするために、プラットフォームのインフラストラクチャによって渡される <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> インターフェイスへの参照。</param>
        <summary>現在の <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> インスタンスによって実装される <see langword="Synthesizer" /><see langword="Voice" /> によって現在読み込まれている辞書を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 発音辞書は、適切な発音アルファベットを使用して指定された発音と、単語または語句のコレクションです。  
  
 このメソッドは、通常、現在<xref:System.Speech.Synthesis> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>のインスタンスによって<xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A>実装されているシンセサイザー音声を呼び出して使用するベースのアプリケーションに応答して呼び出されます。  
  
   
  
## Examples  
 の<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>実装では、 `System.IO.Stream`辞書 URI を使用して`System.Collections.Generic.Dictionary`のインスタンスを照会し、ストリームを閉じて、辞書を参照する URI を削除します。  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>の実装は、に格納され<paramref name="uri" />ている辞書を完全に理解し、処理できるようにする必要があります。 また、この実装では、削除するすべての辞書の有効期間を追跡し、管理する必要もあります。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Speak (fragment As TextFragment(), waveHeader As IntPtr, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Speak(cli::array &lt;System::Speech::Synthesis::TtsEngine::TextFragment ^&gt; ^ fragment, IntPtr waveHeader, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member Speak : System.Speech.Synthesis.TtsEngine.TextFragment[] * nativeint * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.Speak (fragment, waveHeader, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment">音声にレンダリングされるテキストを含む <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> インスタンスの配列。</param>
        <param name="waveHeader">オーディオ出力の形式を含む構造体を指している <see langword="IntPtr" />。</param>
        <param name="site">インフラストラクチャのリソースにアクセスできるようにするために、プラットフォームのインフラストラクチャによって渡される <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> インターフェイスへの参照。</param>
        <summary>指定した出力形式で、指定した <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> 配列をレンダリングします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッドによって`waveHeader`返され、メソッドによって返される`WAVEFORMATEX`構造体は、SAPI で使用可能なと互換性がある必要があります。  
  
 は`struct` 、と同等の機能を提供する必要があります。  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 次の例<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>は、を継承し、、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> <xref:System.Speech.Synthesis.TtsEngine.FragmentState>、、およびの使用を使用しているカスタム音声合成実装の一部です。<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 の実装<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  インスタンスの<xref:System.Speech.Synthesis.TtsEngine.TextFragment>配列を受け取り、基になる合成エンジン<xref:System.Speech.Synthesis.TtsEngine.TextFragment>の`Speak`メソッドに渡されるインスタンスの新しい配列を作成します。  
  
2.  <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> <xref:System.Speech.Synthesis.TtsEngine.FragmentState> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak> <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>各インスタンスのプロパティによって返されるのプロパティによって検出された列挙値がの場合、実装 <xref:System.Speech.Synthesis.TtsEngine.TextFragment>  
  
    -   読み上げられるテキストの Americanism を Britishisms に変換します。  
  
    -   実装<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> に提供 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> されるインターフェイスのプロパティがイベントの種類をサポートしている場合は、のインスタンスを使用して、シンセサイザーの進行状況メーターを作成するためのイベントを作成します。 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>  
  
3.  その後、変更<xref:System.Speech.Synthesis.TtsEngine.TextFragment>された配列を使用して音声レンダリングエンジンが呼び出されます。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>カスタム音声シンセサイザーは、 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> <see cref="N:System.Speech.Synthesis" />名前<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />空間のメンバーを通じてプラットフォームインフラストラクチャを使用して構築されたシンセサイザーアプリケーション間で、およびの機能を使用して動作を実装します。基になるシステム音声合成エンジン。  
  
<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />実装: 
1.  受信<see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />オブジェクトの特徴をトラップまたは変更します。 
2.  <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />インスタンスへのサイト参照を使用して、必要なイベントを生成します。 
3.  実際に合成された音声を生成します。  
  
音声の生成は、通常、オペレーティングシステムによって提供される音声レンダリングエンジンのいずれかで<c>読み上げ</c>を呼び出すことによって行われます。  
  
使用可能な音声描画エンジンの1つが使用されていない場合<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 、を継承するオブジェクトは独自の speech レンダリングエンジンを作成する必要があります。  
  
レジストリとリフレクションを使用して取得された、<c>読み上げ</c>メソッドにアクセスします。 .  
  
<see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />から継承<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />する場合<see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />は、 <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />、、、、およびの各メンバーをオーバーライドする必要があります。 <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
