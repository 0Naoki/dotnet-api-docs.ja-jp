<Type Name="ObjectContext" FullName="System.Data.Objects.ObjectContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6e0528dd1750781408c9ab3db70cc43f7ff8096d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37678436" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ObjectContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectContext" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectContext : IDisposable" />
  <TypeSignature Language="F#" Value="type ObjectContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>エンティティ データに対してクエリを実行してそのデータをオブジェクトとして操作するための機能を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Data.Objects.ObjectContext> クラスはスレッド セーフではありません。 内のデータ オブジェクトの整合性、<xref:System.Data.Objects.ObjectContext>マルチ スレッド シナリオでは保証されません。  
  
 <xref:System.Data.Objects.ObjectContext>クラスは、概念モデルで定義されているエンティティ型のインスタンスであるオブジェクトとしてデータを操作するための主要なクラスです。 <xref:System.Data.Objects.ObjectContext> クラスのインスタンスでは、次のものがカプセル化されます。  
  
-   データベースへの接続 (<xref:System.Data.EntityClient.EntityConnection> オブジェクトの形式)  
  
-   モデルを記述するメタデータ (<xref:System.Data.Metadata.Edm.MetadataWorkspace> オブジェクトの形式)。  
  
-   キャッシュに保存されているオブジェクトを管理する <xref:System.Data.Objects.ObjectStateManager> オブジェクト  
  
 概念モデルを表すオブジェクト レイヤーが Entity Data Model ツールによって生成されると、クラスを表す、<xref:System.Data.Metadata.Edm.EntityContainer>から派生したが、モデルの<xref:System.Data.Objects.ObjectContext>します。  
  
   
  
## Examples  
 この例がに基づいて、 [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)します。 この例では、<xref:System.Data.Objects.ObjectContext> を作成する方法を示します。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectcontext)]
 [!code-vb[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectcontext)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.Objects.ObjectContext" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectContext (System.Data.EntityClient.EntityConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.EntityClient.EntityConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As EntityConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectContext(System::Data::EntityClient::EntityConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectContext : System.Data.EntityClient.EntityConnection -&gt; System.Data.Objects.ObjectContext" Usage="new System.Data.Objects.ObjectContext connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.EntityClient.EntityConnection" />
      </Parameters>
      <Docs>
        <param name="connection">モデルおよびデータ ソース接続への参照を含む <see cref="T:System.Data.EntityClient.EntityConnection" />。</param>
        <summary>指定された接続を使用して、<see cref="T:System.Data.Objects.ObjectContext" /> クラスの新しいインスタンスを初期化します。 構築時に、メタデータ ワークスペースが <see cref="T:System.Data.EntityClient.EntityConnection" /> オブジェクトから抽出されます。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connection" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connection" /> が無効です。  または、メタデータ ワークスペースが無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectContext (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectContext(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectContext : string -&gt; System.Data.Objects.ObjectContext" Usage="new System.Data.Objects.ObjectContext connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">メタデータ情報へのアクセスも可能にする接続文字列。</param>
        <summary>指定された接続文字列および既定のエンティティ コンテナー名を使用して、<see cref="T:System.Data.Objects.ObjectContext" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `connectionString`は概念モデルにアクセスして、データ ソースに接続するために必要な情報を含む文字列です。 <xref:System.Data.EntityClient.EntityConnectionStringBuilder> クラスを使用すると、文字列の形式を適切に設定できます。  
  
 アプリケーションの構成ファイルに格納されている名前付き接続文字列を作成します。 代わりにこの名前付き接続文字列を指定することができます、`connectionString`パラメーターをインスタンス化するときに、<xref:System.Data.Objects.ObjectContext>クラス。  
  
   
  
## Examples  
 このトピックの例がに基づいて、 [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)します。 この例では、<xref:System.Data.Objects.ObjectContext> を作成する方法を示します。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectcontext)]
 [!code-vb[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectcontext)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connectionString" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionString" /> が無効です。  または、メタデータ ワークスペースが無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectContext (System.Data.EntityClient.EntityConnection connection, string defaultContainerName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.EntityClient.EntityConnection connection, string defaultContainerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (connection As EntityConnection, defaultContainerName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ObjectContext(System::Data::EntityClient::EntityConnection ^ connection, System::String ^ defaultContainerName);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectContext : System.Data.EntityClient.EntityConnection * string -&gt; System.Data.Objects.ObjectContext" Usage="new System.Data.Objects.ObjectContext (connection, defaultContainerName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.EntityClient.EntityConnection" />
        <Parameter Name="defaultContainerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">モデルおよびデータ ソース接続への参照を含む <see cref="T:System.Data.EntityClient.EntityConnection" />。</param>
        <param name="defaultContainerName">既定のエンティティ コンテナーの名前。 このメソッドで <c>defaultContainerName</c> を設定すると、プロパティが読み取り専用になります。</param>
        <summary>指定された接続およびエンティティ コンテナー名を使用して、<see cref="T:System.Data.Objects.ObjectContext" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connection" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connection" />、<paramref name="defaultContainerName" />、またはメタデータ ワークスペースが有効ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectContext (string connectionString, string defaultContainerName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string connectionString, string defaultContainerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (connectionString As String, defaultContainerName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ObjectContext(System::String ^ connectionString, System::String ^ defaultContainerName);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectContext : string * string -&gt; System.Data.Objects.ObjectContext" Usage="new System.Data.Objects.ObjectContext (connectionString, defaultContainerName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="defaultContainerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">メタデータ情報へのアクセスも可能にする接続文字列。</param>
        <param name="defaultContainerName">既定のエンティティ コンテナーの名前。 このメソッドで <c>defaultContainerName</c> を設定すると、プロパティが読み取り専用になります。</param>
        <summary>指定された接続文字列およびエンティティ コンテナー名を使用して、<see cref="T:System.Data.Objects.ObjectContext" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `connectionString`は概念モデルにアクセスして、データ ソースに接続するために必要な情報を含む文字列です。 <xref:System.Data.EntityClient.EntityConnectionStringBuilder> クラスを使用すると、文字列の形式を適切に設定できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connectionString" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionString" />、<paramref name="defaultContainerName" />、またはメタデータ ワークスペースが有効ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AcceptAllChanges">
      <MemberSignature Language="C#" Value="public void AcceptAllChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptAllChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.AcceptAllChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptAllChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptAllChanges();" />
      <MemberSignature Language="F#" Value="member this.AcceptAllChanges : unit -&gt; unit" Usage="objectContext.AcceptAllChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクト コンテキストでのオブジェクトに対するすべての変更を受け入れます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectStateManager> の関連するすべてのエントリに対する変更を受け入れて、結果の状態が未変更またはデタッチ済みになるようにします。  
  
 このメソッドは、<xref:System.Data.Objects.ObjectStateEntry> 内の Added または Modified のすべての <xref:System.Data.Objects.ObjectStateManager> オブジェクトを反復処理し、エントリの状態を Unchanged に設定します。 Deleted の項目はデタッチ済みになります。  
  
 場合、<xref:System.Data.Objects.ObjectContext.SaveChanges%2A>メソッドが呼び出された、<xref:System.Data.Objects.SaveOptions.AcceptAllChangesAfterSave>が指定されていないユーザーが呼び出す必要があります、<xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A>メソッド。 <xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A> メソッドは、失敗したトランザクションを再試行する場合に役立ちます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddObject">
      <MemberSignature Language="C#" Value="public void AddObject (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddObject(string entitySetName, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddObject (entitySetName As String, entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddObject(System::String ^ entitySetName, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.AddObject : string * obj -&gt; unit" Usage="objectContext.AddObject (entitySetName, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">必要に応じてエンティティ コンテナー名で修飾できるエンティティ セット名を表します。</param>
        <param name="entity">追加する <see cref="T:System.Object" />。</param>
        <summary>オブジェクトをオブジェクト コンテキストに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクトをオブジェクト コンテキストに追加するには、<xref:System.Data.Objects.ObjectContext.AddObject%2A> で <xref:System.Data.Objects.ObjectContext> を呼び出します。 この方法は、オブジェクトがデータ ソースに存在しない新しいオブジェクトである場合に使用します。 詳細については、次を参照してください。[のアタッチとデタッチ オブジェクト](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)します。  
  
 オブジェクトは、<xref:System.Data.Objects.ObjectStateManager>、<xref:System.Data.EntityState.Detached>、または <xref:System.Data.EntityState.Deleted> 状態の <xref:System.Data.EntityState.Added> に追加されます。  
  
 オブジェクト コンテキストで他のオブジェクトに関連する新しいオブジェクトを作成する場合、次のいずれかの方法でオブジェクトを追加します。  
  
-   <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> に対して <xref:System.Data.Objects.DataClasses.EntityCollection%601> メソッドを呼び出し、関連オブジェクトを指定します。 一対多または多対多のリレーションシップに対しては、この方法を使用します。  
  
-   <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> の <xref:System.Data.Objects.DataClasses.EntityReference%601> プロパティを関連オブジェクトに設定します。 一対一または多対一のリレーションシップに対しては、この方法を使用します。  
  
 詳細については、次を参照してください。[の作成、追加、変更、およびオブジェクトの削除](http://msdn.microsoft.com/library/f76f1fad-c553-4b59-820b-89b3dec2fad1)します。  
  
 必要ないオブジェクトがデタッチ済み状態にある場合、<xref:System.Data.EntityKey>します。  
  
 規則、`entitySetName`形式は次のようになります。  
  
-   場合、<xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A>プロパティは`null`、`entitySetName`と完全に修飾する必要があります*\<エンティティ コンテナー名 >*.*\<エンティティ セットの名前 >* します。  
  
-   場合<xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A>ない`null`、`entitySetName`かまいません*\<エンティティ コンテナー名 >*.*\<エンティティ セットの名前 >* または*\<エンティティ セットの名前 >* します。  
  
 場合、`object`が、<xref:System.Data.EntityKey>と`entitySetName`の値を持つ、<xref:System.Data.Metadata.Edm.EntitySet>エンティティのキーに一致する必要があります、<xref:System.Data.Metadata.Edm.EntitySet>に基づいて検出された、`entitySetName`およびエンティティ コンテナー名。  
  
   
  
## Examples  
 この例がに基づいて、 [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)します。 この例では、新しい製品を追加し、データベースに変更を保存します。  
  
 [!code-csharp[DP ObjectServices Concepts#AddObject](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#addobject)]
 [!code-vb[DP ObjectServices Concepts#AddObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#addobject)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entity" /> パラメーターが <see langword="null" /> です。  または、<paramref name="entitySetName" /> が修飾していません。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.AddObject(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyCurrentValues&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public TEntity ApplyCurrentValues&lt;TEntity&gt; (string entitySetName, TEntity currentEntity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TEntity ApplyCurrentValues&lt;class TEntity&gt;(string entitySetName, !!TEntity currentEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyCurrentValues(Of TEntity As Class) (entitySetName As String, currentEntity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class TEntity ApplyCurrentValues(System::String ^ entitySetName, TEntity currentEntity);" />
      <MemberSignature Language="F#" Value="member this.ApplyCurrentValues : string * 'Entity -&gt; 'Entity (requires 'Entity : null)" Usage="objectContext.ApplyCurrentValues (entitySetName, currentEntity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="currentEntity" Type="TEntity" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">オブジェクトのエンティティ型。</typeparam>
        <param name="entitySetName">オブジェクトが属しているエンティティ セットの名前。</param>
        <param name="currentEntity">元のオブジェクトに適用するプロパティ更新を含むデタッチしたオブジェクト。 <c>currentEntity</c> のエンティティ キーは、<see cref="T:System.Data.Objects.ObjectContext" /> 内のエントリの <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> プロパティと一致する必要があります。</param>
        <summary>指定されたオブジェクトのスカラー値を、同じキーを持つ <see cref="T:System.Data.Objects.ObjectContext" /> のオブジェクトにコピーします。</summary>
        <returns>更新後のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A>外のオブジェクトに加えられた変更を適用するメソッドが使用される、 <xref:System.Data.Objects.ObjectContext>、Web サービスによって受信されたデタッチされたオブジェクトなどです。 メソッドは、内のオブジェクトに指定されたオブジェクトからスカラー値をコピー、<xref:System.Data.Objects.ObjectContext>同じキーを持ちます。 使用することができます、<xref:System.Data.EntityKey>デタッチされたオブジェクト データ ソースからこのオブジェクトのインスタンスを取得するのです。 詳細については、次を参照してください。[方法: そのキーを使用して特定オブジェクトを返す](http://msdn.microsoft.com/library/2e9902af-29b0-4e5d-92db-03dfe6ec49bd)します。 オブジェクトの元の値と異なる値は、変更済みとしてマークされます。 ただし、メソッドでは、関連オブジェクトには、現在の値は当てはまりません`currentEntity`します。  
  
 いるグラフの現在の値にして、元の値を適用する場合は、呼び出す<xref:System.Data.Objects.ObjectContext.ApplyOriginalValues%2A>メソッド。  
  
 使用することも、<xref:System.Data.Objects.ObjectSet%601.ApplyCurrentValues%2A>の<xref:System.Data.Objects.ObjectSet%601>または<xref:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues%2A>のメソッド、<xref:System.Data.Objects.ObjectStateEntry>します。 詳細については、次を参照してください。 [N 層アプリケーションの構築](http://msdn.microsoft.com/library/9439d2ba-6b5f-44e8-be65-8a442d922cbb)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entitySetName" /> または <paramref name="current" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entitySetName" /> の <see cref="T:System.Data.Metadata.Edm.EntitySet" /> が、オブジェクトの <see cref="T:System.Data.Metadata.Edm.EntitySet" /> の <see cref="T:System.Data.EntityKey" /> と一致します。  または、オブジェクトが <see cref="T:System.Data.Objects.ObjectStateManager" /> に存在しないか、オブジェクトの状態が <see cref="F:System.Data.EntityState.Detached" /> です。  または、指定されたオブジェクトのエンティティ キーが無効です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="entitySetName" /> が空の文字列です。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.ApplyCurrentValues(`0)" />
        <altmember cref="M:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyOriginalValues&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public TEntity ApplyOriginalValues&lt;TEntity&gt; (string entitySetName, TEntity originalEntity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TEntity ApplyOriginalValues&lt;class TEntity&gt;(string entitySetName, !!TEntity originalEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyOriginalValues(Of TEntity As Class) (entitySetName As String, originalEntity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class TEntity ApplyOriginalValues(System::String ^ entitySetName, TEntity originalEntity);" />
      <MemberSignature Language="F#" Value="member this.ApplyOriginalValues : string * 'Entity -&gt; 'Entity (requires 'Entity : null)" Usage="objectContext.ApplyOriginalValues (entitySetName, originalEntity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="originalEntity" Type="TEntity" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">エンティティ オブジェクトの型。</typeparam>
        <param name="entitySetName">オブジェクトが属しているエンティティ セットの名前。</param>
        <param name="originalEntity">オブジェクトに適用する元の値を含む、デタッチされているオブジェクト。 <c>originalEntity</c> のエンティティ キーは、<see cref="T:System.Data.Objects.ObjectContext" /> 内のエントリの <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> プロパティと一致する必要があります。</param>
        <summary>指定されたオブジェクトのスカラー値を、同じキーを持つ <see cref="T:System.Data.Objects.ObjectContext" /> のオブジェクトの一連の元の値にコピーします。</summary>
        <returns>更新後のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ApplyOriginalValues%2A>外のオブジェクトに加えられた変更を適用するメソッドが使用される、 <xref:System.Data.Objects.ObjectContext>、Web サービスによって受信されたデタッチされたオブジェクトなどです。 メソッドは、内のオブジェクトに指定されたオブジェクトからスカラー値をコピー、<xref:System.Data.Objects.ObjectContext>同じキーを持ちます。 使用することができます、<xref:System.Data.EntityKey>デタッチされたオブジェクト データ ソースからこのオブジェクトのインスタンスを取得するのです。 詳細については、次を参照してください。[方法: そのキーを使用して特定オブジェクトを返す](http://msdn.microsoft.com/library/2e9902af-29b0-4e5d-92db-03dfe6ec49bd)します。 オブジェクトの現在の値と異なる値は、変更済みとしてマークされます。 ただし、メソッドでは、関連オブジェクトには、現在の値は当てはまりません`originalEntity`します。  
  
 元の値を持つグラフあり、現在の値を適用する場合は、呼び出す<xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A>メソッド。  
  
 使用することも、<xref:System.Data.Objects.ObjectSet%601.ApplyOriginalValues%2A>の<xref:System.Data.Objects.ObjectSet%601>または<xref:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues%2A>のメソッド、<xref:System.Data.Objects.ObjectStateEntry>します。 詳細については、次を参照してください。 [N 層アプリケーションの構築](http://msdn.microsoft.com/library/9439d2ba-6b5f-44e8-be65-8a442d922cbb)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entitySetName" /> または <paramref name="original" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entitySetName" /> の <see cref="T:System.Data.Metadata.Edm.EntitySet" /> が、オブジェクトの <see cref="T:System.Data.Metadata.Edm.EntitySet" /> の <see cref="T:System.Data.EntityKey" /> と一致します。  または、オブジェクトの <see cref="T:System.Data.Objects.ObjectStateEntry" /> が <see cref="T:System.Data.Objects.ObjectStateManager" /> で見つかりません。 または、オブジェクトは <see cref="F:System.Data.EntityState.Added" /> または <see cref="F:System.Data.EntityState.Detached" /> 状態にあります。  または、指定されたオブジェクトのエンティティ キーが無効か、プロパティの変更を含んでいる。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="entitySetName" /> が空の文字列です。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.ApplyOriginalValues(`0)" />
        <altmember cref="M:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyPropertyChanges">
      <MemberSignature Language="C#" Value="public void ApplyPropertyChanges (string entitySetName, object changed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyPropertyChanges(string entitySetName, object changed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyPropertyChanges (entitySetName As String, changed As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyPropertyChanges(System::String ^ entitySetName, System::Object ^ changed);" />
      <MemberSignature Language="F#" Value="member this.ApplyPropertyChanges : string * obj -&gt; unit" Usage="objectContext.ApplyPropertyChanges (entitySetName, changed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use ApplyCurrentValues instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="changed" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">オブジェクトが属しているエンティティ セットの名前。</param>
        <param name="changed">元のオブジェクトに適用するプロパティ更新を含むデタッチしたオブジェクト。</param>
        <summary>デタッチしたオブジェクトのプロパティの変更を、オブジェクト コンテキストに既にアタッチされているオブジェクトに適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> メソッドは、変更されたデタッチ済みバージョンのオブジェクトのプロパティの変更を、<xref:System.Data.Objects.ObjectContext> にアタッチされている元のバージョンに適用するために使用されます。 これにより、Web サービスで、エンティティ オブジェクトをデタッチして、プロパティ更新が行われるリモート アプリケーションに送信するといったシナリオがサポートされます。 このメソッドを使用すると、より簡単に変更内容を元のオブジェクトに適用し直すことができます。  
  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> の呼び出し後、オブジェクトの状態は <xref:System.Data.EntityState.Modified> になります。 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> メソッドを呼び出してデータ ソースを更新する必要があります。  
  
 元のオブジェクトは <xref:System.Data.Objects.ObjectStateManager> に存在する必要があり、状態が <xref:System.Data.EntityState.Modified> または <xref:System.Data.EntityState.Unchanged> である必要があります。 変更されたプロパティがある場合にのみ、元のオブジェクトが変更された、`changed`オブジェクト。  
  
 指定されたオブジェクトの <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> プロパティは、有効な <xref:System.Data.EntityKey> に設定する必要があります。  
  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> は、ナビゲーション プロパティまたは関連オブジェクトには影響しません。  
  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> では、特定の型のエンティティ メタデータに存在するプロパティのみが設定されます。 たとえば、部分クラスに追加されているプロパティは、<xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 操作の対象にはなりません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entitySetName" /> が <see langword="null" /> または空の文字列である場合。  または、<paramref name="changed" /> が <see langword="null" /> の場合。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entitySetName" /> の <see cref="T:System.Data.Metadata.Edm.EntitySet" /> が、オブジェクトの <see cref="T:System.Data.Metadata.Edm.EntitySet" /> の <see cref="T:System.Data.EntityKey" /> と一致しない場合。  または、エンティティの状態が <see cref="F:System.Data.EntityState.Modified" /> または <see cref="F:System.Data.EntityState.Unchanged" /> 以外の場合。  または、元のオブジェクトがコンテキストにアタッチされていません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="changed" /> オブジェクトの型が元のオブジェクトの型とは異なる場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (System.Data.Objects.DataClasses.IEntityWithKey entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(class System.Data.Objects.DataClasses.IEntityWithKey entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As IEntityWithKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Data::Objects::DataClasses::IEntityWithKey ^ entity);" />
      <MemberSignature Language="F#" Value="member this.Attach : System.Data.Objects.DataClasses.IEntityWithKey -&gt; unit" Usage="objectContext.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithKey" />
      </Parameters>
      <Docs>
        <param name="entity">アタッチするオブジェクト。</param>
        <summary>オブジェクトがエンティティ キーを持つ場合にオブジェクトまたはオブジェクト グラフをオブジェクト コンテキストにアタッチします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクトをオブジェクト コンテキストにアタッチするには、<xref:System.Data.Objects.ObjectContext.Attach%2A> で <xref:System.Data.Objects.ObjectContext> を呼び出します。 この方法は、オブジェクトが既にデータ ソースに存在するが、現在コンテキストにアタッチされていない場合に使用します。 詳細については、次を参照してください。[オブジェクトのカスタマイズ](http://msdn.microsoft.com/library/af6f07ce-2261-4c65-87cf-d018ad082921)します。  
  
 <xref:System.Data.Objects.ObjectContext.Attach%2A> は、オブジェクトまたはオブジェクト グラフのトップ レベル オブジェクトをアタッチするために使用されます。  
  
 アタッチされるオブジェクトは、<xref:System.Data.Objects.DataClasses.IEntityWithKey> を実装して <xref:System.Data.EntityKey> を公開する必要があります。 生成されたエンティティ クラスは、すべて <xref:System.Data.Objects.DataClasses.IEntityWithKey> を実装しています。  
  
 呼び出す必要がある関連オブジェクトをアタッチするときに`Attach`上、<xref:System.Data.Objects.DataClasses.EntityReference%601>または<xref:System.Data.Objects.DataClasses.EntityCollection%601>リレーションシップを定義します。  
  
 このメソッドは、<xref:System.Data.Objects.ObjectContext.AttachTo%2A> メソッドを呼び出します。  
  
 オブジェクトをアタッチする際は、次の点に注意してください。  
  
-   アタッチされるオブジェクトに関連オブジェクトがある場合、それらの関連オブジェクトもオブジェクト コンテキストにアタッチされます。  
  
-   オブジェクトは未変更状態でオブジェクト コンテキストに追加されます。  
  
-   <xref:System.Data.Objects.ObjectContext.Attach%2A> メソッドに渡されるオブジェクトには、有効な <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> 値が必要です。 オブジェクトに有効な <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> 値がない場合は、<xref:System.Data.Objects.ObjectContext.AttachTo%2A> メソッドを使用してエンティティ セットの名前を指定します。  
  
   
  
## Examples  
 このトピックの例がに基づいて、 [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)します。 この例では、2 つのオブジェクトをアタッチしてリレーションシップを定義します。  
  
 [!code-csharp[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#attachrelatedobjects)]
 [!code-vb[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#attachrelatedobjects)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entity" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">エンティティ キーが無効です。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.Attach(`0)" />
      </Docs>
    </Member>
    <Member MemberName="AttachTo">
      <MemberSignature Language="C#" Value="public void AttachTo (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachTo(string entitySetName, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachTo (entitySetName As String, entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachTo(System::String ^ entitySetName, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.AttachTo : string * obj -&gt; unit" Usage="objectContext.AttachTo (entitySetName, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">必要に応じてエンティティ コンテナー名で修飾できるエンティティ セット名を表します。</param>
        <param name="entity">アタッチする <see cref="T:System.Object" />。</param>
        <summary>オブジェクトまたはオブジェクト グラフをオブジェクト コンテキストの特定のエンティティ セットにアタッチします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す<xref:System.Data.Objects.ObjectContext.AttachTo%2A>上、<xref:System.Data.Objects.ObjectContext>特定のエンティティ セット、オブジェクト コンテキスト内にオブジェクトをアタッチする場合や、オブジェクトがある、 `null` (`Nothing` Visual Basic で)<xref:System.Data.EntityKey>値。 詳細については、次を参照してください。[のアタッチとデタッチ オブジェクト](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)します。  
  
 アタッチされるオブジェクトには、単一のオブジェクトまたはグラフの一部を指定できます。  
  
 規則、`entitySetName`形式は次のようになります。  
  
-   場合、<xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A>プロパティは`null`、`entitySetName`と完全に修飾する必要があります*\<エンティティ コンテナー名 >*.*\<エンティティ セットの名前 >* します。  
  
-   場合、<xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A>ない`null`、`entitySetName`かまいません*\<エンティティ コンテナー名 >*.*\<エンティティ セットの名前 >* または*\<エンティティ セットの名前 >* します。  
  
 アタッチされるオブジェクトには、<xref:System.Data.EntityKey> が関連付けられている必要はありません。 かどうか、オブジェクトに、エンティティ キーがない`entitySetName`空の文字列にすることはできません。  
  
 アタッチされるオブジェクトがある場合、<xref:System.Data.EntityKey>と`entitySetName`の値を持つ、<xref:System.Data.Metadata.Edm.EntitySet>エンティティのキーに一致する必要があります、<xref:System.Data.Metadata.Edm.EntitySet>に基づいて検出された、`entitySetName`およびエンティティ コンテナー名。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entity" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">エンティティ セットが無効です。  または、オブジェクトのキーが一時キーです。  または、オブジェクトが <see cref="T:System.Data.EntityKey" /> を持ち、<see cref="T:System.Data.Metadata.Edm.EntitySet" /> が、メソッドの引数として渡されたエンティティ セットと一致しません。  または、オブジェクトが <see cref="T:System.Data.EntityKey" /> を持たず、エンティティ セットが指定されていません。  または、オブジェクト グラフのオブジェクトの <see cref="T:System.Data.EntityKey" /> が一時キーです。  または、オブジェクト グラフのオブジェクトの <see cref="T:System.Data.EntityKey" /> が無効です (キーの値がオブジェクトの値と一致しないなど)。  または、指定された <paramref name="entitySetName" /> 名とエンティティ コンテナー名ではエンティティ セットが見つかりませんでした。  または、オブジェクト グラフのオブジェクトが別の状態マネージャーに既に存在します。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.Attach(`0)" />
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; CommandTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.CommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTimeout As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;int&gt; CommandTimeout { Nullable&lt;int&gt; get(); void set(Nullable&lt;int&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTimeout : Nullable&lt;int&gt; with get, set" Usage="System.Data.Objects.ObjectContext.CommandTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべてのオブジェクト コンテキスト操作のタイムアウト値の秒数を取得または設定します。 <see langword="null" /> 値の場合は、基になるプロバイダーの既定値が使用されます。</summary>
        <value>タイムアウト値の秒数を表す <see cref="T:System.Int32" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクト クエリおよび <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 操作の既定のタイムアウトは、基になる接続プロバイダーによって定義されます。 しかし、次の例に示すように、この既定のタイムアウト値は、<xref:System.Data.Objects.ObjectContext.CommandTimeout%2A> の <xref:System.Data.Objects.ObjectContext> プロパティを使用してオーバーライドできます。  
  
 [!code-csharp[DP ObjectServices Concepts#QueryTimeout](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querytimeout)]
 [!code-vb[DP ObjectServices Concepts#QueryTimeout](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querytimeout)]  
  
 この処理は、複雑なクエリがある場合や、<xref:System.Data.Objects.ObjectContext.SaveChanges%2A> に対するクエリまたは呼び出しでその他のパフォーマンスの問題によってタイムアウトが頻繁に発生する場合に行います。  
  
   
  
## Examples  
 [オブジェクト クエリ](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">タイムアウト値が 0 より小さい値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbConnection ^ Connection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.Common.DbConnection" Usage="System.Data.Objects.ObjectContext.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクト コンテキストで使用される接続を取得します。</summary>
        <value>接続を表す <see cref="T:System.Data.Common.DbConnection" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、コンストラクターに渡された接続オブジェクトまたは構築時に作成された接続オブジェクトを返します。 接続の所有権は、使用されるコンストラクターによって決まります。  
  
   
  
## Examples  
 この例では、実行時間の長い <xref:System.Data.EntityClient.EntityConnection> のコンストラクターに渡す <xref:System.Data.Objects.ObjectContext> オブジェクトを作成します。 接続は手動で開きます。 <xref:System.Data.EntityClient.EntityConnection> オブジェクトと <xref:System.Data.Objects.ObjectContext> オブジェクトは、どちらも手動で破棄します。  
  
 [!code-csharp[DP ObjectServices Concepts#OpenEntityConnection](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#openentityconnection)]
 [!code-vb[DP ObjectServices Concepts#OpenEntityConnection](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#openentityconnection)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Data.Objects.ObjectContext" /> インスタンスが破棄された場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="ContextOptions">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectContextOptions ContextOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Objects.ObjectContextOptions ContextOptions" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.ContextOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContextOptions As ObjectContextOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Objects::ObjectContextOptions ^ ContextOptions { System::Data::Objects::ObjectContextOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContextOptions : System.Data.Objects.ObjectContextOptions" Usage="System.Data.Objects.ObjectContext.ContextOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectContextOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.Objects.ObjectContextOptions" /> の動作に影響するオプションを格納する <see cref="T:System.Data.Objects.ObjectContext" /> インスタンスを取得します。</summary>
        <value>
          <see cref="T:System.Data.Objects.ObjectContextOptions" /> の動作に影響するオプションを格納する <see cref="T:System.Data.Objects.ObjectContext" /> インスタンス。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabase">
      <MemberSignature Language="C#" Value="public void CreateDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateDatabase ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateDatabase();" />
      <MemberSignature Language="F#" Value="member this.CreateDatabase : unit -&gt; unit" Usage="objectContext.CreateDatabase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のデータ ソース接続と <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> のメタデータを使用して、データベースを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す<xref:System.Data.Objects.ObjectContext.CreateDatabaseScript%2A>データ定義言語 (DDL) スクリプトを表示します。 呼び出す<xref:System.Data.Objects.ObjectContext.CreateDatabase%2A>スクリプトを実行します。  
  
 ほとんどの作業を委任する、<xref:System.Data.Common.DbProviderServices.CreateDatabase%2A>メソッド。  
  
 詳細については、次を参照してください。[データ定義言語の操作](~/docs/framework/data/adonet/ef/working-with-data-definition-language.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
        <altmember cref="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseScript">
      <MemberSignature Language="C#" Value="public string CreateDatabaseScript ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string CreateDatabaseScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDatabaseScript () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ CreateDatabaseScript();" />
      <MemberSignature Language="F#" Value="member this.CreateDatabaseScript : unit -&gt; string" Usage="objectContext.CreateDatabaseScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 内のメタデータに対するスキーマ オブジェクト (テーブル、主キー、外部キー) を作成するデータ定義言語 (DDL) スクリプトを生成します。 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> は、ストア スキーマ定義言語 (SSDL) ファイルからメタデータを読み込みます。</summary>
        <returns>
          <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 内のメタデータに対するスキーマ オブジェクトを作成する DDL スクリプト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す<xref:System.Data.Objects.ObjectContext.CreateDatabaseScript%2A>DDL スクリプトの表示にします。 呼び出す<xref:System.Data.Objects.ObjectContext.CreateDatabase%2A>スクリプトを実行します。  
  
 ほとんどの作業を委任する、<xref:System.Data.Common.DbProviderServices.CreateDatabase%2A>メソッド。  
  
 詳細については、次を参照してください。[データ定義言語の操作](~/docs/framework/data/adonet/ef/working-with-data-definition-language.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabase" />
        <altmember cref="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      </Docs>
    </Member>
    <Member MemberName="CreateEntityKey">
      <MemberSignature Language="C#" Value="public System.Data.EntityKey CreateEntityKey (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityKey CreateEntityKey(string entitySetName, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateEntityKey (entitySetName As String, entity As Object) As EntityKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityKey ^ CreateEntityKey(System::String ^ entitySetName, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.CreateEntityKey : string * obj -&gt; System.Data.EntityKey" Usage="objectContext.CreateEntityKey (entitySetName, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">エンティティ オブジェクトが属しているエンティティ セットの完全修飾名。</param>
        <param name="entity">エンティティ キーを取得するオブジェクト。</param>
        <summary>特定のオブジェクトのエンティティ キーを作成するか、エンティティ キーが既に存在する場合はそのエンティティ キーを返します。</summary>
        <returns>オブジェクトの <see cref="T:System.Data.EntityKey" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Data.EntityKey>がありません、 `entity`、<xref:System.Data.Objects.ObjectContext.CreateEntityKey%2A>メソッドは、その新しいキーを作成します。  
  
 このメソッドは、同じ <xref:System.Data.EntityKey> を持つオブジェクトが既に <xref:System.Data.Objects.ObjectContext> にアタッチされているかどうかを確認するために使用されます。 同じ <xref:System.Data.EntityKey> を持つオブジェクトが既にアタッチされている場合は、例外が発生します。 <xref:System.Data.Objects.ObjectContext.CreateEntityKey%2A> メソッドを使用して、デタッチしたオブジェクトの <xref:System.Data.EntityKey> を取得してから、<xref:System.Data.Objects.ObjectContext.Attach%2A> メソッドを呼び出してください。  
  
   
  
## Examples  
 このトピックの例がに基づいて、 [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)します。 この例では、<xref:System.Data.Objects.ObjectContext.CreateEntityKey%2A> を使用して既存のオブジェクトのエンティティ キーを取得します。  
  
 [!code-csharp[DP ObjectServices Concepts#ApplyItemUpdatesGetObject](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#applyitemupdatesgetobject)]
 [!code-vb[DP ObjectServices Concepts#ApplyItemUpdatesGetObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#applyitemupdatesgetobject)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">いずれかのパラメーターが <see langword="null" /> の場合。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="entitySetName" /> が空の場合。  または、<paramref name="entity" /> オブジェクトの型がエンティティ セットに存在しない場合。  または、<paramref name="entitySetName" /> が完全修飾されていない場合。</exception>
        <exception cref="T:System.InvalidOperationException">指定されたパラメーターに基づいてエンティティ キーを正常に作成できない場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T CreateObject&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T CreateObject&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateObject``1" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject(Of T As Class) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class T CreateObject();" />
      <MemberSignature Language="F#" Value="member this.CreateObject : unit -&gt; 'T (requires 'T : null)" Usage="objectContext.CreateObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">取得するオブジェクトの型。</typeparam>
        <summary>要求された型のインスタンスを作成して返します。</summary>
        <returns>要求された <paramref name="T" /> 型のインスタンス、または Entity Framework で <paramref name="T" /> を使用できるようにする派生型のインスタンス。 返されるオブジェクトは、要求された型のインスタンス、または Entity Framework で要求された型を使用できるようにする派生型のインスタンスです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.CreateObject%2A>メソッドは、Entity Framework によって返されるオブジェクトを正しく管理できることを確認する POCO カスタム データ クラスを使用します。 詳細については、次を参照してください。 [POCO プロキシを作成するための要件](http://msdn.microsoft.com/library/dcdbf982-9b9d-4582-806a-64de4a1c03c8)と[POCO エンティティの操作](http://msdn.microsoft.com/library/5e0fb82a-b6d1-41a1-b37b-c12db61629d3)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectSet&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectSet&lt;TEntity&gt; CreateObjectSet&lt;TEntity&gt; () where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectSet`1&lt;!!TEntity&gt; CreateObjectSet&lt;class TEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateObjectSet``1" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectSet(Of TEntity As Class) () As ObjectSet(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class System::Data::Objects::ObjectSet&lt;TEntity&gt; ^ CreateObjectSet();" />
      <MemberSignature Language="F#" Value="member this.CreateObjectSet : unit -&gt; System.Data.Objects.ObjectSet&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="objectContext.CreateObjectSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectSet&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntity">要求する <see cref="T:System.Data.Objects.ObjectSet`1" /> のエンティティ型。</typeparam>
        <summary>指定したエンティティ型のオブジェクトを照会、作成、変更、および削除するために使用される新しい <see cref="T:System.Data.Objects.ObjectSet`1" /> インスタンスを作成します。</summary>
        <returns>新しい <see cref="T:System.Data.Objects.ObjectSet`1" /> インスタンス。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> プロパティが <see cref="T:System.Data.Objects.ObjectContext" />で設定されていません。  または、指定された型が複数のエンティティ セットに所属しています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectSet&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectSet&lt;TEntity&gt; CreateObjectSet&lt;TEntity&gt; (string entitySetName) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectSet`1&lt;!!TEntity&gt; CreateObjectSet&lt;class TEntity&gt;(string entitySetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectSet(Of TEntity As Class) (entitySetName As String) As ObjectSet(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class System::Data::Objects::ObjectSet&lt;TEntity&gt; ^ CreateObjectSet(System::String ^ entitySetName);" />
      <MemberSignature Language="F#" Value="member this.CreateObjectSet : string -&gt; System.Data.Objects.ObjectSet&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="objectContext.CreateObjectSet entitySetName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectSet&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">要求する <see cref="T:System.Data.Objects.ObjectSet`1" /> のエンティティ型。</typeparam>
        <param name="entitySetName">返される <see cref="T:System.Data.Objects.ObjectSet`1" /> のエンティティ セットの名前。 <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> で <see cref="T:System.Data.Objects.ObjectContext" /> プロパティが設定されていない場合は、文字列を既定のコンテナー名で修飾する必要があります。</param>
        <summary>指定したエンティティ セット名を使用して、指定したエンティティ型のオブジェクトを照会、作成、変更、および削除するために使用される新しい <see cref="T:System.Data.Objects.ObjectSet`1" /> インスタンスを作成します。</summary>
        <returns>新しい <see cref="T:System.Data.Objects.ObjectSet`1" /> インスタンス。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entitySetName" /> の <see cref="T:System.Data.Metadata.Edm.EntitySet" /> が、オブジェクトの <see cref="T:System.Data.Metadata.Edm.EntitySet" /> の <see cref="T:System.Data.EntityKey" /> と一致します。  または、<see cref="T:System.Data.Objects.ObjectContext" /> で <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> プロパティが設定されておらず、名前が <paramref name="entitySetName" /> パラメーターの一部として修飾されていません。  または、指定された型が複数のエンティティ セットに所属しています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateProxyTypes">
      <MemberSignature Language="C#" Value="public void CreateProxyTypes (System.Collections.Generic.IEnumerable&lt;Type&gt; types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateProxyTypes(class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateProxyTypes (types As IEnumerable(Of Type))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateProxyTypes(System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="member this.CreateProxyTypes : seq&lt;Type&gt; -&gt; unit" Usage="objectContext.CreateProxyTypes types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Collections.Generic.IEnumerable&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="types">概念モデルに対応付けられるカスタム データ クラスを表す <see cref="T:System.Type" /> オブジェクトの列挙体。</param>
        <summary>列挙体で指定されたそれぞれの型に対して、Entity Framework で使用できる同等の型を生成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 個々 の型で、`types`概念モデルのエンティティ型にマップされていない列挙型は無視されます。  
  
 詳細については、次を参照してください。 [POCO プロキシを作成するための要件](http://msdn.microsoft.com/library/dcdbf982-9b9d-4582-806a-64de4a1c03c8)と[POCO エンティティの操作](http://msdn.microsoft.com/library/5e0fb82a-b6d1-41a1-b37b-c12db61629d3)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; CreateQuery&lt;T&gt; (string queryString, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!T&gt; CreateQuery&lt;T&gt;(string queryString, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateQuery(Of T) (queryString As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ CreateQuery(System::String ^ queryString, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.CreateQuery : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectContext.CreateQuery (queryString, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">返された <see cref="T:System.Data.Objects.ObjectQuery`1" /> のエンティティ型。</typeparam>
        <param name="queryString">実行するクエリ文字列。</param>
        <param name="parameters">クエリに渡すパラメーター。</param>
        <summary>指定されたクエリ文字列を使用して、現在のオブジェクト コンテキストで <see cref="T:System.Data.Objects.ObjectQuery`1" /> を作成します。</summary>
        <returns>指定された型の <see cref="T:System.Data.Objects.ObjectQuery`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のオブジェクト コンテキストに属する指定された型の <xref:System.Data.Objects.ObjectContext.CreateQuery%2A> を作成するには、<xref:System.Data.Objects.ObjectQuery%601> を使用します。  
  
   
  
## Examples  
 この例がに基づいて、 [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)します。  
  
 この例では、簡単なクエリを作成して結果のコレクションを反復処理します。  
  
 [!code-csharp[DP ObjectServices Concepts#CreateQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#createquery)]
 [!code-vb[DP ObjectServices Concepts#CreateQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#createquery)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queryString" /> パラメーターまたは <paramref name="parameters" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DatabaseExists">
      <MemberSignature Language="C#" Value="public bool DatabaseExists ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DatabaseExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      <MemberSignature Language="VB.NET" Value="Public Function DatabaseExists () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DatabaseExists();" />
      <MemberSignature Language="F#" Value="member this.DatabaseExists : unit -&gt; bool" Usage="objectContext.DatabaseExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のデータ ソース接続でデータベースとして指定されているデータベースがデータ ソースに存在するかどうかを確認します。</summary>
        <returns>データベースが存在する場合は <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ほとんどの作業を委任する、<xref:System.Data.Common.DbProviderServices.DatabaseExists%2A>メソッド。  
  
 詳細については、次を参照してください。[データ定義言語の操作](~/docs/framework/data/adonet/ef/working-with-data-definition-language.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabase" />
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
      </Docs>
    </Member>
    <Member MemberName="DefaultContainerName">
      <MemberSignature Language="C#" Value="public string DefaultContainerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultContainerName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.DefaultContainerName" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultContainerName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultContainerName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultContainerName : string with get, set" Usage="System.Data.Objects.ObjectContext.DefaultContainerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既定のコンテナー名を取得または設定します。</summary>
        <value>既定のコンテナー名を表す <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> 値が戻りません。 `null`; か、セットまたは空の文字列値を返します。 ユーザーがこのプロパティを設定できる`null`、内部的には名前が空の文字列に設定するため、どちらも、空の文字列を確認する必要はありませんと`null`します。  
  
 既定のコンテナー名は、コンストラクターの一部としても定義されます。 プロテクト コンストラクターで既定のコンテナー名を設定すると、プロパティが読み取り専用になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabase">
      <MemberSignature Language="C#" Value="public void DeleteDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DeleteDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDatabase ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDatabase();" />
      <MemberSignature Language="F#" Value="member this.DeleteDatabase : unit -&gt; unit" Usage="objectContext.DeleteDatabase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のデータ ソース接続でデータベースとして指定されているデータベースを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ほとんどの作業を委任する、<xref:System.Data.Common.DbProviderServices.DeleteDatabase%2A>メソッド。  
  
 詳細については、次を参照してください。[データ定義言語の操作](~/docs/framework/data/adonet/ef/working-with-data-definition-language.md)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabase" />
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
        <altmember cref="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      </Docs>
    </Member>
    <Member MemberName="DeleteObject">
      <MemberSignature Language="C#" Value="public void DeleteObject (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteObject(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteObject (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteObject(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.DeleteObject : obj -&gt; unit" Usage="objectContext.DeleteObject entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">削除するエンティティを示すオブジェクト。 オブジェクトの状態は、<see cref="F:System.Data.EntityState.Detached" /> 以外であればどの状態でもかまいません。</param>
        <summary>オブジェクトを削除の対象としてマークします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクトを <xref:System.Data.Objects.ObjectStateManager> から削除する対象としてマークします。 このオブジェクトは、<xref:System.Data.Objects.ObjectContext.SaveChanges%2A> メソッドが呼び出されると、データ ソースから削除されます。  
  
 親オブジェクトを削除すると、制約のリレーションシップが設定された子オブジェクトもすべて削除されます。 この結果は、リレーションシップに対するアソシエーションの `CascadeDelete` プロパティを有効にすることと同じです。  
  
 <xref:System.Data.Objects.ObjectContext.DeleteObject%2A>既に削除されたオブジェクトでメソッドを呼び出すことができます。  
  
   
  
## Examples  
 これらの例がに基づいて、 [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)します。  
  
 この例を構築、 <xref:System.Data.EntityKey> ProductID、特定のデータ ソースから製品のオブジェクトを取得するキーを使用の製品を削除、およびデータベースに変更を保存します。  
  
 [!code-csharp[DP ObjectServices Concepts#DeleteObject](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#deleteobject)]
 [!code-vb[DP ObjectServices Concepts#DeleteObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#deleteobject)]  
  
 この例では、既存の注文アイテムを削除、新しい項目の場合を追加し、データベースに変更を保存します。  
  
 [!code-csharp[DP ObjectServices Concepts#SaveChanges](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#savechanges)]
 [!code-vb[DP ObjectServices Concepts#SaveChanges](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#savechanges)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entity" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entity" /> は存在しません。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.DeleteObject(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Detach">
      <MemberSignature Language="C#" Value="public void Detach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Detach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Detach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Detach (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Detach(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.Detach : obj -&gt; unit" Usage="objectContext.Detach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">デタッチするオブジェクト。 <c>エンティティ</c>のみが削除されます。同じ <see cref="T:System.Data.Objects.ObjectStateManager" /> によって追跡されている関連オブジェクトがある場合、このようなオブジェクトは自動的にはデタッチされません。</param>
        <summary>オブジェクトをオブジェクト コンテキストから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクトを <xref:System.Data.Objects.ObjectStateManager> から削除します。 削除すると、そのオブジェクトの変更の追跡および ID 解決が無効になります。 詳細については、次を参照してください。[のアタッチとデタッチ オブジェクト](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)します。  
  
 <xref:System.Data.Objects.ObjectContext.Detach%2A> メソッドが呼び出されると、このオブジェクトを指す参照がシステムで保持されなくなり、ガベージ コレクターでオブジェクトを収集できるようになります。  
  
> [!NOTE]
>  ガベージ コレクションは、ユーザー コードに、デタッチしたオブジェクトへの参照がない場合にのみ発生します。  
  
 オブジェクトをデタッチする際は、次の点に注意してください。  
  
-   <xref:System.Data.Objects.ObjectContext.Detach%2A> は、メソッドに渡される特定のオブジェクトにのみ影響します。 オブジェクト コンテキスト内で、デタッチされるオブジェクトに関連オブジェクトがある場合、それらの関連オブジェクトはデタッチされません。  
  
-   オブジェクトのデタッチは、データ ソース内のデータには影響しません。  
  
-   連鎖削除ディレクティブおよび参照に関する制約は、デタッチ操作中には適用されません。  
  
 詳細については、次を参照してください。[のアタッチとデタッチ オブジェクト](http://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)します。  
  
   
  
## Examples  
 [!code-csharp[DP ObjectServices Concepts#DetachObjects](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#detachobjects)]
 [!code-vb[DP ObjectServices Concepts#DetachObjects](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#detachobjects)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entity" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entity" /> はこの <see cref="T:System.Data.Objects.ObjectContext" /> に関連付けられていません (新しく作成されてまだどのコンテキストにも関連付けられていない、他のコンテキストから取得された、既に切り離されているなど)。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.Detach(`0)" />
      </Docs>
    </Member>
    <Member MemberName="DetectChanges">
      <MemberSignature Language="C#" Value="public void DetectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DetectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetectChanges();" />
      <MemberSignature Language="F#" Value="member this.DetectChanges : unit -&gt; unit" Usage="objectContext.DetectChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.Objects.ObjectStateEntry" /> の変更が、<see cref="T:System.Data.Objects.ObjectStateManager" /> によって追跡されるすべてのオブジェクトの変更と同期されるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オブジェクト コンテキストで使用されるリソースを解放します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="objectContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクト コンテキストで使用されるリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、Entity Framework によって開かれた場合に、接続を閉じます。 後<xref:System.Data.Objects.ObjectContext.Dispose%2A>を呼び出すと、クエリの実行や呼び出しなど、開いている接続を必要とする操作、<xref:System.Data.Objects.ObjectQuery.ToTraceString%2A>メソッドで例外が発生します。 クエリの作成やオブジェクトのアタッチなどの、接続が開いている必要がない操作では、例外は発生しません。 <xref:System.Data.Objects.ObjectContext.Dispose%2A>メソッドが明示的に開かれた接続を閉じていません。  
  
 スコープを制限、<xref:System.Data.Objects.ObjectContext>内、`using`ブロック (`Using` Visual Basic で) リソースを適切に破棄します。 詳細については、次を参照してください。[接続の管理とトランザクション](http://msdn.microsoft.com/library/b6659d2a-9a45-4e98-acaa-d7a8029e5b99)です。  
  
 <xref:System.Data.Objects.ObjectContext.Dispose>メソッドの呼び出し、 `virtual` (`Overridable` Visual Basic で)<xref:System.Data.Objects.ObjectContext.Dispose%28System.Boolean%29>メソッド。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="objectContext.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>オブジェクト コンテキストで使用されるリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドでは接続が閉じられます。 後<xref:System.Data.Objects.ObjectContext.Dispose%2A>を呼び出すと、クエリの実行や呼び出しなど、開いている接続を必要とする操作、<xref:System.Data.Objects.ObjectQuery.ToTraceString%2A>メソッドで例外が発生します。 クエリの作成やオブジェクトのアタッチなどの、接続が開いている必要がない操作では、例外は発生しません。  
  
 スコープを制限、<xref:System.Data.Objects.ObjectContext>内、`using`ブロック (`Using` Visual Basic で) リソースを適切に破棄します。 詳細については、次を参照してください。[接続の管理とトランザクション](http://msdn.microsoft.com/library/b6659d2a-9a45-4e98-acaa-d7a8029e5b99)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction">
      <MemberSignature Language="C#" Value="public int ExecuteFunction (string functionName, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteFunction(string functionName, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteFunction (functionName As String, ParamArray parameters As ObjectParameter()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteFunction(System::String ^ functionName, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteFunction : string * System.Data.Objects.ObjectParameter[] -&gt; int" Usage="objectContext.ExecuteFunction (functionName, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="functionName">ストアド プロシージャまたは関数の名前。 この名前には、<c>&lt;Container Name&gt;.&lt;Function Name&gt;</c> のようにコンテナー名を含めることができます。 既定のコンテナー名がわかっている場合は、関数名のみが必要です。</param>
        <param name="parameters">
          <see cref="T:System.Data.Objects.ObjectParameter" /> オブジェクトの配列。</param>
        <summary>データ ソースで定義され、概念モデルで表現されるストアド プロシージャまたは関数を実行します。関数から返される結果は破棄され、実行によって影響を受けた行の数が返されます。</summary>
        <returns>影響を受けた行の数。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="function" /> が null か空であるか、または <paramref name="function" /> が見つかりません。</exception>
        <exception cref="T:System.InvalidOperationException">エンティティ リーダーは、この <paramref name="function" /> をサポートしていません。  または、リーダーと <paramref name="function" /> で型が一致していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteFunction&lt;TElement&gt; (string functionName, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteFunction&lt;TElement&gt;(string functionName, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteFunction(Of TElement) (functionName As String, ParamArray parameters As ObjectParameter()) As ObjectResult(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ ExecuteFunction(System::String ^ functionName, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteFunction : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectResult&lt;'Element&gt;" Usage="objectContext.ExecuteFunction (functionName, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">データ ソースに対して関数が実行されたときに返された <see cref="T:System.Data.Objects.ObjectResult`1" /> のエンティティ型。 この型は、<see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" /> を実装している必要があります。</typeparam>
        <param name="functionName">ストアド プロシージャまたは関数の名前。 この名前には、<c>&lt;Container Name&gt;.&lt;Function Name&gt;</c> のようにコンテナー名を含めることができます。 既定のコンテナー名がわかっている場合は、関数名のみが必要です。</param>
        <param name="parameters">
          <see cref="T:System.Data.Objects.ObjectParameter" /> オブジェクトの配列。</param>
        <summary>データ ソースで定義され、概念モデルにマップされたストアド プロシージャまたは関数を、パラメーターを指定して実行します。 型指定された <see cref="T:System.Data.Objects.ObjectResult`1" /> を返します。</summary>
        <returns>ストアド プロシージャによって返されるデータの <see cref="T:System.Data.Objects.ObjectResult`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ExecuteFunction%2A>メソッドは、ストアド プロシージャまたはデータ ソースで定義され、概念モデルで表現される関数の実行に使用されるヘルパー メソッド。 Entity Data Model ツールでは、概念モデルでは for each メソッドを生成します。 これらのメソッドを呼び出す、厳密に型指定された`ExecuteFunction`を返す型指定された<xref:System.Data.Objects.ObjectResult%601>します。 詳細については、次を参照してください。[ストアド プロシージャ (エンティティ フレームワーク) を使用して、アプリケーション コード](http://msdn.microsoft.com/library/d13dd33f-fcf9-4e86-bd00-74bc31521536)します。  
  
 関数のすべてのパラメーターはパラメーター配列で要求され、すべての型がインポート関数の場合、関数自体の種類を含むメタデータに対してチェックされます。 `null` CLR 値型では、値は許可されます。 パラメーターの検証がプロバイダーによって実行されます。  
  
 <xref:System.Data.Objects.ObjectContext.ExecuteFunction%2A>メソッドは、 <xref:System.Data.Objects.MergeOption> @property<xref:System.Data.Objects.MergeOption.AppendOnly>します。 そのため、オブジェクト コンテキストにオブジェクトが既に存在する場合、データ ソースからいない読み込まれます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="function" /> が null か空であるか、または <paramref name="function" /> が見つかりません。</exception>
        <exception cref="T:System.InvalidOperationException">エンティティ リーダーは、この <paramref name="function" /> をサポートしていません。  または、リーダーと <paramref name="function" /> で型が一致していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteFunction&lt;TElement&gt; (string functionName, System.Data.Objects.MergeOption mergeOption, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteFunction&lt;TElement&gt;(string functionName, valuetype System.Data.Objects.MergeOption mergeOption, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ ExecuteFunction(System::String ^ functionName, System::Data::Objects::MergeOption mergeOption, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteFunction : string * System.Data.Objects.MergeOption * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectResult&lt;'Element&gt;" Usage="objectContext.ExecuteFunction (functionName, mergeOption, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">データ ソースに対して関数が実行されたときに返された <see cref="T:System.Data.Objects.ObjectResult`1" /> のエンティティ型。 この型は、<see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" /> を実装している必要があります。</typeparam>
        <param name="functionName">ストアド プロシージャまたは関数の名前。 この名前には、<c>&lt;Container Name&gt;.&lt;Function Name&gt;</c> のようにコンテナー名を含めることができます。 既定のコンテナー名がわかっている場合は、関数名のみが必要です。</param>
        <param name="mergeOption">クエリの実行時に使用する <see cref="T:System.Data.Objects.MergeOption" />。</param>
        <param name="parameters">
          <see cref="T:System.Data.Objects.ObjectParameter" /> オブジェクトの配列。</param>
        <summary>データ ソースで定義され、概念モデルで表現される指定のストアド プロシージャまたは関数を、パラメーターとマージ オプションを指定して実行します。 型指定された <see cref="T:System.Data.Objects.ObjectResult`1" /> を返します。</summary>
        <returns>ストアド プロシージャによって返されるデータの <see cref="T:System.Data.Objects.ObjectResult`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ExecuteFunction%2A>メソッドは、ストアド プロシージャまたはデータ ソースで定義され、概念モデルで表現される関数の実行に使用されるヘルパー メソッド。 Entity Data Model ツールでは、概念モデルでは for each メソッドを生成します。 これらのメソッドを呼び出す、厳密に型指定された`ExecuteFunction`を返す型指定された<xref:System.Data.Objects.ObjectResult%601>します。 詳細については、次を参照してください。[ストアド プロシージャ (エンティティ フレームワーク) を使用して、アプリケーション コード](http://msdn.microsoft.com/library/d13dd33f-fcf9-4e86-bd00-74bc31521536)します。  
  
 関数のすべてのパラメーターはパラメーター配列で要求され、すべての型がインポート関数の場合、関数自体の種類を含むメタデータに対してチェックされます。 `null` CLR 値型では、値は許可されます。 パラメーターの検証がプロバイダーによって実行されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="function" /> が null か空であるか、または <paramref name="function" /> が見つかりません。</exception>
        <exception cref="T:System.InvalidOperationException">エンティティ リーダーは、この <paramref name="function" /> をサポートしていません。  または、リーダーと <paramref name="function" /> で型が一致していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreCommand">
      <MemberSignature Language="C#" Value="public int ExecuteStoreCommand (string commandText, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteStoreCommand(string commandText, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteStoreCommand (commandText As String, ParamArray parameters As Object()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteStoreCommand(System::String ^ commandText, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteStoreCommand : string * obj[] -&gt; int" Usage="objectContext.ExecuteStoreCommand (commandText, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="commandText">実行するコマンド。データ ソースのネイティブ言語で指定します。</param>
        <param name="parameters">コマンドに渡すパラメーターの配列。</param>
        <summary>既存の接続を使用して、データ ソースに対して任意のコマンドを直接実行します。</summary>
        <returns>影響を受けた行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パラメーター化コマンドは SQL インジェクション攻撃への対策として利用できます。SQL インジェクション攻撃は、SQL ステートメントに、サーバーのセキュリティを侵害するコマンドを "注入" することによって行われます。 パラメーター化コマンドは、値のみ、および SQL ステートメントの一部ではなく、外部ソースから受信した値が渡されることが保証され、SQL インジェクション攻撃を防ぐ。 その結果、SQL コマンドの値に挿入されたは、データ ソースでは実行されません。 これらはパラメーター値としてのみ処理されます。 だけでなく、セキュリティ上の利点は、パラメーター化されたコマンドは、SQL ステートメントまたはストアド プロシージャに渡された値を整理するための便利なメソッドを提供します。  
  
 `parameters` の値には、<xref:System.Data.Common.DbParameter> オブジェクトの配列か、パラメーター値の配列を使用できます。 値が提供されるだけの場合、配列の<xref:System.Data.Common.DbParameter>オブジェクトは、配列内の値の順序に基づいて作成されます。  
  
 ストア コマンドは、現在のトランザクションが存在する場合に、現在のトランザクションのコンテキストで実行されます。  
  
 詳細については次を参照してください:  
  
 [格納コマンドを直接実行](http://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d)と  
  
 [方法: データ ソースに対してコマンドを直接実行](http://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreQuery&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteStoreQuery&lt;TElement&gt; (string commandText, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteStoreQuery&lt;TElement&gt;(string commandText, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteStoreQuery(Of TElement) (commandText As String, ParamArray parameters As Object()) As ObjectResult(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ ExecuteStoreQuery(System::String ^ commandText, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteStoreQuery : string * obj[] -&gt; System.Data.Objects.ObjectResult&lt;'Element&gt;" Usage="objectContext.ExecuteStoreQuery (commandText, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">To be added.</typeparam>
        <param name="commandText">実行するコマンド。データ ソースのネイティブ言語で指定します。</param>
        <param name="parameters">コマンドに渡すパラメーターの配列。</param>
        <summary>型指定された結果のシーケンスを返すデータ ソースに対して、クエリを直接実行します。</summary>
        <returns>
          <paramref name="TResult" /> 型のオブジェクトの列挙体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A>メソッドでは、既存の接続を使用して、任意のデータ ソースに対して直接コマンドを実行します。 現在トランザクションを実行している場合は、そのトランザクションのコンテキストで格納コマンドが実行されます。  
  
 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> メソッドの呼び出しは、<xref:System.Data.Common.DbCommand.ExecuteReader%2A> クラスの <xref:System.Data.Common.DbCommand> メソッドを呼び出すことと同じです。<xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> のみがエンティティを返し、<xref:System.Data.Common.DbCommand.ExecuteReader%2A> が <xref:System.Data.Common.DbDataReader> のプロパティ値を返します。  
  
 呼び出す、<xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A>で指定されたエンティティ セット名、結果を追跡する場合。  
  
 呼び出す、<xref:System.Data.Objects.ObjectContext.Translate%2A>に変換するメソッド、<xref:System.Data.Common.DbDataReader>リーダーには、指定したエンティティ型にマップされるデータ行が含まれている場合、エンティティ オブジェクトにします。  
  
 パラメーター化コマンドは SQL インジェクション攻撃への対策として利用できます。SQL インジェクション攻撃は、SQL ステートメントに、サーバーのセキュリティを侵害するコマンドを "注入" することによって行われます。 パラメーター化コマンドは、値のみ、および SQL ステートメントの一部ではなく、外部ソースから受信した値が渡されることが保証され、SQL インジェクション攻撃を防ぐ。 その結果、SQL コマンドの値に挿入されたは、データ ソースでは実行されません。 これらはパラメーター値としてのみ処理されます。 だけでなく、セキュリティ上の利点は、パラメーター化されたコマンドは、SQL ステートメントまたはストアド プロシージャに渡された値を整理するための便利なメソッドを提供します。  
  
 `parameters` の値には、<xref:System.Data.Common.DbParameter> オブジェクトの配列か、パラメーター値の配列を使用できます。 値が提供されるだけの場合、配列の<xref:System.Data.Common.DbParameter>オブジェクトは、配列内の値の順序に基づいて作成されます。  
  
 詳細については次を参照してください:  
  
 [格納コマンドを直接実行](http://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d)と  
  
 [方法: データ ソースに対してコマンドを直接実行](http://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreQuery&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TEntity&gt; ExecuteStoreQuery&lt;TEntity&gt; (string commandText, string entitySetName, System.Data.Objects.MergeOption mergeOption, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TEntity&gt; ExecuteStoreQuery&lt;TEntity&gt;(string commandText, string entitySetName, valuetype System.Data.Objects.MergeOption mergeOption, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; System::Data::Objects::ObjectResult&lt;TEntity&gt; ^ ExecuteStoreQuery(System::String ^ commandText, System::String ^ entitySetName, System::Data::Objects::MergeOption mergeOption, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteStoreQuery : string * string * System.Data.Objects.MergeOption * obj[] -&gt; System.Data.Objects.ObjectResult&lt;'Entity&gt;" Usage="objectContext.ExecuteStoreQuery (commandText, entitySetName, mergeOption, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="commandText">実行するコマンド。データ ソースのネイティブ言語で指定します。</param>
        <param name="entitySetName">
          <c>TResult</c> 型のエンティティ セット。 エンティティ セットの名前を指定しない場合、結果は追跡されません。</param>
        <param name="mergeOption">クエリの実行時に使用する <see cref="T:System.Data.Objects.MergeOption" />。 既定値は、<see cref="F:System.Data.Objects.MergeOption.AppendOnly" /> です。</param>
        <param name="parameters">コマンドに渡すパラメーターの配列。</param>
        <summary>データ ソースに対してクエリを直接実行し、型指定された結果のシーケンスを返します。 クエリの結果をエンティティとして追跡できるように、エンティティ セットとマージ オプションを指定します。</summary>
        <returns>
          <paramref name="TResult" /> 型のオブジェクトの列挙体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A>メソッドでは、既存の接続を使用して、任意のデータ ソースに対して直接コマンドを実行します。 現在トランザクションを実行している場合は、そのトランザクションのコンテキストで格納コマンドが実行されます。  
  
 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> メソッドの呼び出しは、<xref:System.Data.Common.DbCommand.ExecuteReader%2A> クラスの <xref:System.Data.Common.DbCommand> メソッドを呼び出すことと同じです。<xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> のみがエンティティを返し、<xref:System.Data.Common.DbCommand.ExecuteReader%2A> が <xref:System.Data.Common.DbDataReader> のプロパティ値を返します。  
  
 結果をエンティティとして追跡する場合、エンティティ セット名を指定します。  
  
 呼び出す<xref:System.Data.Objects.ObjectContext.Translate%2A>に変換するメソッド、<xref:System.Data.Common.DbDataReader>リーダーには、指定したエンティティ型にマップされるデータ行が含まれている場合、エンティティ オブジェクトにします。  
  
 パラメーター化コマンドは SQL インジェクション攻撃への対策として利用できます。SQL インジェクション攻撃は、SQL ステートメントに、サーバーのセキュリティを侵害するコマンドを "注入" することによって行われます。 パラメーター化コマンドは、値のみ、および SQL ステートメントの一部ではなく、外部ソースから受信した値が渡されることが保証され、SQL インジェクション攻撃を防ぐ。 その結果、SQL コマンドの値に挿入されたは、データ ソースでは実行されません。 これらはパラメーター値としてのみ処理されます。 だけでなく、セキュリティ上の利点は、パラメーター化されたコマンドは、SQL ステートメントまたはストアド プロシージャに渡された値を整理するための便利なメソッドを提供します。  
  
 `parameters` の値には、<xref:System.Data.Common.DbParameter> オブジェクトの配列か、パラメーター値の配列を使用できます。 値が提供されるだけの場合、配列の<xref:System.Data.Common.DbParameter>オブジェクトは、配列内の値の順序に基づいて作成されます。  
  
 詳細については次を参照してください:  
  
 [格納コマンドを直接実行](http://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d)と  
  
 [方法: データ ソースに対してコマンドを直接実行](http://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownProxyTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Type&gt; GetKnownProxyTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; GetKnownProxyTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.GetKnownProxyTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetKnownProxyTypes () As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ GetKnownProxyTypes();" />
      <MemberSignature Language="F#" Value="static member GetKnownProxyTypes : unit -&gt; seq&lt;Type&gt;" Usage="System.Data.Objects.ObjectContext.GetKnownProxyTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既存のプロキシ型をすべて返します。</summary>
        <returns>既存のすべてのプロキシ型の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.GetKnownProxyTypes%2A> POCO エンティティのプロキシ オブジェクトの生成を有効にするメソッドを使用します。 詳細については、次を参照してください。 [POCO プロキシを作成するための要件](http://msdn.microsoft.com/library/dcdbf982-9b9d-4582-806a-64de4a1c03c8)と[POCO エンティティの操作](http://msdn.microsoft.com/library/5e0fb82a-b6d1-41a1-b37b-c12db61629d3)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectByKey">
      <MemberSignature Language="C#" Value="public object GetObjectByKey (System.Data.EntityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetObjectByKey(class System.Data.EntityKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectByKey (key As EntityKey) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetObjectByKey(System::Data::EntityKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.GetObjectByKey : System.Data.EntityKey -&gt; obj" Usage="objectContext.GetObjectByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.EntityKey" />
      </Parameters>
      <Docs>
        <param name="key">検索するオブジェクトのキー。</param>
        <summary>指定されたエンティティ キーを持つオブジェクトを返します。</summary>
        <returns>エンティティ型のインスタンスである <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A> は、指定された <xref:System.Data.EntityKey> を持つオブジェクトを <xref:System.Data.Objects.ObjectStateManager> から取得しようとします。 オブジェクトが現在オブジェクト コンテキストに読み込まれていない場合は、データ ソースからオブジェクトを返すためにクエリが実行されます。 詳細については、次を参照してください。[オブジェクト クエリ](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276)します。  
  
 オブジェクトが見つからない場合、<xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A> では <xref:System.Data.ObjectNotFoundException> が発生します。 この例外の処理を避けるには、代わりに <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> メソッドを使用します。  
  
 このメソッドは、<xref:System.Data.EntityState.Deleted> 状態のオブジェクトを返します。  
  
 一時キーを使用してデータ ソースからオブジェクトを取得することはできません。  
  
   
  
## Examples  
 この例がに基づいて、 [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)します。 この例では、指定された型のエンティティの <xref:System.Data.EntityKey> を作成して、エンティティをキーでフェッチします。  
  
 [!code-csharp[DP ObjectServices Concepts#EntityKeyClass_GetObjectByKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#entitykeyclass_getobjectbykey)]
 [!code-vb[DP ObjectServices Concepts#EntityKeyClass_GetObjectByKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#entitykeyclass_getobjectbykey)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Data.ObjectNotFoundException">
          <see cref="T:System.Data.Objects.ObjectStateManager" /> またはデータ ソースでオブジェクトが見つかりません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetObjectType">
      <MemberSignature Language="C#" Value="public static Type GetObjectType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetObjectType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.GetObjectType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetObjectType(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetObjectType : Type -&gt; Type" Usage="System.Data.Objects.ObjectContext.GetObjectType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">プロキシ オブジェクトの <see cref="T:System.Type" />。</param>
        <summary>指定した型のプロキシ オブジェクトに関連付けられている POCO エンティティのエンティティ型を返します。</summary>
        <returns>関連付けられている POCO エンティティの <see cref="T:System.Type" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.GetObjectType%2A> POCO エンティティのプロキシ オブジェクトの生成を有効にするメソッドを使用します。 詳細については、次を参照してください。 [POCO プロキシを作成するための要件](http://msdn.microsoft.com/library/dcdbf982-9b9d-4582-806a-64de4a1c03c8)と[POCO エンティティの操作](http://msdn.microsoft.com/library/5e0fb82a-b6d1-41a1-b37b-c12db61629d3)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadProperty">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>POCO カスタム データ クラスを使用している場合に、関連オブジェクトを明示的に読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 POCO カスタム データ クラスを使用する場合、Entity Data Model ツールによって生成されるエンティティ型のインスタンスのような関連オブジェクトを明示的に読み込むことができません。 これは、ツールを返すナビゲーション プロパティを生成するため、<xref:System.Data.Objects.DataClasses.EntityCollection%601>または<xref:System.Data.Objects.DataClasses.EntityReference%601>関連オブジェクトのときに<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>で呼び出される、<xref:System.Data.Objects.DataClasses.RelatedEnd>します。 POCO エンティティを設定して、遅延読み込みを使用して読み込むことがまだ、<xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A>プロパティを`true`のインスタンスで<xref:System.Data.Objects.ObjectContextOptions>によって返される、<xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType>プロパティ、またはで一括読み込みを使用して、 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> メソッド<xref:System.Data.Objects.ObjectQuery%601>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadProperty">
      <MemberSignature Language="C#" Value="public void LoadProperty (object entity, string navigationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty(object entity, string navigationProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadProperty (entity As Object, navigationProperty As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadProperty(System::Object ^ entity, System::String ^ navigationProperty);" />
      <MemberSignature Language="F#" Value="member this.LoadProperty : obj * string -&gt; unit" Usage="objectContext.LoadProperty (entity, navigationProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="navigationProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entity">関連オブジェクトを読み込むエンティティ。</param>
        <param name="navigationProperty">読み込む関連オブジェクトを返すナビゲーション プロパティの名前。</param>
        <summary>指定したナビゲーション プロパティと既定のマージ オプションを使用して、指定したオブジェクトに関連するオブジェクトを明示的に読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> POCO カスタム データ クラスを使用しているときに、明示的な読み込みを実現するためにメソッドを呼び出す必要があります。  
  
 呼び出した後<xref:System.Data.Objects.ObjectContext.LoadProperty%2A>、関連オブジェクトにソース エンティティのナビゲーション プロパティを介してアクセスできます。  
  
 POCO カスタム データ クラスを使用する場合、Entity Data Model ツールによって生成されるエンティティ型のインスタンスのような関連オブジェクトを明示的に読み込むことができません。 これは、ツールを返すナビゲーション プロパティを生成するため、<xref:System.Data.Objects.DataClasses.EntityCollection%601>または<xref:System.Data.Objects.DataClasses.EntityReference%601>関連オブジェクトのときに<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>で呼び出される、<xref:System.Data.Objects.DataClasses.RelatedEnd>します。 POCO エンティティを設定して、遅延読み込みを使用して読み込むことがまだ、<xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A>プロパティを`true`のインスタンスで<xref:System.Data.Objects.ObjectContextOptions>によって返される、<xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType>プロパティ、またはで一括読み込みを使用して、 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> メソッド<xref:System.Data.Objects.ObjectQuery%601>.  
  
 ときに、<xref:System.Data.Objects.ObjectContext.LoadProperty%2A>メソッドが呼び出されると、オブジェクトに読み込む、<xref:System.Data.Objects.ObjectContext>既定値を使用して<xref:System.Data.Objects.MergeOption>の値<xref:System.Data.Objects.MergeOption.AppendOnly>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entity" /> の状態が <see cref="F:System.Data.EntityState.Detached" />、<see cref="F:System.Data.EntityState.Added" />、<see cref="F:System.Data.EntityState.Deleted" /> のいずれかであるか、または <paramref name="entity" /> が <see cref="T:System.Data.Objects.ObjectContext" /> の別のインスタンスにアタッチされています。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty">
      <MemberSignature Language="C#" Value="public void LoadProperty (object entity, string navigationProperty, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty(object entity, string navigationProperty, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadProperty(System::Object ^ entity, System::String ^ navigationProperty, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="member this.LoadProperty : obj * string * System.Data.Objects.MergeOption -&gt; unit" Usage="objectContext.LoadProperty (entity, navigationProperty, mergeOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="navigationProperty" Type="System.String" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="entity">関連オブジェクトを読み込むエンティティ。</param>
        <param name="navigationProperty">読み込む関連オブジェクトを返すナビゲーション プロパティの名前。</param>
        <param name="mergeOption">関連オブジェクトの読み込み時に使用する <see cref="T:System.Data.Objects.MergeOption" /> 値。</param>
        <summary>指定したナビゲーション プロパティと指定したマージ オプションを使用して、指定したオブジェクトに関連するオブジェクトを明示的に読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> POCO カスタム データ クラスを使用しているときに、明示的な読み込みを実現するためにメソッドを呼び出す必要があります。  
  
 呼び出した後<xref:System.Data.Objects.ObjectContext.LoadProperty%2A>、関連オブジェクトにソース エンティティのナビゲーション プロパティを介してアクセスできます。  
  
 POCO カスタム データ クラスを使用する場合、Entity Data Model ツールによって生成されるエンティティ型のインスタンスのような関連オブジェクトを明示的に読み込むことができません。 これは、ツールを返すナビゲーション プロパティを生成するため、<xref:System.Data.Objects.DataClasses.EntityCollection%601>または<xref:System.Data.Objects.DataClasses.EntityReference%601>関連オブジェクトのときに<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>で呼び出される、<xref:System.Data.Objects.DataClasses.RelatedEnd>します。 POCO エンティティを設定して、遅延読み込みを使用して読み込むことがまだ、<xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A>プロパティを`true`のインスタンスで<xref:System.Data.Objects.ObjectContextOptions>によって返される、<xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType>プロパティ、またはで一括読み込みを使用して、 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> メソッド<xref:System.Data.Objects.ObjectQuery%601>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entity" /> の状態が <see cref="F:System.Data.EntityState.Detached" />、<see cref="F:System.Data.EntityState.Added," />、<see cref="F:System.Data.EntityState.Deleted" /> のいずれかであるか、または <paramref name="entity" /> が <see cref="T:System.Data.Objects.ObjectContext" /> の別のインスタンスにアタッチされています。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public void LoadProperty&lt;TEntity&gt; (TEntity entity, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty&lt;TEntity&gt;(!!TEntity entity, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadProperty(Of TEntity) (entity As TEntity, selector As Expression(Of Func(Of TEntity, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; void LoadProperty(TEntity entity, System::Linq::Expressions::Expression&lt;Func&lt;TEntity, System::Object ^&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="member this.LoadProperty : 'Entity * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; -&gt; unit" Usage="objectContext.LoadProperty (entity, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="entity">関連オブジェクトを読み込むソース オブジェクト。</param>
        <param name="selector">読み込む関連オブジェクトを定義する LINQ 式。</param>
        <summary>指定した LINQ クエリと既定のマージ オプションを使用して、指定したオブジェクトに関連するオブジェクトを明示的に読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> POCO カスタム データ クラスを使用しているときに、明示的な読み込みを実現するためにメソッドを呼び出す必要があります。  
  
 呼び出した後<xref:System.Data.Objects.ObjectContext.LoadProperty%2A>、関連オブジェクトにソース エンティティのナビゲーション プロパティを介してアクセスできます。  
  
 読み込むプロパティがように単純なプロパティのメンバー アクセスでは、形式である必要があります、LINQ の式で指定された`(entity) => entity.PropertyName`ここで、 *PropertyName*が読み込まれる関連オブジェクトを返すナビゲーション プロパティ。 LINQ 式の他の形式が使用されている場合、例外が発生します。  
  
 POCO カスタム データ クラスを使用する場合、Entity Data Model ツールによって生成されるエンティティ型のインスタンスのような関連オブジェクトを明示的に読み込むことができません。 これは、ツールを返すナビゲーション プロパティを生成するため、<xref:System.Data.Objects.DataClasses.EntityCollection%601>または<xref:System.Data.Objects.DataClasses.EntityReference%601>関連オブジェクトのときに<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>で呼び出される、<xref:System.Data.Objects.DataClasses.RelatedEnd>します。 POCO エンティティを設定して、遅延読み込みを使用して読み込むことがまだ、<xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A>プロパティを`true`のインスタンスで<xref:System.Data.Objects.ObjectContextOptions>によって返される、<xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType>プロパティ、またはで一括読み込みを使用して、 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> メソッド<xref:System.Data.Objects.ObjectQuery%601>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="selector" /> は有効な入力パラメーターを指定しません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> が null です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entity" /> の状態が <see cref="F:System.Data.EntityState.Detached" />、<see cref="F:System.Data.EntityState.Added," />、<see cref="F:System.Data.EntityState.Deleted" /> のいずれかであるか、または <paramref name="entity" /> が <see cref="T:System.Data.Objects.ObjectContext" /> の別のインスタンスにアタッチされています。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public void LoadProperty&lt;TEntity&gt; (TEntity entity, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; selector, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty&lt;TEntity&gt;(!!TEntity entity, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; selector, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; void LoadProperty(TEntity entity, System::Linq::Expressions::Expression&lt;Func&lt;TEntity, System::Object ^&gt; ^&gt; ^ selector, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="member this.LoadProperty : 'Entity * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; * System.Data.Objects.MergeOption -&gt; unit" Usage="objectContext.LoadProperty (entity, selector, mergeOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="entity">関連オブジェクトを読み込むソース オブジェクト。</param>
        <param name="selector">読み込む関連オブジェクトを定義する LINQ 式。</param>
        <param name="mergeOption">関連オブジェクトの読み込み時に使用する <see cref="T:System.Data.Objects.MergeOption" /> 値。</param>
        <summary>指定した LINQ クエリと指定したマージ オプションを使用して、指定したオブジェクトに関連するオブジェクトを明示的に読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> POCO カスタム データ クラスを使用しているときに、明示的な読み込みを実現するためにメソッドを呼び出す必要があります。  
  
 呼び出した後<xref:System.Data.Objects.ObjectContext.LoadProperty%2A>、関連オブジェクトにソース エンティティのナビゲーション プロパティを介してアクセスできます。  
  
 読み込むプロパティとして単純なプロパティのメンバー アクセスでは、形式である必要があります、LINQ の式で指定された`(entity) => entity.PropertyName`場所*PropertyName*が読み込まれる関連オブジェクトを返すナビゲーション プロパティ。 LINQ 式の他の形式が使用されている場合、例外が発生します。  
  
 POCO カスタム データ クラスを使用する場合、Entity Data Model ツールによって生成されるエンティティ型のインスタンスのような関連オブジェクトを明示的に読み込むことができません。 これは、ツールを返すナビゲーション プロパティを生成するため、<xref:System.Data.Objects.DataClasses.EntityCollection%601>または<xref:System.Data.Objects.DataClasses.EntityReference%601>関連オブジェクトのときに<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>で呼び出される、<xref:System.Data.Objects.DataClasses.RelatedEnd>します。 POCO エンティティを設定して、遅延読み込みを使用して読み込むことがまだ、<xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A>プロパティを`true`のインスタンスで<xref:System.Data.Objects.ObjectContextOptions>によって返される、<xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType>プロパティ、またはで一括読み込みを使用して、 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> メソッド<xref:System.Data.Objects.ObjectQuery%601>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="selector" /> は有効な入力パラメーターを指定しません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="selector" /> が null です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="entity" /> の状態が <see cref="F:System.Data.EntityState.Detached" />、<see cref="F:System.Data.EntityState.Added," />、<see cref="F:System.Data.EntityState.Deleted" /> のいずれかであるか、または <paramref name="entity" /> が <see cref="T:System.Data.Objects.ObjectContext" /> の別のインスタンスにアタッチされています。</exception>
      </Docs>
    </Member>
    <Member MemberName="MetadataWorkspace">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.MetadataWorkspace MetadataWorkspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Metadata.Edm.MetadataWorkspace MetadataWorkspace" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.MetadataWorkspace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MetadataWorkspace As MetadataWorkspace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Metadata::Edm::MetadataWorkspace ^ MetadataWorkspace { System::Data::Metadata::Edm::MetadataWorkspace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MetadataWorkspace : System.Data.Metadata.Edm.MetadataWorkspace" Usage="System.Data.Objects.ObjectContext.MetadataWorkspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクト コンテキストで使用されるメタデータ ワークスペースを取得します。</summary>
        <value>この <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> に関連付けられている <see cref="T:System.Data.Objects.ObjectContext" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Metadata.Edm.MetadataWorkspace> クラスは、アプリケーションのコンテキストで Entity Data Model (EDM) メタデータを操作できるようにする中心的なランタイム API です。 詳細については、次を参照してください。[メタデータ ワークスペース](http://msdn.microsoft.com/library/601aee56-3eda-4caa-9082-a01df76c5e84)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectMaterialized">
      <MemberSignature Language="C#" Value="public event System.Data.Objects.ObjectMaterializedEventHandler ObjectMaterialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.Objects.ObjectMaterializedEventHandler ObjectMaterialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.Objects.ObjectContext.ObjectMaterialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectMaterialized As ObjectMaterializedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::Objects::ObjectMaterializedEventHandler ^ ObjectMaterialized;" />
      <MemberSignature Language="F#" Value="member this.ObjectMaterialized : System.Data.Objects.ObjectMaterializedEventHandler " Usage="member this.ObjectMaterialized : System.Data.Objects.ObjectMaterializedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectMaterializedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クエリまたは読み込み操作の一部として、データ ソース内のデータから新しいエンティティ オブジェクトが作成されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントは、複雑な場合は、すべてのスカラーとコレクションが読み込まれる前に、オブジェクトの参照のプロパティが設定されています。 同じキー値を持つオブジェクトがオブジェクト コンテキストに存在する場合、Entity Framework は、オブジェクトを再作成せず、このイベントは発生しません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectStateManager">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectStateManager ObjectStateManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Objects.ObjectStateManager ObjectStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.ObjectStateManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ObjectStateManager As ObjectStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Objects::ObjectStateManager ^ ObjectStateManager { System::Data::Objects::ObjectStateManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ObjectStateManager : System.Data.Objects.ObjectStateManager" Usage="System.Data.Objects.ObjectContext.ObjectStateManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectStateManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクトの変更を追跡するためにオブジェクト コンテキストで使用されるオブジェクト状態マネージャーを取得します。</summary>
        <value>この <see cref="T:System.Data.Objects.ObjectStateManager" /> で使用される <see cref="T:System.Data.Objects.ObjectContext" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 これらの例がに基づいて、 [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)します。 この例では、<xref:System.Data.Objects.ObjectStateManager> から <xref:System.Data.Objects.ObjectContext> を取得し、状態マネージャーを使用してコンテキスト内のオブジェクトにアクセスします。  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectStateManager](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectstatemanager)]
 [!code-vb[DP ObjectServices Concepts#ObjectStateManager](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectstatemanager)]  
  
 この例では、返された <xref:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry%2A> で <xref:System.Data.Objects.ObjectStateManager> メソッドを使用して、エンティティ キーに基づいてオブジェクトを取得します。  
  
 [!code-csharp[DP ObjectServices Concepts#ApplyItemUpdates](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#applyitemupdates)]
 [!code-vb[DP ObjectServices Concepts#ApplyItemUpdates](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#applyitemupdates)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryProvider">
      <MemberSignature Language="C#" Value="protected internal System.Linq.IQueryProvider QueryProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider QueryProvider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.QueryProvider" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property QueryProvider As IQueryProvider" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Linq::IQueryProvider ^ QueryProvider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.QueryProvider : System.Linq.IQueryProvider" Usage="System.Data.Objects.ObjectContext.QueryProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このオブジェクト コンテキストに関連付けられている LINQ クエリ プロバイダーを取得します。</summary>
        <value>このオブジェクト コンテキストで使用される <see cref="T:System.Linq.IQueryProvider" /> インスタンス。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Refresh">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オブジェクト コンテキスト内の特定のオブジェクトをデータ ソース内のデータで更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクトの更新順序は非決定的です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Objects.RefreshMode refreshMode, System.Collections.IEnumerable collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Objects.RefreshMode refreshMode, class System.Collections.IEnumerable collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Objects::RefreshMode refreshMode, System::Collections::IEnumerable ^ collection);" />
      <MemberSignature Language="F#" Value="member this.Refresh : System.Data.Objects.RefreshMode * System.Collections.IEnumerable -&gt; unit" Usage="objectContext.Refresh (refreshMode, collection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Objects.RefreshMode" />
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="refreshMode">オブジェクト コンテキストでのプロパティの変更がデータ ソースのプロパティ値で上書きされるかどうかを示す <see cref="T:System.Data.Objects.RefreshMode" /> 値。</param>
        <param name="collection">更新するオブジェクトの <see cref="T:System.Collections.IEnumerable" /> コレクション。</param>
        <summary>オブジェクト コンテキスト内のオブジェクトのコレクションをデータ ソース内のデータで更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドには 2 つの目的があります。オブジェクト コンテキスト内のオブジェクトをデータ ソース内のデータで更新できるようにするという目的と、競合を解決するためのメカニズムとしての役割を果たすという目的です。 詳細については、次を参照してください。[変更の保存と同時実行の管理](http://msdn.microsoft.com/library/b8378601-4f26-4a05-a24a-f50aeb68610e)します。  
  
 オブジェクトの更新順序は非決定的です。  
  
 <xref:System.Data.Objects.ObjectContext.Refresh%2A> が呼び出されると、オブジェクトの元の値は常にデータ ソースの値で更新されますが、現在の値はデータ ソースの値で更新される場合と更新されない場合があります。 更新されるかどうかは、<xref:System.Data.Objects.RefreshMode> の値で決まります。 <xref:System.Data.Objects.RefreshMode.StoreWins>モードは、データ ソースの値に一致するように、コレクション内のオブジェクトを更新することを意味します。 <xref:System.Data.Objects.RefreshMode.ClientWins> データ ソース内の他の変更されている場合でもオブジェクト コンテキストでの変更のみが保存されることを意味します。  
  
 オブジェクトがデータ ソース側のロジックで更新されるようにするには、<xref:System.Data.Objects.ObjectContext.Refresh%2A> メソッドの呼び出し後に <xref:System.Data.Objects.RefreshMode.StoreWins> を指定して <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> を呼び出します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="collection" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="refreshMode" /> が無効です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="collection" /> が空です。  または、オブジェクトがコンテキストにアタッチされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Objects.RefreshMode refreshMode, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Objects.RefreshMode refreshMode, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Objects::RefreshMode refreshMode, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.Refresh : System.Data.Objects.RefreshMode * obj -&gt; unit" Usage="objectContext.Refresh (refreshMode, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Objects.RefreshMode" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="refreshMode">
          <see cref="T:System.Data.Objects.RefreshMode" /> の更新に使用するモードを示す <see cref="T:System.Data.Objects.ObjectStateManager" /> 値のいずれか 1 つ。</param>
        <param name="entity">更新するオブジェクト。</param>
        <summary>オブジェクト コンテキスト内のオブジェクトをデータ ソース内のデータで更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.Refresh%2A> には 2 つの目的があります。オブジェクトをデータ ソース内のデータで更新できるようにするという目的と、競合を解決するためのメカニズムとしての役割を果たすという目的です。 詳細については、次を参照してください。[変更の保存と同時実行の管理](http://msdn.microsoft.com/library/b8378601-4f26-4a05-a24a-f50aeb68610e)します。  
  
 オブジェクトの更新順序は非決定的です。  
  
 <xref:System.Data.Objects.ObjectContext.Refresh%2A> メソッドが呼び出されると、オブジェクトの元の値は常にデータ ソースの値で更新されますが、現在の値はデータ ソースの値で更新される場合と更新されない場合があります。 更新されるかどうかは、<xref:System.Data.Objects.RefreshMode> で決まります。 <xref:System.Data.Objects.RefreshMode.StoreWins> モードでは、オブジェクトがデータ ソースの値と一致するように更新されます。 <xref:System.Data.Objects.RefreshMode.ClientWins> モードでは、データ ソースで他の変更が行われた場合でも、オブジェクト コンテキストでの変更のみが保存されます。  
  
 オブジェクトがデータ ソース側のロジックで更新されるようにするには、<xref:System.Data.Objects.ObjectContext.Refresh%2A> メソッドの呼び出し後に <xref:System.Data.Objects.RefreshMode.StoreWins> 値を指定して <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> メソッドを呼び出します。  
  
   
  
## Examples  
 この例がに基づいて、 [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)します。 この例では、変更を保存します。これにより、同時実行の競合が発生する可能性があります。 その後、変更を再度保存する前にオブジェクト コンテキストを更新することで同時実行の競合を解決する方法を示します。  
  
 [!code-csharp[DP ObjectServices Concepts#Concurrency](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#concurrency)]
 [!code-vb[DP ObjectServices Concepts#Concurrency](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#concurrency)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="collection" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="refreshMode" /> が無効です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="collection" /> が空です。  または、オブジェクトがコンテキストにアタッチされていません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SaveChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>すべての更新をデータ ソースに保存します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public int SaveChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SaveChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.SaveChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function SaveChanges () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SaveChanges();" />
      <MemberSignature Language="F#" Value="member this.SaveChanges : unit -&gt; int" Usage="objectContext.SaveChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべての更新をデータ ソースに保存して、オブジェクト コンテキストの変更の追跡をリセットします。</summary>
        <returns>
          <see cref="F:System.Data.EntityState.Added" /> が呼び出されたときの <see cref="F:System.Data.EntityState.Modified" />、<see cref="F:System.Data.EntityState.Deleted" />、または <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 状態のオブジェクトの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアント上のオブジェクトがデータ ソース側のロジックで更新されるようにするには、<xref:System.Data.Objects.ObjectContext.Refresh%2A> の呼び出し後に <xref:System.Data.Objects.RefreshMode.StoreWins> 値を指定して <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> メソッドを呼び出します。 詳細については、次を参照してください。[変更の保存と同時実行の管理](http://msdn.microsoft.com/library/b8378601-4f26-4a05-a24a-f50aeb68610e)します。  
  
 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> トランザクション内で動作します。 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> そのトランザクションをロールバックし、ダーティの場合は、例外をスロー<xref:System.Data.Objects.ObjectStateEntry>オブジェクトを永続化することはできません。  
  
 オプティミスティック同時実行制御違反が発生した場合は、<xref:System.Data.OptimisticConcurrencyException> がスローされます。 オプティミスティック同時実行制御違反を解決するには、その違反をキャッチし、<xref:System.Data.Objects.ObjectContext.Refresh%2A> 値または <xref:System.Data.Objects.RefreshMode.StoreWins> 値を指定して <xref:System.Data.Objects.RefreshMode.ClientWins> メソッドを呼び出し、<xref:System.Data.Objects.ObjectContext.SaveChanges%2A> を再度呼び出します。 詳細については、次を参照してください。[方法: データの同時オブジェクト コンテキストで実行管理](http://msdn.microsoft.com/library/25ffe70d-ce97-4f0a-8ae0-22b7c40f748a)します。  
  
   
  
## Examples  
 この例がに基づいて、 [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)します。 この例では、変更を保存します。これにより、同時実行の競合が発生する可能性があります。 その後、変更を再度保存する前にオブジェクト コンテキストを更新することで同時実行の競合を解決する方法を示します。  
  
 [!code-csharp[DP ObjectServices Concepts#Concurrency](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#concurrency)]
 [!code-vb[DP ObjectServices Concepts#Concurrency](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#concurrency)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OptimisticConcurrencyException">データ ソースでオプティミスティック同時実行制御違反が発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public int SaveChanges (bool acceptChangesDuringSave);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SaveChanges(bool acceptChangesDuringSave) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SaveChanges (acceptChangesDuringSave As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SaveChanges(bool acceptChangesDuringSave);" />
      <MemberSignature Language="F#" Value="member this.SaveChanges : bool -&gt; int" Usage="objectContext.SaveChanges acceptChangesDuringSave" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use SaveChanges(SaveOptions options) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="acceptChangesDuringSave" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="acceptChangesDuringSave">このパラメーターは、クライアント側のトランザクションのサポートに必要です。 <see langword="true" /> の場合は、<see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" /> の完了後にすべてのオブジェクトに対する変更の追跡がリセットされます。 <see langword="false" /> の場合は、<see cref="M:System.Data.Objects.ObjectContext.AcceptAllChanges" /> の後に <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" /> メソッドを呼び出す必要があります。</param>
        <summary>すべての更新をデータ ソースに保存して、必要に応じてオブジェクト コンテキストの変更の追跡をリセットします。</summary>
        <returns>
          <see cref="F:System.Data.EntityState.Added" /> が呼び出されたときの <see cref="F:System.Data.EntityState.Modified" />、<see cref="F:System.Data.EntityState.Deleted" />、または <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 状態のオブジェクトの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す、<xref:System.Data.Objects.ObjectContext.SaveChanges%28System.Data.Objects.SaveOptions%29>メソッド代わりにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OptimisticConcurrencyException">オプティミスティック同時実行制御違反が発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public virtual int SaveChanges (System.Data.Objects.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveChanges(valuetype System.Data.Objects.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SaveChanges (options As SaveOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int SaveChanges(System::Data::Objects::SaveOptions options);" />
      <MemberSignature Language="F#" Value="abstract member SaveChanges : System.Data.Objects.SaveOptions -&gt; int&#xA;override this.SaveChanges : System.Data.Objects.SaveOptions -&gt; int" Usage="objectContext.SaveChanges options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Data.Objects.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="options">操作の動作を決定する <see cref="T:System.Data.Objects.SaveOptions" /> 値。</param>
        <summary>指定した <see cref="T:System.Data.Objects.SaveOptions" /> を使用して、すべての更新をデータ ソースに保存します。</summary>
        <returns>
          <see cref="F:System.Data.EntityState.Added" /> が呼び出されたときの <see cref="F:System.Data.EntityState.Modified" />、<see cref="F:System.Data.EntityState.Deleted" />、または <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 状態のオブジェクトの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この特定のオーバー ロードを使用して、<xref:System.Data.Objects.ObjectContext.SaveChanges%2A>かことを確認する<xref:System.Data.Objects.ObjectContext.DetectChanges%2A>またはデータ ソースに変更を保存する前に呼び出される<xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A>データ ソースに変更を保存した後に呼び出されます。  
  
 この列挙体は、<xref:System.FlagsAttribute>メンバー値のビットごとの組み合わせをできるようにします。  
  
 クライアント上のオブジェクトがデータ ソース側のロジックで更新されたことを確認するを呼び出すことができます、<xref:System.Data.Objects.ObjectContext.Refresh%2A>メソッドを<xref:System.Data.Objects.RefreshMode.StoreWins>値の呼び出し後<xref:System.Data.Objects.ObjectContext.SaveChanges%2A>します。 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>メソッドがトランザクションで動作します。 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> トランザクションをロールバックされ、いずれか、ダーティの場合は、例外をスロー<xref:System.Data.Objects.ObjectStateEntry>オブジェクトを永続化することはできません。  
  
 オプティミスティック同時実行制御違反が発生した場合は、<xref:System.Data.OptimisticConcurrencyException> がスローされます。 オプティミスティック同時実行制御違反を解決するには、その違反をキャッチし、<xref:System.Data.Objects.ObjectContext.Refresh%2A> 値または <xref:System.Data.Objects.RefreshMode.StoreWins> 値を指定して <xref:System.Data.Objects.RefreshMode.ClientWins> メソッドを呼び出し、<xref:System.Data.Objects.ObjectContext.SaveChanges%2A> メソッドを再度呼び出します。 詳細については、次を参照してください。[方法: データの同時オブジェクト コンテキストで実行管理](http://msdn.microsoft.com/library/25ffe70d-ce97-4f0a-8ae0-22b7c40f748a)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OptimisticConcurrencyException">オプティミスティック同時実行制御違反が発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SavingChanges">
      <MemberSignature Language="C#" Value="public event EventHandler SavingChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SavingChanges" />
      <MemberSignature Language="DocId" Value="E:System.Data.Objects.ObjectContext.SavingChanges" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SavingChanges As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SavingChanges;" />
      <MemberSignature Language="F#" Value="member this.SavingChanges : EventHandler " Usage="member this.SavingChanges : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>変更内容がデータ ソースに保存されるときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.SavingChanges> イベントは、<xref:System.Data.Objects.ObjectContext.SaveChanges%2A> に対する <xref:System.Data.Objects.ObjectContext> 操作の開始時に発生します。 通常、このイベントは、新しい値がデータベースに書き込まれる前に、変更されたオブジェクトを検証するために使用されます。  
  
   
  
## Examples  
 この例がに基づいて、 [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)します。 この例では、エンティティ状態の検証を実行する <xref:System.Data.Objects.ObjectContext.SavingChanges> イベントのハンドラーを登録します。  
  
 [!code-csharp[DP ObjectServices Concepts#SavingChanges](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#savingchanges)]
 [!code-vb[DP ObjectServices Concepts#SavingChanges](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#savingchanges)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; Translate&lt;TElement&gt; (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; Translate&lt;TElement&gt;(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Translate(Of TElement) (reader As DbDataReader) As ObjectResult(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ Translate(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Translate : System.Data.Common.DbDataReader -&gt; System.Data.Objects.ObjectResult&lt;'Element&gt;" Usage="objectContext.Translate reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <typeparam name="TElement">To be added.</typeparam>
        <param name="reader">エンティティ オブジェクトに変換するエンティティ データを格納している <see cref="T:System.Data.Common.DbDataReader" />。</param>
        <summary>エンティティ データの行を含む <see cref="T:System.Data.Common.DbDataReader" /> を、要求されたエンティティ型のオブジェクトに変換します。</summary>
        <returns>
          <paramref name="TResult" /> 型のオブジェクトの列挙体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.Translate%2A>からエンティティ データを変換するメソッドを使用する<xref:System.Data.Common.DbDataReader>要求された型のオブジェクトにします。 このプロセスは自動的に実行すると、<xref:System.Data.Objects.ObjectQuery%601>エンティティ データを返す実行されます。 <xref:System.Data.Objects.ObjectContext.Translate%2A>メソッドでは、データ ソースに対して標準の ADO.NET クエリを実行し、エンティティ オブジェクトに返されるデータ行を変換することができます。  
  
 指定された<xref:System.Data.Common.DbDataReader>要求されたエンティティ型にマップされるデータを含める必要があります。  
  
 詳細については次を参照してください:  
  
 [格納コマンドを直接実行](http://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d)と  
  
 [方法: データ ソースに対してコマンドを直接実行](http://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> が <see langword="null" /> の場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="Translate&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TEntity&gt; Translate&lt;TEntity&gt; (System.Data.Common.DbDataReader reader, string entitySetName, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TEntity&gt; Translate&lt;TEntity&gt;(class System.Data.Common.DbDataReader reader, string entitySetName, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; System::Data::Objects::ObjectResult&lt;TEntity&gt; ^ Translate(System::Data::Common::DbDataReader ^ reader, System::String ^ entitySetName, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="member this.Translate : System.Data.Common.DbDataReader * string * System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectResult&lt;'Entity&gt;" Usage="objectContext.Translate (reader, entitySetName, mergeOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="reader">エンティティ オブジェクトに変換するエンティティ データを格納している <see cref="T:System.Data.Common.DbDataReader" />。</param>
        <param name="entitySetName">
          <c>TResult</c> 型のエンティティ セット。</param>
        <param name="mergeOption">変換したオブジェクトをオブジェクト コンテキストに追加するときに使用する <see cref="T:System.Data.Objects.MergeOption" />。 既定値は、<see cref="F:System.Data.Objects.MergeOption.AppendOnly" /> です。</param>
        <summary>エンティティ セットとマージ オプションを指定して、エンティティ データの行を含む <see cref="T:System.Data.Common.DbDataReader" /> を、要求されたエンティティ型のオブジェクトに変換します。</summary>
        <returns>
          <paramref name="TResult" /> 型のオブジェクトの列挙体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.Translate%2A>からエンティティ データを変換するメソッドを使用する<xref:System.Data.Common.DbDataReader>要求された型のオブジェクトにします。 このプロセスは自動的に実行すると、<xref:System.Data.Objects.ObjectQuery%601>エンティティ データを返す実行されます。 <xref:System.Data.Objects.ObjectContext.Translate%2A>メソッドでは、データ ソースに対して標準の ADO.NET クエリを実行し、エンティティ オブジェクトに返されるデータ行を変換することができます。  
  
 指定された<xref:System.Data.Common.DbDataReader>要求されたエンティティ型にマップされるデータを含める必要があります。  
  
 詳細については次を参照してください:  
  
 [格納コマンドを直接実行](http://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d)と  
  
 [方法: データ ソースに対してコマンドを直接実行](http://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> が <see langword="null" /> の場合。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">指定された <paramref name="mergeOption" /> が、有効な <see cref="T:System.Data.Objects.MergeOption" /> 値でない場合。</exception>
        <exception cref="T:System.InvalidOperationException">指定された <paramref name="entitySetName" /> が、<paramref name="TResult" /> 型の有効なエンティティ セットでない場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetObjectByKey">
      <MemberSignature Language="C#" Value="public bool TryGetObjectByKey (System.Data.EntityKey key, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetObjectByKey(class System.Data.EntityKey key, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetObjectByKey (key As EntityKey, ByRef value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetObjectByKey(System::Data::EntityKey ^ key, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetObjectByKey : System.Data.EntityKey *  -&gt; bool" Usage="objectContext.TryGetObjectByKey (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.EntityKey" />
        <Parameter Name="value" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">検索するオブジェクトのキー。</param>
        <param name="value">このメソッドから制御が戻った時点で、オブジェクトが格納されます。</param>
        <summary>指定されたエンティティ キーを持つオブジェクトを返します。</summary>
        <returns>オブジェクトが正常に取得された場合は <see langword="true" />。 <paramref name="key" /> が一時的である場合、接続が <see langword="false" /> である場合、または <paramref name="value" /> が <see langword="null" /> である場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> は、指定された <xref:System.Data.EntityKey> を持つオブジェクトを <xref:System.Data.Objects.ObjectStateManager> から取得しようとします。 オブジェクトが現在オブジェクト コンテキストに読み込まれていない場合は、データ ソースからオブジェクトを返すためにクエリが実行されます。 詳細については、次を参照してください。[オブジェクト クエリ](http://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276)します。  
  
 オブジェクトが見つからない場合に <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> で発生する <xref:System.Data.ObjectNotFoundException> の処理を避けるには、<xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A> メソッドを使用します。  
  
 このメソッドは、<xref:System.Data.EntityState.Deleted> 状態のオブジェクトを返します。  
  
 一時キーを使用してデータ ソースからオブジェクトを取得することはできません。  
  
 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A>メソッドに適用される標準の .NET`TryParse`のパターンを<xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A>を返すメソッド`false`ときに、<xref:System.Data.ObjectNotFoundException>キャッチされます。  
  
   
  
## Examples  
 このトピックの例がに基づいて、 [AdventureWorks Sales Model](http://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)します。 この例では、指定された型のエンティティの <xref:System.Data.EntityKey> を作成して、エンティティをキーで取得します。  
  
 [!code-csharp[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#entitykeyclass_trygetobjectbykey)]
 [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#entitykeyclass_trygetobjectbykey)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="key" /> の互換性のないメタデータ。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>