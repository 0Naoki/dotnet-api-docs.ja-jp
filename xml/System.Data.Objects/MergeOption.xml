<Type Name="MergeOption" FullName="System.Data.Objects.MergeOption">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a0b696fe28851ef6026576b007358d54bd37f08c" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70507523" /></Metadata><TypeSignature Language="C#" Value="public enum MergeOption" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MergeOption extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.MergeOption" />
  <TypeSignature Language="VB.NET" Value="Public Enum MergeOption" />
  <TypeSignature Language="C++ CLI" Value="public enum class MergeOption" />
  <TypeSignature Language="F#" Value="type MergeOption = " />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>オブジェクト コンテキストに読み込まれているオブジェクトを、オブジェクト コンテキストに既に存在するオブジェクトにマージする方法を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entity Framework は、キャッシュ内の特定のエンティティキーを持つオブジェクトの単一のインスタンスのみを保持します。 オブジェクト<xref:System.Data.EntityKey>は、オブジェクトの id を表す不変のオブジェクトです。 エンティティ キーは、オブジェクト コンテキスト内の ID 解決を実行するために使用されます。 詳細については、「[エンティティキーの操作](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/dd283139(v=vs.100))」を参照してください。 同じ id を持つエンティティが既に追跡されている場合、データソースからのデータと状態マネージャーに既に存在するデータは、クエリ<xref:System.Data.Objects.MergeOption>のに従ってマージされます。  

### <a name="additional-information-on-mergeoptionpreservechanges"></a>追加情報`MergeOption.PreserveChanges`

 エンティティの状態が <xref:System.Data.EntityState.Unchanged?displayProperty=nameWithType> の場合、エントリに格納されている現在の値と元の値が、データ ソースの値で上書きされます。 エントリの状態は <xref:System.Data.EntityState.Unchanged?displayProperty=nameWithType> のままとなり、いずれのプロパティも変更済みとしてマークされません。  
  
 エンティティの状態が <xref:System.Data.EntityState.Modified?displayProperty=nameWithType> の場合、変更されているプロパティの現在の値は、データ ソースの値で上書きされません。 変更されていないプロパティの元の値は、データ ソースからの値で上書きされます。  
  
 .NET Framework 4 では、Entity Framework は変更されていないプロパティの現在の値と、データソースから返された値を比較します。 両者の値が異なる場合、プロパティは変更済みとしてマークされます。  
  
 .NET Framework 3.5 SP1 では、データソースの値が異なる場合でも、Entity Framework はプロパティを変更済みとしてマークしません。  
  
 変更されているプロパティだけが、<xref:System.Data.Objects.ObjectContext.SaveChanges%2A?displayProperty=nameWithType> を呼び出したときにデータ ソースに永続化されます。  
  
 .NET Framework 3.5 SP1 の動作を維持するに<xref:System.Data.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior%2A?displayProperty=nameWithType>は`true`、をに設定します。 `PreserveChanges` オプションは、ローカル コンテキストで変更を保持しながら、オプティミスティック コンカレンシー例外を解決するために使用できます。 詳細については、「[変更の保存と同時実行制御の管理](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738618(v=vs.100))」を参照してください。
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AppendOnly">
      <MemberSignature Language="C#" Value="AppendOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.Objects.MergeOption AppendOnly = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Data.Objects.MergeOption.AppendOnly" />
      <MemberSignature Language="VB.NET" Value="AppendOnly" />
      <MemberSignature Language="C++ CLI" Value="AppendOnly" />
      <MemberSignature Language="F#" Value="AppendOnly = 0" Usage="System.Data.Objects.MergeOption.AppendOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.MergeOption</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>オブジェクト コンテキストに存在しないオブジェクトは、コンテキストにアタッチされます。 オブジェクトが既にコンテキストに存在する場合、エントリに格納されているオブジェクトのプロパティの現在の値と元の値が、データ ソースの値で上書きされることはありません。 オブジェクトのエントリの状態と、エントリ内にあるオブジェクトのプロパティの状態は変化しません。 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" /> は既定のマージ オプションです。</summary>
      </Docs>
    </Member>
    <Member MemberName="NoTracking">
      <MemberSignature Language="C#" Value="NoTracking" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.Objects.MergeOption NoTracking = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Data.Objects.MergeOption.NoTracking" />
      <MemberSignature Language="VB.NET" Value="NoTracking" />
      <MemberSignature Language="C++ CLI" Value="NoTracking" />
      <MemberSignature Language="F#" Value="NoTracking = 3" Usage="System.Data.Objects.MergeOption.NoTracking" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.MergeOption</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>オブジェクトは、<see cref="F:System.Data.EntityState.Detached" /> 状態で保持され、<see cref="T:System.Data.Objects.ObjectStateManager" /> では追跡されません。 ただし、[!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] によって生成されたエンティティと、プロキシを使用する POCO プロキシは、関連するオブジェクトの読み込みを容易にするためにオブジェクト コンテキストに対する参照を保持します。</summary>
      </Docs>
    </Member>
    <Member MemberName="OverwriteChanges">
      <MemberSignature Language="C#" Value="OverwriteChanges" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.Objects.MergeOption OverwriteChanges = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.Objects.MergeOption.OverwriteChanges" />
      <MemberSignature Language="VB.NET" Value="OverwriteChanges" />
      <MemberSignature Language="C++ CLI" Value="OverwriteChanges" />
      <MemberSignature Language="F#" Value="OverwriteChanges = 1" Usage="System.Data.Objects.MergeOption.OverwriteChanges" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.MergeOption</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>オブジェクト コンテキストに存在しないオブジェクトは、コンテキストにアタッチされます。 オブジェクトが既にコンテキストに存在する場合、エントリに格納されているオブジェクトのプロパティの現在の値と元の値が、データ ソースの値で上書きされます。 オブジェクトのエントリの状態は <see cref="F:System.Data.EntityState.Unchanged" /> に設定され、いずれのプロパティも変更済みとしてマークされません。</summary>
      </Docs>
    </Member>
    <Member MemberName="PreserveChanges">
      <MemberSignature Language="C#" Value="PreserveChanges" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.Objects.MergeOption PreserveChanges = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Data.Objects.MergeOption.PreserveChanges" />
      <MemberSignature Language="VB.NET" Value="PreserveChanges" />
      <MemberSignature Language="C++ CLI" Value="PreserveChanges" />
      <MemberSignature Language="F#" Value="PreserveChanges = 2" Usage="System.Data.Objects.MergeOption.PreserveChanges" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.MergeOption</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>オブジェクト コンテキストに存在しないオブジェクトは、コンテキストにアタッチされます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
