<Type Name="HttpContent" FullName="System.Net.Http.HttpContent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3ea0bd117154431b899b26f84c7713b150c4b064" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70503373" /></Metadata><TypeSignature Language="C#" Value="public abstract class HttpContent : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit HttpContent extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.HttpContent" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class HttpContent&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpContent abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type HttpContent = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="14c9e-101">HTTP エンティティ本体およびコンテンツ ヘッダーを表す基本クラス。</span><span class="sxs-lookup"><span data-stu-id="14c9e-101">A base class representing an HTTP entity body and content headers.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContent.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HttpContent();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="14c9e-102"><see cref="T:System.Net.Http.HttpContent" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-102">Initializes a new instance of the <see cref="T:System.Net.Http.HttpContent" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="14c9e-103">HTTP コンテンツをバイト ストリームにシリアル化し、<paramref name="stream" /> パラメーターとして指定されたストリーム オブジェクトにコピーします。</span><span class="sxs-lookup"><span data-stu-id="14c9e-103">Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <paramref name="stream" /> parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c9e-104">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="14c9e-104">This operation does not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.CopyToAsync : System.IO.Stream -&gt; System.Threading.Tasks.Task" Usage="httpContent.CopyToAsync stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="14c9e-105">対象のストリーム。</span><span class="sxs-lookup"><span data-stu-id="14c9e-105">The target stream.</span></span></param>
        <summary><span data-ttu-id="14c9e-106">HTTP コンテンツをバイト ストリームにシリアル化し、<paramref name="stream" /> パラメーターとして指定されたストリーム オブジェクトにコピーします。</span><span class="sxs-lookup"><span data-stu-id="14c9e-106">Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <paramref name="stream" /> parameter.</span></span></summary>
        <returns><span data-ttu-id="14c9e-107">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="14c9e-107">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c9e-108">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="14c9e-108">This operation will not block.</span></span> <span data-ttu-id="14c9e-109">返さ<xref:System.Threading.Tasks.Task>れたオブジェクトは、すべてのコンテンツが`stream`パラメーターとして渡されたストリームオブジェクトに書き込まれた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-109">The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been written to the stream object passed as the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream, System.Net.TransportContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream stream, class System.Net.TransportContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ stream, System::Net::TransportContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.CopyToAsync : System.IO.Stream * System.Net.TransportContext -&gt; System.Threading.Tasks.Task" Usage="httpContent.CopyToAsync (stream, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="context" Type="System.Net.TransportContext" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="14c9e-110">対象のストリーム。</span><span class="sxs-lookup"><span data-stu-id="14c9e-110">The target stream.</span></span></param>
        <param name="context"><span data-ttu-id="14c9e-111">トランスポート (チャネル バインディング トークンなど) について説明します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-111">Information about the transport (channel binding token, for example).</span></span> <span data-ttu-id="14c9e-112">このパラメーターは <see langword="null" /> の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="14c9e-112">This parameter may be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="14c9e-113">HTTP コンテンツをバイト ストリームにシリアル化し、<paramref name="stream" /> パラメーターとして指定されたストリーム オブジェクトにコピーします。</span><span class="sxs-lookup"><span data-stu-id="14c9e-113">Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <paramref name="stream" /> parameter.</span></span></summary>
        <returns><span data-ttu-id="14c9e-114">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="14c9e-114">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c9e-115">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="14c9e-115">This operation will not block.</span></span> <span data-ttu-id="14c9e-116">返さ<xref:System.Threading.Tasks.Task>れたオブジェクトは、すべてのコンテンツが`stream`パラメーターとして渡されたストリームオブジェクトに書き込まれた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-116">The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been written to the stream object passed as the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateContentReadStreamAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; CreateContentReadStreamAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; CreateContentReadStreamAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateContentReadStreamAsync () As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ CreateContentReadStreamAsync();" />
      <MemberSignature Language="F#" Value="abstract member CreateContentReadStreamAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;&#xA;override this.CreateContentReadStreamAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpContent.CreateContentReadStreamAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="14c9e-117">非同期操作として HTTP コンテンツをメモリ ストリームにシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-117">Serialize the HTTP content to a memory stream as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="14c9e-118">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="14c9e-118">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c9e-119">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="14c9e-119">This operation will not block.</span></span> <span data-ttu-id="14c9e-120">返さ<xref:System.Threading.Tasks.Task%601>れたオブジェクトは、すべてのコンテンツがメモリストリームに書き込まれた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-120">The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the memory stream.</span></span>  
  
 <span data-ttu-id="14c9e-121">操作が完了すると、 <xref:System.Threading.Tasks.Task%601.Result%2A>返されたタスクオブジェクトのプロパティには、HTTP コンテンツを表すメモリストリームが格納されます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-121">Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the memory stream that represents the HTTP content.</span></span> <span data-ttu-id="14c9e-122">返されたストリームを使用して、さまざまなストリーム Api を使用してコンテンツを読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-122">The returned stream can then be used to read the content using various stream APIs.</span></span>  
  
 <span data-ttu-id="14c9e-123">メソッド<xref:System.Net.Http.HttpContent.CreateContentReadStreamAsync%2A>は、コンテンツをメモリストリームにバッファーします。</span><span class="sxs-lookup"><span data-stu-id="14c9e-123">The <xref:System.Net.Http.HttpContent.CreateContentReadStreamAsync%2A> method buffers the content to a memory stream.</span></span> <span data-ttu-id="14c9e-124">コンテンツをストリームとして取得するより良い方法がある場合、派生クラスはこの動作をオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-124">Derived classes can override this behavior if there is a better way to retrieve the content as stream.</span></span> <span data-ttu-id="14c9e-125">たとえば、バイト配列や文字列では、バイトまたは文字列の<xref:System.IO.MemoryStream>前後に読み取り専用をラップするなど、より効率的なメソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-125">For example, a byte array or a string could use a more efficient method way such as wrapping a read-only <xref:System.IO.MemoryStream> around the bytes or string.)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="14c9e-126"><see cref="T:System.Net.Http.HttpContent" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-126">Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpContent" /> and optionally disposes of the managed resources.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContent.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="httpContent.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="14c9e-127"><see cref="T:System.Net.Http.HttpContent" /> が使用しているアンマネージド リソースを解放し、マネージド リソースを破棄します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-127">Releases the unmanaged resources and disposes of the managed resources used by the <see cref="T:System.Net.Http.HttpContent" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContent.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="httpContent.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="14c9e-128">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="14c9e-128"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="14c9e-129"><see cref="T:System.Net.Http.HttpContent" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-129">Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpContent" /> and optionally disposes of the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c9e-130">このメソッドは、パブリック`Dispose()`メソッド<xref:System.Object.Finalize%2A>とメソッドによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-130">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="14c9e-131">`Dispose()``disposing`パラメーターをに`Dispose(Boolean)` 設定して、保護されたメソッド `true` を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-131">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="14c9e-132"><xref:System.Object.Finalize%2A>をに`disposing` `Dispose` 設定してを呼び出します `false` 。パラメーターがの場合`true`、このメソッドは、この<xref:System.Net.Http.HttpContent>が参照するすべてのマネージオブジェクトによって保持されているすべてのリソースを解放します。 `disposing`</span><span class="sxs-lookup"><span data-stu-id="14c9e-132"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpContent> references.</span></span> <span data-ttu-id="14c9e-133">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-133">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Net.Http.Headers.HttpContentHeaders Headers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.Headers.HttpContentHeaders Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpContent.Headers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Headers As HttpContentHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::Headers::HttpContentHeaders ^ Headers { System::Net::Http::Headers::HttpContentHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Headers : System.Net.Http.Headers.HttpContentHeaders" Usage="System.Net.Http.HttpContent.Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Headers.HttpContentHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="14c9e-134">RFC 2616 で定義されているように HTTP コンテンツ ヘッダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-134">Gets the HTTP content headers as defined in RFC 2616.</span></span></summary>
        <value><span data-ttu-id="14c9e-135">RFC 2616 で定義されているようなコンテンツ ヘッダー。</span><span class="sxs-lookup"><span data-stu-id="14c9e-135">The content headers as defined in RFC 2616.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadIntoBufferAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="14c9e-136">非同期操作として HTTP コンテンツをメモリ バッファーにシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-136">Serialize the HTTP content to a memory buffer as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c9e-137">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="14c9e-137">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadIntoBufferAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LoadIntoBufferAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task LoadIntoBufferAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContent.LoadIntoBufferAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadIntoBufferAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ LoadIntoBufferAsync();" />
      <MemberSignature Language="F#" Value="member this.LoadIntoBufferAsync : unit -&gt; System.Threading.Tasks.Task" Usage="httpContent.LoadIntoBufferAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="14c9e-138">非同期操作として HTTP コンテンツをメモリ バッファーにシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-138">Serialize the HTTP content to a memory buffer as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="14c9e-139">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="14c9e-139">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c9e-140">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="14c9e-140">This operation will not block.</span></span> <span data-ttu-id="14c9e-141">返さ<xref:System.Threading.Tasks.Task>れたオブジェクトは、すべてのコンテンツがメモリバッファーにシリアル化された後に完了します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-141">The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been serialized to the memory buffer.</span></span>  
  
 <span data-ttu-id="14c9e-142">コンテンツをメモリバッファーにシリアル化した後、いずれかの<xref:System.Net.Http.HttpContent.CopyToAsync%2A>メソッドを呼び出すと、メモリバッファーの内容がターゲットストリームにコピーされます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-142">After content is serialized to a memory buffer, calls to one of the  <xref:System.Net.Http.HttpContent.CopyToAsync%2A> methods will copy the content of the memory buffer to the target stream.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadIntoBufferAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LoadIntoBufferAsync (long maxBufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task LoadIntoBufferAsync(int64 maxBufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadIntoBufferAsync (maxBufferSize As Long) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ LoadIntoBufferAsync(long maxBufferSize);" />
      <MemberSignature Language="F#" Value="member this.LoadIntoBufferAsync : int64 -&gt; System.Threading.Tasks.Task" Usage="httpContent.LoadIntoBufferAsync maxBufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxBufferSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="maxBufferSize"><span data-ttu-id="14c9e-143">使用バッファーの最大サイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="14c9e-143">The maximum size, in bytes, of the buffer to use.</span></span></param>
        <summary><span data-ttu-id="14c9e-144">非同期操作として HTTP コンテンツをメモリ バッファーにシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-144">Serialize the HTTP content to a memory buffer as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="14c9e-145">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="14c9e-145">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c9e-146">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="14c9e-146">This operation will not block.</span></span> <span data-ttu-id="14c9e-147">返さ<xref:System.Threading.Tasks.Task>れたオブジェクトは、すべてのコンテンツがメモリバッファーにシリアル化された後に完了します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-147">The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been serialized to the memory buffer.</span></span>  
  
 <span data-ttu-id="14c9e-148">コンテンツをメモリバッファーにシリアル化した後、いずれかの<xref:System.Net.Http.HttpContent.CopyToAsync%2A>メソッドを呼び出すと、メモリバッファーの内容がターゲットストリームにコピーされます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-148">After content is serialized to a memory buffer, calls to one of the  <xref:System.Net.Http.HttpContent.CopyToAsync%2A> methods will copy the content of the memory buffer to the target stream.</span></span>  
  
 <span data-ttu-id="14c9e-149">コンテンツが`maxBufferSize`パラメーターに渡された値を超えると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-149">If the content exceeds the value  passed in the `maxBufferSize` parameter , an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; ReadAsByteArrayAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; ReadAsByteArrayAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAsByteArrayAsync () As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ ReadAsByteArrayAsync();" />
      <MemberSignature Language="F#" Value="member this.ReadAsByteArrayAsync : unit -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpContent.ReadAsByteArrayAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="14c9e-150">非同期操作として HTTP コンテンツをバイト配列にシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-150">Serialize the HTTP content to a byte array as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="14c9e-151">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="14c9e-151">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c9e-152">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="14c9e-152">This operation will not block.</span></span> <span data-ttu-id="14c9e-153">返さ<xref:System.Threading.Tasks.Task%601>れたオブジェクトは、すべてのコンテンツがバイト配列として書き込まれた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-153">The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written as a byte array.</span></span>  
  
 <span data-ttu-id="14c9e-154">操作が完了すると、 <xref:System.Threading.Tasks.Task%601.Result%2A>返されたタスクオブジェクトのプロパティには、HTTP コンテンツを含むバイト配列が格納されます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-154">Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the byte array with the HTTP content.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; ReadAsStreamAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; ReadAsStreamAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContent.ReadAsStreamAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAsStreamAsync () As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ ReadAsStreamAsync();" />
      <MemberSignature Language="F#" Value="member this.ReadAsStreamAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpContent.ReadAsStreamAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="14c9e-155">HTTP コンテンツをシリアル化し、非同期操作としてコンテンツを表すストリームを返します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-155">Serialize the HTTP content and return a stream that represents the content as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="14c9e-156">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="14c9e-156">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c9e-157">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="14c9e-157">This operation will not block.</span></span> <span data-ttu-id="14c9e-158">返さ<xref:System.Threading.Tasks.Task%601>れたオブジェクトは、コンテンツを表すすべてのストリームが読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-158">The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the stream that represents content has been read.</span></span>  
  
 <span data-ttu-id="14c9e-159">操作が完了すると、 <xref:System.Threading.Tasks.Task%601.Result%2A>返されたタスクオブジェクトのプロパティには、HTTP コンテンツを表すストリームが格納されます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-159">Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the stream that represents the HTTP content.</span></span> <span data-ttu-id="14c9e-160">返されたストリームを使用して、さまざまなストリーム Api を使用してコンテンツを読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-160">The returned stream can then be used to read the content using various stream APIs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; ReadAsStringAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadAsStringAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContent.ReadAsStringAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAsStringAsync () As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ ReadAsStringAsync();" />
      <MemberSignature Language="F#" Value="member this.ReadAsStringAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpContent.ReadAsStringAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="14c9e-161">非同期操作として HTTP コンテンツを文字列にシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-161">Serialize the HTTP content to a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="14c9e-162">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="14c9e-162">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c9e-163">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="14c9e-163">This operation will not block.</span></span> <span data-ttu-id="14c9e-164">返さ<xref:System.Threading.Tasks.Task%601>れたオブジェクトは、すべてのコンテンツが文字列として書き込まれた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-164">The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written as a string.</span></span>  
  
 <span data-ttu-id="14c9e-165">操作が完了すると、 <xref:System.Threading.Tasks.Task%601.Result%2A>返されたタスクオブジェクトのプロパティには、HTTP コンテンツを含む文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-165">Once the operation completes, the  <xref:System.Threading.Tasks.Task%601.Result%2A> property on the returned task object contains the string with the HTTP content.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToStreamAsync">
      <MemberSignature Language="C#" Value="protected internal abstract System.Threading.Tasks.Task SerializeToStreamAsync (System.IO.Stream stream, System.Net.TransportContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task SerializeToStreamAsync(class System.IO.Stream stream, class System.Net.TransportContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Threading::Tasks::Task ^ SerializeToStreamAsync(System::IO::Stream ^ stream, System::Net::TransportContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member SerializeToStreamAsync : System.IO.Stream * System.Net.TransportContext -&gt; System.Threading.Tasks.Task" Usage="httpContent.SerializeToStreamAsync (stream, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="context" Type="System.Net.TransportContext" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="14c9e-166">対象のストリーム。</span><span class="sxs-lookup"><span data-stu-id="14c9e-166">The target stream.</span></span></param>
        <param name="context"><span data-ttu-id="14c9e-167">トランスポート (チャネル バインディング トークンなど) について説明します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-167">Information about the transport (channel binding token, for example).</span></span> <span data-ttu-id="14c9e-168">このパラメーターは <see langword="null" /> の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="14c9e-168">This parameter may be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="14c9e-169">非同期操作として HTTP コンテンツをストリームにシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-169">Serialize the HTTP content to a stream as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="14c9e-170">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="14c9e-170">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c9e-171">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="14c9e-171">This operation will not block.</span></span> <span data-ttu-id="14c9e-172">返さ<xref:System.Threading.Tasks.Task%601>れたオブジェクトは、すべてのコンテンツが`stream`パラメーターで渡されたストリームオブジェクトにシリアル化された後に完了します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-172">The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been serialized to the stream object passed in the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryComputeLength">
      <MemberSignature Language="C#" Value="protected internal abstract bool TryComputeLength (out long length);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool TryComputeLength([out] int64&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function TryComputeLength (ByRef length As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract bool TryComputeLength([Runtime::InteropServices::Out] long % length);" />
      <MemberSignature Language="F#" Value="abstract member TryComputeLength :  -&gt; bool" Usage="httpContent.TryComputeLength length" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="length"><span data-ttu-id="14c9e-173">HTTP コンテンツの長さ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="14c9e-173">The length in bytes of the HTTP content.</span></span></param>
        <summary><span data-ttu-id="14c9e-174">HTTP コンテンツが有効なバイト長であるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-174">Determines whether the HTTP content has a valid length in bytes.</span></span></summary>
        <returns><span data-ttu-id="14c9e-175"><paramref name="length" /> が有効な長さの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="14c9e-175"><see langword="true" /> if <paramref name="length" /> is a valid length; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="14c9e-176">メソッド<xref:System.Net.Http.HttpContent.TryComputeLength%2A>は、HTTP コンテンツにコンテンツの長さを計算する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-176">The <xref:System.Net.Http.HttpContent.TryComputeLength%2A> method gives a HTTP content the ability to calculate the content length.</span></span> <span data-ttu-id="14c9e-177">これは、コンテンツの長さを簡単に計算できるコンテンツの種類に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="14c9e-177">This is useful for content types which are able to easily calculate the content length.</span></span> <span data-ttu-id="14c9e-178">コンテンツの長さの計算が不可能であるか、またはコストが高くない (シリアル化に負荷が高い場合、またはシステムが大量のメモリを割り当てる必要がある場合は、システム`false`でコンテンツ全体をバッファーする必要がある) 場合、このメソッドはを返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="14c9e-178">If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return `false`.</span></span> <span data-ttu-id="14c9e-179">このメソッドがを`false`返す場合、チャンク転送が必要であるか、またはコンテンツがサーバーに送信される前にバッファーされる必要があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="14c9e-179">If this method returns `false`, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
