<Type Name="HttpClient" FullName="System.Net.Http.HttpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3b44ea987abd73ea55c4988dbcf16b845d245596" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53233095" /></Metadata><TypeSignature Language="C#" Value="public class HttpClient : System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpClient extends System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.HttpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpClient&#xA;Inherits HttpMessageInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClient : System::Net::Http::HttpMessageInvoker" />
  <TypeSignature Language="F#" Value="type HttpClient = class&#xA;    inherit HttpMessageInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Http.HttpMessageInvoker</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7a81a-101">URI で識別されるリソースに HTTP 要求を送信し、そのリソースから HTTP 応答を受信するための基本クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-101">Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-102"><xref:System.Net.Http.HttpClient>クラスのインスタンスは HTTP 要求を送信するセッションとして機能します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-102">The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests.</span></span> <span data-ttu-id="7a81a-103"><xref:System.Net.Http.HttpClient>インスタンスがそのインスタンスで実行されるすべての要求に適用する設定のコレクション。</span><span class="sxs-lookup"><span data-stu-id="7a81a-103">An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance.</span></span> <span data-ttu-id="7a81a-104">さらに、すべて<xref:System.Net.Http.HttpClient>インスタンスが他に実行される要求からの要求を分離する、独自の接続プールを使用して<xref:System.Net.Http.HttpClient>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="7a81a-104">In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.</span></span>  
  
 <span data-ttu-id="7a81a-105"><xref:System.Net.Http.HttpClient>より特定の HTTP クライアントの基本クラスとしても機能します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-105">The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients.</span></span> <span data-ttu-id="7a81a-106">例として、FacebookHttpClient、Facebook web サービスに固有の追加のメソッドを提供することがあります (GetFriends メソッドでは、たとえば)。</span><span class="sxs-lookup"><span data-stu-id="7a81a-106">An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).</span></span> <span data-ttu-id="7a81a-107">派生クラスでは、クラスの仮想メソッドをオーバーライドしないでください。</span><span class="sxs-lookup"><span data-stu-id="7a81a-107">Derived classes should not override the virtual methods on the class.</span></span> <span data-ttu-id="7a81a-108">受け取るコンス トラクター オーバー ロードを使用して、代わりに、<xref:System.Net.Http.HttpMessageHandler>処理前または後の要求の処理代わりに構成します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-108">Instead, use a constructor overload that accepts <xref:System.Net.Http.HttpMessageHandler> to configure any pre- or post-request processing instead.</span></span>
  
 <span data-ttu-id="7a81a-109">既定では、.NET Framework、Mono、<xref:System.Net.HttpWebRequest>サーバーに要求を送信するために使用します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-109">By default on .NET Framework and Mono, <xref:System.Net.HttpWebRequest> is used to send requests to the server.</span></span> <span data-ttu-id="7a81a-110">取るコンス トラクターのオーバー ロードのいずれかで異なるチャネルを指定することで、この動作を変更できる、<xref:System.Net.Http.HttpMessageHandler>パラメーターとしてのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="7a81a-110">This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter.</span></span> <span data-ttu-id="7a81a-111">認証またはキャッシュなどの機能が必要な場合、<xref:System.Net.Http.WebRequestHandler>設定を構成するために使用することができますし、コンス トラクターに渡されるインスタンスのことができます。</span><span class="sxs-lookup"><span data-stu-id="7a81a-111">If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor.</span></span> <span data-ttu-id="7a81a-112">返されたハンドラーを取るコンス トラクターのオーバー ロードのいずれかに渡すことができます、<xref:System.Net.Http.HttpMessageHandler>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="7a81a-112">The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.</span></span>  
  
 <span data-ttu-id="7a81a-113">アプリを使用して、場合<xref:System.Net.Http.HttpClient>および関連クラス、<xref:System.Net.Http>名前空間が、大量のデータ (50 メガバイトまたはそれ以上) をダウンロードしようとしています。 その後、アプリのダウンロードのストリームと既定のバッファリングを使用しない必要があります。</span><span class="sxs-lookup"><span data-stu-id="7a81a-113">If an app using <xref:System.Net.Http.HttpClient> and related classes in the <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering.</span></span> <span data-ttu-id="7a81a-114">既定のバッファリングを使用する場合は、クライアントのメモリ使用量が非常に大きな取得、パフォーマンスが低下するためになる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="7a81a-114">If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.</span></span>  
  
 <span data-ttu-id="7a81a-115">次の方法では、スレッド セーフであるがあります。</span><span class="sxs-lookup"><span data-stu-id="7a81a-115">The following methods are thread safe:</span></span>  
  
1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  
  
2.  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>  
  
3.  <xref:System.Net.Http.HttpClient.GetAsync%2A>  
  
4.  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  
  
5.  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  
  
6.  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>  
  
7.  <xref:System.Net.Http.HttpClient.PostAsync%2A>  
  
8.  <xref:System.Net.Http.HttpClient.PutAsync%2A>  
  
9. <xref:System.Net.Http.HttpClient.SendAsync%2A>  
  
 <span data-ttu-id="7a81a-116"><xref:System.Net.Http.HttpClient> 1 回インスタンス化し、アプリケーションの有効期間にわたって再利用するためのものです。</span><span class="sxs-lookup"><span data-stu-id="7a81a-116"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="7a81a-117">すべての要求に対して、HttpClient クラスをインスタンス化すると、負荷の下で使用可能なソケットの数は使い果たしてしまいます。</span><span class="sxs-lookup"><span data-stu-id="7a81a-117">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="7a81a-118">SocketException エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-118">This will result in SocketException errors.</span></span> <span data-ttu-id="7a81a-119">HttpClient を正しく使用する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-119">Below is an example using HttpClient correctly.</span></span>  
  
```csharp
public class GoodController : ApiController
{
    // OK
    private static readonly HttpClient HttpClient;

    static GoodController()
    {
        HttpClient = new HttpClient();
    }
}
```  
  
<span data-ttu-id="7a81a-120"><xref:System.Net.Http.HttpClient>はこれを実行して各プラットフォームで使用可能な下位レベルの機能をラップする高度な API です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-120">The <xref:System.Net.Http.HttpClient> is a high-level API that wraps the lower-level functionality available on each platform where it runs.</span></span>

<span data-ttu-id="7a81a-121">各プラットフォームの<xref:System.Net.Http.HttpClient>最適使用可能なトランスポートを使用しようとしています。</span><span class="sxs-lookup"><span data-stu-id="7a81a-121">On each platform, <xref:System.Net.Http.HttpClient> tries to use the best available transport:</span></span>

| <span data-ttu-id="7a81a-122">**ホスト/ランタイム**</span><span class="sxs-lookup"><span data-stu-id="7a81a-122">**Host/Runtime**</span></span>            | <span data-ttu-id="7a81a-123">**バックエンド**</span><span class="sxs-lookup"><span data-stu-id="7a81a-123">**Backend**</span></span>                                                                               |
| --------------------------- | ----------------------------------------------------------------------------------------- |
| <span data-ttu-id="7a81a-124">Windows と .NET Framework</span><span class="sxs-lookup"><span data-stu-id="7a81a-124">Windows/.NET Framework</span></span>      | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="7a81a-125">Windows/Mono</span><span class="sxs-lookup"><span data-stu-id="7a81a-125">Windows/Mono</span></span>                | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="7a81a-126">Windows/UWP</span><span class="sxs-lookup"><span data-stu-id="7a81a-126">Windows/UWP</span></span>                 | <span data-ttu-id="7a81a-127">Windows ネイティブ<xref:System.Net.Http.WinHttpHandler>(HTTP 2.0 対応)</span><span class="sxs-lookup"><span data-stu-id="7a81a-127">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="7a81a-128">Windows と .NET Core</span><span class="sxs-lookup"><span data-stu-id="7a81a-128">Windows/.NET Core</span></span>           | <span data-ttu-id="7a81a-129">Windows ネイティブ<xref:System.Net.Http.WinHttpHandler>(HTTP 2.0 対応)</span><span class="sxs-lookup"><span data-stu-id="7a81a-129">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="7a81a-130">Android と Xamarin</span><span class="sxs-lookup"><span data-stu-id="7a81a-130">Android/Xamarin</span></span>             | <span data-ttu-id="7a81a-131">ビルド時に選択します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-131">Selected at build-time.</span></span> <span data-ttu-id="7a81a-132">使用するか<xref:System.Net.HttpWebRequest>か Android のネイティブを使用して構成します。 [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span><span class="sxs-lookup"><span data-stu-id="7a81a-132">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Android's native [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span></span> |
| <span data-ttu-id="7a81a-133">iOS、tvOS、watchOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="7a81a-133">iOS, tvOS, watchOS/Xamarin</span></span>  | <span data-ttu-id="7a81a-134">ビルド時に選択します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-134">Selected at build-time.</span></span> <span data-ttu-id="7a81a-135">使用するか<xref:System.Net.HttpWebRequest>Apple を使用するように構成または[ `NSUrlSession` ](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 対応)</span><span class="sxs-lookup"><span data-stu-id="7a81a-135">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="7a81a-136">macOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="7a81a-136">macOS/Xamarin</span></span>               | <span data-ttu-id="7a81a-137">ビルド時に選択します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-137">Selected at build-time.</span></span> <span data-ttu-id="7a81a-138">使用するか<xref:System.Net.HttpWebRequest>Apple を使用するように構成または[ `NSUrlSession` ](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 対応)</span><span class="sxs-lookup"><span data-stu-id="7a81a-138">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="7a81a-139">macOS/Mono</span><span class="sxs-lookup"><span data-stu-id="7a81a-139">macOS/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                                          |
| <span data-ttu-id="7a81a-140">macOS と .NET Core</span><span class="sxs-lookup"><span data-stu-id="7a81a-140">macOS/.NET Core</span></span>             | <span data-ttu-id="7a81a-141">`libcurl`-ベースの HTTP トランスポート (HTTP 2.0 対応)</span><span class="sxs-lookup"><span data-stu-id="7a81a-141">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="7a81a-142">Linux/Mono</span><span class="sxs-lookup"><span data-stu-id="7a81a-142">Linux/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="7a81a-143">Linux と .NET Core</span><span class="sxs-lookup"><span data-stu-id="7a81a-143">Linux/.NET Core</span></span>             | <span data-ttu-id="7a81a-144">`libcurl`-ベースの HTTP トランスポート (HTTP 2.0 対応)</span><span class="sxs-lookup"><span data-stu-id="7a81a-144">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |

<span data-ttu-id="7a81a-145">ユーザーが特定のトランスポートを構成できますも<xref:System.Net.Http.HttpClient>を呼び出すことによって、<xref:System.Net.Http.HttpClient.%23ctor*>を受け取るコンス トラクター、<xref:System.Net.Http.HttpMessageHandler>します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-145">Users can also configure a specific transport for <xref:System.Net.Http.HttpClient> by invoking the <xref:System.Net.Http.HttpClient.%23ctor*> constructor that takes an <xref:System.Net.Http.HttpMessageHandler>.</span></span>

### <a name="httpclient-and-net-core"></a><span data-ttu-id="7a81a-146">HttpClient および .NET Core</span><span class="sxs-lookup"><span data-stu-id="7a81a-146">HttpClient and .NET Core</span></span>

<span data-ttu-id="7a81a-147">.NET Core 2.1 では、以降、<xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType>クラスの代わりに`HttpClientHandler`などの上位レベルの HTTP ネットワーク クラスで使用される実装を提供します`HttpClient`します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-147">Starting with .NET Core 2.1, the <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> class instead of `HttpClientHandler` provides the implementation used by higher-level HTTP networking classes such as `HttpClient`.</span></span> <span data-ttu-id="7a81a-148">旧バージョンを使用するアプリケーションを構成する<xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType>代わりに呼び出すことによって、<xref:System.AppContext.SetSwitch%2A>メソッドとして、次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="7a81a-148">You can configure your application to use the older <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> instead by calling the <xref:System.AppContext.SetSwitch%2A> method as follows:</span></span>

```csharp
AppContext.SetSwitch("System.Net.Http.useSocketsHttpHandler", false);
```

```vb
AppContext.SetSwitch("System.Net.Http.useSocketsHttpHandler", False)
``` 
  
## Examples  
 [!code-csharp[System.Net.Http.HttpClient#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.http.httpclient/cs/source.cs#1)]  
  
 <span data-ttu-id="7a81a-149">上記のコード例では、`async Task Main()`エントリ ポイント。</span><span class="sxs-lookup"><span data-stu-id="7a81a-149">The preceding code example uses an `async Task Main()` entry point.</span></span> <span data-ttu-id="7a81a-150">C# 7.1 以降その機能が必要です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-150">That feature requires C# 7.1 or later.</span></span>
 
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=245696"><span data-ttu-id="7a81a-151">Web サービスに接続します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-151">Connecting to a web service</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245697"><span data-ttu-id="7a81a-152">クイック スタート:HttpClient を使用して接続します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-152">Quickstart: Connecting using HttpClient</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245699"><span data-ttu-id="7a81a-153">HttpClient ハンドラーを使用する方法</span><span class="sxs-lookup"><span data-stu-id="7a81a-153">How to use HttpClient handlers</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245698"><span data-ttu-id="7a81a-154">HttpClient の接続をセキュリティで保護する方法</span><span class="sxs-lookup"><span data-stu-id="7a81a-154">How to secure HttpClient connections</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=242550"><span data-ttu-id="7a81a-155">HttpClient のサンプル</span><span class="sxs-lookup"><span data-stu-id="7a81a-155">HttpClient Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a81a-156"><see cref="T:System.Net.Http.HttpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-156">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-157"><xref:System.Net.Http.HttpClient> 1 回インスタンス化し、アプリケーションの有効期間にわたって再利用するためのものです。</span><span class="sxs-lookup"><span data-stu-id="7a81a-157"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="7a81a-158">すべての要求に対して、HttpClient クラスをインスタンス化すると、負荷の下で使用可能なソケットの数は使い果たしてしまいます。</span><span class="sxs-lookup"><span data-stu-id="7a81a-158">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="7a81a-159">SocketException エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-159">This will result in SocketException errors.</span></span> <span data-ttu-id="7a81a-160">HttpClient を正しく使用する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-160">Below is an example using HttpClient correctly.</span></span>  
  
```csharp  
public class GoodController : ApiController  
{  
    // OK  
    private static readonly HttpClient HttpClient;  
  
    static GoodController()  
    {  
        HttpClient = new HttpClient();  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a81a-161"><see cref="T:System.Net.Http.HttpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-161">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="7a81a-162">要求の送信に使用する HTTP ハンドラー スタック。</span><span class="sxs-lookup"><span data-stu-id="7a81a-162">The HTTP handler stack to use for sending requests.</span></span></param>
        <summary><span data-ttu-id="7a81a-163">指定したハンドラーを使用して、<see cref="T:System.Net.Http.HttpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-163">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with a specific handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-164">`handler` 呼び出しによって破棄される[HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose)します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-164">`handler` will be disposed of by calling [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-165"><paramref name="handler" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-165">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler, bool disposeHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler, disposeHandler As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler, bool disposeHandler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler * bool -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient (handler, disposeHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="disposeHandler" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="7a81a-166">HTTP 応答メッセージの処理を行う <see cref="T:System.Net.Http.HttpMessageHandler" />。</span><span class="sxs-lookup"><span data-stu-id="7a81a-166">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</span></span></param>
        <param name="disposeHandler"><span data-ttu-id="7a81a-167">内部ハンドラーを [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose) で破棄する場合は <see langword="true" />。内部ハンドラーを再利用する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7a81a-167"><see langword="true" /> if the inner handler should be disposed of by [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose), <see langword="false" /> if you intend to reuse the inner handler.</span></span></param>
        <summary><span data-ttu-id="7a81a-168">指定したハンドラーを使用して、<see cref="T:System.Net.Http.HttpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-168">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with a specific handler.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-169"><paramref name="handler" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-169">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public Uri BaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : Uri with get, set" Usage="System.Net.Http.HttpClient.BaseAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a81a-170">要求を送信するときに使用する、インターネット リソースの Uniform Resource Identifier (URI) のベース アドレスを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-170">Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></summary>
        <value><span data-ttu-id="7a81a-171">要求を送信するときに使用する、インターネット リソースの Uniform Resource Identifier (URI) のベース アドレス。</span><span class="sxs-lookup"><span data-stu-id="7a81a-171">The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-172">送信するときに、<xref:System.Net.Http.HttpRequestMessage>に相対 Uri を持つメッセージの Uri が追加される、<xref:System.Net.Http.HttpClient.BaseAddress%2A>プロパティを絶対 Uri を作成します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-172">When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingRequests">
      <MemberSignature Language="C#" Value="public void CancelPendingRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelPendingRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.CancelPendingRequests" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelPendingRequests ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelPendingRequests();" />
      <MemberSignature Language="F#" Value="member this.CancelPendingRequests : unit -&gt; unit" Usage="httpClient.CancelPendingRequests " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a81a-173">このインスタンスの保留中の要求をすべてキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="7a81a-173">Cancel all pending requests on this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-174">このメソッドを呼び出した後、<xref:System.Net.Http.HttpClient>インスタンスは、追加の要求の実行にも使用できます。</span><span class="sxs-lookup"><span data-stu-id="7a81a-174">After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestHeaders">
      <MemberSignature Language="C#" Value="public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::Headers::HttpRequestHeaders ^ DefaultRequestHeaders { System::Net::Http::Headers::HttpRequestHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestHeaders : System.Net.Http.Headers.HttpRequestHeaders" Usage="System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Headers.HttpRequestHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a81a-175">各要求と一緒に送信する必要があるヘッダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-175">Gets the headers which should be sent with each request.</span></span></summary>
        <value><span data-ttu-id="7a81a-176">各要求と一緒に送信する必要があるヘッダー。</span><span class="sxs-lookup"><span data-stu-id="7a81a-176">The headers which should be sent with each request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-177">このプロパティに設定するヘッダーは、もう一度要求メッセージに設定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-177">Headers set on this property don't need to be set on request messages again.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a81a-178">指定された URI に DELETE 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-178">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-179">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-179">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="7a81a-180">指定された URI に DELETE 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-180">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-181">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-181">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-182">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-182">This operation will not block.</span></span> <span data-ttu-id="7a81a-183">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-183">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-184"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-184">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a81a-185">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-185">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-186">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-186">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-187">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-187">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="7a81a-188">指定された URI に DELETE 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-188">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-189">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-189">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-190">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-190">This operation will not block.</span></span> <span data-ttu-id="7a81a-191">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-191">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-192"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-192">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a81a-193">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-193">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-194">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-194">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-195">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-195">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a81a-196">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="7a81a-196">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="7a81a-197">非同期操作としてキャンセル トークンを使用して削除要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-197">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-198">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-198">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-199">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-199">This operation will not block.</span></span> <span data-ttu-id="7a81a-200">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-200">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-201"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-201">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a81a-202">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-202">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-203">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-203">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-204">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-204">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a81a-205">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="7a81a-205">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="7a81a-206">非同期操作としてキャンセル トークンを使用して削除要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-206">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-207">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-207">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-208">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-208">This operation will not block.</span></span> <span data-ttu-id="7a81a-209">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-209">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-210"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-210">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a81a-211">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-211">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-212">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-212">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="httpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="7a81a-213">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7a81a-213"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="7a81a-214"><see cref="T:System.Net.Http.HttpClient" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</span><span class="sxs-lookup"><span data-stu-id="7a81a-214">Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpClient" /> and optionally disposes of the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-215">このメソッドは、パブリック`Dispose()`メソッドと<xref:System.Object.Finalize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="7a81a-215">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="7a81a-216">`Dispose()` 保護された起動`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-216">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="7a81a-217"><xref:System.Object.Finalize%2A> 呼び出す`Dispose`で`disposing`に設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-217"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="7a81a-218">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Net.Http.HttpClient> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-218">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references.</span></span> <span data-ttu-id="7a81a-219">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-219">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 <span data-ttu-id="7a81a-220">このメソッドが呼び出されたときに、<xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>保留中のすべての要求を中止するメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7a81a-220">When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a81a-221">指定された URI に GET 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-221">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-222">操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-222">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-223">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-223">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="7a81a-224">指定された URI に GET 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-224">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-225">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-225">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-226">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-226">This operation will not block.</span></span> <span data-ttu-id="7a81a-227">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-227">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-228"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-228">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-229">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-229">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-230">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-230">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="7a81a-231">指定された URI に GET 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-231">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-232">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-232">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-233">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-233">This operation will not block.</span></span> <span data-ttu-id="7a81a-234">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-234">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-235"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-235">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-236">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-236">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-237">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-237">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="7a81a-238">操作が完了したものと見なすタイミングを示す HTTP 完了オプション値。</span><span class="sxs-lookup"><span data-stu-id="7a81a-238">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="7a81a-239">非同期操作としてHTTP 完了オプションを使用して GET 要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-239">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-240">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-240">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-241">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-241">This operation will not block.</span></span> <span data-ttu-id="7a81a-242">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、一部またはすべての応答 (コンテンツを含む) が読み取られた後に `completionOption` パラメーターに基づいて完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-242">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-243"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-243">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-244">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-244">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-245">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-245">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a81a-246">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="7a81a-246">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="7a81a-247">非同期操作としてキャンセル トークンを使用して GET 要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-247">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-248">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-248">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-249">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-249">This operation will not block.</span></span> <span data-ttu-id="7a81a-250">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-250">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-251"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-251">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-252">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-252">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-253">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-253">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="7a81a-254">操作が完了したものと見なすタイミングを示す HTTP 完了オプション値。</span><span class="sxs-lookup"><span data-stu-id="7a81a-254">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="7a81a-255">非同期操作としてHTTP 完了オプションを使用して GET 要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-255">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-256">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-256">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-257">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-257">This operation will not block.</span></span> <span data-ttu-id="7a81a-258">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、一部またはすべての応答 (コンテンツを含む) が読み取られた後に `completionOption` パラメーターに基づいて完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-258">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-259"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-259">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-260">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-260">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-261">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-261">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a81a-262">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="7a81a-262">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="7a81a-263">非同期操作としてキャンセル トークンを使用して GET 要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-263">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-264">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-264">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-265">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-265">This operation will not block.</span></span> <span data-ttu-id="7a81a-266">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-266">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-267"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-267">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-268">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-268">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-269">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-269">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="7a81a-270">操作が完了したものと見なすタイミングを示す HTTP 完了オプション値。</span><span class="sxs-lookup"><span data-stu-id="7a81a-270">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a81a-271">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="7a81a-271">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="7a81a-272">非同期操作としてキャンセル トークンおよび HTTP 完了オプションを使用して GET 要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-272">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-273">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-273">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-274">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-274">This operation will not block.</span></span> <span data-ttu-id="7a81a-275">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、一部またはすべての応答 (コンテンツを含む) が読み取られた後に `completionOption` パラメーターに基づいて完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-275">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-276"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-276">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-277">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-277">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-278">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-278">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="7a81a-279">操作が完了したものと見なすタイミングを示す HTTP 完了オプション値。</span><span class="sxs-lookup"><span data-stu-id="7a81a-279">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a81a-280">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="7a81a-280">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="7a81a-281">非同期操作としてキャンセル トークンおよび HTTP 完了オプションを使用して GET 要求を指定された Uri に送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-281">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-282">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-282">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-283">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-283">This operation will not block.</span></span> <span data-ttu-id="7a81a-284">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、一部またはすべての応答 (コンテンツを含む) が読み取られた後に `completionOption` パラメーターに基づいて完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-284">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-285"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-285">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-286">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-286">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteArrayAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a81a-287">指定 URI に GET 要求を送信し、非同期操作で応答本体をバイト配列として返します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-287">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-288">操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-288">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-289">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-289">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="7a81a-290">指定 URI に GET 要求を送信し、非同期操作で応答本体をバイト配列として返します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-290">Sends a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-291">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-291">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-292">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-292">This operation will not block.</span></span> <span data-ttu-id="7a81a-293">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答本体全体が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-293">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-294"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-294">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-295">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-295">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-296">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-296">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="7a81a-297">指定 URI に GET 要求を送信し、非同期操作で応答本体をバイト配列として返します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-297">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-298">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-298">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-299">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-299">This operation will not block.</span></span> <span data-ttu-id="7a81a-300">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答本体全体が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-300">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-301"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-301">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-302">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-302">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStreamAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a81a-303">指定 URI に GET 要求を送信し、非同期操作で応答本体をストリームとして返します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-303">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-304">操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-304">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-305">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-305">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="7a81a-306">指定 URI に GET 要求を送信し、非同期操作で応答本体をストリームとして返します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-306">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-307">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-307">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-308">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-308">This operation will not block.</span></span> <span data-ttu-id="7a81a-309">返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、応答ヘッダーが読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-309">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="7a81a-310">このメソッドは、読み取るしたり応答本文をバッファーありません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-310">This method does not read nor buffer the response body.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-311"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-311">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-312">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-312">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-313">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-313">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="7a81a-314">指定 URI に GET 要求を送信し、非同期操作で応答本体をストリームとして返します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-314">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-315">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-315">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-316">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-316">This operation will not block.</span></span> <span data-ttu-id="7a81a-317">返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、応答ヘッダーが読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-317">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="7a81a-318">このメソッドは、読み取るしたり応答本文をバッファーありません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-318">This method does not read nor buffer the response body.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-319"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-319">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-320">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-320">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStringAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a81a-321">指定 URI に GET 要求を送信し、非同期操作で応答本体を文字列として返します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-321">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-322">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-322">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-323">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-323">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="7a81a-324">指定 URI に GET 要求を送信し、非同期操作で応答本体を文字列として返します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-324">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-325">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-325">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-326">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-326">This operation will not block.</span></span> <span data-ttu-id="7a81a-327">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答本体全体が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-327">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-328"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-328">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-329">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-329">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-330">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-330">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="7a81a-331">指定 URI に GET 要求を送信し、非同期操作で応答本体を文字列として返します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-331">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-332">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-332">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-333">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-333">This operation will not block.</span></span> <span data-ttu-id="7a81a-334">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答本体全体が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-334">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-335"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-335">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-336">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-336">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxResponseContentBufferSize">
      <MemberSignature Language="C#" Value="public long MaxResponseContentBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxResponseContentBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxResponseContentBufferSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxResponseContentBufferSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxResponseContentBufferSize : int64 with get, set" Usage="System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a81a-337">応答の内容を読み取るときにバッファーに格納できる最大バイト数を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-337">Gets or sets the maximum number of bytes to buffer when reading the response content.</span></span></summary>
        <value><span data-ttu-id="7a81a-338">応答コンテンツを読み取るときに、バッファーに格納できる最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="7a81a-338">The maximum number of bytes to buffer when reading the response content.</span></span> <span data-ttu-id="7a81a-339">このプロパティの既定値は 2 GB です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-339">The default value for this property is 2 gigabytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-340">アプリを設定できる、<xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A>応答を読み取るときに、バッファーへの応答のサイズを制限する値を小さくするプロパティ。</span><span class="sxs-lookup"><span data-stu-id="7a81a-340">An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response.</span></span> <span data-ttu-id="7a81a-341">応答コンテンツのサイズがより大きいかどうか、<xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A>プロパティ、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="7a81a-341">If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7a81a-342">指定されたサイズが 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-342">The size specified is less than or equal to zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a81a-343">操作は現在のインスタンス上で既に開始されました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-343">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a81a-344">現在のインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="7a81a-344">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="content">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a81a-345">指定された URI に POST 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-345">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-346">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-346">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-347">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-347">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="7a81a-348">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="7a81a-348">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="7a81a-349">指定された URI に POST 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-349">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-350">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-350">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-351">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-351">This operation will not block.</span></span> <span data-ttu-id="7a81a-352">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-352">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-353"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-353">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-354">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-354">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-355">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-355">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="7a81a-356">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="7a81a-356">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="7a81a-357">指定された URI に POST 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-357">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-358">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-358">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-359">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-359">This operation will not block.</span></span> <span data-ttu-id="7a81a-360">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-360">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-361"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-361">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-362">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-362">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-363">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-363">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="7a81a-364">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="7a81a-364">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a81a-365">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="7a81a-365">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="7a81a-366">POST 要求をキャンセル トークンとともに非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-366">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-367">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-367">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-368">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-368">This operation will not block.</span></span> <span data-ttu-id="7a81a-369">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-369">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-370"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-370">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-371">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-371">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-372">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-372">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="7a81a-373">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="7a81a-373">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a81a-374">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="7a81a-374">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="7a81a-375">POST 要求をキャンセル トークンとともに非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-375">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-376">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-376">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-377">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-377">This operation will not block.</span></span> <span data-ttu-id="7a81a-378">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-378">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-379"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-379">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-380">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-380">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PutAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a81a-381">指定された URI に PUT 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-381">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-382">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-382">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-383">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-383">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="7a81a-384">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="7a81a-384">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="7a81a-385">指定された URI に PUT 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-385">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-386">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-386">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-387">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-387">This operation will not block.</span></span> <span data-ttu-id="7a81a-388">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-388">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-389"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-389">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-390">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-390">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-391">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-391">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="7a81a-392">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="7a81a-392">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="7a81a-393">指定された URI に PUT 要求を非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-393">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-394">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-394">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-395">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-395">This operation will not block.</span></span> <span data-ttu-id="7a81a-396">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-396">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-397"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-397">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-398">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-398">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-399">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-399">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="7a81a-400">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="7a81a-400">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a81a-401">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="7a81a-401">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="7a81a-402">PUT 要求をとキャンセル トークンと共に非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-402">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-403">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-403">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-404">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-404">This operation will not block.</span></span> <span data-ttu-id="7a81a-405">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-405">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-406"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-406">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-407">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-407">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="7a81a-408">要求の送信先 URI。</span><span class="sxs-lookup"><span data-stu-id="7a81a-408">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="7a81a-409">サーバーに送信される HTTP 要求の内容。</span><span class="sxs-lookup"><span data-stu-id="7a81a-409">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a81a-410">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="7a81a-410">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="7a81a-411">PUT 要求をとキャンセル トークンと共に非同期操作として送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-411">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-412">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-412">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-413">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-413">This operation will not block.</span></span> <span data-ttu-id="7a81a-414">返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、応答全体 (コンテンツを含む) が読み取られた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-414">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-415"><paramref name="requestUri" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-415">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-416">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-416">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a81a-417">非同期操作として HTTP 要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-417">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-418">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-418">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="7a81a-419">送信する HTTP 要求メッセージ。</span><span class="sxs-lookup"><span data-stu-id="7a81a-419">The HTTP request message to send.</span></span></param>
        <summary><span data-ttu-id="7a81a-420">非同期操作として HTTP 要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-420">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-421">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-421">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-422">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-422">This operation will not block.</span></span> <span data-ttu-id="7a81a-423">返された<xref:System.Threading.Tasks.Task%601>オブジェクトはコンテンツを含む応答全体が読み取られると、完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-423">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-424"><paramref name="request" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-424">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a81a-425">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-425">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-426">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-426">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="7a81a-427">送信する HTTP 要求メッセージ。</span><span class="sxs-lookup"><span data-stu-id="7a81a-427">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="7a81a-428">操作が完了したとき (応答が使用できる状態になった後か、応答コンテンツ全体が読み取られた後)。</span><span class="sxs-lookup"><span data-stu-id="7a81a-428">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <summary><span data-ttu-id="7a81a-429">非同期操作として HTTP 要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-429">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-430">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-430">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-431">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-431">This operation will not block.</span></span> <span data-ttu-id="7a81a-432">値に応じて、`completionOption`パラメーター、返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、応答があるか、コンテンツを含む応答全体を読み取ると、すぐに完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-432">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-433"><paramref name="request" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-433">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a81a-434">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-434">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-435">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-435">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="7a81a-436">送信する HTTP 要求メッセージ。</span><span class="sxs-lookup"><span data-stu-id="7a81a-436">The HTTP request message to send.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a81a-437">操作をキャンセルするキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="7a81a-437">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="7a81a-438">非同期操作として HTTP 要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-438">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-439">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-439">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-440">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-440">This operation will not block.</span></span> <span data-ttu-id="7a81a-441">返された<xref:System.Threading.Tasks.Task%601>オブジェクトはコンテンツを含む応答全体が読み取られると、完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-441">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-442"><paramref name="request" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-442">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a81a-443">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-443">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-444">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-444">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="7a81a-445">送信する HTTP 要求メッセージ。</span><span class="sxs-lookup"><span data-stu-id="7a81a-445">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="7a81a-446">操作が完了したとき (応答が使用できる状態になった後か、応答コンテンツ全体が読み取られた後)。</span><span class="sxs-lookup"><span data-stu-id="7a81a-446">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a81a-447">操作をキャンセルするキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="7a81a-447">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="7a81a-448">非同期操作として HTTP 要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-448">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="7a81a-449">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7a81a-449">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-450">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-450">This operation will not block.</span></span> <span data-ttu-id="7a81a-451">値に応じて、`completionOption`パラメーター、返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、応答があるか、コンテンツを含む応答全体を読み取ると、すぐに完了します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-451">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a81a-452"><paramref name="request" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-452">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a81a-453">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-453">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="7a81a-454">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-454">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan with get, set" Usage="System.Net.Http.HttpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a81a-455">要求がタイムアウトするまで待機する期間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-455">Gets or sets the timespan to wait before the request times out.</span></span></summary>
        <value><span data-ttu-id="7a81a-456">要求がタイムアウトするまで待機する期間。</span><span class="sxs-lookup"><span data-stu-id="7a81a-456">The timespan to wait before the request times out.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a81a-457">既定値は 100,000 ミリ秒 (100 秒) です。</span><span class="sxs-lookup"><span data-stu-id="7a81a-457">The default value is 100,000 milliseconds (100 seconds).</span></span>  
  
 <span data-ttu-id="7a81a-458">プロパティの値を設定すると、タイムアウトを設定する<xref:System.Threading.Timeout.InfiniteTimeSpan>します。</span><span class="sxs-lookup"><span data-stu-id="7a81a-458">To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span></span>  
  
 <span data-ttu-id="7a81a-459">ドメイン ネーム システム (DNS) クエリには、最大 15 秒を返すまたはタイムアウトをかかる場合があります。設定すると、要求には、解決を必要とするホスト名が含まれています。<xref:System.Net.Http.HttpClient.Timeout%2A>値より小さい 15 秒間かかる場合があります 15 秒以上前に、<xref:System.Net.WebException>が要求のタイムアウトを示すためにスローされます。</span><span class="sxs-lookup"><span data-stu-id="7a81a-459">A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.</span></span>  
  
 <span data-ttu-id="7a81a-460">これを使用してすべての要求を同じタイムアウトが適用されます<xref:System.Net.Http.HttpClient>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="7a81a-460">The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.</span></span>  <span data-ttu-id="7a81a-461">使用して個々 の要求ごとに異なるタイムアウトを設定することも、<xref:System.Threading.CancellationTokenSource>タスク。</span><span class="sxs-lookup"><span data-stu-id="7a81a-461">You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task.</span></span> <span data-ttu-id="7a81a-462">のみのうち短い 2 つのタイムアウトが適用されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="7a81a-462">Note that only the shorter of the two timeouts will apply.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7a81a-463">指定したタイムアウトが 0 以下のため <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="7a81a-463">The timeout specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a81a-464">操作は現在のインスタンス上で既に開始されました。</span><span class="sxs-lookup"><span data-stu-id="7a81a-464">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7a81a-465">現在のインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="7a81a-465">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>