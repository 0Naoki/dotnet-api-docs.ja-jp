<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HttpMessageHandler.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5010493ba0e303188ad7d031473c72e8a1f5bbda7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">010493ba0e303188ad7d031473c72e8a1f5bbda7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.Http.HttpMessageHandler">
          <source>A base type for HTTP message handlers.</source>
          <target state="translated">HTTP メッセージ ハンドラーの基本データ型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Http.HttpMessageHandler">
          <source>There are various HTTP message handles that can be used.</source>
          <target state="translated">使用できるさまざまな HTTP メッセージ ハンドルがあります。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Http.HttpMessageHandler">
          <source>These include the following.</source>
          <target state="translated">次が含まれます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Http.HttpMessageHandler">
          <source><ph id="ph1">&lt;xref:System.Net.Http.DelegatingHandler&gt;</ph> - A class used to plug a handler into a handler chain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Http.DelegatingHandler&gt;</ph> は、クラス ハンドラー チェーンにハンドラーを接続するために使用します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Http.HttpMessageHandler">
          <source><ph id="ph1">&lt;xref:System.Net.Http.HttpMessageHandler&gt;</ph> - A simple to class to derive from that supports the most common requirements for most applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Http.HttpMessageHandler&gt;</ph> -シンプル から派生するクラスには、ほとんどのアプリケーションの最も一般的な要件をサポートします。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Http.HttpMessageHandler">
          <source><ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler&gt;</ph> - A class that operates at the bottom of the handler chain that actually handles the HTTP transport operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler&gt;</ph> に実際に操作を処理する、HTTP トランスポート ハンドラー チェーンの下部にある動作は、クラスです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Http.HttpMessageHandler">
          <source><ph id="ph1">&lt;xref:System.Net.Http.WebRequestHandler&gt;</ph> - A specialty class that operates at the bottom of the handler chain class that handles HTTP transport operations with options that are specific to the <ph id="ph2">&lt;xref:System.Net.HttpWebRequest?displayProperty=nameWithType&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Http.WebRequestHandler&gt;</ph> に固有のオプションで HTTP トランスポートの操作を処理するハンドラー チェーン クラスの下部に動作するは、専門分野クラス、<ph id="ph2">&lt;xref:System.Net.HttpWebRequest?displayProperty=nameWithType&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Http.HttpMessageHandler">
          <source>If developers derive classes from <ph id="ph1">&lt;xref:System.Net.Http.HttpMessageHandler&gt;</ph> and override the <ph id="ph2">&lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt;</ph> method, they must make sure that <ph id="ph3">&lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt;</ph> can get called concurrently by different threads.</source>
          <target state="translated">開発者からのクラスを派生させる場合<ph id="ph1">&lt;xref:System.Net.Http.HttpMessageHandler&gt;</ph>をオーバーライドし、<ph id="ph2">&lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt;</ph>メソッド、する必要があることを確認<ph id="ph3">&lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt;</ph>別のスレッドで同時に呼び出すことができますを取得します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Http.HttpMessageHandler">
          <source>This is necessary since methods on <ph id="ph1">&lt;xref:System.Net.Http.HttpClient&gt;</ph> can be called concurrently and need a guarantee of thread safety.</source>
          <target state="translated">これは、必要なメソッドを以降<ph id="ph1">&lt;xref:System.Net.Http.HttpClient&gt;</ph>同時に呼び出すことができる、スレッド セーフの保証を必要とします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Http.HttpMessageHandler">
          <source>So if a handler is assigned to an <ph id="ph1">&lt;xref:System.Net.Http.HttpClient&gt;</ph> instance, the <ph id="ph2">&lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt;</ph> method of the handler may get called concurrently by the <ph id="ph3">&lt;xref:System.Net.Http.HttpClient&gt;</ph> instance and needs to be thread safe.</source>
          <target state="translated">ハンドラーに割り当てられている場合は、 <ph id="ph1">&lt;xref:System.Net.Http.HttpClient&gt;</ph> 、インスタンス、<ph id="ph2">&lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt;</ph>ハンドラーのメソッドが同時に、呼び出される、<ph id="ph3">&lt;xref:System.Net.Http.HttpClient&gt;</ph>インスタンスとするスレッド セーフである必要があります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpMessageHandler.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpMessageHandler" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Http.HttpMessageHandler" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Net.Http.HttpMessageHandler">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpMessageHandler" /&gt;</ph> and optionally disposes of the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Http.HttpMessageHandler" /&gt;</ph> が使用しているアンマネージ リソースを解放します。オプションとして、マネージ リソースを破棄することもできます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpMessageHandler.Dispose">
          <source>Releases the unmanaged resources and disposes of the managed resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpMessageHandler" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Http.HttpMessageHandler" /&gt;</ph> が使用しているアンマネージ リソースを解放し、マネージ リソースを破棄します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to releases only unmanaged resources.</source>
          <target state="translated">マネージ リソースとアンマネージ リソースの両方を解放する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。アンマネージ リソースだけを解放する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpMessageHandler" /&gt;</ph> and optionally disposes of the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Http.HttpMessageHandler" /&gt;</ph> が使用しているアンマネージ リソースを解放します。オプションとして、マネージ リソースを破棄することもできます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、パブリック<ph id="ph1">`Dispose()`</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> プロテクト呼び出します<ph id="ph2">`Dispose(Boolean)`</ph>メソッドを<ph id="ph3">`disposing`</ph>パラメーターに設定<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.When the <ph id="ph5">`disposing`</ph> parameter is <ph id="ph6">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph7">&lt;xref:System.Net.Http.HttpMessageHandler&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 呼び出す<ph id="ph2">`Dispose`</ph>で<ph id="ph3">`disposing`</ph>'éý'<ph id="ph4">`false`</ph>です。ときに、<ph id="ph5">`disposing`</ph>パラメーターは<ph id="ph6">`true`</ph>、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放します。 この<ph id="ph7">&lt;xref:System.Net.Http.HttpMessageHandler&gt;</ph>参照します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">このメソッドは、参照される各オブジェクトの <ph id="ph1">`Dispose()`</ph> メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
          <source>The HTTP request message to send.</source>
          <target state="translated">送信する HTTP 要求メッセージ。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
          <source>The cancellation token to cancel operation.</source>
          <target state="translated">操作をキャンセルするキャンセル トークン。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
          <source>Send an HTTP request as an asynchronous operation.</source>
          <target state="translated">非同期操作として HTTP 要求を送信します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">非同期操作を表すタスク オブジェクト。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
          <source>This operation will not block.</source>
          <target state="translated">この操作はブロックされません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete once the entire response including content is read.</source>
          <target state="translated">返された<ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>オブジェクトは、コンテンツを含む応答全体が読み取られた後に完了します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt;</ph> method is used primarily by the system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt;</ph>メソッドは、システムによって、主に使用します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
          <source>This method is called by the system one of the  <ph id="ph1">&lt;xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=nameWithType&gt;</ph> methods is called.</source>
          <target state="translated">このメソッドは、1 つのシステム、<ph id="ph1">&lt;xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=nameWithType&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
          <source>Most apps will never call this method.</source>
          <target state="translated">ほとんどのアプリには、このメソッドは呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="request" /&gt;</ph> was <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="request" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph>でした。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>