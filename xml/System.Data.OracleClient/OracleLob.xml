<Type Name="OracleLob" FullName="System.Data.OracleClient.OracleLob">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6be87030aa2b6ac0bc0096d828340ab9fc994868" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37676413" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OracleLob : System.IO.Stream, ICloneable, System.Data.SqlTypes.INullable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OracleLob extends System.IO.Stream implements class System.Data.SqlTypes.INullable, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OracleClient.OracleLob" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OracleLob&#xA;Inherits Stream&#xA;Implements ICloneable, INullable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OracleLob sealed : System::IO::Stream, ICloneable, System::Data::SqlTypes::INullable" />
  <TypeSignature Language="F#" Value="type OracleLob = class&#xA;    inherit Stream&#xA;    interface ICloneable&#xA;    interface IDisposable&#xA;    interface INullable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.OracleClient</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.SqlTypes.INullable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Oracle サーバーに格納される、<see langword="LOB" /> (Large Object Binary) データ型を表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob>とは異なります、<xref:System.Data.OracleClient.OracleBFile>の代わりに、オペレーティング システムで物理ファイル内のサーバーで、データが格納されていることにします。 異なり、読み取り/書き込みオブジェクトにも、 <xref:System.Data.OracleClient.OracleBFile>、これは読み取り専用で常にします。  
  
 <xref:System.Data.OracleClient.OracleLob>これらのいずれか<xref:System.Data.OracleClient.OracleType>データ型。  
  
|OracleType のデータ型|説明|  
|--------------------------|-----------------|  
|`Blob`|Oracle `BLOB` 4 ギガバイト (GB) の最大サイズのバイナリ データを含むデータ型。 <xref:System.Array> 型の <xref:System.Byte> に割り当てられます。|  
|`Clob`|Oracle`CLOB`に基づいて既定の文字、文字データを含むデータ型が 4 GB の最大サイズで、サーバーで設定します。 <xref:System.String> に割り当てられます。|  
|`NClob`|Oracle`NCLOB`国別文字セットをサーバーで 4 GB の最大サイズに基づいて、文字データを含むデータ型。 <xref:System.String> に割り当てられます。|  
  
 .NET アプリケーションの開発者は、Oracle を取得できる`LOB`などの基本的な .NET のデータ型に値<xref:System.Array>型の<xref:System.Byte>と<xref:System.String>、または、特別な<xref:System.Data.OracleClient.OracleLob>データ型。 <xref:System.Data.OracleClient.OracleLob>クラスからデータを読み取ると、Oracle への書き込みがサポート`LOB`Oracle データベースでします。  
  
 主な特徴を次に、 <xref:System.Data.OracleClient.OracleLob> .NET の基本データ型と区別するためのデータ型。  
  
-   Oracle を取得した後に`LOB`に Oracle データベースからの値、<xref:System.Data.OracleClient.OracleLob>クラスを変更できます、`LOB`開いているトランザクションで変更データがデータベースに直接反映されます。 Oracle を取得する場合`LOB`値に、<xref:System.Array>型の<xref:System.Byte>または<xref:System.String>これらのアレイを更新し、データベースには、変更は反映されません。  
  
-   使用すると、<xref:System.Data.OracleClient.OracleLob>のチャンクにアクセスするクラス、`LOB`値、そのチャンクのみに渡される Oracle データベースからクライアント。 使用すると、<xref:System.Data.OracleClient.OracleDataReader.GetChars%2A>のチャンクにアクセスするメソッド、`LOB`値、値の内容全体に渡される Oracle データベースからクライアント。  
  
 取得する、<xref:System.Data.OracleClient.OracleLob>オブジェクトを呼び出し、<xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A>メソッド。  
  
 構築することができます、<xref:System.Data.OracleClient.OracleLob>この形式を使用して NULL です。  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 この手法は主にテストするために使用するかどうかを`LOB`null の場合、この例に示すようには、サーバーから返されます。  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 NULL`LOB`ゼロ バイトと同様に動作`LOB`で<xref:System.Data.OracleClient.OracleLob.Read%2A>が成功し、常に 0 バイトを返します。  
  
 選択すると、 `LOB` null 値を含む列を返します<xref:System.Data.OracleClient.OracleLob.Null>します。  
  
 一時的なを取得する前にトランザクションを開始する必要があります`LOB`します。 それ以外の場合、<xref:System.Data.OracleClient.OracleDataReader>後でデータを取得できない可能性があります。  
  
 一時的なを開くこともできます`LOB`DBMS_LOB を呼び出すことによって Oracle でします。CREATETEMPORARY システム ストアド プロシージャとバインドを`LOB`出力パラメーター。 一時的なクライアント側で`LOB`テーブル ベースのように動作`LOB`します。 たとえば、一時的なを更新する`LOB`には、トランザクションで囲む必要があります。  
  
 次の c# の例は、一時的なを開く方法を示します`LOB`します。  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
byte[] tempbuff = new byte[10000];  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
> [!NOTE]
>  継承された<xref:System.IO.Stream.WriteByte%2A>を文字データで使用されている場合、メソッドが失敗したと<xref:System.InvalidOperationException>がスローされます。 代わりに、<xref:System.Data.OracleClient.OracleLob.Write%2A> メソッドを使用してください。  
>   
>  一時`LOB`s はのみに、接続が閉じられたときに閉じられますが、プールに負荷、一時的な`LOB`s を閉じないでください。 これは、一時的な廃棄することにより解決できます`LOB`、呼び出すことによって`tempLob.Dispose()`します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Data.OracleClient.OracleLob source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Data.OracleClient.OracleLob source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (source As OracleLob)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Data::OracleClient::OracleLob ^ source);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Data.OracleClient.OracleLob -&gt; unit" Usage="oracleLob.Append source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="source">データの追加元の <see langword="LOB" />。</param>
        <summary>指定した <see langword="LOB" /> のデータを現在の <see langword="LOB" /> に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 書き込む、 `LOB`、取得する必要があります、`LOB`ときに、SQL SELECT ステートメントの FOR UPDATE 句を使用して開始されたローカル トランザクションをいる必要があります。  
  
 すべてのデータ ソースから`LOB`が現在の末尾に追加されます`LOB`します。 どちらの位置`LOB`が評価されるか、このプロセス中に変更します。  
  
 基になるデータ型は、常に同じにある必要があります。 追加する場合など、 <xref:System.Data.OracleClient.OracleType.NClob>、宛先<xref:System.Data.OracleClient.OracleLob>必要もあります、<xref:System.Data.OracleClient.OracleType.NClob>します。  
  
> [!NOTE]
>  このリリースでは、読み取り専用への書き込み操作で`LOB`が成功したとは更新されません、`LOB`サーバー。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">ソースの <see cref="T:System.Data.OracleClient.OracleLob" /> が null です。</exception>
        <exception cref="T:System.InvalidOperationException">ソースの <see cref="T:System.Data.OracleClient.OracleLob" /> が null か、接続が閉じられています。</exception>
        <exception cref="T:System.ObjectDisposedException">ソースの <see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが閉じているか破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginBatch">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>複数の書き込み操作の実行中に、サーバー側のトリガーが発生しないようにします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch();" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : unit -&gt; unit" Usage="oracleLob.BeginBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>複数の読み取り操作の実行中に、サーバー側のトリガーが発生しないようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 開く、`LOB`で<xref:System.Data.OracleClient.OracleLobOpenMode.ReadOnly>モード。 したがって、、`LOB`読み取りしか実行から、対応する呼び出しまで、には書き込まれません<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>します。 バッチ書き込みを実行する、 `LOB`、呼び出す<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>で<xref:System.Data.OracleClient.OracleLobOpenMode.ReadWrite>します。  
  
 呼び出す<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>同じトランザクション内で複数回現在スロー Oracle"ORA 22293: LOB は、同じトランザクションで既に開かれて"エラー。 さらに、取得した場合、`LOB`を使用して別<xref:System.Data.OracleClient.OracleDataReader>、元の呼び出し元が呼び出されていないと、<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>メソッドでは、同じエラーが生成されます。 そのため、呼び出す必要がある、<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>が完了したら、メソッドを使用して、 <xref:System.Data.OracleClient.OracleLob>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch (System.Data.OracleClient.OracleLobOpenMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch(valuetype System.Data.OracleClient.OracleLobOpenMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch (mode As OracleLobOpenMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch(System::Data::OracleClient::OracleLobOpenMode mode);" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : System.Data.OracleClient.OracleLobOpenMode -&gt; unit" Usage="oracleLob.BeginBatch mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.OracleClient.OracleLobOpenMode" />
      </Parameters>
      <Docs>
        <param name="mode">この <see cref="T:System.Data.OracleClient.OracleLobOpenMode" /> 呼び出しと、対応する <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" /> 呼び出しの間に <see langword="LOB" /> にアクセスできるモード (いずれかの <see cref="M:System.Data.OracleClient.OracleLob.EndBatch" /> 値)。</param>
        <summary>指定したアクセス モードでの、複数の読み取り操作と書き込み操作の実行中に、サーバー側のトリガーが発生しないようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 書き込む、 `LOB`、取得する必要があります、`LOB`ときに、SQL SELECT ステートメントの FOR UPDATE 句を使用して開始されたローカル トランザクションをいる必要があります。  
  
 呼び出す<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>同じトランザクション内で複数回現在スロー Oracle"ORA 22293: LOB は、同じトランザクションで既に開かれて"エラー。 さらに、取得した場合、`LOB`を使用して別<xref:System.Data.OracleClient.OracleDataReader>、元の呼び出し元が呼び出されていないと、<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>メソッドでは、同じエラーが生成されます。 そのため、呼び出す必要がある、<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>が完了したら、メソッドを使用して、 <xref:System.Data.OracleClient.OracleLob>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Data.OracleClient.OracleLob.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="LOB" /> ストリームを読み取ることができるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> ストリームが読み取りをサポートしている場合は <see langword="LOB" />。<see langword="false" /> が閉じているか破棄されている場合は <see langword="LOB" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>前方シークおよび後方シーク操作を実行できるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="false" /> が閉じているか破棄されている場合は <see langword="LOB" />。それ以外の場合は <see langword="true" />。 <see cref="F:System.Data.OracleClient.OracleLob.Null" /> の場合は、常に <see langword="true" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="LOB" /> が書き込みをサポートしているかどうかに関係なく、常に true を返します。</summary>
        <value>
          <see langword="true" /> が開いている場合、または破棄されていない場合は、書き込みをサポートしているかどうかに関係なく、常に <see langword="LOB" /> を返します。<see langword="false" /> が閉じているか破棄されている場合は <see langword="LOB" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 書き込む、 `LOB`、取得する必要があります、`LOB`ときに、SQL SELECT ステートメントの FOR UPDATE 句を使用する必要がありますがトランザクションを開始してローカルです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChunkSize">
      <MemberSignature Language="C#" Value="public int ChunkSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChunkSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChunkSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChunkSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ChunkSize : int" Usage="System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>読み取りまたは書き込み操作でサーバーから取得する、またはサーバーに送信する最小バイト数を示す値を取得します。</summary>
        <value>取得または送信する最小バイト数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって返される値、<xref:System.Data.OracleClient.OracleLob.ChunkSize%2A>プロパティは、.NET Framework Data Provider for Oracle の設定ではありません。 代わりに、Oracle Call Interface (OCI) が、サーバーと通信するときに使用する値になります。 使用<xref:System.Data.OracleClient.OracleLob.ChunkSize%2A>クライアント側のチャンクが同じサイズであることを確認します。 小さいチャンクで読み取りまたは書き込み、データをキャッシュしないと、完全なパケットの受信または送信しないため、サーバーにない最適化のラウンド トリップが原因で。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="oracleLob.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>元の <see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトと同じ Oracle の <see langword="LOB" /> を参照する、新しい <see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトを作成します。</summary>
        <returns>元の <see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトと同じ Oracle の <see langword="LOB" /> を参照する、新しい <see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しいプロパティ<xref:System.Data.OracleClient.OracleLob>オブジェクトの最初に、元のオブジェクトのものと同じ値であります。 ただし後、<xref:System.Data.OracleClient.OracleLob.Clone%2A>が完了したら、各<xref:System.Data.OracleClient.OracleLob>オブジェクトは、他の依存しません。 値を変更するなど、<xref:System.Data.OracleClient.OracleLob.Position%2A>元のプロパティ<xref:System.Data.OracleClient.OracleLob>の値を変更することはありません<xref:System.Data.OracleClient.OracleLob.Position%2A>コピーで。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="oracleLob.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OracleClient.OracleConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As OracleConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleConnection ^ Connection { System::Data::OracleClient::OracleConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.OracleClient.OracleConnection" Usage="System.Data.OracleClient.OracleLob.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Data.OracleClient.OracleConnection" /> のインスタンスで使用される <see cref="T:System.Data.OracleClient.OracleLob" /> を取得します。</summary>
        <value>データ ソースへの接続。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Data.OracleClient.OracleLob" /> のデータをコピー先の <see cref="T:System.Data.OracleClient.OracleLob" /> にコピーします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob -&gt; int64" Usage="oracleLob.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="destination">コピー先 <see cref="T:System.Data.OracleClient.OracleLob" />。</param>
        <summary>この <see cref="T:System.Data.OracleClient.OracleLob" /> のデータをコピー先の <see cref="T:System.Data.OracleClient.OracleLob" /> にコピーします。</summary>
        <returns>コピーされたバイト数。 これはすべての埋め込みバイトを除外します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基になるデータ型は、常に同じにある必要があります。 コピーする場合など、 <xref:System.Data.OracleClient.OracleType.NClob>、宛先<xref:System.Data.OracleClient.OracleLob>必要もあります、<xref:System.Data.OracleClient.OracleType.NClob>します。  
  
 コピー先のオフセットが変換先の末尾を越えるかどうか`LOB`、`LOB`データをコピーするのには、拡張します。 最後の間隔、`LOB`最後のコピー先のオフセットは 0 で埋められますと`BLOB`データ型とのスペース`CLOB`と`NCLOB`データ型。  
  
 書き込む、 `LOB`、取得する必要があります、`LOB`ときに、SQL SELECT ステートメントの FOR UPDATE 句を使用して開始されたローカル トランザクションをいる必要があります。  
  
> [!NOTE]
>  このリリースでは、読み取り専用への書き込み操作で`LOB`可能性がありますが、失敗すると、更新、`LOB`サーバー。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す可能性があります。  
>   
>  `CopyTo`メソッドは、対象のコンテンツをクリアしません`OracleLob`コピー操作を実行する前にします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destination" /> パラメーターで指定されている <see cref="T:System.Data.OracleClient.OracleLob" /> が null です。</exception>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination, long destinationOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination, int64 destinationOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob, destinationOffset As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination, long destinationOffset);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob * int64 -&gt; int64" Usage="oracleLob.CopyTo (destination, destinationOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination">コピー先の <see cref="T:System.Data.OracleClient.OracleLob" />。</param>
        <param name="destinationOffset">コピー先のオフセット。 <see langword="CLOB" /> データ型および <see langword="NCLOB" /> データ型の場合、これは偶数のバイト数である必要があります。</param>
        <summary>この <see cref="T:System.Data.OracleClient.OracleLob" /> のデータを、コピーするデータ サイズを指定して、コピー先の <see cref="T:System.Data.OracleClient.OracleLob" /> にコピーします。</summary>
        <returns>コピーされたバイト数。 これはすべての埋め込みバイトを除外します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基になるデータ型は、常に同じにある必要があります。 コピーする場合など、 <xref:System.Data.OracleClient.OracleType.NClob>、宛先<xref:System.Data.OracleClient.OracleLob>必要もあります、<xref:System.Data.OracleClient.OracleType.NClob>します。  
  
 コピー先のオフセットが変換先の末尾を越えるかどうか`LOB`、`LOB`データをコピーするのには、拡張します。 末尾の間のスペース`LOB`最後のコピー先のオフセットは 0 で埋められますと`BLOB`データ型とのスペース`CLOB`と`NCLOB`データ型。  
  
 書き込む、 `LOB`、取得する必要があります、`LOB`ときに、SQL SELECT ステートメントの FOR UPDATE 句を使用して開始されたローカル トランザクションをいる必要があります。  
  
> [!NOTE]
>  このリリースでは、読み取り専用への書き込み操作で`LOB`が成功したとは更新されません、`LOB`サーバー。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す可能性があります。  
>   
>  `CopyTo`メソッドは、対象のコンテンツをクリアしません`OracleLob`コピー操作を実行する前にします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destination" /> パラメーターで指定されている <see cref="T:System.Data.OracleClient.OracleLob" /> が null です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="destinationOffset" /> で指定したパラメーターの値が 0 未満であるか、4 GB を超えています。  
  
- または - 
<paramref name="destinationOffset" /> パラメーターで <see langword="CLOB" /> または <see langword="NCLOB" /> データ型に指定した値が偶数ではありません。  
  
- または - 
<see langword="CLOB" /> および <see langword="NCLOB" /> データ型には、偶数のバイト数を指定する必要があります。</exception>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (long sourceOffset, System.Data.OracleClient.OracleLob destination, long destinationOffset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(int64 sourceOffset, class System.Data.OracleClient.OracleLob destination, int64 destinationOffset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (sourceOffset As Long, destination As OracleLob, destinationOffset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(long sourceOffset, System::Data::OracleClient::OracleLob ^ destination, long destinationOffset, long amount);" />
      <MemberSignature Language="F#" Value="override this.CopyTo : int64 * System.Data.OracleClient.OracleLob * int64 * int64 -&gt; int64" Usage="oracleLob.CopyTo (sourceOffset, destination, destinationOffset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceOffset" Type="System.Int64" />
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="sourceOffset">コピー元のオフセット。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <param name="destination">コピー先 <see langword="OracleLob" /><see cref="N:System.Data.OracleClient" />。</param>
        <param name="destinationOffset">コピー先のオフセット。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <param name="amount">コピーするデータのサイズ (バイト単位)。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <summary>データ サイズとコピー先のオフセットを指定して、この <see cref="T:System.Data.OracleClient.OracleLob" /> からコピー先の <see cref="T:System.Data.OracleClient.OracleLob" /> にコピーします。</summary>
        <returns>コピーされたバイト数。 これはすべての埋め込みバイトを除外します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基になるデータ型は、常に同じにある必要があります。 コピーする場合など、 <xref:System.Data.OracleClient.OracleType.NClob>、宛先<xref:System.Data.OracleClient.OracleLob>必要もあります、<xref:System.Data.OracleClient.OracleType.NClob>します。  
  
 コピー先のオフセットが変換先の末尾を越えるかどうか`LOB`、`LOB`データをコピーするのには、拡張します。 末尾の間のスペース`LOB`最後のコピー先のオフセットは 0 で埋められますと`BLOB`データ型とのスペース`CLOB`と`NCLOB`データ型。  
  
 書き込む、 `LOB`、取得する必要があります、`LOB`ときに、SQL SELECT ステートメントの FOR UPDATE 句を使用して開始されたローカル トランザクションをいる必要があります。  
  
> [!NOTE]
>  このリリースでは、読み取り専用への書き込み操作で`LOB`が成功したとは更新されません、`LOB`サーバー。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す可能性があります。  
>   
>  `CopyTo`メソッドは、対象のコンテンツをクリアしません`OracleLob`コピー操作を実行する前にします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destination" /> パラメーターで指定されている <see cref="T:System.Data.OracleClient.OracleLob" /> が null です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="amount" />、<paramref name="sourceOffset" />、または <paramref name="destinationOffset" /> パラメーターで指定したパラメーターの値が 0 未満であるか、4 GB を超えています。  
  
- または - 
<paramref name="amount" />、<paramref name="sourceOffset" />、または <paramref name="destinationOffset" /> パラメーターで <see langword="CLOB" /> または <see langword="NCLOB" /> データ型に指定した値が偶数ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="oracleLob.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="oracleLob.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBatch">
      <MemberSignature Language="C#" Value="public void EndBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.EndBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndBatch();" />
      <MemberSignature Language="F#" Value="member this.EndBatch : unit -&gt; unit" Usage="oracleLob.EndBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>複数の書き込み操作の実行後に、サーバー側のトリガーの発生を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す、<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>書き込み操作をメソッドの実行を開始する前に、<xref:System.Data.OracleClient.OracleLob>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Erase">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Data.OracleClient.OracleLob" /> からデータを消去します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase();" />
      <MemberSignature Language="F#" Value="member this.Erase : unit -&gt; int64" Usage="oracleLob.Erase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Data.OracleClient.OracleLob" /> からすべてのデータを消去します。</summary>
        <returns>消去したバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> データは切り捨てられません。 `LOB`長さは一定の`BLOB`データ型と 0x00 で、消去されたデータが置き換えられます。 `CLOB` `NCLOB`データ型はスペースで置き換えられます。  
  
 書き込む、 `LOB`、取得する必要があります、`LOB`ときに、SQL SELECT ステートメントの FOR UPDATE 句を使用して開始されたローカル トランザクションをいる必要があります。  
  
> [!NOTE]
>  このリリースでは、読み取り専用への書き込み操作で`LOB`が成功したとは更新されません、`LOB`サーバー。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase (long offset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase(int64 offset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase (offset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase(long offset, long amount);" />
      <MemberSignature Language="F#" Value="member this.Erase : int64 * int64 -&gt; int64" Usage="oracleLob.Erase (offset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">消去対象のオフセット。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <param name="amount">消去するデータのサイズ (バイト単位)。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <summary>この <see cref="T:System.Data.OracleClient.OracleLob" /> から、指定したサイズのデータを消去します。</summary>
        <returns>消去したバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内の値の合計、`offset`と`amount`パラメーターのサイズよりも大きくすること、<xref:System.Data.OracleClient.OracleLob>します。 そのため、によって返されるより大きい値を指定する、<xref:System.Data.OracleClient.OracleLob.Length%2A>プロパティは成功しますがただし<xref:System.Data.OracleClient.OracleLob.Erase%2A>の末尾に消去するだけ、<xref:System.Data.OracleClient.OracleLob>します。 (負の値が渡された場合に同様に、 `offset`、<xref:System.Data.OracleClient.OracleLob.Erase%2A>は成功しますが、のみ消去の先頭から開始、 <xref:System.Data.OracleClient.OracleLob>)。この動作は異なる、<xref:System.Data.OracleClient.OracleLob.Read%2A>と<xref:System.Data.OracleClient.OracleLob.Write%2A>メソッド、およびデータ値をすべて削除することになるというメリットがで指定されたプランは`offset`実際のサイズを確認するサーバーに追加のラウンド トリップを加えずにします。  
  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> データは切り捨てられません。 `LOB`長さは一定の`BLOB`データ型と 0x00 で、消去されたデータが置き換えられます。 `CLOB` `NCLOB`データ型はスペースで置き換えられます。  
  
 書き込む、 `LOB`、取得する必要があります、`LOB`ときに、SQL SELECT ステートメントの FOR UPDATE 句を使用して開始されたローカル トランザクションをいる必要があります。  
  
> [!NOTE]
>  このリリースでは、読み取り専用への書き込み操作で`LOB`が成功したとは更新されません、`LOB`サーバー。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="oracleLob.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在サポートされていません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このリリースでこのメソッドは機能しません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBatched">
      <MemberSignature Language="C#" Value="public bool IsBatched { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBatched" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBatched As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBatched { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBatched : bool" Usage="System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションから <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> メソッドが呼び出されたかどうかを示す値を取得します。</summary>
        <value>
          <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> メソッドがアプリケーションから呼び出された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oracle 8.0.5 server、Oracle の使用時に"ORA 00600: 内部エラー コード"例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNull : bool" Usage="System.Data.OracleClient.OracleLob.IsNull" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.SqlTypes.INullable.IsNull</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.OracleClient.OracleLob" /> が <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> ストリームであるかどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Data.OracleClient.OracleLob" /> が <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> ストリームである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="public bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTemporary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemporary { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTemporary : bool" Usage="System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.OracleClient.OracleLob" /> が一時 <see langword="LOB" /> であるかどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Data.OracleClient.OracleLob" /> が一時 <see langword="true" /> である場合は <see langword="LOB" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の例は、一時的なを作成する方法を示します`LOB`します。  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Data.OracleClient.OracleLob.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.OracleClient.OracleLob" /> のサイズを返す値を取得します。</summary>
        <value>
          <see cref="T:System.Data.OracleClient.OracleLob" /> のサイズ (バイト単位)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サイズ、<xref:System.Data.OracleClient.OracleLob>は常にすべてのデータ型のバイト単位で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="LobType">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleType LobType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.OracleClient.OracleType LobType" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.LobType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LobType As OracleType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleType LobType { System::Data::OracleClient::OracleType get(); };" />
      <MemberSignature Language="F#" Value="member this.LobType : System.Data.OracleClient.OracleType" Usage="System.Data.OracleClient.OracleLob.LobType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="LOB" /> データ型を返す値を取得します。</summary>
        <value>
          <see cref="T:System.Data.OracleClient.OracleType" />
          <see langword="LOB" /> データ型の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob> 、次のいずれかを指定することがあります<xref:System.Data.OracleClient.OracleType>データ型。  
  
|OracleType のデータ型|説明|  
|--------------------------|-----------------|  
|`Blob`|最大 4 GB のバイナリ データを格納する Oracle の `BLOB` 型。 <xref:System.Array> 型の <xref:System.Byte> に割り当てられます。|  
|`Clob`|サーバーの既定の文字セットに基づいて、最大 4 GB の文字データを格納する Oracle の `CLOB` 型。 <xref:System.String> に割り当てられます。|  
|`NClob`|Oracle`NCLOB`各国語の文字の最大サイズが 4 ギガバイトのサーバー セットに基づいて、文字データを含むデータ型。 <xref:System.String> に割り当てられます。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.Data.OracleClient.OracleLob Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.OracleClient.OracleLob Null" />
      <MemberSignature Language="DocId" Value="F:System.Data.OracleClient.OracleLob.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As OracleLob " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::OracleClient::OracleLob ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.Data.OracleClient.OracleLob" Usage="System.Data.OracleClient.OracleLob.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleLob</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>null の <see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトを表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 構築することができます、<xref:System.Data.OracleClient.OracleLob>この形式を使用して NULL です。  
  
```  
OracleLob myLob = OracleLOB.Null;  
```  
  
 この手法は主にテストするために使用するかどうかを`LOB`null の場合、この例に示すようには、サーバーから返されます。  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 NULL`LOB`バイト 0 と同様に動作`LOB`で<xref:System.Data.OracleClient.OracleLob.Read%2A>が成功し、常に 0 バイトを返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Data.OracleClient.OracleLob.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.OracleClient.OracleLob" /> ストリーム内の現在の読み込み位置を取得します。</summary>
        <value>
          <see cref="T:System.Data.OracleClient.OracleLob" /> ストリーム内の現在位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ストリームは、取得または位置を設定するシークをサポートする必要があります。 使用して、<xref:System.Data.OracleClient.OracleLob.CanSeek%2A>プロパティをストリームがシークをサポートしているかどうかを判断します。  
  
 ストリームの長さを超える任意の場所にシークがサポートされています。 奇数の位置をシーク`CLOB`と`NCLOB`もデータ型がサポートされます。 詳細については、の「解説」を参照してください、<xref:System.Data.OracleClient.OracleLob.Read%2A>プロパティ。  
  
 <xref:System.Data.OracleClient.OracleLob.Position%2A>プロパティがないの追跡が使用されている、スキップ、ストリーム、またはその両方からのバイト数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="oracleLob.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">バイト配列。 このメソッドが返されるとき、バッファーは現在のソースから読み取ったバイトにより置き換えられた、<c>offset</c> から (<c>offset</c> + <c>count</c>) の間の値を持つ指定されたバイト配列を含みます。</param>
        <param name="offset">現在のストリームから読み取ったデータの格納を開始する位置を示す<c>バッファー</c>内の 0 から始まるバイト オフセット。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <param name="count">現在のストリームから読み取る最大バイト数。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <summary>現在の <see cref="T:System.Data.OracleClient.OracleLob" /> ストリームからバイト シーケンスを読み取り、読み取ったバイト数の分だけストリーム内の位置を進めます。</summary>
        <returns>バッファーに読み取られた合計バイト数。 要求しただけのバイト数を読み取ることができなかった場合、この値は要求したバイト数より小さくなります。ストリームの末尾に到達した場合は 0 になることがあります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Read%2A>メソッドはの最大値を読み取ります`count`現在からのバイト ストリームし、に保存`buffer`から始まる`offset`します。 ストリーム内の現在位置が読み取り、バイト数で高度なただし、例外が発生する場合は、ストリーム内の現在の位置は変更されません。 <xref:System.Data.OracleClient.OracleLob.Read%2A> 読み取られたバイト数を返します。 位置はストリームの最後に、現在の場合にのみ、戻り値は 0 を使用します。 <xref:System.Data.OracleClient.OracleLob.Read%2A> データがないこと、少なくとも 1 バイトのデータを読み取ることができます、までにブロックされます。<xref:System.Data.OracleClient.OracleLob.Read%2A> 読み取るしようとした場合は 0 を返します、`LOB`の最後に、現在の位置が場合`LOB`します。 <xref:System.Data.OracleClient.OracleLob.Read%2A> ストリームの末尾に達していない場合でも、要求されたより少ないバイト数を返すことができます。  
  
 .NET Framework Data Provider for Oracle がすべて処理`CLOB`と`NCLOB`unicode データ。 そのため、アクセスするときに`CLOB`と`NCLOB`データ型の場合は、常に扱う 1 文字が 2 バイトのバイト数。 たとえば、次の 3 つの文字を含むテキスト文字列として保存する場合、`NCLOB`文字セットが 1 文字の 4 バイトであり、実行する Oracle サーバー上、`Read`操作 6 バイトを文字列の長さを指定することはサーバーで、12 バイトとして格納されます。  
  
 C# の例を次に示しますを読み取る方法<xref:System.Data.OracleClient.OracleLob>オブジェクト。  
  
```  
public static void ReadLobExample(OracleCommand command)  
{  
   int actual = 0;  
  
   //Select some data.  
   // Table Schema:  
   //  "CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)";  
   //  "INSERT INTO TableWithLobs values (1, 'AA', 'AAA', N'AAAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain the LOBs (all 3 varieties).  
      OracleLob BLOB = reader.GetOracleLob(1);  
      OracleLob CLOB  = reader.GetOracleLob(2);  
      OracleLob NCLOB = reader.GetOracleLob(3);  
  
      //Example - Reading binary data (in chunks).  
      byte[] buffer = new byte[100];  
      while((actual = BLOB.Read(buffer, 0, buffer.Length)) >0)  
         Console.WriteLine(BLOB.LobType + ".Read(" + buffer + ", " + buffer.Length + ") => " + actual);  
  
      //Example - Reading CLOB/NCLOB data (in chunks).  
      //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).  
      //However, because the OracleLob object inherits directly from the.NET stream object,   
      //all the existing classes that manipluate streams can also be used. For example, the   
      //.NET StreamReader makes converting the raw bytes into actual characters easier.  
      StreamReader streamreader = new StreamReader(CLOB, Encoding.Unicode);  
      char[] cbuffer = new char[100];  
      while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) >0)  
         Console.WriteLine(CLOB.LobType + ".Read(" + new string(cbuffer, 0, actual) + ", " + cbuffer.Length + ") => " + actual);  
  
      //Example - Reading data (all at once).  
      //You could use StreamReader.ReadToEnd to obtain all the string data,or simply  
      //call OracleLob.Value to obtain a contiguous allocation of all the data.  
      Console.WriteLine(NCLOB.LobType + ".Value => " + NCLOB.Value);  
   }  
}  
```  
  
 構築することができます、<xref:System.Data.OracleClient.OracleLob>この形式を使用して NULL です。  
  
```  
OracleLob myLob = OracleLob.Null;  
```  
  
 この手法は主にテストするために使用するかどうかを`LOB`null の場合、次の例に示すようには、サーバーから返されます。  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 NULL`LOB`バイト 0 と同様に動作`LOB`で<xref:System.Data.OracleClient.OracleLob.Read%2A>が成功し、常に 0 バイトを返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> パラメーターまたは <paramref name="count" /> パラメーターの値が正の値ではありません。  
  
- または - 
オフセット パラメーターとカウント パラメーターの合計値が、バッファー長を超えています。  
  
- または - 
<paramref name="amount" /> パラメーターまたは <paramref name="offset" /> パラメーターに指定された値が 0 より小さいか、4 GB を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="oracleLob.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">原点からのバイト オフセット。 <c>オフセット</c>が負の値の場合は、<c>原点</c>で指定した位置から<c>オフセット</c>で指定したバイト数だけさかのぼった位置が新しい位置です。 <c>オフセット</c>が 0 の場合は、<c>原点</c>で指定した位置が新しい位置です。 <c>オフセット</c>が正の値の場合は、<c>原点</c>で指定した位置から<c>オフセット</c>で指定したバイト数だけ進んだ位置が新しい位置です。</param>
        <param name="origin">新しい位置を取得するために使用する参照ポイントを示す <see cref="T:System.IO.SeekOrigin" /> 型の値。</param>
        <summary>現在の <see cref="T:System.Data.OracleClient.OracleLob" /> ストリームで位置を設定します。</summary>
        <returns>現在のストリーム内の新しい位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`offset`が負の場合、新しい位置は指定された位置を付ける必要があります`origin`で指定されたバイト数で`offset`します。 場合`offset`0 の場合は、新しい位置がで指定した位置にある必要があります`origin`します。 場合`offset`が正の値であり、新しい位置がで指定した位置に従う必要があります`origin`で指定されたバイト数で`offset`します。  
  
 ストリームの長さを超える任意の場所にシークがサポートされています。 奇数の位置をシーク`CLOB`と`NCLOB`もデータ型がサポートされます。 詳細については、の「解説」を参照してください、<xref:System.Data.OracleClient.OracleLob.Read%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="origin" /> パラメーターが、有効な値を格納していません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として得られた位置が値の長さを超えています。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが閉じているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="oracleLob.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">現在の <see cref="T:System.Data.OracleClient.OracleLob" /> ストリームの希望の長さ (バイト数)。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <summary>
          <see cref="T:System.Data.OracleClient.OracleLob" /> ストリームの長さを、現在の長さより短い値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 長さを拡張しよう、<xref:System.Data.OracleClient.OracleLob>ストリームが失敗し、返します"メッセージ: ORA 22926: 指定トリムの長さは現在の LOB 値の長さより大きい"Oracle サーバーからです。  
  
 ストリームが書き込みとシークの両方をサポートする必要があります<xref:System.Data.OracleClient.OracleLob.SetLength%2A>関数。  
  
 .NET Framework Data Provider for Oracle がすべて処理`CLOB`と`NCLOB`unicode データ。 そのため、アクセスするときに`CLOB`と`NCLOB`データ型の場合は、常に扱う 1 文字が 2 バイトのバイト数。 たとえば、次の 3 つの文字を含むテキスト文字列として保存する場合、`NCLOB`文字セットが 1 文字の 4 バイトであり、実行する Oracle サーバー上、`SetLength`操作 6 バイトを文字列の長さを指定することはサーバーで、12 バイトとして格納されます。  
  
 書き込む、 `LOB`、取得する必要があります、`LOB`ときに、SQL SELECT ステートメントの FOR UPDATE 句を使用して開始されたローカル トランザクションをいる必要があります。  
  
> [!NOTE]
>  読み取り専用への書き込み操作`LOB`が成功したとは更新されません、`LOB`サーバー。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> パラメーターで <see langword="CLOB" /> または <see langword="NCLOB" /> データ型に指定した値が偶数ではありません。  
  
- または - 
<paramref name="value" /> で指定したパラメーターの値が 0 未満であるか、4 GB を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Data.OracleClient.OracleLob.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になる値と等価の共通言語ランタイムの値を取得します。</summary>
        <value>
          <see cref="F:System.Data.OracleClient.OracleType.Blob" /> の場合、<see langword="Byte[]" /> 型の配列。 <see cref="F:System.Data.OracleClient.OracleType.Clob" /> および <see cref="F:System.Data.OracleClient.OracleType.NClob" /> の場合、<see langword="String" />。 null データの場合、<see cref="T:System.DBNull" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleType.Blob>データ型、<xref:System.Data.OracleClient.OracleLob.Value%2A>基になるデータ全体を連続する配列の型として返します`Byte[]`します。 <xref:System.Data.OracleClient.OracleType.Clob>と<xref:System.Data.OracleClient.OracleType.NClob>データ型、<xref:System.Data.OracleClient.OracleLob.Value%2A>としてすべてのデータを返す、`String`データ型。 Null データは、<xref:System.Data.OracleClient.OracleLob.Value%2A>返します<xref:System.DBNull>します。 返される値を比較すると、区別できる空のデータ、データ、およびデータは null。  
  
> [!NOTE]
>  使用する利点`LOB`データ型は、大量のクライアント側のチャンク単位でデータを取得する機能。 ただし、使用<xref:System.Data.OracleClient.OracleLob.Value%2A>のすべてのデータの取得、`LOB`アプリケーションのオーバーヘッドを大幅に向上させることができますが、1 つの連続したチャンクとして列。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="oracleLob.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">バイト配列。 このメソッドは、<c>buffer</c> から現在のストリームに、<c>count</c> で指定されたバイト数だけコピーします。</param>
        <param name="offset">現在のストリームへのバイトのコピーを開始する位置を示す <c>buffer</c> 内のバイト オフセット。インデックス番号は 0 から始まります。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <param name="count">現在のストリームに書き込むバイト数。 <see langword="CLOB" /> 型および <see langword="NCLOB" /> 型の場合、これは偶数である必要があります。</param>
        <summary>バイト シーケンスを現在の <see cref="T:System.Data.OracleClient.OracleLob" /> ストリームに書き込み、書き込んだバイト数の分だけストリーム内の現在位置を進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 書き込み操作が成功した場合は、書き込まれたバイト数だけストリーム内の位置を進めます。 例外が発生する場合は、ストリーム内の位置は変更されません。  
  
 末尾を越えて書き込み`LOB`が許可され、拡大、`LOB`によって書き込まれたバイト数。  
  
 .NET Framework Data Provider for Oracle がすべて処理`CLOB`と`NCLOB`unicode データ。 そのため、アクセスするときに`CLOB`と`NCLOB`データ型の場合は、常に扱う 1 文字が 2 バイトのバイト数。 たとえば、次の 3 つの文字を含むテキスト文字列として保存する場合、`NCLOB`文字セットが 1 文字の 4 バイトであり、実行する Oracle サーバー上、`Write`操作 6 バイトを文字列の長さを指定することはサーバーで、12 バイトとして格納されます。  
  
 書き込む、 `LOB`、取得する必要があります、`LOB`ときに、SQL SELECT ステートメントの FOR UPDATE 句を使用して開始されたローカル トランザクションをいる必要があります。  
  
 C# の例を次に書き込む方法を示します<xref:System.Data.OracleClient.OracleLob>オブジェクト。  
  
```  
public static void WriteLobExample(OracleCommand command)  
{  
   //Note: Updating LOB data requires a transaction.  
   command.Transaction = command.Connection.BeginTransaction();  
   //Select some data.  
   //    Table Schema:  
   //        "CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)";  
   //        "INSERT INTO tablewithlobs values (1, 'AA', 'AAA')";  
   command.CommandText = "SELECT * FROM TableWithLobs FOR UPDATE";  
   OracleDataReader reader = command.ExecuteReader();  
   using(reader)  
   {  
      //Obtain the first row of data.  
      reader.Read();  
      //Obtain both LOBs.  
      OracleLob BLOB1    = reader.GetOracleLob(1);  
      OracleLob BLOB2    = reader.GetOracleLob(2);  
      //Perform any desired operations on the LOB, (read, position, and so on).  
      //...  
      //Example - Writing binary data (directly to the backend).  
      //To write, you can use any of the stream classes, or write raw binary data using   
      //the OracleLob write method. Writing character vs. binary is the same;  
      //however note that character is always in terms of Unicode byte counts  
      //(for example: even number of bytes - 2 bytes for every Unicode character).  
      byte[] buffer = new byte[100];  
      buffer[0] = 0xCC;  
      buffer[1] = 0xDD;  
      BLOB1.Write(buffer, 0, 2);  
      BLOB1.Position = 0;  
      Console.WriteLine(BLOB1.LobType + ".Write(" + buffer + ", 0, 2) => " + BLOB1.Value);  
  
      //Example - Copying data into another LOB.  
      long actual = BLOB1.CopyTo(BLOB2);  
      Console.WriteLine(BLOB1.LobType + ".CopyTo(" + BLOB2.Value + ") => " + actual);  
  
      //Commit the transaction now that everything succeeded.  
      //Note: On error, Transaction.Dispose is called (from the using statement)  
      //and will automatically roll-back the pending transaction.  
      command.Transaction.Commit();  
   }  
}  
```  
  
> [!NOTE]
>  読み取り専用への書き込み操作`LOB`が成功したとは更新されません、`LOB`サーバー。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> パラメーターまたは <paramref name="count" /> パラメーターの値が正の値ではありません。  
  
- または - 
<paramref name="offset" /> パラメーターと <paramref name="count" /> パラメーターの合計値が、<paramref name="buffer" /> の長さを超えています。  
  
- または - 
<paramref name="count" /> パラメーターまたは <paramref name="offset" /> パラメーターに指定された値が 0 より小さいか、4 GB を超えています。  
  
- または - 
<see langword="CLOB" /> および <see langword="NCLOB" /> データ型には、偶数のバイト数を指定する必要があります。</exception>
        <exception cref="T:System.InvalidOperationException">操作がトランザクション内で実行されていないか、<see cref="T:System.Data.OracleClient.OracleLob" /> オブジェクトが null か、または接続が閉じられています。</exception>
        <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じられているか、破棄されています。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">Oracle エラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="override this.WriteByte : byte -&gt; unit" Usage="oracleLob.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">ストリームに書き込むバイト。</param>
        <summary>
          <see cref="T:System.Data.OracleClient.OracleLob" /> ストリームの現在位置にバイトを書き込み、ストリームの位置を 1 バイトだけ進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 書き込み操作が成功した場合、ストリーム内の位置 1 バイトだけ進めます。 例外が発生する場合は、ストリーム内の位置は変更されません。  
  
 末尾の次の書き込み、`LOB`が許可され、拡大、`LOB`を 1 バイトです。  
  
 書き込む、 `LOB`、取得する必要があります、`LOB`ときに、SQL SELECT ステートメントの FOR UPDATE 句を使用して開始されたローカル トランザクションをいる必要があります。  
  
> [!NOTE]
>  読み取り専用への書き込み操作`LOB`が成功したとは更新されません、`LOB`サーバー。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す可能性があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>