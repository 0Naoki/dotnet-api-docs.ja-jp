<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="97203-101">The <see langword="Strings" /> module contains procedures used to perform string operations.</span><span class="sxs-lookup"><span data-stu-id="97203-101">The <see langword="Strings" /> module contains procedures used to perform string operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-102">このモジュールは、Visual Basic 言語キーワードおよび文字列操作のランタイム ライブラリ メンバーをサポートします。</span><span class="sxs-lookup"><span data-stu-id="97203-102">This module supports the Visual Basic language keywords and run-time library members that manipulate strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-103">次の例では、そのスペースに文字列に分割する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="97203-103">The following example demonstrates how to split a string at its spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97203-104">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span><span class="sxs-lookup"><span data-stu-id="97203-104">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="97203-105">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-105">Required.</span></span> <span data-ttu-id="97203-106">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-106">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="97203-107">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span><span class="sxs-lookup"><span data-stu-id="97203-107">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="97203-108">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span><span class="sxs-lookup"><span data-stu-id="97203-108">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="97203-109">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span><span class="sxs-lookup"><span data-stu-id="97203-109">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="97203-110">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span><span class="sxs-lookup"><span data-stu-id="97203-110">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-111">`Asc` 返します、*コード ポイントが*、または、入力文字の文字コード。</span><span class="sxs-lookup"><span data-stu-id="97203-111">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="97203-112">0 ~ 1 バイト文字セット (SBCS) の値の 255-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="97203-112">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="97203-113">`AscW` 入力文字の Unicode コード ポイントを返します。</span><span class="sxs-lookup"><span data-stu-id="97203-113">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="97203-114">これは、0 ~ 65535 です。</span><span class="sxs-lookup"><span data-stu-id="97203-114">This can be 0 through 65535.</span></span> <span data-ttu-id="97203-115">返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。</span><span class="sxs-lookup"><span data-stu-id="97203-115">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-116">`AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。</span><span class="sxs-lookup"><span data-stu-id="97203-116">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="97203-117">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-117">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-118">Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-118">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-119">次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。</span><span class="sxs-lookup"><span data-stu-id="97203-119">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="97203-120">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-120">Required.</span></span> <span data-ttu-id="97203-121">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-121">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="97203-122">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span><span class="sxs-lookup"><span data-stu-id="97203-122">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="97203-123">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span><span class="sxs-lookup"><span data-stu-id="97203-123">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="97203-124">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span><span class="sxs-lookup"><span data-stu-id="97203-124">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="97203-125">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span><span class="sxs-lookup"><span data-stu-id="97203-125">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-126">`Asc` 返します、*コード ポイントが*、または、入力文字の文字コード。</span><span class="sxs-lookup"><span data-stu-id="97203-126">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="97203-127">0 ~ 1 バイト文字セット (SBCS) の値の 255-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="97203-127">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="97203-128">`AscW` 入力文字の Unicode コード ポイントを返します。</span><span class="sxs-lookup"><span data-stu-id="97203-128">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="97203-129">これは、0 ~ 65535 です。</span><span class="sxs-lookup"><span data-stu-id="97203-129">This can be 0 through 65535.</span></span> <span data-ttu-id="97203-130">返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。</span><span class="sxs-lookup"><span data-stu-id="97203-130">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-131">`AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。</span><span class="sxs-lookup"><span data-stu-id="97203-131">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="97203-132">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-132">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-133">Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-133">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-134">次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。</span><span class="sxs-lookup"><span data-stu-id="97203-134">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97203-135">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span><span class="sxs-lookup"><span data-stu-id="97203-135">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="97203-136">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-136">Required.</span></span> <span data-ttu-id="97203-137">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-137">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="97203-138">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span><span class="sxs-lookup"><span data-stu-id="97203-138">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="97203-139">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span><span class="sxs-lookup"><span data-stu-id="97203-139">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="97203-140">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span><span class="sxs-lookup"><span data-stu-id="97203-140">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="97203-141">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span><span class="sxs-lookup"><span data-stu-id="97203-141">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-142">`Asc` 返します、*コード ポイントが*、または、入力文字の文字コード。</span><span class="sxs-lookup"><span data-stu-id="97203-142">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="97203-143">0 ~ 1 バイト文字セット (SBCS) の値の 255-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="97203-143">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="97203-144">`AscW` 入力文字の Unicode コード ポイントを返します。</span><span class="sxs-lookup"><span data-stu-id="97203-144">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="97203-145">これは、0 ~ 65535 です。</span><span class="sxs-lookup"><span data-stu-id="97203-145">This can be 0 through 65535.</span></span> <span data-ttu-id="97203-146">返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。</span><span class="sxs-lookup"><span data-stu-id="97203-146">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-147">`AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。</span><span class="sxs-lookup"><span data-stu-id="97203-147">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="97203-148">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-148">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-149">Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-149">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-150">次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。</span><span class="sxs-lookup"><span data-stu-id="97203-150">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String"><span data-ttu-id="97203-151">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-151">Required.</span></span> <span data-ttu-id="97203-152">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-152">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span></span> <span data-ttu-id="97203-153">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span><span class="sxs-lookup"><span data-stu-id="97203-153">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span></span> <span data-ttu-id="97203-154">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span><span class="sxs-lookup"><span data-stu-id="97203-154">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="97203-155">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span><span class="sxs-lookup"><span data-stu-id="97203-155">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></summary>
        <returns><span data-ttu-id="97203-156">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span><span class="sxs-lookup"><span data-stu-id="97203-156">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-157">`Asc` 返します、*コード ポイントが*、または、入力文字の文字コード。</span><span class="sxs-lookup"><span data-stu-id="97203-157">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="97203-158">0 ~ 1 バイト文字セット (SBCS) の値の 255-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="97203-158">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="97203-159">`AscW` 入力文字の Unicode コード ポイントを返します。</span><span class="sxs-lookup"><span data-stu-id="97203-159">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="97203-160">これは、0 ~ 65535 です。</span><span class="sxs-lookup"><span data-stu-id="97203-160">This can be 0 through 65535.</span></span> <span data-ttu-id="97203-161">返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。</span><span class="sxs-lookup"><span data-stu-id="97203-161">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-162">`AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。</span><span class="sxs-lookup"><span data-stu-id="97203-162">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="97203-163">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-163">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-164">Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-164">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-165">次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。</span><span class="sxs-lookup"><span data-stu-id="97203-165">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode"><span data-ttu-id="97203-166">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-166">Required.</span></span> <span data-ttu-id="97203-167">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span><span class="sxs-lookup"><span data-stu-id="97203-167">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span></span></param>
        <summary><span data-ttu-id="97203-168">Returns the character associated with the specified character code.</span><span class="sxs-lookup"><span data-stu-id="97203-168">Returns the character associated with the specified character code.</span></span></summary>
        <returns><span data-ttu-id="97203-169">Returns the character associated with the specified character code.</span><span class="sxs-lookup"><span data-stu-id="97203-169">Returns the character associated with the specified character code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-170">受け入れられるように非対称範囲`CharCode`記憶域の違いを補正、`Short`と`Integer`です。</span><span class="sxs-lookup"><span data-stu-id="97203-170">The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`.</span></span> <span data-ttu-id="97203-171">たとえば、-29183 は、 `Short` +36353 が、`Integer`です。</span><span class="sxs-lookup"><span data-stu-id="97203-171">For example, -29183 is a `Short` but +36353 is an `Integer`.</span></span> <span data-ttu-id="97203-172">これには、Visual Basic 6.0 との互換性も容易になります。</span><span class="sxs-lookup"><span data-stu-id="97203-172">This also facilitates compatibility with Visual Basic 6.0.</span></span>  
  
 <span data-ttu-id="97203-173">`Chr` 使用して、<xref:System.Text.Encoding>クラス内で、<xref:System.Text?displayProperty=nameWithType>セット (DBCS) の名前空間を現在のスレッドが 1 バイト文字セット (SBCS) または 2 バイト文字を使用するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="97203-173">`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=nameWithType> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</span></span> <span data-ttu-id="97203-174">その`CharCode`コードとして、適切な一連のポイントします。</span><span class="sxs-lookup"><span data-stu-id="97203-174">It then takes `CharCode` as a code point in the appropriate set.</span></span> <span data-ttu-id="97203-175">範囲は 0 ~ 255 の SBCS 文字-32768 から 65535 までの DBCS 文字を指定できます。</span><span class="sxs-lookup"><span data-stu-id="97203-175">The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</span></span>  
  
 <span data-ttu-id="97203-176">返される値に含まれている現在のスレッドのコード ページによって異なります、<xref:System.Globalization.TextInfo.ANSICodePage%2A>のプロパティ、<xref:System.Globalization.TextInfo>クラス内で、<xref:System.Globalization>名前空間。</span><span class="sxs-lookup"><span data-stu-id="97203-176">The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace.</span></span> <span data-ttu-id="97203-177">取得することができます<xref:System.Globalization.TextInfo.ANSICodePage%2A>を指定して`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`です。</span><span class="sxs-lookup"><span data-stu-id="97203-177">You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span></span>  
  
 <span data-ttu-id="97203-178">`ChrW` 受け取る`CharCode`unicode コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="97203-178">`ChrW` takes `CharCode` as a Unicode code point.</span></span> <span data-ttu-id="97203-179">範囲は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。</span><span class="sxs-lookup"><span data-stu-id="97203-179">The range is independent of the culture and code page settings for the current thread.</span></span> <span data-ttu-id="97203-180">-32768 ~-1 の値では、+32768 +65535 ~ の範囲内の値として扱われる同じです。</span><span class="sxs-lookup"><span data-stu-id="97203-180">Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</span></span>  
  
 <span data-ttu-id="97203-181">0 ~ 31 の数値では、標準の ASCII コードと同じです。</span><span class="sxs-lookup"><span data-stu-id="97203-181">Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</span></span> <span data-ttu-id="97203-182">たとえば、`Chr(10)`ライン フィード文字を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-182">For example, `Chr(10)` returns a line feed character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-183">`ChrB`以前のバージョンの Visual Basic での関数は、1 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="97203-183">The `ChrB` function in earlier versions of Visual Basic returns a single byte.</span></span> <span data-ttu-id="97203-184">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-184">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-185">Visual Basic と .NET Framework でのすべての文字列が Unicode がおよび`ChrB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-185">All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-186">次の例では、`Chr`関数を指定した文字コードに関連付けられている文字を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-186">The following example uses the `Chr` function to return the character associated with the specified character code.</span></span>  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-187"><paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</span><span class="sxs-lookup"><span data-stu-id="97203-187"><paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode"><span data-ttu-id="97203-188">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-188">Required.</span></span> <span data-ttu-id="97203-189">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span><span class="sxs-lookup"><span data-stu-id="97203-189">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span></span></param>
        <summary><span data-ttu-id="97203-190">Returns the character associated with the specified character code.</span><span class="sxs-lookup"><span data-stu-id="97203-190">Returns the character associated with the specified character code.</span></span></summary>
        <returns><span data-ttu-id="97203-191">Returns the character associated with the specified character code.</span><span class="sxs-lookup"><span data-stu-id="97203-191">Returns the character associated with the specified character code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-192">受け入れられるように非対称範囲`CharCode`記憶域の違いを補正、`Short`と`Integer`です。</span><span class="sxs-lookup"><span data-stu-id="97203-192">The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`.</span></span> <span data-ttu-id="97203-193">たとえば、-29183 は、 `Short` +36353 が、`Integer`です。</span><span class="sxs-lookup"><span data-stu-id="97203-193">For example, -29183 is a `Short` but +36353 is an `Integer`.</span></span> <span data-ttu-id="97203-194">これには、Visual Basic 6.0 との互換性も容易になります。</span><span class="sxs-lookup"><span data-stu-id="97203-194">This also facilitates compatibility with Visual Basic 6.0.</span></span>  
  
 <span data-ttu-id="97203-195">`Chr` 使用して、<xref:System.Text.Encoding>クラス内で、<xref:System.Text?displayProperty=nameWithType>セット (DBCS) の名前空間を現在のスレッドが 1 バイト文字セット (SBCS) または 2 バイト文字を使用するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="97203-195">`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=nameWithType> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</span></span> <span data-ttu-id="97203-196">その`CharCode`コードとして、適切な一連のポイントします。</span><span class="sxs-lookup"><span data-stu-id="97203-196">It then takes `CharCode` as a code point in the appropriate set.</span></span> <span data-ttu-id="97203-197">範囲は 0 ~ 255 の SBCS 文字-32768 から 65535 までの DBCS 文字を指定できます。</span><span class="sxs-lookup"><span data-stu-id="97203-197">The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</span></span>  
  
 <span data-ttu-id="97203-198">返される値に含まれている現在のスレッドのコード ページによって異なります、<xref:System.Globalization.TextInfo.ANSICodePage%2A>のプロパティ、<xref:System.Globalization.TextInfo>クラス内で、<xref:System.Globalization>名前空間。</span><span class="sxs-lookup"><span data-stu-id="97203-198">The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace.</span></span> <span data-ttu-id="97203-199">取得することができます<xref:System.Globalization.TextInfo.ANSICodePage%2A>を指定して`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`です。</span><span class="sxs-lookup"><span data-stu-id="97203-199">You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span></span>  
  
 <span data-ttu-id="97203-200">`ChrW` 受け取る`CharCode`unicode コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="97203-200">`ChrW` takes `CharCode` as a Unicode code point.</span></span> <span data-ttu-id="97203-201">範囲は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。</span><span class="sxs-lookup"><span data-stu-id="97203-201">The range is independent of the culture and code page settings for the current thread.</span></span> <span data-ttu-id="97203-202">-32768 ~-1 の値では、+32768 +65535 ~ の範囲内の値として扱われる同じです。</span><span class="sxs-lookup"><span data-stu-id="97203-202">Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</span></span>  
  
 <span data-ttu-id="97203-203">0 ~ 31 の数値では、標準の ASCII コードと同じです。</span><span class="sxs-lookup"><span data-stu-id="97203-203">Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</span></span> <span data-ttu-id="97203-204">たとえば、`Chr(10)`ライン フィード文字を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-204">For example, `Chr(10)` returns a line feed character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-205">`ChrB`以前のバージョンの Visual Basic での関数は、1 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="97203-205">The `ChrB` function in earlier versions of Visual Basic returns a single byte.</span></span> <span data-ttu-id="97203-206">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-206">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-207">Visual Basic と .NET Framework でのすべての文字列が Unicode がおよび`ChrB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-207">All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-208">次の例では、`Chr`関数を指定した文字コードに関連付けられている文字を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-208">The following example uses the `Chr` function to return the character associated with the specified character code.</span></span>  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-209"><paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</span><span class="sxs-lookup"><span data-stu-id="97203-209"><paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97203-210">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span><span class="sxs-lookup"><span data-stu-id="97203-210">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="97203-211">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-211">Required.</span></span> <span data-ttu-id="97203-212">One-dimensional array of strings to be searched.</span><span class="sxs-lookup"><span data-stu-id="97203-212">One-dimensional array of strings to be searched.</span></span></param>
        <param name="Match"><span data-ttu-id="97203-213">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-213">Required.</span></span> <span data-ttu-id="97203-214">String to search for.</span><span class="sxs-lookup"><span data-stu-id="97203-214">String to search for.</span></span></param>
        <param name="Include"><span data-ttu-id="97203-215">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-215">Optional.</span></span> <span data-ttu-id="97203-216"><see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>.</span><span class="sxs-lookup"><span data-stu-id="97203-216"><see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>.</span></span> <span data-ttu-id="97203-217">If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring.</span><span class="sxs-lookup"><span data-stu-id="97203-217">If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring.</span></span> <span data-ttu-id="97203-218">If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</span><span class="sxs-lookup"><span data-stu-id="97203-218">If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</span></span></param>
        <param name="Compare"><span data-ttu-id="97203-219">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-219">Optional.</span></span> <span data-ttu-id="97203-220">Numeric value indicating the kind of string comparison to use.</span><span class="sxs-lookup"><span data-stu-id="97203-220">Numeric value indicating the kind of string comparison to use.</span></span> <span data-ttu-id="97203-221">See "Settings" for values.</span><span class="sxs-lookup"><span data-stu-id="97203-221">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="97203-222">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span><span class="sxs-lookup"><span data-stu-id="97203-222">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></summary>
        <returns><span data-ttu-id="97203-223">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span><span class="sxs-lookup"><span data-stu-id="97203-223">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-224">場合の一致なし`Match`内で見つかった`Source`、`Filter`関数は、空の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-224">If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array.</span></span> <span data-ttu-id="97203-225">エラーが発生`Source`に設定されている`Nothing`か、1 次元配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="97203-225">An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.</span></span>  
  
 <span data-ttu-id="97203-226">によって返される配列、`Filter`関数には、一致した項目のみの要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="97203-226">The array returned by the `Filter` function contains only enough elements to contain the number of matched items.</span></span>  
  
 <span data-ttu-id="97203-227">`Compare`引数は、次の値を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="97203-227">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="97203-228">定数</span><span class="sxs-lookup"><span data-stu-id="97203-228">Constant</span></span>|<span data-ttu-id="97203-229">説明</span><span class="sxs-lookup"><span data-stu-id="97203-229">Description</span></span>|  
|-|-|  
|<span data-ttu-id="97203-230">定数</span><span class="sxs-lookup"><span data-stu-id="97203-230">Constant</span></span>|<span data-ttu-id="97203-231">説明</span><span class="sxs-lookup"><span data-stu-id="97203-231">Description</span></span>|  
|`CompareMethod.Binary`|<span data-ttu-id="97203-232">バイナリ比較を実行します</span><span class="sxs-lookup"><span data-stu-id="97203-232">Performs a binary comparison</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="97203-233">テキストの比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="97203-233">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="97203-234">この例での使用、`Filter`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-234">This example demonstrates the use of the `Filter` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-235"><paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span><span class="sxs-lookup"><span data-stu-id="97203-235"><paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="97203-236">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-236">Required.</span></span> <span data-ttu-id="97203-237">One-dimensional array of strings to be searched.</span><span class="sxs-lookup"><span data-stu-id="97203-237">One-dimensional array of strings to be searched.</span></span></param>
        <param name="Match"><span data-ttu-id="97203-238">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-238">Required.</span></span> <span data-ttu-id="97203-239">String to search for.</span><span class="sxs-lookup"><span data-stu-id="97203-239">String to search for.</span></span></param>
        <param name="Include"><span data-ttu-id="97203-240">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-240">Optional.</span></span> <span data-ttu-id="97203-241"><see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>.</span><span class="sxs-lookup"><span data-stu-id="97203-241"><see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>.</span></span> <span data-ttu-id="97203-242">If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring.</span><span class="sxs-lookup"><span data-stu-id="97203-242">If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring.</span></span> <span data-ttu-id="97203-243">If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</span><span class="sxs-lookup"><span data-stu-id="97203-243">If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</span></span></param>
        <param name="Compare"><span data-ttu-id="97203-244">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-244">Optional.</span></span> <span data-ttu-id="97203-245">Numeric value indicating the kind of string comparison to use.</span><span class="sxs-lookup"><span data-stu-id="97203-245">Numeric value indicating the kind of string comparison to use.</span></span> <span data-ttu-id="97203-246">See "Settings" for values.</span><span class="sxs-lookup"><span data-stu-id="97203-246">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="97203-247">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span><span class="sxs-lookup"><span data-stu-id="97203-247">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></summary>
        <returns><span data-ttu-id="97203-248">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span><span class="sxs-lookup"><span data-stu-id="97203-248">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-249">場合の一致なし`Match`内で見つかった`Source`、`Filter`関数は、空の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-249">If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array.</span></span> <span data-ttu-id="97203-250">エラーが発生`Source`に設定されている`Nothing`か、1 次元配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="97203-250">An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.</span></span>  
  
 <span data-ttu-id="97203-251">によって返される配列、`Filter`関数には、一致した項目のみの要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="97203-251">The array returned by the `Filter` function contains only enough elements to contain the number of matched items.</span></span>  
  
 <span data-ttu-id="97203-252">`Compare`引数は、次の値を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="97203-252">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="97203-253">定数</span><span class="sxs-lookup"><span data-stu-id="97203-253">Constant</span></span>|<span data-ttu-id="97203-254">説明</span><span class="sxs-lookup"><span data-stu-id="97203-254">Description</span></span>|  
|-|-|  
|`CompareMethod.Binary`|<span data-ttu-id="97203-255">バイナリ比較を実行します</span><span class="sxs-lookup"><span data-stu-id="97203-255">Performs a binary comparison</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="97203-256">テキストの比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="97203-256">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="97203-257">この例での使用、`Filter`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-257">This example demonstrates the use of the `Filter` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-258"><paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span><span class="sxs-lookup"><span data-stu-id="97203-258"><paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-259">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-259">Required.</span></span> <span data-ttu-id="97203-260">Any valid expression.</span><span class="sxs-lookup"><span data-stu-id="97203-260">Any valid expression.</span></span></param>
        <param name="Style"><span data-ttu-id="97203-261">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-261">Optional.</span></span> <span data-ttu-id="97203-262">A valid named or user-defined format <see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-262">A valid named or user-defined format <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="97203-263">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-263">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span></span></summary>
        <returns><span data-ttu-id="97203-264">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-264">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-265"><xref:System.String.Format%2A?displayProperty=nameWithType>メソッドには、同様の機能も用意されています。</span><span class="sxs-lookup"><span data-stu-id="97203-265">The <xref:System.String.Format%2A?displayProperty=nameWithType> method also provides similar functionality.</span></span>  
  
 <span data-ttu-id="97203-266">ローカライズされていない数値文字列の書式を設定する場合は、目的の書式が得られるようにするユーザー定義の数値書式指定を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97203-266">If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.</span></span>  
  
 <span data-ttu-id="97203-267">数値の書式設定を指定せずにしようとすると`Style`、`Format`関数と同様の機能を提供する、`Str`関数が国際的に注意してください。</span><span class="sxs-lookup"><span data-stu-id="97203-267">If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware.</span></span> <span data-ttu-id="97203-268">ただし、正の数値形式文字列を使用して、`Format`関数値の符号の予約済み先頭を空白を含めない; を使用して、変換、`Str`関数は、先頭にスペースを保持します。</span><span class="sxs-lookup"><span data-stu-id="97203-268">However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.</span></span>  
  
## <a name="different-formats-for-different-numeric-values"></a><span data-ttu-id="97203-269">別の数値を別の形式</span><span class="sxs-lookup"><span data-stu-id="97203-269">Different Formats for Different Numeric Values</span></span>  
 <span data-ttu-id="97203-270">数値の書式のユーザー定義の式は、セミコロンで区切られた 3 つのセクションを 1 つからができます。</span><span class="sxs-lookup"><span data-stu-id="97203-270">A user-defined format expression for numbers can have from one to three sections separated by semicolons.</span></span> <span data-ttu-id="97203-271">場合、`Style`の引数、`Format`関数には、定義済み数値書式のいずれかが含まれて、1 つだけのセクションでは許可します。</span><span class="sxs-lookup"><span data-stu-id="97203-271">If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.</span></span>  
  
|<span data-ttu-id="97203-272">使用する場合</span><span class="sxs-lookup"><span data-stu-id="97203-272">If you use</span></span>|<span data-ttu-id="97203-273">これは、結果</span><span class="sxs-lookup"><span data-stu-id="97203-273">This is the result</span></span>|  
|-|-|  
|<span data-ttu-id="97203-274">1 つのセクションのみ</span><span class="sxs-lookup"><span data-stu-id="97203-274">One section only</span></span>|<span data-ttu-id="97203-275">フォーマット式は、すべての値に適用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-275">The format expression applies to all values.</span></span>|  
|<span data-ttu-id="97203-276">2 つ</span><span class="sxs-lookup"><span data-stu-id="97203-276">Two sections</span></span>|<span data-ttu-id="97203-277">最初のセクションが正の値とゼロに適用されます。2 つ目は、負の値に適用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-277">The first section applies to positive values and zeros; the second applies to negative values.</span></span>|  
|<span data-ttu-id="97203-278">3 つ</span><span class="sxs-lookup"><span data-stu-id="97203-278">Three sections</span></span>|<span data-ttu-id="97203-279">最初のセクションが正の値に適用されます、負の値に適用される 2 番目および 3 つ目がゼロに適用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-279">The first section applies to positive values, the second applies to negative values, and the third applies to zeros.</span></span>|  
  
 <span data-ttu-id="97203-280">次の例は 2 つのセクション: 最初の正の値と 0 です書式を定義する。2 番目のセクションでは、負の値の形式を定義します。</span><span class="sxs-lookup"><span data-stu-id="97203-280">The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values.</span></span> <span data-ttu-id="97203-281">以降、`Style`の引数、`Format`関数は、文字列を受け取り、引用符で囲まれています。</span><span class="sxs-lookup"><span data-stu-id="97203-281">Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.</span></span>  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 <span data-ttu-id="97203-282">何もそれらの間のセミコロンを含める場合は、正の値の形式を使用して、欠落したセクションが印刷されます。</span><span class="sxs-lookup"><span data-stu-id="97203-282">If you include semicolons with nothing between them, the missing section is printed using the format of the positive value.</span></span> <span data-ttu-id="97203-283">たとえば、次の形式が正の値が表示されます、負の値の最初のセクションで、形式を使用および表示`Zero`値が 0 の場合。</span><span class="sxs-lookup"><span data-stu-id="97203-283">For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.</span></span>  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a><span data-ttu-id="97203-284">定義済み数値書式</span><span class="sxs-lookup"><span data-stu-id="97203-284">Predefined Numeric Formats</span></span>  
 <span data-ttu-id="97203-285">次の表は、定義済み数値書式の名前を識別します。</span><span class="sxs-lookup"><span data-stu-id="97203-285">The following table identifies the predefined numeric format names.</span></span> <span data-ttu-id="97203-286">これらは名前で使用する、`Style`の引数、`Format`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-286">These may be used by name as the `Style` argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="97203-287">形式名</span><span class="sxs-lookup"><span data-stu-id="97203-287">Format name</span></span>|<span data-ttu-id="97203-288">説明</span><span class="sxs-lookup"><span data-stu-id="97203-288">Description</span></span>|  
|-|-|  
|<span data-ttu-id="97203-289">`General Number`、 `G`、または `g`</span><span class="sxs-lookup"><span data-stu-id="97203-289">`General Number`, `G`, or `g`</span></span>|<span data-ttu-id="97203-290">桁区切り記号なしの数を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-290">Displays number with no thousand separator.</span></span><br /><br /> <span data-ttu-id="97203-291">たとえば、`Format(&H3FA, "g")`返します`1018`です。</span><span class="sxs-lookup"><span data-stu-id="97203-291">For example, `Format(&H3FA, "g")` returns `1018`.</span></span>|  
|<span data-ttu-id="97203-292">`Currency`、 `C`、または `c`</span><span class="sxs-lookup"><span data-stu-id="97203-292">`Currency`, `C`, or `c`</span></span>|<span data-ttu-id="97203-293">必要であれば、桁区切り記号の数が表示されます。小数点区切り文字の右側に 2 桁の数字を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-293">Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator.</span></span> <span data-ttu-id="97203-294">出力は、システムのロケール設定に基づきます。</span><span class="sxs-lookup"><span data-stu-id="97203-294">Output is based on system locale settings.</span></span><br /><br /> <span data-ttu-id="97203-295">たとえば、`Format(1234567, "c")`返します`$1,234,567.00`です。</span><span class="sxs-lookup"><span data-stu-id="97203-295">For example, `Format(1234567, "c")` returns `$1,234,567.00`.</span></span>|  
|<span data-ttu-id="97203-296">`Fixed`、 `F`、または `f`</span><span class="sxs-lookup"><span data-stu-id="97203-296">`Fixed`, `F`, or `f`</span></span>|<span data-ttu-id="97203-297">小数点区切り文字の右側に少なくとも 1 つの数値を左および 2 桁の数字を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-297">Displays at least one digit to the left and two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="97203-298">たとえば、`Format(1234567, "f")`返します`1234567.00`です。</span><span class="sxs-lookup"><span data-stu-id="97203-298">For example, `Format(1234567, "f")` returns `1234567.00`.</span></span>|  
|<span data-ttu-id="97203-299">`Standard`、 `N`、または `n`</span><span class="sxs-lookup"><span data-stu-id="97203-299">`Standard`, `N`, or `n`</span></span>|<span data-ttu-id="97203-300">小数点区切り文字の右側に桁区切り記号、少なくとも 1 つの数値を左および 2 桁の数字の数を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-300">Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="97203-301">たとえば、`Format(1234567, "n")`返します`1,234,567.00`です。</span><span class="sxs-lookup"><span data-stu-id="97203-301">For example, `Format(1234567, "n")` returns `1,234,567.00`.</span></span>|  
|`Percent`|<span data-ttu-id="97203-302">右側にすぐに追加されたパーセント記号 (%) 100 で乗算する数が表示されます。 常に、小数点区切り文字の右側に 2 桁の数字が表示されます。</span><span class="sxs-lookup"><span data-stu-id="97203-302">Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="97203-303">たとえば、`Format(0.4744, "Percent")`返します`47.44%`です。</span><span class="sxs-lookup"><span data-stu-id="97203-303">For example, `Format(0.4744, "Percent")` returns `47.44%`.</span></span>|  
|<span data-ttu-id="97203-304">`P`、または `p`</span><span class="sxs-lookup"><span data-stu-id="97203-304">`P`, or `p`</span></span>|<span data-ttu-id="97203-305">1 つのスペースで右側に付加パーセント記号 (%) 100 倍して桁区切り記号の数が表示されます。 常に、小数点区切り文字の右側に 2 桁の数字が表示されます。</span><span class="sxs-lookup"><span data-stu-id="97203-305">Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="97203-306">たとえば、`Format(0.80345, "p")`返します`80.35 %`です。</span><span class="sxs-lookup"><span data-stu-id="97203-306">For example, `Format(0.80345, "p")` returns `80.35 %`.</span></span>|  
|`Scientific`|<span data-ttu-id="97203-307">2 つの有効桁数を提供する標準の科学的表記法を使用します。</span><span class="sxs-lookup"><span data-stu-id="97203-307">Uses standard scientific notation, providing two significant digits.</span></span><br /><br /> <span data-ttu-id="97203-308">たとえば、`Format(1234567, "Scientific")`返します`1.23E+06`です。</span><span class="sxs-lookup"><span data-stu-id="97203-308">For example, `Format(1234567, "Scientific")` returns `1.23E+06`.</span></span>|  
|<span data-ttu-id="97203-309">`E`、または `e`</span><span class="sxs-lookup"><span data-stu-id="97203-309">`E`, or `e`</span></span>|<span data-ttu-id="97203-310">6 つの有効桁数を提供する標準の科学的表記法を使用します。</span><span class="sxs-lookup"><span data-stu-id="97203-310">Uses standard scientific notation, providing six significant digits.</span></span><br /><br /> <span data-ttu-id="97203-311">たとえば、`Format(1234567, "e")`返します`1.234567e+006`です。</span><span class="sxs-lookup"><span data-stu-id="97203-311">For example, `Format(1234567, "e")` returns `1.234567e+006`.</span></span>|  
|<span data-ttu-id="97203-312">`D`、または `d`</span><span class="sxs-lookup"><span data-stu-id="97203-312">`D`, or `d`</span></span>|<span data-ttu-id="97203-313">数値を 10 進数 (基数 10) の書式による数値の値を含む文字列として表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-313">Displays number as a string that contains the value of the number in Decimal (base 10) format.</span></span> <span data-ttu-id="97203-314">このオプションは整数型のサポート (`Byte`、 `Short`、 `Integer`、 `Long`) のみです。</span><span class="sxs-lookup"><span data-stu-id="97203-314">This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.</span></span><br /><br /> <span data-ttu-id="97203-315">たとえば、`Format(&H7F, "d")`返します`127`です。</span><span class="sxs-lookup"><span data-stu-id="97203-315">For example, `Format(&H7F, "d")` returns `127`.</span></span>|  
|<span data-ttu-id="97203-316">`X`、または `x`</span><span class="sxs-lookup"><span data-stu-id="97203-316">`X`, or `x`</span></span>|<span data-ttu-id="97203-317">数値を 16 進数 (基数 16) の書式による数値の値を含む文字列として表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-317">Displays number as a string that contains the value of the number in Hexadecimal (base 16) format.</span></span> <span data-ttu-id="97203-318">このオプションは整数型のサポート (`Byte`、 `Short`、 `Integer`、 `Long`) のみです。</span><span class="sxs-lookup"><span data-stu-id="97203-318">This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.</span></span><br /><br /> <span data-ttu-id="97203-319">たとえば、`Format(127, "x")`返します`7f`です。</span><span class="sxs-lookup"><span data-stu-id="97203-319">For example, `Format(127, "x")` returns `7f`.</span></span>|  
|`Yes/No`|<span data-ttu-id="97203-320">表示`No`番号が 0、それ以外の場合は、表示`Yes`です。</span><span class="sxs-lookup"><span data-stu-id="97203-320">Displays `No` if number is 0; otherwise, displays `Yes`.</span></span><br /><br /> <span data-ttu-id="97203-321">たとえば、`Format(0, "Yes/No")`返します`No`です。</span><span class="sxs-lookup"><span data-stu-id="97203-321">For example, `Format(0, "Yes/No")` returns `No`.</span></span>|  
|`True/False`|<span data-ttu-id="97203-322">表示`False`番号が 0、それ以外の場合は、表示`True`です。</span><span class="sxs-lookup"><span data-stu-id="97203-322">Displays `False` if number is 0; otherwise, displays `True`.</span></span><br /><br /> <span data-ttu-id="97203-323">たとえば、`Format(1, "True/False")`返します`True`です。</span><span class="sxs-lookup"><span data-stu-id="97203-323">For example, `Format(1, "True/False")` returns `True`.</span></span>|  
|`On/Off`|<span data-ttu-id="97203-324">表示`Off`番号が 0、それ以外の場合は、表示`On`です。</span><span class="sxs-lookup"><span data-stu-id="97203-324">Displays `Off` if number is 0; otherwise, displays `On`.</span></span><br /><br /> <span data-ttu-id="97203-325">たとえば、`Format(1, "On/Off")`返します`On`です。</span><span class="sxs-lookup"><span data-stu-id="97203-325">For example, `Format(1, "On/Off")` returns `On`.</span></span>|  
  
### <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-326">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-326">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-327">`Yes/No`、 `True/False`、および`On/Off`形式がサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-327">The `Yes/No`, `True/False`, and `On/Off` formats are not supported.</span></span>  
  
## <a name="user-defined-numeric-formats"></a><span data-ttu-id="97203-328">ユーザー定義の数値書式</span><span class="sxs-lookup"><span data-stu-id="97203-328">User-Defined Numeric Formats</span></span>  
 <span data-ttu-id="97203-329">次の表では、ユーザー定義の数値書式の作成に使用できる文字を識別します。</span><span class="sxs-lookup"><span data-stu-id="97203-329">The following table identifies characters you can use to create user-defined number formats.</span></span> <span data-ttu-id="97203-330">これらは、ビルドに使用される可能性があります、`Style`の引数、`Format`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-330">These may be used to build the `Style` argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="97203-331">文字</span><span class="sxs-lookup"><span data-stu-id="97203-331">Character</span></span>|<span data-ttu-id="97203-332">説明</span><span class="sxs-lookup"><span data-stu-id="97203-332">Description</span></span>|  
|-|-|  
|<span data-ttu-id="97203-333">なし</span><span class="sxs-lookup"><span data-stu-id="97203-333">None</span></span>|<span data-ttu-id="97203-334">書式なしで数値を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-334">Displays the number with no formatting.</span></span>|  
|<span data-ttu-id="97203-335">(`0`)</span><span class="sxs-lookup"><span data-stu-id="97203-335">(`0`)</span></span>|<span data-ttu-id="97203-336">桁プレース ホルダーです。</span><span class="sxs-lookup"><span data-stu-id="97203-336">Digit placeholder.</span></span> <span data-ttu-id="97203-337">1 桁の数字または 0 を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-337">Displays a digit or a zero.</span></span> <span data-ttu-id="97203-338">式では、書式指定文字列でのゼロに対応する位置に数字がある、表示します。それ以外の場合、その位置に 0 が表示されます。</span><span class="sxs-lookup"><span data-stu-id="97203-338">If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.</span></span><br /><br /> <span data-ttu-id="97203-339">0 の場合数がある少ない桁数られます (のどちらにも、10 進数) 書式指定式、先頭または末尾のゼロが表示されます。</span><span class="sxs-lookup"><span data-stu-id="97203-339">If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros.</span></span> <span data-ttu-id="97203-340">数よりも、小数点区切り文字の右側にある複数の数字がある場合、フォーマット式の中で小数点の右側に 0 に数値の小数点以下桁数が 0 としてのラウンドのられます。</span><span class="sxs-lookup"><span data-stu-id="97203-340">If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros.</span></span> <span data-ttu-id="97203-341">数値の小数点区切り文字の左側の桁がある場合、フォーマット式の中で小数点の左側にゼロであり、変更せず余分な桁が表示されますがあります。</span><span class="sxs-lookup"><span data-stu-id="97203-341">If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.</span></span>|  
|<span data-ttu-id="97203-342">(`#`)</span><span class="sxs-lookup"><span data-stu-id="97203-342">(`#`)</span></span>|<span data-ttu-id="97203-343">桁プレース ホルダーです。</span><span class="sxs-lookup"><span data-stu-id="97203-343">Digit placeholder.</span></span> <span data-ttu-id="97203-344">1 桁の数字または何も表示されます。</span><span class="sxs-lookup"><span data-stu-id="97203-344">Displays a digit or nothing.</span></span> <span data-ttu-id="97203-345">式の位置に数字がある場合で、`#`表示; それ以外の場合、その位置に何も表示書式指定文字列に文字が表示されます。</span><span class="sxs-lookup"><span data-stu-id="97203-345">If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.</span></span><br /><br /> <span data-ttu-id="97203-346">この記号のような機能、`0`桁プレース ホルダー、先頭と末尾のゼロは、数がある少ない桁数よりも多い場合に表示されていない点を除いて`#`フォーマット式の中で小数点の両側の文字です。</span><span class="sxs-lookup"><span data-stu-id="97203-346">This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.</span></span>|  
|<span data-ttu-id="97203-347">(`.`)</span><span class="sxs-lookup"><span data-stu-id="97203-347">(`.`)</span></span>|<span data-ttu-id="97203-348">小数点のプレース ホルダーです。</span><span class="sxs-lookup"><span data-stu-id="97203-348">Decimal placeholder.</span></span> <span data-ttu-id="97203-349">小数点のプレース ホルダーは、小数点区切り文字の右側および左側に表示される数字の数を決定します。</span><span class="sxs-lookup"><span data-stu-id="97203-349">The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator.</span></span> <span data-ttu-id="97203-350">フォーマット式にのみ含まれる場合`#`この記号の左側にある文字以外の数値は小数点区切り文字で始め、1 よりも小さいです。</span><span class="sxs-lookup"><span data-stu-id="97203-350">If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator.</span></span> <span data-ttu-id="97203-351">小数部の先頭にゼロを表示するには、小数点区切り文字の左側に最初の桁プレース ホルダーとして 0 を使用します。</span><span class="sxs-lookup"><span data-stu-id="97203-351">To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator.</span></span> <span data-ttu-id="97203-352">いくつかのロケールでは、小数点区切り文字としてコンマが使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-352">In some locales, a comma is used as the decimal separator.</span></span> <span data-ttu-id="97203-353">書式設定された出力で小数点のプレース ホルダーとして使用される実際の文字は、システムによって認識される数値書式によって異なります。</span><span class="sxs-lookup"><span data-stu-id="97203-353">The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system.</span></span> <span data-ttu-id="97203-354">したがって、場合でも、小数点のプレース ホルダーとしてコンマを使用するロケールではの形式で小数点のプレース ホルダーとして、期間を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97203-354">Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder.</span></span> <span data-ttu-id="97203-355">書式指定文字列は、ロケールの正しい形式で表示されます。</span><span class="sxs-lookup"><span data-stu-id="97203-355">The formatted string will appear in the format correct for the locale.</span></span>|  
|<span data-ttu-id="97203-356">(`%`)</span><span class="sxs-lookup"><span data-stu-id="97203-356">(`%`)</span></span>|<span data-ttu-id="97203-357">パーセント プレース ホルダーです。</span><span class="sxs-lookup"><span data-stu-id="97203-357">Percent placeholder.</span></span> <span data-ttu-id="97203-358">式は、100 を乗算します。</span><span class="sxs-lookup"><span data-stu-id="97203-358">Multiplies the expression by 100.</span></span> <span data-ttu-id="97203-359">パーセント記号 (`%`) 書式指定文字列の表示位置に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="97203-359">The percent character (`%`) is inserted in the position where it appears in the format string.</span></span>|  
|<span data-ttu-id="97203-360">(`,`)</span><span class="sxs-lookup"><span data-stu-id="97203-360">(`,`)</span></span>|<span data-ttu-id="97203-361">桁区切り記号。</span><span class="sxs-lookup"><span data-stu-id="97203-361">Thousand separator.</span></span> <span data-ttu-id="97203-362">桁区切り記号は、千が 4 桁以上、小数点区切り文字の左側にある数値の中で、百の位を区切ります。</span><span class="sxs-lookup"><span data-stu-id="97203-362">The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator.</span></span> <span data-ttu-id="97203-363">桁区切り記号の標準の使用が指定の形式に桁プレース ホルダーで囲まれた、桁区切り記号が含まれるかどうか (`0`または`#`)。</span><span class="sxs-lookup"><span data-stu-id="97203-363">Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).</span></span><br /><br /> <span data-ttu-id="97203-364">(10 進数を指定するかどうか)、小数点区切り文字のまたは一番左にすぐに、桁区切り記号文字の文字列に「スケール数を 1000 で除算して必要に応じて丸める」</span><span class="sxs-lookup"><span data-stu-id="97203-364">A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means "scale the number by dividing it by 1,000, rounding as needed."</span></span> <span data-ttu-id="97203-365">500 以上 1,000 未満の数として表示されます`1`、および 500 として表示されるよりも小さい番号`0`です。</span><span class="sxs-lookup"><span data-stu-id="97203-365">Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`.</span></span> <span data-ttu-id="97203-366">2 つ隣接する 1000 単位の区切りにはこの位置の 100万、係数と、各追加の区切りに 1,000 の拡大縮小します。</span><span class="sxs-lookup"><span data-stu-id="97203-366">Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.</span></span><br /><br /> <span data-ttu-id="97203-367">小数点区切り文字の左側にすぐに以外の位置または文字列の右端の位置で複数の区切り記号は、桁区切り記号の使用を指定するだけでとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="97203-367">Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator.</span></span> <span data-ttu-id="97203-368">ロケールによって、桁区切り記号としてピリオドが使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-368">In some locales, a period is used as a thousand separator.</span></span> <span data-ttu-id="97203-369">書式設定された出力で桁区切り記号として使用される実際の文字は、システムによって認識される数値書式によって異なります。</span><span class="sxs-lookup"><span data-stu-id="97203-369">The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system.</span></span> <span data-ttu-id="97203-370">したがって、場合でも、桁区切り記号としてピリオドを使用するロケールではの形式で桁区切り記号としてコンマを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97203-370">Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator.</span></span> <span data-ttu-id="97203-371">書式指定文字列は、ロケールの正しい形式で表示されます。</span><span class="sxs-lookup"><span data-stu-id="97203-371">The formatted string will appear in the format correct for the locale.</span></span><br /><br /> <span data-ttu-id="97203-372">たとえば、次の 3 つの次の書式指定文字列があるとします。</span><span class="sxs-lookup"><span data-stu-id="97203-372">For example, consider the three following format strings:</span></span><br /><br /> <span data-ttu-id="97203-373">-   `"#,0."`、どの桁区切り記号として「100,000, 000」、文字列、数値の 1億を書式設定をします。</span><span class="sxs-lookup"><span data-stu-id="97203-373">-   `"#,0."`, which uses the thousands separator to format the number 100 million as the string "100,000,000".</span></span><br /><span data-ttu-id="97203-374">-   `"#0,."`、数値の 1億を書式設定文字列「100000」として 1,000 分の 1 の因子を使用します。</span><span class="sxs-lookup"><span data-stu-id="97203-374">-   `"#0,."`, which uses scaling by a factor of one thousand to format the number 100 million as the string "100000".</span></span><br /><span data-ttu-id="97203-375">-   `"#,0,."`、どの桁区切り記号および数値の 1億を書式設定文字列「100,000」として 1,000 分の 1 で、スケーリングします。</span><span class="sxs-lookup"><span data-stu-id="97203-375">-   `"#,0,."`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string "100,000".</span></span>|  
|<span data-ttu-id="97203-376">(`:`)</span><span class="sxs-lookup"><span data-stu-id="97203-376">(`:`)</span></span>|<span data-ttu-id="97203-377">時刻の区切り記号。</span><span class="sxs-lookup"><span data-stu-id="97203-377">Time separator.</span></span> <span data-ttu-id="97203-378">いくつかのロケールでは、その他の文字を時刻の区切り記号を表すが使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-378">In some locales, other characters may be used to represent the time separator.</span></span> <span data-ttu-id="97203-379">時刻の区切り記号は、時間、分、および時刻の値が書式設定されるとき秒を区切ります。</span><span class="sxs-lookup"><span data-stu-id="97203-379">The time separator separates hours, minutes, and seconds when time values are formatted.</span></span> <span data-ttu-id="97203-380">書式付き出力の時刻の区切り記号として使用される実際の文字は、システム設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="97203-380">The actual character used as the time separator in formatted output is determined by your system settings.</span></span>|  
|<span data-ttu-id="97203-381">(`/`)</span><span class="sxs-lookup"><span data-stu-id="97203-381">(`/`)</span></span>|<span data-ttu-id="97203-382">日付の区切り記号。</span><span class="sxs-lookup"><span data-stu-id="97203-382">Date separator.</span></span> <span data-ttu-id="97203-383">いくつかのロケールでは、その他の文字を日付の区切り記号を表すが使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-383">In some locales, other characters may be used to represent the date separator.</span></span> <span data-ttu-id="97203-384">日付の区切り記号は、日付の書式設定日、月、および年を区切ります。</span><span class="sxs-lookup"><span data-stu-id="97203-384">The date separator separates the day, month, and year when date values are formatted.</span></span> <span data-ttu-id="97203-385">書式設定された出力で日付の区切り記号として使用される実際の文字は、システム設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="97203-385">The actual character used as the date separator in formatted output is determined by your system settings.</span></span>|  
|<span data-ttu-id="97203-386">(`E-``E+``e-``e+`)</span><span class="sxs-lookup"><span data-stu-id="97203-386">(`E-``E+``e-``e+`)</span></span>|<span data-ttu-id="97203-387">指数書式。</span><span class="sxs-lookup"><span data-stu-id="97203-387">Scientific format.</span></span> <span data-ttu-id="97203-388">書式指定式が少なくとも 1 つの桁プレース ホルダーが含まれるかどうか (`0`または`#`) の左側に`E-`、 `E+`、 `e-`、または`e+`、指数表記の数が表示されますと`E`または`e`数と指数部の間に挿入します。</span><span class="sxs-lookup"><span data-stu-id="97203-388">If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent.</span></span> <span data-ttu-id="97203-389">左側の桁プレース ホルダーの数は、指数部の桁数を決定します。</span><span class="sxs-lookup"><span data-stu-id="97203-389">The number of digit placeholders to the left determines the number of digits in the exponent.</span></span> <span data-ttu-id="97203-390">使用して`E-`または`e-`負の指数の横にマイナス記号を挿入します。</span><span class="sxs-lookup"><span data-stu-id="97203-390">Use `E-` or `e-` to place a minus sign next to negative exponents.</span></span> <span data-ttu-id="97203-391">使用して`E+`または`e+`を負の指数の横にマイナス記号、正の指数の横にあるプラス記号を配置します。</span><span class="sxs-lookup"><span data-stu-id="97203-391">Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents.</span></span> <span data-ttu-id="97203-392">正しく書式設定をこの記号の右側に桁プレース ホルダーを追加することもあります。</span><span class="sxs-lookup"><span data-stu-id="97203-392">You must also include digit placeholders to the right of this symbol to get correct formatting.</span></span>|  
|<span data-ttu-id="97203-393">`-``+``$` ( )</span><span class="sxs-lookup"><span data-stu-id="97203-393">`-` `+` `$` ( )</span></span>|<span data-ttu-id="97203-394">リテラル文字です。</span><span class="sxs-lookup"><span data-stu-id="97203-394">Literal characters.</span></span> <span data-ttu-id="97203-395">これらの文字が書式指定文字列で入力したとおりに表示されます。</span><span class="sxs-lookup"><span data-stu-id="97203-395">These characters are displayed exactly as typed in the format string.</span></span> <span data-ttu-id="97203-396">リストされているのいずれかの以外の文字を表示するには、先頭に円記号 (`\`) または二重引用符で囲みます ("") です。</span><span class="sxs-lookup"><span data-stu-id="97203-396">To display a character other than one of those listed, precede it with a backslash (`\`) or enclose it in double quotation marks (" ").</span></span>|  
|<span data-ttu-id="97203-397">(`\`)</span><span class="sxs-lookup"><span data-stu-id="97203-397">(`\`)</span></span>|<span data-ttu-id="97203-398">書式指定文字列内の次の文字を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-398">Displays the next character in the format string.</span></span> <span data-ttu-id="97203-399">リテラル文字として特別な意味を持つ文字を表示するには、先頭に円記号 (`\`)。</span><span class="sxs-lookup"><span data-stu-id="97203-399">To display a character that has special meaning as a literal character, precede it with a backslash (`\`).</span></span> <span data-ttu-id="97203-400">円記号自体は表示されません。</span><span class="sxs-lookup"><span data-stu-id="97203-400">The backslash itself isn't displayed.</span></span> <span data-ttu-id="97203-401">円記号の使用は、次の文字を二重引用符で囲むことと同じです。</span><span class="sxs-lookup"><span data-stu-id="97203-401">Using a backslash is the same as enclosing the next character in double quotation marks.</span></span> <span data-ttu-id="97203-402">円記号を表示するには、次の 2 つの円記号を使用 (`\\`)。</span><span class="sxs-lookup"><span data-stu-id="97203-402">To display a backslash, use two backslashes (`\\`).</span></span><br /><br /> <span data-ttu-id="97203-403">リテラルの文字が日付の書式設定と時刻の書式設定文字として表示できません文字の例 (`a`、 `c`、 `d`、 `h`、 `m`、 `n`、 `p`、 `q`、 `s`、 `t`、 `w`、 `y`、 `/`、および`:`)、数値の書式設定文字 (`#`、 `0`、 `%`、 `E`、 `e`、コンマ、および期間)、および文字列の書式設定文字 (`@`、 `&`、 `<`、 `>`、および`!`)。</span><span class="sxs-lookup"><span data-stu-id="97203-403">Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).</span></span>|  
|<span data-ttu-id="97203-404">(`"``ABC``"`)</span><span class="sxs-lookup"><span data-stu-id="97203-404">(`"``ABC``"`)</span></span>|<span data-ttu-id="97203-405">二重引用符で囲んだ文字列が表示されます ("") です。</span><span class="sxs-lookup"><span data-stu-id="97203-405">Displays the string inside the double quotation marks (" ").</span></span> <span data-ttu-id="97203-406">コード内からスタイル引数に文字列を含める、使用する必要があります`Chr(34)`テキストを囲みます (`34`引用符 (") の文字コードに示します)。</span><span class="sxs-lookup"><span data-stu-id="97203-406">To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (")).</span></span>|  
  
### <a name="legacy-code-example"></a><span data-ttu-id="97203-407">古いコードの例</span><span class="sxs-lookup"><span data-stu-id="97203-407">Legacy Code Example</span></span>  
 <span data-ttu-id="97203-408">次の表には、数値のフォーマット式サンプルにはが含まれています。</span><span class="sxs-lookup"><span data-stu-id="97203-408">The following table contains some sample format expressions for numbers.</span></span> <span data-ttu-id="97203-409">(これらの例は、システムのロケール設定が英語 (米国) であると仮定)最初の列には書式指定文字列が含まれています、`Style`の引数、`Format`関数以外のフォーマット済みのデータが列見出しで指定された値を持つ場合、結果の出力を含む、他の列です。</span><span class="sxs-lookup"><span data-stu-id="97203-409">(These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.</span></span>  
  
|<span data-ttu-id="97203-410">書式設定 (`Style`)</span><span class="sxs-lookup"><span data-stu-id="97203-410">Format (`Style`)</span></span>|<span data-ttu-id="97203-411">「5」に設定として書式の設定</span><span class="sxs-lookup"><span data-stu-id="97203-411">"5" formatted as</span></span>|<span data-ttu-id="97203-412">「-5」として書式設定</span><span class="sxs-lookup"><span data-stu-id="97203-412">"-5" formatted as</span></span>|<span data-ttu-id="97203-413">「0.5」に設定として書式の設定</span><span class="sxs-lookup"><span data-stu-id="97203-413">"0.5" formatted as</span></span>|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a><span data-ttu-id="97203-414">定義済み日付/時刻の形式</span><span class="sxs-lookup"><span data-stu-id="97203-414">Predefined Date/Time Formats</span></span>  
 <span data-ttu-id="97203-415">次の表は、定義済みの日付と時刻形式の名前を識別します。</span><span class="sxs-lookup"><span data-stu-id="97203-415">The following table identifies the predefined date and time format names.</span></span> <span data-ttu-id="97203-416">これらの名前でのスタイル引数として使用することがあります、`Format`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-416">These may be used by name as the style argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="97203-417">形式名</span><span class="sxs-lookup"><span data-stu-id="97203-417">Format Name</span></span>|<span data-ttu-id="97203-418">説明</span><span class="sxs-lookup"><span data-stu-id="97203-418">Description</span></span>|  
|-|-|  
|<span data-ttu-id="97203-419">`General Date`、または `G`</span><span class="sxs-lookup"><span data-stu-id="97203-419">`General Date`, or `G`</span></span>|<span data-ttu-id="97203-420">日付/時刻が表示されます。</span><span class="sxs-lookup"><span data-stu-id="97203-420">Displays a date and/or time.</span></span> <span data-ttu-id="97203-421">たとえば、`3/12/2008 11:07:31 AM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-421">For example, `3/12/2008 11:07:31 AM`.</span></span> <span data-ttu-id="97203-422">日付の表示は、アプリケーションの現在のカルチャ値によって決定されます。</span><span class="sxs-lookup"><span data-stu-id="97203-422">Date display is determined by your application's current culture value.</span></span>|  
|<span data-ttu-id="97203-423">`Long Date`、 `Medium Date`、または `D`</span><span class="sxs-lookup"><span data-stu-id="97203-423">`Long Date`, `Medium Date`, or `D`</span></span>|<span data-ttu-id="97203-424">現在のカルチャの長い日付形式に従って日付を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-424">Displays a date according to your current culture's long date format.</span></span> <span data-ttu-id="97203-425">たとえば、`Wednesday, March 12, 2008` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-425">For example, `Wednesday, March 12, 2008`.</span></span>|  
|<span data-ttu-id="97203-426">`Short Date`、または `d`</span><span class="sxs-lookup"><span data-stu-id="97203-426">`Short Date`, or `d`</span></span>|<span data-ttu-id="97203-427">現在のカルチャの短い日付形式を使用して日付を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-427">Displays a date using your current culture's short date format.</span></span> <span data-ttu-id="97203-428">たとえば、`3/12/2008` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-428">For example, `3/12/2008`.</span></span><br /><br /> <span data-ttu-id="97203-429">`d`文字は、ユーザー定義の日付形式で日付を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-429">The `d` character displays the day in a user-defined date format.</span></span>|  
|<span data-ttu-id="97203-430">`Long Time`、 `Medium Time`、または `T`</span><span class="sxs-lookup"><span data-stu-id="97203-430">`Long Time`, `Medium Time`, or `T`</span></span>|<span data-ttu-id="97203-431">は現在のカルチャの長い形式の時刻の形式を使用して時刻を表示します。通常、時間、分、秒数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="97203-431">Displays a time using your current culture's long time format; typically includes hours, minutes, seconds.</span></span> <span data-ttu-id="97203-432">たとえば、`11:07:31 AM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-432">For example, `11:07:31 AM`.</span></span>|  
|<span data-ttu-id="97203-433">`Short Time` または `t`</span><span class="sxs-lookup"><span data-stu-id="97203-433">`Short Time` or `t`</span></span>|<span data-ttu-id="97203-434">現在のカルチャの短い時刻形式を使用して時刻を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-434">Displays a time using your current culture's short time format.</span></span> <span data-ttu-id="97203-435">たとえば、`11:07 AM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-435">For example, `11:07 AM`.</span></span><br /><br /> <span data-ttu-id="97203-436">`t`文字表示`AM`または`PM`値ユーザー定義の時刻の形式で 12 時間制を使用するロケール。</span><span class="sxs-lookup"><span data-stu-id="97203-436">The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.</span></span>|  
|`f`|<span data-ttu-id="97203-437">長い日付パターンと短い形式の時刻を現在のカルチャの書式に従って表示されます。</span><span class="sxs-lookup"><span data-stu-id="97203-437">Displays the long date and short time according to your current culture's format.</span></span> <span data-ttu-id="97203-438">たとえば、`Wednesday, March 12, 2008 11:07 AM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-438">For example, `Wednesday, March 12, 2008 11:07 AM`.</span></span>|  
|`F`|<span data-ttu-id="97203-439">長い日付パターンと現在のカルチャの書式に従って長い時間が表示されます。</span><span class="sxs-lookup"><span data-stu-id="97203-439">Displays the long date and long time according to your current culture's format.</span></span> <span data-ttu-id="97203-440">たとえば、`Wednesday, March 12, 2008 11:07:31 AM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-440">For example, `Wednesday, March 12, 2008 11:07:31 AM`.</span></span>|  
|`g`|<span data-ttu-id="97203-441">短い形式の日付と短い形式の時刻を現在のカルチャの書式に従って表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-441">Displays the short date and short time according to your current culture's format.</span></span> <span data-ttu-id="97203-442">たとえば、`3/12/2008 11:07 AM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-442">For example, `3/12/2008 11:07 AM`.</span></span>|  
|<span data-ttu-id="97203-443">`M`, `m`</span><span class="sxs-lookup"><span data-stu-id="97203-443">`M`, `m`</span></span>|<span data-ttu-id="97203-444">月と日付の日を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-444">Displays the month and the day of a date.</span></span> <span data-ttu-id="97203-445">たとえば、`March 12` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-445">For example, `March 12`.</span></span><br /><br /> <span data-ttu-id="97203-446">`M`文字は、ユーザー定義の日付書式で月を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-446">The `M` character displays the month in a user-defined date format.</span></span> <span data-ttu-id="97203-447">`m`文字は、ユーザー定義の時刻書式で分を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-447">The `m` character displays the minutes in a user-defined time format.</span></span>|  
|<span data-ttu-id="97203-448">`R`, `r`</span><span class="sxs-lookup"><span data-stu-id="97203-448">`R`, `r`</span></span>|<span data-ttu-id="97203-449">に従って日付を書式設定、<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="97203-449">Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property.</span></span> <span data-ttu-id="97203-450">たとえば、`Wed, 12 Mar 2008 11:07:31 GMT` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-450">For example, `Wed, 12 Mar 2008 11:07:31 GMT`.</span></span> <span data-ttu-id="97203-451">書式設定された日付は、日付と時刻の値を調整できません。</span><span class="sxs-lookup"><span data-stu-id="97203-451">The formatted date does not adjust the value of the date and time.</span></span> <span data-ttu-id="97203-452">呼び出しの前に gmt 時刻、日付/時刻値を調整する必要があります、`Format`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-452">You must adjust the Date/Time value to GMT before calling the `Format` function.</span></span>|  
|`s`|<span data-ttu-id="97203-453">日付と時刻を並べ替え可能なインデックスとして書式設定します。</span><span class="sxs-lookup"><span data-stu-id="97203-453">Formats the date and time as a sortable index.</span></span> <span data-ttu-id="97203-454">たとえば、`2008-03-12T11:07:31` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-454">For example, `2008-03-12T11:07:31`.</span></span><br /><br /> <span data-ttu-id="97203-455">`s`文字は、ユーザー定義の時刻書式で秒を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-455">The `s` character displays the seconds in a user-defined time format.</span></span>|  
|`u`|<span data-ttu-id="97203-456">日付と時刻を GMT 並べ替え可能なインデックスとして書式設定します。</span><span class="sxs-lookup"><span data-stu-id="97203-456">Formats the date and time as a GMT sortable index.</span></span> <span data-ttu-id="97203-457">たとえば、`2008-03-12 11:07:31Z` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-457">For example, `2008-03-12 11:07:31Z`.</span></span>|  
|`U`|<span data-ttu-id="97203-458">日付と時間の長い日付と長い時刻 GMT で書式設定します。</span><span class="sxs-lookup"><span data-stu-id="97203-458">Formats the date and time with the long date and long time as GMT.</span></span> <span data-ttu-id="97203-459">たとえば、`Wednesday, March 12, 2008 6:07:31 PM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-459">For example, `Wednesday, March 12, 2008 6:07:31 PM`.</span></span>|  
|<span data-ttu-id="97203-460">`Y`, `y`</span><span class="sxs-lookup"><span data-stu-id="97203-460">`Y`, `y`</span></span>|<span data-ttu-id="97203-461">年、月と日付の書式を設定します。</span><span class="sxs-lookup"><span data-stu-id="97203-461">Formats the date as the year and month.</span></span> <span data-ttu-id="97203-462">たとえば、`March, 2008` のようにします。</span><span class="sxs-lookup"><span data-stu-id="97203-462">For example, `March, 2008`.</span></span><br /><br /> <span data-ttu-id="97203-463">`Y`と`y`文字は、ユーザー定義の日付書式で年を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-463">The `Y` and `y` characters display the year in a user-defined date format.</span></span>|  
  
 <span data-ttu-id="97203-464">アプリケーションの現在のカルチャ情報の詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="97203-464">For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
## <a name="user-defined-datetime-formats"></a><span data-ttu-id="97203-465">ユーザー定義の日付/時刻書式</span><span class="sxs-lookup"><span data-stu-id="97203-465">User-Defined Date/Time Formats</span></span>  
 <span data-ttu-id="97203-466">ユーザー定義の日付/時刻書式の作成に使用できる文字を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-466">The following table shows characters you can use to create user-defined date/time formats.</span></span> <span data-ttu-id="97203-467">異なり以前のバージョンの[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]、これらの形式の文字は大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="97203-467">Unlike in earlier versions of [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], these format characters are case-sensitive.</span></span>  
  
|<span data-ttu-id="97203-468">文字</span><span class="sxs-lookup"><span data-stu-id="97203-468">Character</span></span>|<span data-ttu-id="97203-469">説明</span><span class="sxs-lookup"><span data-stu-id="97203-469">Description</span></span>|  
|-|-|  
|<span data-ttu-id="97203-470">(`:`)</span><span class="sxs-lookup"><span data-stu-id="97203-470">(`:`)</span></span>|<span data-ttu-id="97203-471">時刻の区切り記号。</span><span class="sxs-lookup"><span data-stu-id="97203-471">Time separator.</span></span> <span data-ttu-id="97203-472">いくつかのロケールでは、その他の文字を時刻の区切り記号を表すが使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-472">In some locales, other characters may be used to represent the time separator.</span></span> <span data-ttu-id="97203-473">時刻の区切り記号は、時間、分、および時刻の値が書式設定されるとき秒を区切ります。</span><span class="sxs-lookup"><span data-stu-id="97203-473">The time separator separates hours, minutes, and seconds when time values are formatted.</span></span> <span data-ttu-id="97203-474">書式付き出力の時刻の区切り記号として使用される実際の文字は、アプリケーションの現在のカルチャ値によって決まります。</span><span class="sxs-lookup"><span data-stu-id="97203-474">The actual character that is used as the time separator in formatted output is determined by your application's current culture value.</span></span>|  
|<span data-ttu-id="97203-475">(`/`)</span><span class="sxs-lookup"><span data-stu-id="97203-475">(`/`)</span></span>|<span data-ttu-id="97203-476">日付の区切り記号。</span><span class="sxs-lookup"><span data-stu-id="97203-476">Date separator.</span></span> <span data-ttu-id="97203-477">いくつかのロケールでは、その他の文字を日付の区切り記号を表すが使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-477">In some locales, other characters may be used to represent the date separator.</span></span> <span data-ttu-id="97203-478">日付の区切り記号は、日付の書式設定日、月、および年を区切ります。</span><span class="sxs-lookup"><span data-stu-id="97203-478">The date separator separates the day, month, and year when date values are formatted.</span></span> <span data-ttu-id="97203-479">書式設定された出力で日付の区切り記号として使用される実際の文字は、アプリケーションの現在のカルチャによって決まります。</span><span class="sxs-lookup"><span data-stu-id="97203-479">The actual character that is used as the date separator in formatted output is determined by your application's current culture.</span></span>|  
|<span data-ttu-id="97203-480">(`%`)</span><span class="sxs-lookup"><span data-stu-id="97203-480">(`%`)</span></span>|<span data-ttu-id="97203-481">次の文字が後続の文字に関係なく 1 文字書式として読み取ることを示すために使用します。</span><span class="sxs-lookup"><span data-stu-id="97203-481">Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters.</span></span> <span data-ttu-id="97203-482">ユーザー定義の書式として 1 文字書式を読み取ることを示すためにも使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-482">Also used to indicate that a single-letter format is read as a user-defined format.</span></span> <span data-ttu-id="97203-483">追加の詳細については、下記を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97203-483">See what follows for additional details.</span></span>|  
|`d`|<span data-ttu-id="97203-484">0 を付けない数値で日を表示 (たとえば、 `1`)。</span><span class="sxs-lookup"><span data-stu-id="97203-484">Displays the day as a number without a leading zero (for example, `1`).</span></span> <span data-ttu-id="97203-485">使用して`%d`場合、これは、ユーザー定義の数値書式で唯一の文字です。</span><span class="sxs-lookup"><span data-stu-id="97203-485">Use `%d` if this is the only character in your user-defined numeric format.</span></span>|  
|`dd`|<span data-ttu-id="97203-486">0 を付けた数値で日を表示 (たとえば、 `01`)。</span><span class="sxs-lookup"><span data-stu-id="97203-486">Displays the day as a number with a leading zero (for example, `01`).</span></span>|  
|`ddd`|<span data-ttu-id="97203-487">省略形として、曜日を表示します (たとえば、 `Sun`)。</span><span class="sxs-lookup"><span data-stu-id="97203-487">Displays the day as an abbreviation (for example, `Sun`).</span></span>|  
|`dddd`|<span data-ttu-id="97203-488">完全な名前の曜日を表示します (たとえば、 `Sunday`)。</span><span class="sxs-lookup"><span data-stu-id="97203-488">Displays the day as a full name (for example, `Sunday`).</span></span>|  
|`M`|<span data-ttu-id="97203-489">0 を付けない数値で月を表示 (たとえば、1 月は`1`)。</span><span class="sxs-lookup"><span data-stu-id="97203-489">Displays the month as a number without a leading zero (for example, January is represented as `1`).</span></span> <span data-ttu-id="97203-490">使用して`%M`場合、これは、ユーザー定義の数値書式で唯一の文字です。</span><span class="sxs-lookup"><span data-stu-id="97203-490">Use `%M` if this is the only character in your user-defined numeric format.</span></span>|  
|`MM`|<span data-ttu-id="97203-491">数値に先行ゼロで、月が表示されます (たとえば、 `01/12/01`)。</span><span class="sxs-lookup"><span data-stu-id="97203-491">Displays the month as a number with a leading zero (for example, `01/12/01`).</span></span>|  
|`MMM`|<span data-ttu-id="97203-492">省略形として、月が表示されます (たとえば、 `Jan`)。</span><span class="sxs-lookup"><span data-stu-id="97203-492">Displays the month as an abbreviation (for example, `Jan`).</span></span>|  
|`MMMM`|<span data-ttu-id="97203-493">月の正式名として月を表示します (たとえば、 `January`)。</span><span class="sxs-lookup"><span data-stu-id="97203-493">Displays the month as a full month name (for example, `January`).</span></span>|  
|`gg`|<span data-ttu-id="97203-494">期間または年号を表す文字列が表示されます (たとえば、 `A.D.`)。</span><span class="sxs-lookup"><span data-stu-id="97203-494">Displays the period/era string (for example, `A.D.`).</span></span>|  
|`h`|<span data-ttu-id="97203-495">12 時間制を使用して 0 を付けない数値で時間を表示します (たとえば、 `1:15:15 PM`)。</span><span class="sxs-lookup"><span data-stu-id="97203-495">Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`).</span></span> <span data-ttu-id="97203-496">使用して`%h`場合、これは、ユーザー定義の数値書式で唯一の文字です。</span><span class="sxs-lookup"><span data-stu-id="97203-496">Use `%h` if this is the only character in your user-defined numeric format.</span></span>|  
|`hh`|<span data-ttu-id="97203-497">12 時間制を使用してゼロで始まる数値で時間を表示します (たとえば、 `01:15:15 PM`)。</span><span class="sxs-lookup"><span data-stu-id="97203-497">Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).</span></span>|  
|`H`|<span data-ttu-id="97203-498">24 時間制を使用して 0 を付けない数値で時間を表示します (たとえば、 `1:15:15`)。</span><span class="sxs-lookup"><span data-stu-id="97203-498">Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`).</span></span> <span data-ttu-id="97203-499">使用して`%H`場合、これは、ユーザー定義の数値書式で唯一の文字です。</span><span class="sxs-lookup"><span data-stu-id="97203-499">Use `%H` if this is the only character in your user-defined numeric format.</span></span>|  
|`HH`|<span data-ttu-id="97203-500">24 時間制を使用してゼロで始まる数値で時間を表示します (たとえば、 `01:15:15`)。</span><span class="sxs-lookup"><span data-stu-id="97203-500">Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).</span></span>|  
|`m`|<span data-ttu-id="97203-501">0 を付けない数値で分を表示します (たとえば、 `12:1:15`)。</span><span class="sxs-lookup"><span data-stu-id="97203-501">Displays the minute as a number without leading zeros (for example, `12:1:15`).</span></span> <span data-ttu-id="97203-502">使用して`%m`場合、これは、ユーザー定義の数値書式で唯一の文字です。</span><span class="sxs-lookup"><span data-stu-id="97203-502">Use `%m` if this is the only character in your user-defined numeric format.</span></span>|  
|`mm`|<span data-ttu-id="97203-503">ゼロで始まる数値で分を表示します (たとえば、 `12:01:15`)。</span><span class="sxs-lookup"><span data-stu-id="97203-503">Displays the minute as a number with leading zeros (for example, `12:01:15`).</span></span>|  
|`s`|<span data-ttu-id="97203-504">0 を付けない数値で秒を表示します (たとえば、 `12:15:5`)。</span><span class="sxs-lookup"><span data-stu-id="97203-504">Displays the second as a number without leading zeros (for example, `12:15:5`).</span></span> <span data-ttu-id="97203-505">使用して`%s`場合、これは、ユーザー定義の数値書式で唯一の文字です。</span><span class="sxs-lookup"><span data-stu-id="97203-505">Use `%s` if this is the only character in your user-defined numeric format.</span></span>|  
|`ss`|<span data-ttu-id="97203-506">ゼロで始まる数値で秒を表示します (たとえば、 `12:15:05`)。</span><span class="sxs-lookup"><span data-stu-id="97203-506">Displays the second as a number with leading zeros (for example, `12:15:05`).</span></span>|  
|`f`|<span data-ttu-id="97203-507">秒の小数部を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-507">Displays fractions of seconds.</span></span> <span data-ttu-id="97203-508">たとえば`ff`が表示されますが、秒の部分の 1/100`ffff`秒の部分の 1/10000 を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-508">For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds.</span></span> <span data-ttu-id="97203-509">最大 7 を使用することは`f`ユーザー定義の書式シンボル。</span><span class="sxs-lookup"><span data-stu-id="97203-509">You may use up to seven `f` symbols in your user-defined format.</span></span> <span data-ttu-id="97203-510">使用して`%f`場合、これは、ユーザー定義の数値書式で唯一の文字です。</span><span class="sxs-lookup"><span data-stu-id="97203-510">Use `%f` if this is the only character in your user-defined numeric format.</span></span>|  
|`t`|<span data-ttu-id="97203-511">12 時間制を使用し、表示、大文字`A`正午前に、の時間に大文字が表示されます`P`の正午と午後 11 時 59 分の間の時間</span><span class="sxs-lookup"><span data-stu-id="97203-511">Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M.</span></span> <span data-ttu-id="97203-512">使用して`%t`場合、これは、ユーザー定義の数値書式で唯一の文字です。</span><span class="sxs-lookup"><span data-stu-id="97203-512">Use `%t` if this is the only character in your user-defined numeric format.</span></span>|  
|`tt`|<span data-ttu-id="97203-513">12 時間制を使用するロケールでは、表示、大文字`AM`正午前に、の時間が表示されます、大文字`PM`正午と午後 11 時 59 分の間の時間に</span><span class="sxs-lookup"><span data-stu-id="97203-513">For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.</span></span><br /><br /> <span data-ttu-id="97203-514">24 時間制を使用するロケールでは、何も表示されません。</span><span class="sxs-lookup"><span data-stu-id="97203-514">For locales that use a 24-hour clock, displays nothing.</span></span>|  
|`y`|<span data-ttu-id="97203-515">0 を付けない年数字 (0 ~ 9) を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-515">Displays the year number (0-9) without leading zeros.</span></span> <span data-ttu-id="97203-516">使用して`%y`場合、これは、ユーザー定義の数値書式で唯一の文字です。</span><span class="sxs-lookup"><span data-stu-id="97203-516">Use `%y` if this is the only character in your user-defined numeric format.</span></span>|  
|`yy`|<span data-ttu-id="97203-517">該当する場合に 0 を付けた 2 桁の数値書式で年を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-517">Displays the year in two-digit numeric format with a leading zero, if applicable.</span></span>|  
|`yyy`|<span data-ttu-id="97203-518">4 桁の数値書式で年を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-518">Displays the year in four-digit numeric format.</span></span>|  
|`yyyy`|<span data-ttu-id="97203-519">4 桁の数値書式で年を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-519">Displays the year in four-digit numeric format.</span></span>|  
|`z`|<span data-ttu-id="97203-520">先行ゼロなしのタイム ゾーン オフセットを表示します (たとえば、 `-8`)。</span><span class="sxs-lookup"><span data-stu-id="97203-520">Displays the timezone offset without a leading zero (for example, `-8`).</span></span> <span data-ttu-id="97203-521">使用して`%z`場合、これは、ユーザー定義の数値書式で唯一の文字です。</span><span class="sxs-lookup"><span data-stu-id="97203-521">Use `%z` if this is the only character in your user-defined numeric format.</span></span>|  
|`zz`|<span data-ttu-id="97203-522">先行ゼロ付きのタイム ゾーン オフセットを表示します (たとえば、 `-08`)</span><span class="sxs-lookup"><span data-stu-id="97203-522">Displays the timezone offset with a leading zero (for example, `-08`)</span></span>|  
|`zzz`|<span data-ttu-id="97203-523">完全なタイムゾーン オフセットが表示されます (たとえば、 `-08:00`)</span><span class="sxs-lookup"><span data-stu-id="97203-523">Displays the full timezone offset (for example, `-08:00`)</span></span>|  
  
### <a name="legacy-code-example"></a><span data-ttu-id="97203-524">古いコードの例</span><span class="sxs-lookup"><span data-stu-id="97203-524">Legacy Code Example</span></span>  
 <span data-ttu-id="97203-525">ユーザー定義の日付と時刻の形式の例を次に`December 7, 1958, 8:50 PM, 35 seconds`:</span><span class="sxs-lookup"><span data-stu-id="97203-525">The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:</span></span>  
  
|<span data-ttu-id="97203-526">形式</span><span class="sxs-lookup"><span data-stu-id="97203-526">Format</span></span>|<span data-ttu-id="97203-527">表示</span><span class="sxs-lookup"><span data-stu-id="97203-527">Displays</span></span>|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-528">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-528">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-529">デバイスの最小期間の精度は、デバイスの製造元によって決定されます。</span><span class="sxs-lookup"><span data-stu-id="97203-529">The minimum time resolution for a device is determined by the manufacturer of the device.</span></span> <span data-ttu-id="97203-530">デバイスの時刻解像度が十分に粗い場合、`f`形式の文字は、そのデバイス上で実行するときは 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-530">If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-531">`Format` の書式指定とユーザー定義の書式指定の両方を使って値の書式を指定する、`String` 関数のさまざまな使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-531">This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats.</span></span> <span data-ttu-id="97203-532">日付の区切り記号 (`/`)、時刻の区切り記号 (`:`)、および午前/午後を示す文字 (`t` および `tt`) について、システムで実際に表示される書式は、コードが使用するロケール設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="97203-532">For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using.</span></span> <span data-ttu-id="97203-533">時刻と日付を開発環境で表示する場合は、コード ロケールの短い時刻書式と短い日付書式が使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-533">When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-534">24 時間制を使用するロケールでは、午前/午後を示す記号 (`t` および `tt`) では何も表示されません。</span><span class="sxs-lookup"><span data-stu-id="97203-534">For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.</span></span>  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-535">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-535">Required.</span></span> <span data-ttu-id="97203-536">Expression to be formatted.</span><span class="sxs-lookup"><span data-stu-id="97203-536">Expression to be formatted.</span></span></param>
        <param name="NumDigitsAfterDecimal"><span data-ttu-id="97203-537">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-537">Optional.</span></span> <span data-ttu-id="97203-538">Numeric value indicating how many places are displayed to the right of the decimal.</span><span class="sxs-lookup"><span data-stu-id="97203-538">Numeric value indicating how many places are displayed to the right of the decimal.</span></span> <span data-ttu-id="97203-539">Default value is –1, which indicates that the computer's regional settings are used.</span><span class="sxs-lookup"><span data-stu-id="97203-539">Default value is –1, which indicates that the computer's regional settings are used.</span></span></param>
        <param name="IncludeLeadingDigit"><span data-ttu-id="97203-540">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-540">Optional.</span></span> <span data-ttu-id="97203-541"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values.</span><span class="sxs-lookup"><span data-stu-id="97203-541"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values.</span></span> <span data-ttu-id="97203-542">See "Remarks" for values.</span><span class="sxs-lookup"><span data-stu-id="97203-542">See "Remarks" for values.</span></span></param>
        <param name="UseParensForNegativeNumbers"><span data-ttu-id="97203-543">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-543">Optional.</span></span> <span data-ttu-id="97203-544"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses.</span><span class="sxs-lookup"><span data-stu-id="97203-544"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses.</span></span> <span data-ttu-id="97203-545">See "Remarks" for values.</span><span class="sxs-lookup"><span data-stu-id="97203-545">See "Remarks" for values.</span></span></param>
        <param name="GroupDigits"><span data-ttu-id="97203-546">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-546">Optional.</span></span> <span data-ttu-id="97203-547"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings.</span><span class="sxs-lookup"><span data-stu-id="97203-547"><see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings.</span></span> <span data-ttu-id="97203-548">See "Remarks" for values.</span><span class="sxs-lookup"><span data-stu-id="97203-548">See "Remarks" for values.</span></span></param>
        <summary><span data-ttu-id="97203-549">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span><span class="sxs-lookup"><span data-stu-id="97203-549">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span></span></summary>
        <returns><span data-ttu-id="97203-550">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span><span class="sxs-lookup"><span data-stu-id="97203-550">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-551">1 つまたは複数の省略可能な引数を省略すると、コンピューターの地域設定と一致する値が代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-551">When one or more optional arguments are omitted, the computer's matching regional-settings values are used instead.</span></span>  
  
 <span data-ttu-id="97203-552">通貨値を基準として通貨記号の位置は、システムの地域設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="97203-552">The position of the currency symbol relative to the currency value is determined by the system's regional settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-553">すべての設定情報は、アプリケーションのロケールから取得されます。</span><span class="sxs-lookup"><span data-stu-id="97203-553">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="97203-554">既定では、コントロール パネルで設定されているロケールとなります。</span><span class="sxs-lookup"><span data-stu-id="97203-554">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="97203-555">ただし、これによって変化する可能性プログラムから由来ゼロ以外、.NET Framework を使用して、`Number`タブです。</span><span class="sxs-lookup"><span data-stu-id="97203-555">However, it may be changed programmatically by using the .NET Framework, except leading zero, which comes from the `Number` tab.</span></span>  
  
 <span data-ttu-id="97203-556">`IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数が小数点の左側の次の列挙値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97203-556">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments take the following TriState enumeration values.</span></span>  
  
|<span data-ttu-id="97203-557">[値]</span><span class="sxs-lookup"><span data-stu-id="97203-557">Value</span></span>|<span data-ttu-id="97203-558">説明</span><span class="sxs-lookup"><span data-stu-id="97203-558">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="97203-559">True</span><span class="sxs-lookup"><span data-stu-id="97203-559">True</span></span>|  
|`TriState.False`|<span data-ttu-id="97203-560">False</span><span class="sxs-lookup"><span data-stu-id="97203-560">False</span></span>|  
|`TriState.UseDefault`|<span data-ttu-id="97203-561">コンピューターの地域の設定</span><span class="sxs-lookup"><span data-stu-id="97203-561">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="97203-562">`FormatCurrency` 関数の使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-562">The following example illustrates the use of the `FormatCurrency` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97203-563">Number of digits after decimal point is greater than 99.</span><span class="sxs-lookup"><span data-stu-id="97203-563">Number of digits after decimal point is greater than 99.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="97203-564">Type is not numeric.</span><span class="sxs-lookup"><span data-stu-id="97203-564">Type is not numeric.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-565">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-565">Required.</span></span> <span data-ttu-id="97203-566"><see langword="Date" /> expression to be formatted.</span><span class="sxs-lookup"><span data-stu-id="97203-566"><see langword="Date" /> expression to be formatted.</span></span></param>
        <param name="NamedFormat"><span data-ttu-id="97203-567">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-567">Optional.</span></span> <span data-ttu-id="97203-568">Numeric value that indicates the date/time format used.</span><span class="sxs-lookup"><span data-stu-id="97203-568">Numeric value that indicates the date/time format used.</span></span> <span data-ttu-id="97203-569">If omitted, <see langword="DateFormat.GeneralDate" /> is used.</span><span class="sxs-lookup"><span data-stu-id="97203-569">If omitted, <see langword="DateFormat.GeneralDate" /> is used.</span></span></param>
        <summary><span data-ttu-id="97203-570">Returns a string expression representing a date/time value.</span><span class="sxs-lookup"><span data-stu-id="97203-570">Returns a string expression representing a date/time value.</span></span></summary>
        <returns><span data-ttu-id="97203-571">Returns a string expression representing a date/time value.</span><span class="sxs-lookup"><span data-stu-id="97203-571">Returns a string expression representing a date/time value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-572">`Date`データ型には常に日付と時刻の両方の情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="97203-572">The `Date` data type always contains both date and time information.</span></span> <span data-ttu-id="97203-573">型変換のために、Visual Basic と 1/1/1 (1 月 1 日 1 年) を基準値の日、00時 00分: 00 (午前 0 時) に中立的な値であること。</span><span class="sxs-lookup"><span data-stu-id="97203-573">For purposes of type conversion, Visual Basic considers 1/1/1 (January 1 of the year 1) to be a neutral value for the date, and 00:00:00 (midnight) to be a neutral value for the time.</span></span> <span data-ttu-id="97203-574">書式を設定する場合、`Date`日付/時刻の文字列として値`FormatDateTime`結果の文字列に中立的な値は含まれません。</span><span class="sxs-lookup"><span data-stu-id="97203-574">If you format a `Date` value as a date/time string, `FormatDateTime` does not include neutral values in the resulting string.</span></span> <span data-ttu-id="97203-575">#1/1/0001 を変換する場合など、9時 30分: 00 # 結果の文字列を「9時 30分: 00」です。日付情報は表示されません。</span><span class="sxs-lookup"><span data-stu-id="97203-575">For example, if you convert #1/1/0001 9:30:00# to a string, the result is "9:30:00 AM"; the date information is suppressed.</span></span> <span data-ttu-id="97203-576">ただし、日付情報は、元にまだ存在している`Date`値し、などの関数で回復できる`DatePart`です。</span><span class="sxs-lookup"><span data-stu-id="97203-576">However, the date information is still present in the original `Date` value and can be recovered with functions such as `DatePart`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-577">渡す場合、`Expression`引数として、`String`リテラル、`FormatDateTime`に従って解釈される、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>アプリケーションの設定。</span><span class="sxs-lookup"><span data-stu-id="97203-577">If you pass the `Expression` argument as a `String` literal, `FormatDateTime` interprets it according to the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> setting of your application.</span></span> <span data-ttu-id="97203-578">ただし、として渡した場合、`Date`リテラル、形式 #mm/dd/yyyy # ため`FormatDateTime`常に、解釈、`Date`英語 (米国) カルチャに従ってリテラルです。</span><span class="sxs-lookup"><span data-stu-id="97203-578">However, if you pass it as a `Date` literal, use the format #mm/dd/yyyy#, because `FormatDateTime` always interprets a `Date` literal according to the English (US) culture.</span></span> <span data-ttu-id="97203-579">これは、必要なため、アプリケーションを開発しを使用してコード化された場合`Date`から 1 つのリテラルは、カルチャが、別のカルチャのプラットフォームで実行されます、`Date`リテラルが正しく解析するされない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97203-579">This is necessary because, if an application is developed and coded using `Date` literals from one culture, but is then executed on a platform with a different culture, the `Date` literals could be parsed incorrectly.</span></span>  
  
 <span data-ttu-id="97203-580">`NamedFormat`引数は、次の設定。</span><span class="sxs-lookup"><span data-stu-id="97203-580">The `NamedFormat` argument has the following settings.</span></span>  
  
|<span data-ttu-id="97203-581">定数</span><span class="sxs-lookup"><span data-stu-id="97203-581">Constant</span></span>|<span data-ttu-id="97203-582">説明</span><span class="sxs-lookup"><span data-stu-id="97203-582">Description</span></span>|  
|-|-|  
|`DateFormat.GeneralDate`|<span data-ttu-id="97203-583">日付/時刻を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-583">Display a date and/or time.</span></span> <span data-ttu-id="97203-584">短い形式の日付として、日付部分を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-584">Display a date part as a short date.</span></span> <span data-ttu-id="97203-585">時刻部分がある場合は、長い時間として表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-585">If there is a time part, display it as a long time.</span></span> <span data-ttu-id="97203-586">存在する場合、両方のパーツを表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-586">If present, both parts display.</span></span>|  
|`DateFormat.LongDate`|<span data-ttu-id="97203-587">コンピューターの地域設定で指定された長い日付形式を使用して日付を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-587">Display a date using the long date format specified in your computer's regional settings.</span></span>|  
|`DateFormat.ShortDate`|<span data-ttu-id="97203-588">コンピューターの地域設定で指定された短い日付形式を使用して日付を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-588">Display a date using the short date format specified in your computer's regional settings.</span></span>|  
|`DateFormat.LongTime`|<span data-ttu-id="97203-589">コンピューターの地域設定で指定された時刻の形式を使用して時刻を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-589">Display a time using the time format specified in your computer's regional settings.</span></span>|  
|`DateFormat.ShortTime`|<span data-ttu-id="97203-590">24 時間形式 (hh:mm) を使用して時刻を表示します。</span><span class="sxs-lookup"><span data-stu-id="97203-590">Display a time using the 24-hour format (hh:mm).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="97203-591">この例での使用、`FormatDateTime`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-591">This example demonstrates the use of the `FormatDateTime` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-592"><paramref name="NamedFormat" /> setting is not valid.</span><span class="sxs-lookup"><span data-stu-id="97203-592"><paramref name="NamedFormat" /> setting is not valid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-593">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-593">Required.</span></span> <span data-ttu-id="97203-594">Expression to be formatted.</span><span class="sxs-lookup"><span data-stu-id="97203-594">Expression to be formatted.</span></span></param>
        <param name="NumDigitsAfterDecimal"><span data-ttu-id="97203-595">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-595">Optional.</span></span> <span data-ttu-id="97203-596">Numeric value indicating how many places are displayed to the right of the decimal.</span><span class="sxs-lookup"><span data-stu-id="97203-596">Numeric value indicating how many places are displayed to the right of the decimal.</span></span> <span data-ttu-id="97203-597">The default value is –1, which indicates that the computer's regional settings are used.</span><span class="sxs-lookup"><span data-stu-id="97203-597">The default value is –1, which indicates that the computer's regional settings are used.</span></span></param>
        <param name="IncludeLeadingDigit"><span data-ttu-id="97203-598">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-598">Optional.</span></span> <span data-ttu-id="97203-599"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values.</span><span class="sxs-lookup"><span data-stu-id="97203-599"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values.</span></span> <span data-ttu-id="97203-600">See "Settings" for values.</span><span class="sxs-lookup"><span data-stu-id="97203-600">See "Settings" for values.</span></span></param>
        <param name="UseParensForNegativeNumbers"><span data-ttu-id="97203-601">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-601">Optional.</span></span> <span data-ttu-id="97203-602"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses.</span><span class="sxs-lookup"><span data-stu-id="97203-602"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses.</span></span> <span data-ttu-id="97203-603">See "Settings" for values.</span><span class="sxs-lookup"><span data-stu-id="97203-603">See "Settings" for values.</span></span></param>
        <param name="GroupDigits"><span data-ttu-id="97203-604">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-604">Optional.</span></span> <span data-ttu-id="97203-605"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span><span class="sxs-lookup"><span data-stu-id="97203-605"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span></span> <span data-ttu-id="97203-606">See "Settings" for values.</span><span class="sxs-lookup"><span data-stu-id="97203-606">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="97203-607">Returns an expression formatted as a number.</span><span class="sxs-lookup"><span data-stu-id="97203-607">Returns an expression formatted as a number.</span></span></summary>
        <returns><span data-ttu-id="97203-608">Returns an expression formatted as a number.</span><span class="sxs-lookup"><span data-stu-id="97203-608">Returns an expression formatted as a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-609">1 つまたは複数の省略可能な引数を省略すると、省略された引数の値は、ロケール設定によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="97203-609">When one or more optional arguments are omitted the values for omitted arguments are provided by the locale settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-610">すべての設定情報は、アプリケーションのロケールから取得されます。</span><span class="sxs-lookup"><span data-stu-id="97203-610">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="97203-611">既定では、コントロール パネルで設定されているロケールとなります。</span><span class="sxs-lookup"><span data-stu-id="97203-611">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="97203-612">ただし、その可能性があります変更プログラムで .NET Framework を使用しています。</span><span class="sxs-lookup"><span data-stu-id="97203-612">However, it may be changed programmatically by using the .NET Framework.</span></span>  
  
 <span data-ttu-id="97203-613">`IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数がある、次の設定。</span><span class="sxs-lookup"><span data-stu-id="97203-613">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.</span></span>  
  
|<span data-ttu-id="97203-614">定数</span><span class="sxs-lookup"><span data-stu-id="97203-614">Constant</span></span>|<span data-ttu-id="97203-615">説明</span><span class="sxs-lookup"><span data-stu-id="97203-615">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="97203-616">True</span><span class="sxs-lookup"><span data-stu-id="97203-616">True</span></span>|  
|`TriState.False`|<span data-ttu-id="97203-617">False</span><span class="sxs-lookup"><span data-stu-id="97203-617">False</span></span>|  
|`TriState.UseDefault`|<span data-ttu-id="97203-618">コンピューターの地域の設定</span><span class="sxs-lookup"><span data-stu-id="97203-618">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="97203-619">この例で、`FormatNumber`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-619">This example demonstrates the `FormatNumber` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="97203-620">Type is not numeric.</span><span class="sxs-lookup"><span data-stu-id="97203-620">Type is not numeric.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-621">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-621">Required.</span></span> <span data-ttu-id="97203-622">Expression to be formatted.</span><span class="sxs-lookup"><span data-stu-id="97203-622">Expression to be formatted.</span></span></param>
        <param name="NumDigitsAfterDecimal"><span data-ttu-id="97203-623">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-623">Optional.</span></span> <span data-ttu-id="97203-624">Numeric value indicating how many places to the right of the decimal are displayed.</span><span class="sxs-lookup"><span data-stu-id="97203-624">Numeric value indicating how many places to the right of the decimal are displayed.</span></span> <span data-ttu-id="97203-625">Default value is –1, which indicates that the locale settings are used.</span><span class="sxs-lookup"><span data-stu-id="97203-625">Default value is –1, which indicates that the locale settings are used.</span></span></param>
        <param name="IncludeLeadingDigit"><span data-ttu-id="97203-626">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-626">Optional.</span></span> <span data-ttu-id="97203-627"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values.</span><span class="sxs-lookup"><span data-stu-id="97203-627"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values.</span></span> <span data-ttu-id="97203-628">See "Settings" for values.</span><span class="sxs-lookup"><span data-stu-id="97203-628">See "Settings" for values.</span></span></param>
        <param name="UseParensForNegativeNumbers"><span data-ttu-id="97203-629">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-629">Optional.</span></span> <span data-ttu-id="97203-630"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses.</span><span class="sxs-lookup"><span data-stu-id="97203-630"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses.</span></span> <span data-ttu-id="97203-631">See "Settings" for values.</span><span class="sxs-lookup"><span data-stu-id="97203-631">See "Settings" for values.</span></span></param>
        <param name="GroupDigits"><span data-ttu-id="97203-632">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-632">Optional.</span></span> <span data-ttu-id="97203-633"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span><span class="sxs-lookup"><span data-stu-id="97203-633"><see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span></span> <span data-ttu-id="97203-634">See "Settings" for values.</span><span class="sxs-lookup"><span data-stu-id="97203-634">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="97203-635">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span><span class="sxs-lookup"><span data-stu-id="97203-635">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span></span></summary>
        <returns><span data-ttu-id="97203-636">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span><span class="sxs-lookup"><span data-stu-id="97203-636">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-637">1 つまたは複数の省略可能な引数を省略すると、省略された引数の値は、ロケール設定によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="97203-637">When one or more optional arguments are omitted, the values for omitted arguments are provided by the locale settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-638">すべての設定情報は、アプリケーションのロケールから取得されます。</span><span class="sxs-lookup"><span data-stu-id="97203-638">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="97203-639">既定では、コントロール パネルで設定されているロケールとなります。</span><span class="sxs-lookup"><span data-stu-id="97203-639">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="97203-640">ただし、その可能性があります変更プログラムで .NET Framework を使用しています。</span><span class="sxs-lookup"><span data-stu-id="97203-640">However, it may be changed programmatically by using the .NET Framework.</span></span>  
  
 <span data-ttu-id="97203-641">`IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数がある、次の設定。</span><span class="sxs-lookup"><span data-stu-id="97203-641">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.</span></span>  
  
|<span data-ttu-id="97203-642">定数</span><span class="sxs-lookup"><span data-stu-id="97203-642">Constant</span></span>|<span data-ttu-id="97203-643">説明</span><span class="sxs-lookup"><span data-stu-id="97203-643">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="97203-644">True</span><span class="sxs-lookup"><span data-stu-id="97203-644">True</span></span>|  
|`TriState.False`|<span data-ttu-id="97203-645">False</span><span class="sxs-lookup"><span data-stu-id="97203-645">False</span></span>|  
|`TriState.Default`|<span data-ttu-id="97203-646">コンピューターの地域の設定</span><span class="sxs-lookup"><span data-stu-id="97203-646">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="97203-647">この例での使用、`FormatPercent`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-647">This example illustrates the use of the `FormatPercent` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="97203-648">Type is not numeric.</span><span class="sxs-lookup"><span data-stu-id="97203-648">Type is not numeric.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="97203-649">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-649">Required.</span></span> <span data-ttu-id="97203-650">Any valid <see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-650">Any valid <see langword="String" /> expression.</span></span></param>
        <param name="Index"><span data-ttu-id="97203-651">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-651">Required.</span></span> <span data-ttu-id="97203-652"><see langword="Integer" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-652"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="97203-653">The (1-based) index of the character in <c>str</c> to be returned.</span><span class="sxs-lookup"><span data-stu-id="97203-653">The (1-based) index of the character in <c>str</c> to be returned.</span></span></param>
        <summary><span data-ttu-id="97203-654">Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</span><span class="sxs-lookup"><span data-stu-id="97203-654">Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</span></span></summary>
        <returns>
          <span data-ttu-id="97203-655"><see langword="Char" /> value representing the character from the specified index in the supplied string.</span><span class="sxs-lookup"><span data-stu-id="97203-655"><see langword="Char" /> value representing the character from the specified index in the supplied string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-656">場合`Index`が 1 より小さいか、または最後の文字のインデックスより大きくなって`str`、`ArgumentException`がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-656">If `Index` is less than 1 or greater than the index of the last character in `str`, an `ArgumentException` is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-657">この例を使用する方法を示しています、`GetChar`で指定したインデックスから文字を取得する関数、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-657">This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.</span></span>  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-658"><paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</span><span class="sxs-lookup"><span data-stu-id="97203-658"><paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97203-659">Returns an integer specifying the start position of the first occurrence of one string within another.</span><span class="sxs-lookup"><span data-stu-id="97203-659">Returns an integer specifying the start position of the first occurrence of one string within another.</span></span>  <span data-ttu-id="97203-660">The integer is a one-based index if a match is found.</span><span class="sxs-lookup"><span data-stu-id="97203-660">The integer is a one-based index if a match is found.</span></span>  <span data-ttu-id="97203-661">If no match is found, the function returns zero.</span><span class="sxs-lookup"><span data-stu-id="97203-661">If no match is found, the function returns zero.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1"><span data-ttu-id="97203-662">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-662">Required.</span></span> <span data-ttu-id="97203-663"><see langword="String" /> expression being searched.</span><span class="sxs-lookup"><span data-stu-id="97203-663"><see langword="String" /> expression being searched.</span></span></param>
        <param name="String2"><span data-ttu-id="97203-664">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-664">Required.</span></span> <span data-ttu-id="97203-665"><see langword="String" /> expression sought.</span><span class="sxs-lookup"><span data-stu-id="97203-665"><see langword="String" /> expression sought.</span></span></param>
        <param name="Compare"><span data-ttu-id="97203-666">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-666">Optional.</span></span> <span data-ttu-id="97203-667">Specifies the type of string comparison.</span><span class="sxs-lookup"><span data-stu-id="97203-667">Specifies the type of string comparison.</span></span> <span data-ttu-id="97203-668">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span><span class="sxs-lookup"><span data-stu-id="97203-668">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span></span></param>
        <summary><span data-ttu-id="97203-669">Returns an integer specifying the start position of the first occurrence of one string within another.</span><span class="sxs-lookup"><span data-stu-id="97203-669">Returns an integer specifying the start position of the first occurrence of one string within another.</span></span></summary>
        <returns>
          <list type="table">
            <item>
              <term> <span data-ttu-id="97203-670">If</span><span class="sxs-lookup"><span data-stu-id="97203-670">If</span></span>  
  
 </term>
              <description> <span data-ttu-id="97203-671">戻り値</span><span class="sxs-lookup"><span data-stu-id="97203-671">InStr returns</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-672"><paramref name="String1" /> 長さが 0 または <see langword="Nothing" /></span><span class="sxs-lookup"><span data-stu-id="97203-672"><paramref name="String1" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description> <span data-ttu-id="97203-673">0</span><span class="sxs-lookup"><span data-stu-id="97203-673">0</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-674"><paramref name="String2" /> 長さが 0 または <see langword="Nothing" /></span><span class="sxs-lookup"><span data-stu-id="97203-674"><paramref name="String2" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description> <span data-ttu-id="97203-675">既定値は最初の文字位置、検索の開始位置。</span><span class="sxs-lookup"><span data-stu-id="97203-675">The starting position for the search, which defaults to the first character position.</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-676"><paramref name="String2" /> 見つかりません。</span><span class="sxs-lookup"><span data-stu-id="97203-676"><paramref name="String2" /> is not found</span></span>  
  
 </term>
              <description> <span data-ttu-id="97203-677">0</span><span class="sxs-lookup"><span data-stu-id="97203-677">0</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-678"><paramref name="String2" /> 内で見つかった <paramref name="String1" /></span><span class="sxs-lookup"><span data-stu-id="97203-678"><paramref name="String2" /> is found within <paramref name="String1" /></span></span></term>
              <description> <span data-ttu-id="97203-679">一致の開始位置</span><span class="sxs-lookup"><span data-stu-id="97203-679">Position where match begins</span></span>  
  
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-680">通常、`InStr`文字列を解析するときに関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="97203-680">Typically, the `InStr` function is used when parsing strings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-681">`InStrB`以前のバージョンの Visual Basic での関数が文字の位置ではなくバイト単位の数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-681">The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position.</span></span> <span data-ttu-id="97203-682">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-682">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-683">Visual Basic 2005 のすべての文字列は Unicode では、および`InStrB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-683">All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.</span></span>  
  
 <span data-ttu-id="97203-684">`Compare` 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="97203-684">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="97203-685">定数</span><span class="sxs-lookup"><span data-stu-id="97203-685">Constant</span></span>|<span data-ttu-id="97203-686">[値]</span><span class="sxs-lookup"><span data-stu-id="97203-686">Value</span></span>|<span data-ttu-id="97203-687">説明</span><span class="sxs-lookup"><span data-stu-id="97203-687">Description</span></span>|  
|-|-|-|  
|`Binary`|<span data-ttu-id="97203-688">0</span><span class="sxs-lookup"><span data-stu-id="97203-688">0</span></span>|<span data-ttu-id="97203-689">バイナリ比較を実行します</span><span class="sxs-lookup"><span data-stu-id="97203-689">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="97203-690">1</span><span class="sxs-lookup"><span data-stu-id="97203-690">1</span></span>|<span data-ttu-id="97203-691">テキストの比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="97203-691">Performs a text comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="97203-692">`InStr` 関数を使って、ある文字列の中から指定された文字列を検索し、最初に見つかった文字位置を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-692">This example uses the `InStr` function to return the position of the first occurrence of one string within another.</span></span>  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start"><span data-ttu-id="97203-693">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-693">Optional.</span></span> <span data-ttu-id="97203-694">Numeric expression that sets the starting position for each search.</span><span class="sxs-lookup"><span data-stu-id="97203-694">Numeric expression that sets the starting position for each search.</span></span> <span data-ttu-id="97203-695">If omitted, search begins at the first character position.</span><span class="sxs-lookup"><span data-stu-id="97203-695">If omitted, search begins at the first character position.</span></span> <span data-ttu-id="97203-696">The start index is 1-based.</span><span class="sxs-lookup"><span data-stu-id="97203-696">The start index is 1-based.</span></span></param>
        <param name="String1"><span data-ttu-id="97203-697">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-697">Required.</span></span> <span data-ttu-id="97203-698"><see langword="String" /> expression being searched.</span><span class="sxs-lookup"><span data-stu-id="97203-698"><see langword="String" /> expression being searched.</span></span></param>
        <param name="String2"><span data-ttu-id="97203-699">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-699">Required.</span></span> <span data-ttu-id="97203-700"><see langword="String" /> expression sought.</span><span class="sxs-lookup"><span data-stu-id="97203-700"><see langword="String" /> expression sought.</span></span></param>
        <param name="Compare"><span data-ttu-id="97203-701">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-701">Optional.</span></span> <span data-ttu-id="97203-702">Specifies the type of string comparison.</span><span class="sxs-lookup"><span data-stu-id="97203-702">Specifies the type of string comparison.</span></span> <span data-ttu-id="97203-703">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span><span class="sxs-lookup"><span data-stu-id="97203-703">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span></span></param>
        <summary><span data-ttu-id="97203-704">Returns an integer specifying the start position of the first occurrence of one string within another.</span><span class="sxs-lookup"><span data-stu-id="97203-704">Returns an integer specifying the start position of the first occurrence of one string within another.</span></span></summary>
        <returns>
          <list type="table">
            <item>
              <term> <span data-ttu-id="97203-705">If</span><span class="sxs-lookup"><span data-stu-id="97203-705">If</span></span>  
  
 </term>
              <description> <span data-ttu-id="97203-706">戻り値</span><span class="sxs-lookup"><span data-stu-id="97203-706">InStr returns</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-707"><paramref name="String1" /> 長さが 0 または <see langword="Nothing" /></span><span class="sxs-lookup"><span data-stu-id="97203-707"><paramref name="String1" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description> <span data-ttu-id="97203-708">0</span><span class="sxs-lookup"><span data-stu-id="97203-708">0</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-709"><paramref name="String2" /> 長さが 0 または <see langword="Nothing" /></span><span class="sxs-lookup"><span data-stu-id="97203-709"><paramref name="String2" /> is zero length or <see langword="Nothing" /></span></span></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-710"><paramref name="String2" /> 見つかりません。</span><span class="sxs-lookup"><span data-stu-id="97203-710"><paramref name="String2" /> is not found</span></span>  
  
 </term>
              <description> <span data-ttu-id="97203-711">0</span><span class="sxs-lookup"><span data-stu-id="97203-711">0</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-712"><paramref name="String2" /> 内で見つかった <paramref name="String1" /></span><span class="sxs-lookup"><span data-stu-id="97203-712"><paramref name="String2" /> is found within <paramref name="String1" /></span></span></term>
              <description> <span data-ttu-id="97203-713">一致の開始位置</span><span class="sxs-lookup"><span data-stu-id="97203-713">Position where match begins</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-714"><paramref name="Start" /> &gt; 長さ <paramref name="String1" /></span><span class="sxs-lookup"><span data-stu-id="97203-714"><paramref name="Start" /> &gt; length of <paramref name="String1" /></span></span></term>
              <description> <span data-ttu-id="97203-715">0</span><span class="sxs-lookup"><span data-stu-id="97203-715">0</span></span>  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-716">通常、`InStr`文字列を解析するときに関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="97203-716">Typically, the `InStr` function is used when parsing strings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-717">`InStrB`以前のバージョンの Visual Basic での関数が文字の位置ではなくバイト単位の数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-717">The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position.</span></span> <span data-ttu-id="97203-718">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-718">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-719">Visual Basic 2005 のすべての文字列は Unicode では、および`InStrB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-719">All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.</span></span>  
  
 <span data-ttu-id="97203-720">`Compare` 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="97203-720">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="97203-721">定数</span><span class="sxs-lookup"><span data-stu-id="97203-721">Constant</span></span>|<span data-ttu-id="97203-722">[値]</span><span class="sxs-lookup"><span data-stu-id="97203-722">Value</span></span>|<span data-ttu-id="97203-723">説明</span><span class="sxs-lookup"><span data-stu-id="97203-723">Description</span></span>|  
|-|-|-|  
|`Binary`|<span data-ttu-id="97203-724">0</span><span class="sxs-lookup"><span data-stu-id="97203-724">0</span></span>|<span data-ttu-id="97203-725">バイナリ比較を実行します</span><span class="sxs-lookup"><span data-stu-id="97203-725">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="97203-726">1</span><span class="sxs-lookup"><span data-stu-id="97203-726">1</span></span>|<span data-ttu-id="97203-727">テキストの比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="97203-727">Performs a text comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="97203-728">`InStr` 関数を使って、ある文字列の中から指定された文字列を検索し、最初に見つかった文字位置を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-728">This example uses the `InStr` function to return the position of the first occurrence of one string within another.</span></span>  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-729"><paramref name="Start" /> &lt; 1.</span><span class="sxs-lookup"><span data-stu-id="97203-729"><paramref name="Start" /> &lt; 1.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck"><span data-ttu-id="97203-730">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-730">Required.</span></span> <span data-ttu-id="97203-731">String expression being searched.</span><span class="sxs-lookup"><span data-stu-id="97203-731">String expression being searched.</span></span></param>
        <param name="StringMatch"><span data-ttu-id="97203-732">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-732">Required.</span></span> <span data-ttu-id="97203-733">String expression being searched for.</span><span class="sxs-lookup"><span data-stu-id="97203-733">String expression being searched for.</span></span></param>
        <param name="Start"><span data-ttu-id="97203-734">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-734">Optional.</span></span> <span data-ttu-id="97203-735">Numeric expression setting the one-based starting position for each search, starting from the left side of the string.</span><span class="sxs-lookup"><span data-stu-id="97203-735">Numeric expression setting the one-based starting position for each search, starting from the left side of the string.</span></span> <span data-ttu-id="97203-736">If <c>Start</c> is omitted then –1 is used, meaning the search begins at the last character position.</span><span class="sxs-lookup"><span data-stu-id="97203-736">If <c>Start</c> is omitted then –1 is used, meaning the search begins at the last character position.</span></span> <span data-ttu-id="97203-737">Search then proceeds from right to left.</span><span class="sxs-lookup"><span data-stu-id="97203-737">Search then proceeds from right to left.</span></span></param>
        <param name="Compare"><span data-ttu-id="97203-738">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-738">Optional.</span></span> <span data-ttu-id="97203-739">Numeric value indicating the kind of comparison to use when evaluating substrings.</span><span class="sxs-lookup"><span data-stu-id="97203-739">Numeric value indicating the kind of comparison to use when evaluating substrings.</span></span> <span data-ttu-id="97203-740">If omitted, a binary comparison is performed.</span><span class="sxs-lookup"><span data-stu-id="97203-740">If omitted, a binary comparison is performed.</span></span> <span data-ttu-id="97203-741">See Settings for values.</span><span class="sxs-lookup"><span data-stu-id="97203-741">See Settings for values.</span></span></param>
        <summary><span data-ttu-id="97203-742">Returns the position of the first occurrence of one string within another, starting from the right side of the string.</span><span class="sxs-lookup"><span data-stu-id="97203-742">Returns the position of the first occurrence of one string within another, starting from the right side of the string.</span></span></summary>
        <returns>
          <list type="table">
            <item>
              <term> <span data-ttu-id="97203-743">If</span><span class="sxs-lookup"><span data-stu-id="97203-743">If</span></span>  
  
 </term>
              <description> <span data-ttu-id="97203-744">戻り値します。</span><span class="sxs-lookup"><span data-stu-id="97203-744">InStrRev returns</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-745"><paramref name="StringCheck" /> 長さゼロです。</span><span class="sxs-lookup"><span data-stu-id="97203-745"><paramref name="StringCheck" /> is zero-length</span></span>  
  
 </term>
              <description> <span data-ttu-id="97203-746">0</span><span class="sxs-lookup"><span data-stu-id="97203-746">0</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-747"><paramref name="StringMatch" /> 長さゼロです。</span><span class="sxs-lookup"><span data-stu-id="97203-747"><paramref name="StringMatch" /> is zero-length</span></span>  
  
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-748"><paramref name="StringMatch" /> 見つかりません。</span><span class="sxs-lookup"><span data-stu-id="97203-748"><paramref name="StringMatch" /> is not found</span></span>  
  
 </term>
              <description> <span data-ttu-id="97203-749">0</span><span class="sxs-lookup"><span data-stu-id="97203-749">0</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-750"><paramref name="StringMatch" /> 内で見つかった <paramref name="StringCheck" /></span><span class="sxs-lookup"><span data-stu-id="97203-750"><paramref name="StringMatch" /> is found within <paramref name="StringCheck" /></span></span></term>
              <description> <span data-ttu-id="97203-751">最初の一致が見つかった文字列の右側から始まる位置。</span><span class="sxs-lookup"><span data-stu-id="97203-751">Position at which the first match is found, starting with the right side of the string.</span></span>  
  
 </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="97203-752"><paramref name="Start" /> 長さより大きい <paramref name="StringMatch" /></span><span class="sxs-lookup"><span data-stu-id="97203-752"><paramref name="Start" /> is greater than length of <paramref name="StringMatch" /></span></span></term>
              <description> <span data-ttu-id="97203-753">0</span><span class="sxs-lookup"><span data-stu-id="97203-753">0</span></span>  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-754">なおの構文、`InStrRev`関数の構文と同じではありません、`InStr`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-754">Note that the syntax for the `InStrRev` function is not the same as the syntax for the `InStr` function.</span></span>  
  
 <span data-ttu-id="97203-755">`Compare`引数は、次の値を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="97203-755">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="97203-756">定数</span><span class="sxs-lookup"><span data-stu-id="97203-756">Constant</span></span>|<span data-ttu-id="97203-757">説明</span><span class="sxs-lookup"><span data-stu-id="97203-757">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="97203-758">バイナリ比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="97203-758">Performs a binary comparison.</span></span>|  
|`Text`|<span data-ttu-id="97203-759">テキストの比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="97203-759">Performs a textual comparison.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="97203-760">この例での使用、`InStrRev`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-760">This example demonstrates the use of the `InStrRev` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-761"><paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</span><span class="sxs-lookup"><span data-stu-id="97203-761"><paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97203-762">Returns a string created by joining a number of substrings contained in an array.</span><span class="sxs-lookup"><span data-stu-id="97203-762">Returns a string created by joining a number of substrings contained in an array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray"><span data-ttu-id="97203-763">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-763">Required.</span></span> <span data-ttu-id="97203-764">One-dimensional array containing substrings to be joined.</span><span class="sxs-lookup"><span data-stu-id="97203-764">One-dimensional array containing substrings to be joined.</span></span></param>
        <param name="Delimiter"><span data-ttu-id="97203-765">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-765">Optional.</span></span> <span data-ttu-id="97203-766">Any string, used to separate the substrings in the returned string.</span><span class="sxs-lookup"><span data-stu-id="97203-766">Any string, used to separate the substrings in the returned string.</span></span> <span data-ttu-id="97203-767">If omitted, the space character (" ") is used.</span><span class="sxs-lookup"><span data-stu-id="97203-767">If omitted, the space character (" ") is used.</span></span> <span data-ttu-id="97203-768">If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span><span class="sxs-lookup"><span data-stu-id="97203-768">If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span></span></param>
        <summary><span data-ttu-id="97203-769">Returns a string created by joining a number of substrings contained in an array.</span><span class="sxs-lookup"><span data-stu-id="97203-769">Returns a string created by joining a number of substrings contained in an array.</span></span></summary>
        <returns><span data-ttu-id="97203-770">Returns a string created by joining a number of substrings contained in an array.</span><span class="sxs-lookup"><span data-stu-id="97203-770">Returns a string created by joining a number of substrings contained in an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-771">間のパリティがある、`Join`と`Split`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-771">There is a parity between the `Join` and `Split` functions.</span></span> <span data-ttu-id="97203-772">`Join`関数は文字列の配列を使用し、区切り文字列を使用して、1 つの文字列を取得するで結合します。</span><span class="sxs-lookup"><span data-stu-id="97203-772">The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string.</span></span> <span data-ttu-id="97203-773">`Split`関数の文字列を受け取り、文字列の配列を返すため、区切り記号で区切ります。</span><span class="sxs-lookup"><span data-stu-id="97203-773">The `Split` function takes a string and separates it at the delimiter, to return an array of strings.</span></span> <span data-ttu-id="97203-774">主な違いが、その`Join`文字列を区切り記号の文字列と連結できる`Split`単一の文字の区切り記号を使用して文字列を区切ることができますのみです。</span><span class="sxs-lookup"><span data-stu-id="97203-774">However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-775">次の例で使用する方法、`Join`いくつかの文字列からリストを作成する関数。</span><span class="sxs-lookup"><span data-stu-id="97203-775">The following example demonstrates how to use the `Join` function to create a list from several strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-776"><paramref name="SourceArray" /> is not one dimensional.</span><span class="sxs-lookup"><span data-stu-id="97203-776"><paramref name="SourceArray" /> is not one dimensional.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray"><span data-ttu-id="97203-777">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-777">Required.</span></span> <span data-ttu-id="97203-778">One-dimensional array containing substrings to be joined.</span><span class="sxs-lookup"><span data-stu-id="97203-778">One-dimensional array containing substrings to be joined.</span></span></param>
        <param name="Delimiter"><span data-ttu-id="97203-779">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-779">Optional.</span></span> <span data-ttu-id="97203-780">Any string, used to separate the substrings in the returned string.</span><span class="sxs-lookup"><span data-stu-id="97203-780">Any string, used to separate the substrings in the returned string.</span></span> <span data-ttu-id="97203-781">If omitted, the space character (" ") is used.</span><span class="sxs-lookup"><span data-stu-id="97203-781">If omitted, the space character (" ") is used.</span></span> <span data-ttu-id="97203-782">If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span><span class="sxs-lookup"><span data-stu-id="97203-782">If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span></span></param>
        <summary><span data-ttu-id="97203-783">Returns a string created by joining a number of substrings contained in an array.</span><span class="sxs-lookup"><span data-stu-id="97203-783">Returns a string created by joining a number of substrings contained in an array.</span></span></summary>
        <returns><span data-ttu-id="97203-784">Returns a string created by joining a number of substrings contained in an array.</span><span class="sxs-lookup"><span data-stu-id="97203-784">Returns a string created by joining a number of substrings contained in an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-785">間のパリティがある、`Join`と`Split`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-785">There is a parity between the `Join` and `Split` functions.</span></span> <span data-ttu-id="97203-786">`Join`関数は文字列の配列を使用し、区切り文字列を使用して、1 つの文字列を取得するで結合します。</span><span class="sxs-lookup"><span data-stu-id="97203-786">The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string.</span></span> <span data-ttu-id="97203-787">`Split`関数の文字列を受け取り、文字列の配列を返すため、区切り記号で区切ります。</span><span class="sxs-lookup"><span data-stu-id="97203-787">The `Split` function takes a string and separates it at the delimiter, to return an array of strings.</span></span> <span data-ttu-id="97203-788">主な違いが、その`Join`文字列を区切り記号の文字列と連結できる`Split`単一の文字の区切り記号を使用して文字列を区切ることができますのみです。</span><span class="sxs-lookup"><span data-stu-id="97203-788">However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-789">次の例で使用する方法、`Join`いくつかの文字列からリストを作成する関数。</span><span class="sxs-lookup"><span data-stu-id="97203-789">The following example demonstrates how to use the `Join` function to create a list from several strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-790"><paramref name="SourceArray" /> is not one dimensional.</span><span class="sxs-lookup"><span data-stu-id="97203-790"><paramref name="SourceArray" /> is not one dimensional.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97203-791">Returns a string or character converted to lowercase.</span><span class="sxs-lookup"><span data-stu-id="97203-791">Returns a string or character converted to lowercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="97203-792">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-792">Required.</span></span> <span data-ttu-id="97203-793">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-793">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="97203-794">Returns a string or character converted to lowercase.</span><span class="sxs-lookup"><span data-stu-id="97203-794">Returns a string or character converted to lowercase.</span></span></summary>
        <returns><span data-ttu-id="97203-795">Returns a string or character converted to lowercase.</span><span class="sxs-lookup"><span data-stu-id="97203-795">Returns a string or character converted to lowercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-796">大文字のみが変換を小文字です。すべての英小文字とアルファベット以外の文字は変更されません。</span><span class="sxs-lookup"><span data-stu-id="97203-796">Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="97203-797">この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="97203-797">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="97203-798">アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。</span><span class="sxs-lookup"><span data-stu-id="97203-798">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="97203-799">詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="97203-799">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-800">この例では、`LCase`関数を文字列の小文字のバージョンを返します。</span><span class="sxs-lookup"><span data-stu-id="97203-800">This example uses the `LCase` function to return a lowercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="97203-801">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-801">Required.</span></span> <span data-ttu-id="97203-802">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-802">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="97203-803">Returns a string or character converted to lowercase.</span><span class="sxs-lookup"><span data-stu-id="97203-803">Returns a string or character converted to lowercase.</span></span></summary>
        <returns><span data-ttu-id="97203-804">Returns a string or character converted to lowercase.</span><span class="sxs-lookup"><span data-stu-id="97203-804">Returns a string or character converted to lowercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-805">大文字のみが変換を小文字です。すべての英小文字とアルファベット以外の文字は変更されません。</span><span class="sxs-lookup"><span data-stu-id="97203-805">Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="97203-806">この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="97203-806">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="97203-807">アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。</span><span class="sxs-lookup"><span data-stu-id="97203-807">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="97203-808">詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="97203-808">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-809">この例では、`LCase`関数を文字列の小文字のバージョンを返します。</span><span class="sxs-lookup"><span data-stu-id="97203-809">This example uses the `LCase` function to return a lowercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="97203-810">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-810">Required.</span></span> <span data-ttu-id="97203-811"><see langword="String" /> expression from which the leftmost characters are returned.</span><span class="sxs-lookup"><span data-stu-id="97203-811"><see langword="String" /> expression from which the leftmost characters are returned.</span></span></param>
        <param name="Length"><span data-ttu-id="97203-812">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-812">Required.</span></span> <span data-ttu-id="97203-813"><see langword="Integer" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-813"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="97203-814">Numeric expression indicating how many characters to return.</span><span class="sxs-lookup"><span data-stu-id="97203-814">Numeric expression indicating how many characters to return.</span></span> <span data-ttu-id="97203-815">If 0, a zero-length string ("") is returned.</span><span class="sxs-lookup"><span data-stu-id="97203-815">If 0, a zero-length string ("") is returned.</span></span> <span data-ttu-id="97203-816">If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</span><span class="sxs-lookup"><span data-stu-id="97203-816">If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</span></span></param>
        <summary><span data-ttu-id="97203-817">Returns a string containing a specified number of characters from the left side of a string.</span><span class="sxs-lookup"><span data-stu-id="97203-817">Returns a string containing a specified number of characters from the left side of a string.</span></span></summary>
        <returns><span data-ttu-id="97203-818">Returns a string containing a specified number of characters from the left side of a string.</span><span class="sxs-lookup"><span data-stu-id="97203-818">Returns a string containing a specified number of characters from the left side of a string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-819">内の文字の数を決定する`str`を使用して、`Len`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-819">To determine the number of characters in `str`, use the `Len` function.</span></span> <span data-ttu-id="97203-820">Windows フォーム アプリケーションの場合、またはを持つ他のクラスで使用する場合、`Left`プロパティを持つ関数が完全修飾する必要があります`Microsoft.VisualBasic.Left`です。</span><span class="sxs-lookup"><span data-stu-id="97203-820">If used in a Windows Forms application, or any other class that has a `Left` property, you must fully qualify the function with `Microsoft.VisualBasic.Left`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-821">`LeftB`以前のバージョンの Visual Basic での関数が文字ではなくバイト単位で文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-821">The `LeftB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="97203-822">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-822">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-823">Unicode では、現在の Visual Basic の文字列をすべてと`LeftB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-823">All current Visual Basic strings are in Unicode, and `LeftB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-824">この例での使用、`Left`の部分文字列を返す関数を指定された`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-824">This example demonstrates the use of the `Left` function to return a substring of a given `String`.</span></span> <span data-ttu-id="97203-825">持つクラスで、`Left`プロパティである可能性がありますを完全に修飾するために必要な`Left`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-825">In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-826"><paramref name="Length" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="97203-826"><paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97203-827">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-827">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-828">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-828">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-829">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-829">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-830">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-830">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-831">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-831">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-832">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-832">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-833">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-833">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-834">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-834">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-835">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-835">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-836">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-836">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-837">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-837">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-838">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-838">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-839">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-839">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-840">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-840">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-841">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-841">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-842">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-842">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-843">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-843">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-844">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-844">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-845">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-845">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-846">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-846">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-847">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-847">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-848">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-848">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-849">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-849">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-850">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-850">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-851">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-851">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-852">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-852">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-853">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-853">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-854">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-854">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-855">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-855">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-856">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-856">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-857">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-857">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-858">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-858">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-859">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-859">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-860">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-860">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-861">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-861">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-862">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-862">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-863">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-863">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-864">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-864">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-865">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-865">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-866">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-866">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-867">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-867">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-868">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-868">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-869">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-869">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-870">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-870">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-871">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-871">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-872">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-872">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-873">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-873">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-874">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-874">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-875">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-875">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-876">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-876">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-877">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-877">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-878">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-878">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-879">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-879">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-880">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-880">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-881">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-881">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-882">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-882">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-883">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-883">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-884">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-884">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-885">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-885">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-886">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-886">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-887">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-887">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-888">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-888">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-889">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-889">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-890">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-890">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-891">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-891">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-892">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-892">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-893">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-893">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-894">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-894">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-895">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-895">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-896">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-896">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-897">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-897">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-898">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-898">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-899">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-899">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-900">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-900">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-901">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-901">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-902">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-902">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-903">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-903">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-904">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-904">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-905">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-905">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-906">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-906">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-907">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-907">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-908">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-908">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-909">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-909">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-910">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-910">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-911">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-911">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-912">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-912">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-913">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-913">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-914">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-914">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-915">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-915">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-916">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-916">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-917">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-917">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-918">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-918">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-919">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-919">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-920">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-920">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-921">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-921">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-922">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-922">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-923">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-923">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-924">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-924">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-925">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-925">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-926">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-926">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-927">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-927">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-928">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-928">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-929">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-929">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-930">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-930">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-931">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-931">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-932">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-932">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-933">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-933">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-934">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-934">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-935">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-935">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-936">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-936">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-937">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-937">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-938">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-938">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-939">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-939">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-940">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-940">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-941">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-941">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-942">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-942">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-943">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-943">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-944">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-944">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-945">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-945">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-946">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-946">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-947">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-947">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-948">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-948">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-949">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-949">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-950">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-950">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-951">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-951">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-952">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-952">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-953">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-953">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-954">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-954">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-955">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-955">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-956">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-956">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-957">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-957">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-958">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-958">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-959">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-959">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-960">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-960">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-961">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-961">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-962">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-962">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-963">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-963">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-964">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-964">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-965">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-965">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-966">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-966">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-967">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-967">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-968">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-968">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-969">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-969">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-970">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-970">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-971">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-971">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-972">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-972">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-973">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-973">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-974">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-974">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-975">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-975">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-976">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-976">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-977">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-977">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-978">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-978">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-979">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-979">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-980">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-980">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-981">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-981">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-982">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-982">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-983">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-983">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-984">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-984">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-985">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-985">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-986">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-986">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-987">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-987">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-988">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-988">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-989">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-989">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-990">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-990">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-991">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-991">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-992">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-992">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-993">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-993">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-994">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-994">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-995">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-995">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-996">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-996">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-997">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-997">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-998">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-998">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-999">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-999">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-1000">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-1000">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-1001">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1001">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-1002">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1002">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1003">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1003">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-1004">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1004">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-1005">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1005">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-1006">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-1006">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-1007">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-1007">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1008">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-1008">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1009">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1009">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-1010">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1010">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-1011">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-1011">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-1012">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-1012">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-1013">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-1013">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-1014">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-1014">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-1015">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1015">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-1016">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-1016">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1017">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-1017">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-1018">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-1018">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-1019">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-1019">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-1020">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1020">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-1021">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1021">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1022">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1022">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-1023">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1023">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-1024">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1024">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-1025">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-1025">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-1026">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-1026">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1027">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-1027">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1028">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1028">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-1029">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1029">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-1030">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-1030">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-1031">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-1031">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-1032">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-1032">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-1033">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-1033">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-1034">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1034">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-1035">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-1035">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1036">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-1036">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-1037">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-1037">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-1038">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-1038">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-1039">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1039">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-1040">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1040">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1041">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1041">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-1042">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1042">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-1043">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1043">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-1044">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-1044">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-1045">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-1045">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1046">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-1046">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1047">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1047">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-1048">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1048">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-1049">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-1049">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-1050">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-1050">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-1051">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-1051">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-1052">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-1052">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-1053">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1053">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-1054">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-1054">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1055">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-1055">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-1056">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-1056">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-1057">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-1057">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-1058">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1058">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-1059">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1059">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1060">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1060">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-1061">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1061">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-1062">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1062">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-1063">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-1063">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-1064">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-1064">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1065">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-1065">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1066">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1066">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-1067">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1067">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-1068">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-1068">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-1069">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-1069">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-1070">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-1070">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-1071">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-1071">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-1072">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1072">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-1073">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-1073">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1074">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-1074">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-1075">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-1075">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-1076">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-1076">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-1077">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1077">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-1078">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1078">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1079">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1079">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-1080">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1080">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-1081">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1081">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-1082">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-1082">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-1083">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-1083">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1084">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-1084">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1085">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1085">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-1086">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1086">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-1087">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-1087">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-1088">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-1088">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-1089">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-1089">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-1090">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-1090">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-1091">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1091">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-1092">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-1092">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1093">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-1093">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-1094">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-1094">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-1095">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-1095">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-1096">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1096">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-1097">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1097">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1098">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1098">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-1099">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1099">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-1100">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1100">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-1101">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-1101">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-1102">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-1102">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1103">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-1103">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1104">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1104">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-1105">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1105">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-1106">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-1106">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-1107">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-1107">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-1108">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-1108">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-1109">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-1109">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-1110">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1110">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-1111">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-1111">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1112">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-1112">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-1113">Any valid <see langword="String" /> expression or variable name.</span><span class="sxs-lookup"><span data-stu-id="97203-1113">Any valid <see langword="String" /> expression or variable name.</span></span> <span data-ttu-id="97203-1114">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span><span class="sxs-lookup"><span data-stu-id="97203-1114">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span></span></param>
        <summary><span data-ttu-id="97203-1115">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1115">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></summary>
        <returns><span data-ttu-id="97203-1116">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1116">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1117">ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1117">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="97203-1118">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1118">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="97203-1119">場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1119">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="97203-1120">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="97203-1120">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="97203-1121">`Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="97203-1121">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1122">`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="97203-1122">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1123">`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1123">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="97203-1124">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1124">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-1125">Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-1125">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="97203-1126">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="97203-1126">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="97203-1127">`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。</span><span class="sxs-lookup"><span data-stu-id="97203-1127">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="97203-1128">場合、`Object`が含まれています、`String`の長さが返されます、`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-1128">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="97203-1129">パラメーターが NULL の場合`Object`参照、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1129">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="97203-1130">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97203-1130">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1131">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-1131">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="97203-1132">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1132">Required.</span></span> <span data-ttu-id="97203-1133"><see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1133"><see langword="String" /> expression.</span></span> <span data-ttu-id="97203-1134">Name of string variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1134">Name of string variable.</span></span></param>
        <param name="Length"><span data-ttu-id="97203-1135">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1135">Required.</span></span> <span data-ttu-id="97203-1136"><see langword="Integer" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1136"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="97203-1137">Length of returned string.</span><span class="sxs-lookup"><span data-stu-id="97203-1137">Length of returned string.</span></span></param>
        <summary><span data-ttu-id="97203-1138">Returns a left-aligned string containing the specified string adjusted to the specified length.</span><span class="sxs-lookup"><span data-stu-id="97203-1138">Returns a left-aligned string containing the specified string adjusted to the specified length.</span></span></summary>
        <returns><span data-ttu-id="97203-1139">Returns a left-aligned string containing the specified string adjusted to the specified length.</span><span class="sxs-lookup"><span data-stu-id="97203-1139">Returns a left-aligned string containing the specified string adjusted to the specified length.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1140">指定した文字列が指定された長さよりも長い場合は、返される文字列は指定の長さに短縮されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1140">If the specified string is longer than the specified length, the returned string is shortened to the specified length.</span></span> <span data-ttu-id="97203-1141">指定した文字列が指定された長さより短い場合は、スペースは、適切な長さを生成するために返される文字列の右端に追加されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1141">If the specified string is shorter than the specified length, spaces are added to the right end of the returned string to produce the appropriate length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1142">この例での使用、`LSet`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1142">This example demonstrates the use of the `LSet` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="97203-1143">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1143">Required.</span></span> <span data-ttu-id="97203-1144">Any valid <see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1144">Any valid <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="97203-1145">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span><span class="sxs-lookup"><span data-stu-id="97203-1145">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></summary>
        <returns><span data-ttu-id="97203-1146">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span><span class="sxs-lookup"><span data-stu-id="97203-1146">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1147">`LTrim`、 `RTrim`、および`Trim`関数は、文字列の末尾からスペースを削除します。</span><span class="sxs-lookup"><span data-stu-id="97203-1147">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1148">この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。</span><span class="sxs-lookup"><span data-stu-id="97203-1148">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="97203-1149">また、`Trim` 関数を使って両方のタイプの空白を除去しています。</span><span class="sxs-lookup"><span data-stu-id="97203-1149">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97203-1150">Returns a string that contains characters from a specified string.</span><span class="sxs-lookup"><span data-stu-id="97203-1150">Returns a string that contains characters from a specified string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="97203-1151">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1151">Required.</span></span> <span data-ttu-id="97203-1152"><see langword="String" /> expression from which characters are returned.</span><span class="sxs-lookup"><span data-stu-id="97203-1152"><see langword="String" /> expression from which characters are returned.</span></span></param>
        <param name="Start"><span data-ttu-id="97203-1153">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1153">Required.</span></span> <span data-ttu-id="97203-1154"><see langword="Integer" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1154"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="97203-1155">Starting position of the characters to return.</span><span class="sxs-lookup"><span data-stu-id="97203-1155">Starting position of the characters to return.</span></span> <span data-ttu-id="97203-1156">If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string ("").</span><span class="sxs-lookup"><span data-stu-id="97203-1156">If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string ("").</span></span> <span data-ttu-id="97203-1157"><c>Start</c> is one-based.</span><span class="sxs-lookup"><span data-stu-id="97203-1157"><c>Start</c> is one-based.</span></span></param>
        <summary><span data-ttu-id="97203-1158">Returns a string that contains all the characters starting from a specified position in a string.</span><span class="sxs-lookup"><span data-stu-id="97203-1158">Returns a string that contains all the characters starting from a specified position in a string.</span></span></summary>
        <returns><span data-ttu-id="97203-1159">A string that consists of all the characters starting from the specified position in the string.</span><span class="sxs-lookup"><span data-stu-id="97203-1159">A string that consists of all the characters starting from the specified position in the string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1160">内の文字の数を決定する`str`を使用して、`Len`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1160">To determine the number of characters in `str`, use the `Len` function.</span></span>  
  
 <span data-ttu-id="97203-1161">Visual Basic には、`Mid`関数と`Mid`ステートメントです。</span><span class="sxs-lookup"><span data-stu-id="97203-1161">Visual Basic has a `Mid` function and a `Mid` statement.</span></span> <span data-ttu-id="97203-1162">この要素はどちらも、文字列の文字の指定された数が、`Mid`関数の中に文字を返します、`Mid`文字をステートメントに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="97203-1162">These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters.</span></span> <span data-ttu-id="97203-1163">詳細については、次を参照してください。 [Mid ステートメント](~/docs/visual-basic/language-reference/statements/mid-statement.md)です。</span><span class="sxs-lookup"><span data-stu-id="97203-1163">For more information, see [Mid Statement](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1164">`MidB`以前のバージョンの Visual Basic での関数が文字ではなくバイト単位で文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1164">The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="97203-1165">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1165">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-1166">Unicode では、すべての Visual Basic の文字列と`MidB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-1166">All Visual Basic strings are in Unicode, and `MidB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1167">この例の最後の行のこのオーバー ロードを使用して、`Mid`関数を文字列から 5 番目以降の文字を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1167">The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-1168"><paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="97203-1168"><paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="97203-1169">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1169">Required.</span></span> <span data-ttu-id="97203-1170"><see langword="String" /> expression from which characters are returned.</span><span class="sxs-lookup"><span data-stu-id="97203-1170"><see langword="String" /> expression from which characters are returned.</span></span></param>
        <param name="Start"><span data-ttu-id="97203-1171">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1171">Required.</span></span> <span data-ttu-id="97203-1172"><see langword="Integer" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1172"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="97203-1173">Starting position of the characters to return.</span><span class="sxs-lookup"><span data-stu-id="97203-1173">Starting position of the characters to return.</span></span> <span data-ttu-id="97203-1174">If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string ("").</span><span class="sxs-lookup"><span data-stu-id="97203-1174">If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string ("").</span></span> <span data-ttu-id="97203-1175"><c>Start</c> is one based.</span><span class="sxs-lookup"><span data-stu-id="97203-1175"><c>Start</c> is one based.</span></span></param>
        <param name="Length"><span data-ttu-id="97203-1176">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-1176">Optional.</span></span> <span data-ttu-id="97203-1177"><see langword="Integer" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1177"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="97203-1178">Number of characters to return.</span><span class="sxs-lookup"><span data-stu-id="97203-1178">Number of characters to return.</span></span> <span data-ttu-id="97203-1179">If omitted or if there are fewer than <c>Length</c> characters in the text (including the character at position <c>Start</c>), all characters from the start position to the end of the string are returned.</span><span class="sxs-lookup"><span data-stu-id="97203-1179">If omitted or if there are fewer than <c>Length</c> characters in the text (including the character at position <c>Start</c>), all characters from the start position to the end of the string are returned.</span></span></param>
        <summary><span data-ttu-id="97203-1180">Returns a string that contains a specified number of characters starting from a specified position in a string.</span><span class="sxs-lookup"><span data-stu-id="97203-1180">Returns a string that contains a specified number of characters starting from a specified position in a string.</span></span></summary>
        <returns><span data-ttu-id="97203-1181">A string that consists of the specified number of characters starting from the specified position in the string.</span><span class="sxs-lookup"><span data-stu-id="97203-1181">A string that consists of the specified number of characters starting from the specified position in the string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1182">内の文字の数を決定する`str`を使用して、`Len`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1182">To determine the number of characters in `str`, use the `Len` function.</span></span>  
  
 <span data-ttu-id="97203-1183">Visual Basic には、`Mid`関数と`Mid`ステートメントです。</span><span class="sxs-lookup"><span data-stu-id="97203-1183">Visual Basic has a `Mid` function and a `Mid` statement.</span></span> <span data-ttu-id="97203-1184">この要素はどちらも、文字列の文字の指定された数が、`Mid`関数の中に文字を返します、`Mid`文字をステートメントに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="97203-1184">These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters.</span></span> <span data-ttu-id="97203-1185">詳細については、次を参照してください。 [Mid ステートメント](~/docs/visual-basic/language-reference/statements/mid-statement.md)です。</span><span class="sxs-lookup"><span data-stu-id="97203-1185">For more information, see [Mid Statement](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1186">`MidB`以前のバージョンの Visual Basic での関数が文字ではなくバイト単位で文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1186">The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="97203-1187">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1187">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-1188">Unicode では、すべての Visual Basic の文字列と`MidB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-1188">All Visual Basic strings are in Unicode, and `MidB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1189">最初の 2 つ`Mid`この例では関数では、指定した位置から始まる、文字列から指定された文字数を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1189">The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions.</span></span> <span data-ttu-id="97203-1190">(最後の関数を示しています、<xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29>オーバー ロードして、文字列抽出の開始位置を指定するだけです)。</span><span class="sxs-lookup"><span data-stu-id="97203-1190">(The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)</span></span>  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-1191"><paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="97203-1191"><paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-1192">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1192">Required.</span></span> <span data-ttu-id="97203-1193">String expression containing substring to replace.</span><span class="sxs-lookup"><span data-stu-id="97203-1193">String expression containing substring to replace.</span></span></param>
        <param name="Find"><span data-ttu-id="97203-1194">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1194">Required.</span></span> <span data-ttu-id="97203-1195">Substring being searched for.</span><span class="sxs-lookup"><span data-stu-id="97203-1195">Substring being searched for.</span></span></param>
        <param name="Replacement"><span data-ttu-id="97203-1196">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1196">Required.</span></span> <span data-ttu-id="97203-1197">Replacement substring.</span><span class="sxs-lookup"><span data-stu-id="97203-1197">Replacement substring.</span></span></param>
        <param name="Start"><span data-ttu-id="97203-1198">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-1198">Optional.</span></span> <span data-ttu-id="97203-1199">Position within <c>Expression</c> that starts a substring used for replacement.</span><span class="sxs-lookup"><span data-stu-id="97203-1199">Position within <c>Expression</c> that starts a substring used for replacement.</span></span> <span data-ttu-id="97203-1200">The return value of <see langword="Replace" /> is a string that begins at <c>Start</c>, with appropriate substitutions.</span><span class="sxs-lookup"><span data-stu-id="97203-1200">The return value of <see langword="Replace" /> is a string that begins at <c>Start</c>, with appropriate substitutions.</span></span> <span data-ttu-id="97203-1201">If omitted, 1 is assumed.</span><span class="sxs-lookup"><span data-stu-id="97203-1201">If omitted, 1 is assumed.</span></span></param>
        <param name="Count"><span data-ttu-id="97203-1202">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-1202">Optional.</span></span> <span data-ttu-id="97203-1203">Number of substring substitutions to perform.</span><span class="sxs-lookup"><span data-stu-id="97203-1203">Number of substring substitutions to perform.</span></span> <span data-ttu-id="97203-1204">If omitted, the default value is –1, which means "make all possible substitutions."</span><span class="sxs-lookup"><span data-stu-id="97203-1204">If omitted, the default value is –1, which means "make all possible substitutions."</span></span></param>
        <param name="Compare"><span data-ttu-id="97203-1205">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-1205">Optional.</span></span> <span data-ttu-id="97203-1206">Numeric value indicating the kind of comparison to use when evaluating substrings.</span><span class="sxs-lookup"><span data-stu-id="97203-1206">Numeric value indicating the kind of comparison to use when evaluating substrings.</span></span> <span data-ttu-id="97203-1207">See Settings for values.</span><span class="sxs-lookup"><span data-stu-id="97203-1207">See Settings for values.</span></span></param>
        <summary><span data-ttu-id="97203-1208">Returns a string in which a specified substring has been replaced with another substring a specified number of times.</span><span class="sxs-lookup"><span data-stu-id="97203-1208">Returns a string in which a specified substring has been replaced with another substring a specified number of times.</span></span></summary>
        <returns>
          <span data-ttu-id="97203-1209"><see langword="Replace" /> returns the following values.</span><span class="sxs-lookup"><span data-stu-id="97203-1209"><see langword="Replace" /> returns the following values.</span></span>  
  
 <span data-ttu-id="97203-1210"><list type="table"><item><term> If</span><span class="sxs-lookup"><span data-stu-id="97203-1210"><list type="table"><item><term> If</span></span>  
  
 <span data-ttu-id="97203-1211"></term><description> Replace returns</span><span class="sxs-lookup"><span data-stu-id="97203-1211"></term><description> Replace returns</span></span>  
  
 <span data-ttu-id="97203-1212"></description></item><item><term><paramref name="Find" /> is zero-length or <see langword="Nothing" /></term><description> Copy of <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> is zero-length</span><span class="sxs-lookup"><span data-stu-id="97203-1212"></description></item><item><term><paramref name="Find" /> is zero-length or <see langword="Nothing" /></term><description> Copy of <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> is zero-length</span></span>  
  
 <span data-ttu-id="97203-1213"></term><description> Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> is 0</span><span class="sxs-lookup"><span data-stu-id="97203-1213"></term><description> Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> is 0</span></span>  
  
 <span data-ttu-id="97203-1214"></term><description> Copy of <paramref name="Expression" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="97203-1214"></term><description> Copy of <paramref name="Expression" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1215">戻り値、`Replace`関数は、指定した位置から始まる文字列`Start`の末尾で終了し、`Expression`で置き換えが行われた文字列で指定されたとおり、`Find`と`Replace`値。</span><span class="sxs-lookup"><span data-stu-id="97203-1215">The return value of the `Replace` function is a string that begins at the position specified by `Start` and concludes at the end of the `Expression` string, with the substitutions made as specified by the `Find` and `Replace` values.</span></span>  
  
 <span data-ttu-id="97203-1216">`Compare`引数は、次の値を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="97203-1216">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="97203-1217">定数</span><span class="sxs-lookup"><span data-stu-id="97203-1217">Constant</span></span>|<span data-ttu-id="97203-1218">説明</span><span class="sxs-lookup"><span data-stu-id="97203-1218">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="97203-1219">バイナリ比較を実行します</span><span class="sxs-lookup"><span data-stu-id="97203-1219">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="97203-1220">テキストの比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="97203-1220">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="97203-1221">この例で、`Replace`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1221">This example demonstrates the `Replace` function.</span></span>  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-1222"><paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</span><span class="sxs-lookup"><span data-stu-id="97203-1222"><paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="97203-1223">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1223">Required.</span></span> <span data-ttu-id="97203-1224"><see langword="String" /> expression from which the rightmost characters are returned.</span><span class="sxs-lookup"><span data-stu-id="97203-1224"><see langword="String" /> expression from which the rightmost characters are returned.</span></span></param>
        <param name="Length"><span data-ttu-id="97203-1225">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1225">Required.</span></span> <span data-ttu-id="97203-1226"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="97203-1226"><see langword="Integer" />.</span></span> <span data-ttu-id="97203-1227">Numeric expression indicating how many characters to return.</span><span class="sxs-lookup"><span data-stu-id="97203-1227">Numeric expression indicating how many characters to return.</span></span> <span data-ttu-id="97203-1228">If 0, a zero-length string ("") is returned.</span><span class="sxs-lookup"><span data-stu-id="97203-1228">If 0, a zero-length string ("") is returned.</span></span> <span data-ttu-id="97203-1229">If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</span><span class="sxs-lookup"><span data-stu-id="97203-1229">If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</span></span></param>
        <summary><span data-ttu-id="97203-1230">Returns a string containing a specified number of characters from the right side of a string.</span><span class="sxs-lookup"><span data-stu-id="97203-1230">Returns a string containing a specified number of characters from the right side of a string.</span></span></summary>
        <returns><span data-ttu-id="97203-1231">Returns a string containing a specified number of characters from the right side of a string.</span><span class="sxs-lookup"><span data-stu-id="97203-1231">Returns a string containing a specified number of characters from the right side of a string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1232">内の文字の数を決定する`str`を使用して、`Len`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1232">To determine the number of characters in `str`, use the `Len` function.</span></span> <span data-ttu-id="97203-1233">Windows フォーム、またはを持つ他のクラスで使用されている場合、`Right`プロパティを持つ関数が完全修飾する必要があります`Microsoft.VisualBasic.Strings.Right`です。</span><span class="sxs-lookup"><span data-stu-id="97203-1233">If used in a Windows Form, or any other class that has a `Right` property, you must fully qualify the function with `Microsoft.VisualBasic.Strings.Right`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1234">`RightB`以前のバージョンの Visual Basic での関数が文字ではなく、(バイト単位) の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1234">The `RightB` function in earlier versions of Visual Basic returns a string in bytes, rather than characters.</span></span> <span data-ttu-id="97203-1235">2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1235">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="97203-1236">Unicode では、現在の Visual Basic の文字列をすべてと`RightB`は現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97203-1236">All current Visual Basic strings are in Unicode, and `RightB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1237">この例での使用、`Right`の部分文字列を返す関数を指定された`String`です。</span><span class="sxs-lookup"><span data-stu-id="97203-1237">This example demonstrates the use of the `Right` function to return a substring of a given `String`.</span></span> <span data-ttu-id="97203-1238">持つクラスで、`Right`プロパティである可能性がありますを完全に修飾するために必要な`Right`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1238">In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-1239"><paramref name="Length" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="97203-1239"><paramref name="Length" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="97203-1240">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1240">Required.</span></span> <span data-ttu-id="97203-1241"><see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1241"><see langword="String" /> expression.</span></span> <span data-ttu-id="97203-1242">Name of string variable.</span><span class="sxs-lookup"><span data-stu-id="97203-1242">Name of string variable.</span></span></param>
        <param name="Length"><span data-ttu-id="97203-1243">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1243">Required.</span></span> <span data-ttu-id="97203-1244"><see langword="Integer" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1244"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="97203-1245">Length of returned string.</span><span class="sxs-lookup"><span data-stu-id="97203-1245">Length of returned string.</span></span></param>
        <summary><span data-ttu-id="97203-1246">Returns a right-aligned string containing the specified string adjusted to the specified length.</span><span class="sxs-lookup"><span data-stu-id="97203-1246">Returns a right-aligned string containing the specified string adjusted to the specified length.</span></span></summary>
        <returns><span data-ttu-id="97203-1247">Returns a right-aligned string containing the specified string adjusted to the specified length.</span><span class="sxs-lookup"><span data-stu-id="97203-1247">Returns a right-aligned string containing the specified string adjusted to the specified length.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1248">場合`Source`よりも長い`Length`、`RSet`のみ、左端の文字、最大の長さを配置`Source`、返される文字列にします。</span><span class="sxs-lookup"><span data-stu-id="97203-1248">If `Source` is longer than `Length`, `RSet` places only the leftmost characters, up to the length of `Source`, in the returned string.</span></span> <span data-ttu-id="97203-1249">指定した文字列が指定された長さより短い場合は、適切な長さを生成するために、文字列の左端にスペースが追加されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1249">If the specified string is shorter than the specified length, spaces are added to the left end of the string to produce the appropriate length.</span></span> <span data-ttu-id="97203-1250">指定した文字列が指定された長さよりも長い場合は、指定された長さに部分は切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="97203-1250">If the specified string is longer than the specified length, it is shortened to the specified length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1251">この例での使用、`RSet`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1251">This example demonstrates the use of the `RSet` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="97203-1252">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1252">Required.</span></span> <span data-ttu-id="97203-1253">Any valid <see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1253">Any valid <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="97203-1254">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span><span class="sxs-lookup"><span data-stu-id="97203-1254">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></summary>
        <returns><span data-ttu-id="97203-1255">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span><span class="sxs-lookup"><span data-stu-id="97203-1255">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1256">`LTrim`、 `RTrim`、および`Trim`関数は、文字列の末尾からスペースを削除します。</span><span class="sxs-lookup"><span data-stu-id="97203-1256">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1257">この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。</span><span class="sxs-lookup"><span data-stu-id="97203-1257">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="97203-1258">また、`Trim` 関数を使って両方のタイプの空白を除去しています。</span><span class="sxs-lookup"><span data-stu-id="97203-1258">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="97203-1259">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1259">Required.</span></span> <span data-ttu-id="97203-1260"><see langword="Integer" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1260"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="97203-1261">The number of spaces you want in the string.</span><span class="sxs-lookup"><span data-stu-id="97203-1261">The number of spaces you want in the string.</span></span></param>
        <summary><span data-ttu-id="97203-1262">Returns a string consisting of the specified number of spaces.</span><span class="sxs-lookup"><span data-stu-id="97203-1262">Returns a string consisting of the specified number of spaces.</span></span></summary>
        <returns><span data-ttu-id="97203-1263">Returns a string consisting of the specified number of spaces.</span><span class="sxs-lookup"><span data-stu-id="97203-1263">Returns a string consisting of the specified number of spaces.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1264">`Space`関数は出力を書式設定および固定長文字列内のデータをクリアするのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="97203-1264">The `Space` function is useful for formatting output and clearing data in fixed-length strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1265">この例では、`Space`関数を指定した数のスペースから成る文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1265">This example uses the `Space` function to return a string consisting of a specified number of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-1266"><paramref name="Number" /> &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="97203-1266"><paramref name="Number" /> &lt; 0.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-1267">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1267">Required.</span></span> <span data-ttu-id="97203-1268"><see langword="String" /> expression containing substrings and delimiters.</span><span class="sxs-lookup"><span data-stu-id="97203-1268"><see langword="String" /> expression containing substrings and delimiters.</span></span></param>
        <param name="Delimiter"><span data-ttu-id="97203-1269">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-1269">Optional.</span></span> <span data-ttu-id="97203-1270">Any single character used to identify substring limits.</span><span class="sxs-lookup"><span data-stu-id="97203-1270">Any single character used to identify substring limits.</span></span> <span data-ttu-id="97203-1271">If <c>Delimiter</c> is omitted, the space character (" ") is assumed to be the delimiter.</span><span class="sxs-lookup"><span data-stu-id="97203-1271">If <c>Delimiter</c> is omitted, the space character (" ") is assumed to be the delimiter.</span></span></param>
        <param name="Limit"><span data-ttu-id="97203-1272">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-1272">Optional.</span></span> <span data-ttu-id="97203-1273">Maximum number of substrings into which the input string should be split.</span><span class="sxs-lookup"><span data-stu-id="97203-1273">Maximum number of substrings into which the input string should be split.</span></span> <span data-ttu-id="97203-1274">The default, –1, indicates that the input string should be split at every occurrence of the <c>Delimiter</c> string.</span><span class="sxs-lookup"><span data-stu-id="97203-1274">The default, –1, indicates that the input string should be split at every occurrence of the <c>Delimiter</c> string.</span></span></param>
        <param name="Compare"><span data-ttu-id="97203-1275">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-1275">Optional.</span></span> <span data-ttu-id="97203-1276">Numeric value indicating the comparison to use when evaluating substrings.</span><span class="sxs-lookup"><span data-stu-id="97203-1276">Numeric value indicating the comparison to use when evaluating substrings.</span></span> <span data-ttu-id="97203-1277">See "Settings" for values.</span><span class="sxs-lookup"><span data-stu-id="97203-1277">See "Settings" for values.</span></span></param>
        <summary><span data-ttu-id="97203-1278">Returns a zero-based, one-dimensional array containing a specified number of substrings.</span><span class="sxs-lookup"><span data-stu-id="97203-1278">Returns a zero-based, one-dimensional array containing a specified number of substrings.</span></span></summary>
        <returns>
          <span data-ttu-id="97203-1279"><see langword="String" /> array.</span><span class="sxs-lookup"><span data-stu-id="97203-1279"><see langword="String" /> array.</span></span> <span data-ttu-id="97203-1280">If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string.</span><span class="sxs-lookup"><span data-stu-id="97203-1280">If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string.</span></span> <span data-ttu-id="97203-1281">If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</span><span class="sxs-lookup"><span data-stu-id="97203-1281">If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1282">既定では、または`Limit`、-1、`Split`関数は、区切り記号文字列の出現個所をすべてで、入力文字列を分割し、配列内の各部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1282">By default, or when `Limit` equals -1, the `Split` function splits the input string at every occurrence of the delimiter string, and returns the substrings in an array.</span></span> <span data-ttu-id="97203-1283">ときに、`Limit`パラメーターは、ゼロより大きく、`Split`関数が、最初は文字列を分割`Limit`-1 出現する、区切り記号の後の部分文字列の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="97203-1283">When the `Limit` parameter is greater than zero, the `Split` function splits the string at the first `Limit`-1 occurrences of the delimiter, and returns an array with the resulting substrings.</span></span> <span data-ttu-id="97203-1284">たとえば、`Split("a:b:c", ":")`配列を返します`{"a", "b", "c"}`、中に`Split("a:b:c", ":", 2)`配列を返します`{"a", "b:c"}`です。</span><span class="sxs-lookup"><span data-stu-id="97203-1284">For example, `Split("a:b:c", ":")` returns the array `{"a", "b", "c"}`, while `Split("a:b:c", ":", 2)` returns the array `{"a", "b:c"}`.</span></span>  
  
 <span data-ttu-id="97203-1285">ときに、`Split`関数には、行で、次の 2 つの区切り記号または先頭または文字列の末尾に区切り記号が検出すると、空の文字列を囲むとして解釈 ("") です。</span><span class="sxs-lookup"><span data-stu-id="97203-1285">When the `Split` function encounters two delimiters in a row, or a delimiter at the beginning or end of the string, it interprets them as surrounding an empty string ("").</span></span> <span data-ttu-id="97203-1286">たとえば、 `Split("xx", "x")` 3 つの空の文字列を含む配列を返します: 文字列と最初の"x"、"x"、文字列、2 つの間から 1 つの先頭つと最後の"x"と、文字列の末尾の 1 つです。</span><span class="sxs-lookup"><span data-stu-id="97203-1286">For example, `Split("xx", "x")` returns the array containing three empty strings: one from between the beginning of the string and the first "x", one from between the two "x" strings, and one from between the last "x" and the end of the string.</span></span>  
  
 <span data-ttu-id="97203-1287">次の表に示す方法、省略可能な`Delimiter`、 `Limit`、および`Compare`パラメーターの動作を変更することができます、`Split`関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1287">This table demonstrates how the optional `Delimiter`, `Limit`, and `Compare` parameters can change the behavior of the `Split` function.</span></span>  
  
|<span data-ttu-id="97203-1288">呼び出しを分割します。</span><span class="sxs-lookup"><span data-stu-id="97203-1288">Split Call</span></span>|<span data-ttu-id="97203-1289">戻り値</span><span class="sxs-lookup"><span data-stu-id="97203-1289">Return Value</span></span>|  
|-|-|  
|`Split("42, 12, 19")`|<span data-ttu-id="97203-1290">{"42," , "12," , "19"}</span><span class="sxs-lookup"><span data-stu-id="97203-1290">{"42," , "12," , "19"}</span></span>|  
|`Split("42, 12, 19", ", ")`|<span data-ttu-id="97203-1291">{"42", "12", "19"}</span><span class="sxs-lookup"><span data-stu-id="97203-1291">{"42", "12", "19"}</span></span>|  
|`Split("42, 12, 19", ", ", 2)`|<span data-ttu-id="97203-1292">{"42", "12, 19"}</span><span class="sxs-lookup"><span data-stu-id="97203-1292">{"42", "12, 19"}</span></span>|  
|`Split("192.168.0.1", ".")`|<span data-ttu-id="97203-1293">{"192", "168", "0", "1"}</span><span class="sxs-lookup"><span data-stu-id="97203-1293">{"192", "168", "0", "1"}</span></span>|  
|`Split("Alice and Bob", " AND ")`|<span data-ttu-id="97203-1294">{「Alice と Bob」}</span><span class="sxs-lookup"><span data-stu-id="97203-1294">{"Alice and Bob"}</span></span>|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|<span data-ttu-id="97203-1295">{"Alice", "Bob"}</span><span class="sxs-lookup"><span data-stu-id="97203-1295">{"Alice", "Bob"}</span></span>|  
|`Split("someone@example.com", "@",1)`|<span data-ttu-id="97203-1296">{"someone@example.com"}</span><span class="sxs-lookup"><span data-stu-id="97203-1296">{"someone@example.com"}</span></span>|  
|`Split("someone@example.com", "@",2)`|<span data-ttu-id="97203-1297">{"someone", "example.com"}</span><span class="sxs-lookup"><span data-stu-id="97203-1297">{"someone", "example.com"}</span></span>|  
  
 <span data-ttu-id="97203-1298">`Compare`引数は、次の値を持つことができます。</span><span class="sxs-lookup"><span data-stu-id="97203-1298">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="97203-1299">定数</span><span class="sxs-lookup"><span data-stu-id="97203-1299">Constant</span></span>|<span data-ttu-id="97203-1300">説明</span><span class="sxs-lookup"><span data-stu-id="97203-1300">Description</span></span>|<span data-ttu-id="97203-1301">[値]</span><span class="sxs-lookup"><span data-stu-id="97203-1301">Value</span></span>|  
|-|-|-|  
|`CompareMethod.Binary`|<span data-ttu-id="97203-1302">バイナリ比較を実行します</span><span class="sxs-lookup"><span data-stu-id="97203-1302">Performs a binary comparison</span></span>|<span data-ttu-id="97203-1303">0</span><span class="sxs-lookup"><span data-stu-id="97203-1303">0</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="97203-1304">テキストの比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="97203-1304">Performs a textual comparison</span></span>|<span data-ttu-id="97203-1305">1</span><span class="sxs-lookup"><span data-stu-id="97203-1305">1</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="97203-1306">次の例では、そのスペースに文字列に分割する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="97203-1306">The following example demonstrates how to split a string at its spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 <span data-ttu-id="97203-1307">次の例では、行の複数の区切り記号の文字列を分割して、空の文字列をフィルター処理する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="97203-1307">The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1"><span data-ttu-id="97203-1308">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1308">Required.</span></span> <span data-ttu-id="97203-1309">Any valid <see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1309">Any valid <see langword="String" /> expression.</span></span></param>
        <param name="String2"><span data-ttu-id="97203-1310">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1310">Required.</span></span> <span data-ttu-id="97203-1311">Any valid <see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1311">Any valid <see langword="String" /> expression.</span></span></param>
        <param name="Compare"><span data-ttu-id="97203-1312">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-1312">Optional.</span></span> <span data-ttu-id="97203-1313">Specifies the type of string comparison.</span><span class="sxs-lookup"><span data-stu-id="97203-1313">Specifies the type of string comparison.</span></span> <span data-ttu-id="97203-1314">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span><span class="sxs-lookup"><span data-stu-id="97203-1314">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span></span></param>
        <summary><span data-ttu-id="97203-1315">Returns -1, 0, or 1, based on the result of a string comparison.</span><span class="sxs-lookup"><span data-stu-id="97203-1315">Returns -1, 0, or 1, based on the result of a string comparison.</span></span></summary>
        <returns><span data-ttu-id="97203-1316">The <see langword="StrComp" /> function has the following return values.</span><span class="sxs-lookup"><span data-stu-id="97203-1316">The <see langword="StrComp" /> function has the following return values.</span></span>  
  
 <span data-ttu-id="97203-1317"><list type="table"><item><term> If</span><span class="sxs-lookup"><span data-stu-id="97203-1317"><list type="table"><item><term> If</span></span>  
  
 <span data-ttu-id="97203-1318"></term><description> StrComp returns</span><span class="sxs-lookup"><span data-stu-id="97203-1318"></term><description> StrComp returns</span></span>  
  
 <span data-ttu-id="97203-1319"></description></item><item><term><paramref name="String1" /> sorts ahead of <paramref name="String2" /></term><description> -1</span><span class="sxs-lookup"><span data-stu-id="97203-1319"></description></item><item><term><paramref name="String1" /> sorts ahead of <paramref name="String2" /></term><description> -1</span></span>  
  
 <span data-ttu-id="97203-1320"></description></item><item><term><paramref name="String1" /> is equal to <paramref name="String2" /></term><description> 0</span><span class="sxs-lookup"><span data-stu-id="97203-1320"></description></item><item><term><paramref name="String1" /> is equal to <paramref name="String2" /></term><description> 0</span></span>  
  
 <span data-ttu-id="97203-1321"></description></item><item><term><paramref name="String1" /> sorts after <paramref name="String2" /></term><description> 1</span><span class="sxs-lookup"><span data-stu-id="97203-1321"></description></item><item><term><paramref name="String1" /> sorts after <paramref name="String2" /></term><description> 1</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1322">文字列は、最初の文字で始まり、英数字の並べ替え値によって比較されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1322">The strings are compared by alphanumeric sort values beginning with the first character.</span></span> <span data-ttu-id="97203-1323">バイナリの比較、テキストの比較および並べ替え順序の詳細については、次を参照してください。 [Option Compare ステートメント](~/docs/visual-basic/language-reference/statements/option-compare-statement.md)です。</span><span class="sxs-lookup"><span data-stu-id="97203-1323">For further information on binary comparisons, textual comparisons, and sort order, see [Option Compare Statement](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).</span></span>  
  
 <span data-ttu-id="97203-1324">`Compare` 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="97203-1324">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="97203-1325">定数</span><span class="sxs-lookup"><span data-stu-id="97203-1325">Constant</span></span>|<span data-ttu-id="97203-1326">説明</span><span class="sxs-lookup"><span data-stu-id="97203-1326">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="97203-1327">文字の内部バイナリ表現から派生した並べ替え順序に基づいて、バイナリ比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="97203-1327">Performs a binary comparison, based on a sort order derived from the internal binary representations of the characters.</span></span>|  
|`Text`|<span data-ttu-id="97203-1328">システムのによって決まる、大文字と小文字のテキスト並べ替え順序に基づいて、文字列比較を行います`LocaleID`値。</span><span class="sxs-lookup"><span data-stu-id="97203-1328">Performs a text comparison, based on a case-insensitive text sort order determined by your system's `LocaleID` value.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="97203-1329">この例では、`StrComp`文字列比較の結果を返す関数。</span><span class="sxs-lookup"><span data-stu-id="97203-1329">This example uses the `StrComp` function to return the results of a string comparison.</span></span>  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-1330"><paramref name="Compare" /> value is not valid.</span><span class="sxs-lookup"><span data-stu-id="97203-1330"><paramref name="Compare" /> value is not valid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="97203-1331">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1331">Required.</span></span> <span data-ttu-id="97203-1332"><see langword="String" /> expression to be converted.</span><span class="sxs-lookup"><span data-stu-id="97203-1332"><see langword="String" /> expression to be converted.</span></span></param>
        <param name="Conversion"><span data-ttu-id="97203-1333">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1333">Required.</span></span> <span data-ttu-id="97203-1334"><see cref="T:Microsoft.VisualBasic.VbStrConv" /> member.</span><span class="sxs-lookup"><span data-stu-id="97203-1334"><see cref="T:Microsoft.VisualBasic.VbStrConv" /> member.</span></span> <span data-ttu-id="97203-1335">The enumeration value specifying the type of conversion to perform.</span><span class="sxs-lookup"><span data-stu-id="97203-1335">The enumeration value specifying the type of conversion to perform.</span></span></param>
        <param name="LocaleID"><span data-ttu-id="97203-1336">Optional.</span><span class="sxs-lookup"><span data-stu-id="97203-1336">Optional.</span></span> <span data-ttu-id="97203-1337">The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value.</span><span class="sxs-lookup"><span data-stu-id="97203-1337">The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value.</span></span> <span data-ttu-id="97203-1338">(The system <see langword="LocaleID" /> value is the default.)</span><span class="sxs-lookup"><span data-stu-id="97203-1338">(The system <see langword="LocaleID" /> value is the default.)</span></span></param>
        <summary><span data-ttu-id="97203-1339">Returns a string converted as specified.</span><span class="sxs-lookup"><span data-stu-id="97203-1339">Returns a string converted as specified.</span></span></summary>
        <returns><span data-ttu-id="97203-1340">Returns a string converted as specified.</span><span class="sxs-lookup"><span data-stu-id="97203-1340">Returns a string converted as specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1341">定数`VbStrConv.Wide`、 `VbStrConv.Narrow`、 `VbStrConv.SimplifiedChinese`、 `VbStrConv.TraditionalChinese`、`VbStrConv.Katakana`と`VbStrConv.Hiragana`ここでは適用されません、ロケールで使用する場合の実行時エラーが発生することができますが、常にではありません: 定数`VbStrConv.Katakana`と`VbStrConv.Hiragana`日本語言語パックがインストールされて、日本語以外のシステムで使用できます。</span><span class="sxs-lookup"><span data-stu-id="97203-1341">The constants `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, and `VbStrConv.Hiragana` can cause run-time errors when used in locales where they do not apply, but not always: the constants `VbStrConv.Katakana` and `VbStrConv.Hiragana` can be used in a non-Japanese system with the Japanese Language Pack installed.</span></span> <span data-ttu-id="97203-1342">さらに、定数の使用`VbStrConv.Wide`と`VbStrConv.Narrow`インストール東アジア言語のすべてのシステムではサポートされています。</span><span class="sxs-lookup"><span data-stu-id="97203-1342">In addition, use of the constants `VbStrConv.Wide` and `VbStrConv.Narrow` is supported on any system with an East Asian language installed.</span></span>  
  
 <span data-ttu-id="97203-1343">この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="97203-1343">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="97203-1344">アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。</span><span class="sxs-lookup"><span data-stu-id="97203-1344">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="97203-1345">詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="97203-1345">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
 <span data-ttu-id="97203-1346">`Conversion` 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="97203-1346">The `Conversion` argument settings are:</span></span>  
  
|<span data-ttu-id="97203-1347">列挙体のメンバー</span><span class="sxs-lookup"><span data-stu-id="97203-1347">Enumeration member</span></span>|<span data-ttu-id="97203-1348">説明</span><span class="sxs-lookup"><span data-stu-id="97203-1348">Description</span></span>|  
|-|-|  
|`VbStrConv.None`|<span data-ttu-id="97203-1349">変換は行われません</span><span class="sxs-lookup"><span data-stu-id="97203-1349">Performs no conversion</span></span>|  
|`VbStrConv.LinguisticCasing`|<span data-ttu-id="97203-1350">ファイル システム (既定値) ではなく、大文字と小文字、言語の規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="97203-1350">Uses linguistic rules for casing, rather than File System (default).</span></span> <span data-ttu-id="97203-1351">有効な`VbStrConv.UpperCase`と`VbStrConv.LowerCase`のみです。</span><span class="sxs-lookup"><span data-stu-id="97203-1351">Valid with `VbStrConv.UpperCase` and `VbStrConv.LowerCase` only.</span></span>|  
|`VbStrConv.UpperCase`|<span data-ttu-id="97203-1352">文字列を大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="97203-1352">Converts the string to uppercase characters.</span></span>|  
|`VbStrConv.LowerCase`|<span data-ttu-id="97203-1353">文字列を小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="97203-1353">Converts the string to lowercase characters.</span></span>|  
|`VbStrConv.ProperCase`|<span data-ttu-id="97203-1354">文字列を大文字に内の各単語の最初の文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="97203-1354">Converts the first letter of every word in string to uppercase.</span></span>|  
|<span data-ttu-id="97203-1355">`VbStrConv.Wide` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="97203-1355">`VbStrConv.Wide` <sup>\*</sup></span></span>|<span data-ttu-id="97203-1356">半角、全角文字 (全角) に文字列 (半角) 文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="97203-1356">Converts narrow (half-width) characters in the string to wide (full-width) characters.</span></span> [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|<span data-ttu-id="97203-1357">`VbStrConv.Narrow` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="97203-1357">`VbStrConv.Narrow` <sup>\*</sup></span></span>|<span data-ttu-id="97203-1358">(全角) 全角文字 (半角) の文字を文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="97203-1358">Converts wide (full-width) characters in the string to narrow (half-width) characters.</span></span>|  
|<span data-ttu-id="97203-1359">`VbStrConv.Katakana` <sup>**</sup></span><span class="sxs-lookup"><span data-stu-id="97203-1359">`VbStrConv.Katakana` <sup>**</sup></span></span>|<span data-ttu-id="97203-1360">文字列内のひらがな文字をカタカナ文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="97203-1360">Converts Hiragana characters in the string to Katakana characters.</span></span>|  
|<span data-ttu-id="97203-1361">`VbStrConv.Hiragana` <sup>**</sup></span><span class="sxs-lookup"><span data-stu-id="97203-1361">`VbStrConv.Hiragana` <sup>**</sup></span></span>|<span data-ttu-id="97203-1362">文字列内のカタカナ文字をひらがな文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="97203-1362">Converts Katakana characters in the string to Hiragana characters.</span></span>|  
|<span data-ttu-id="97203-1363">`VbStrConv.SimplifiedChinese` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="97203-1363">`VbStrConv.SimplifiedChinese` <sup>\*</sup></span></span>|<span data-ttu-id="97203-1364">繁体字中国語文字を簡体字中国語に変換します。</span><span class="sxs-lookup"><span data-stu-id="97203-1364">Converts Traditional Chinese characters to Simplified Chinese.</span></span>|  
|<span data-ttu-id="97203-1365">`VbStrConv.TraditionalChinese` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="97203-1365">`VbStrConv.TraditionalChinese` <sup>\*</sup></span></span>|<span data-ttu-id="97203-1366">簡体字中国語の文字を繁体字中国語に変換します。</span><span class="sxs-lookup"><span data-stu-id="97203-1366">Converts Simplified Chinese characters to Traditional Chinese.</span></span>|  
  
 <span data-ttu-id="97203-1367"><sup>\*</sup> アジアのロケールに適用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1367"><sup>\*</sup> Applies to Asian locales.</span></span>  
  
 <span data-ttu-id="97203-1368"><sup>**</sup> Japan にのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1368"><sup>**</sup> Applies to Japan only.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97203-1369">これらの定数は、.NET Framework 共通言語ランタイムで指定されます。</span><span class="sxs-lookup"><span data-stu-id="97203-1369">These constants are specified in the .NET Framework common language runtime.</span></span> <span data-ttu-id="97203-1370">その結果、それらで指定できます任意の場所、実際の値の代わりに、コード。</span><span class="sxs-lookup"><span data-stu-id="97203-1370">As a result, they can be used anywhere in your code in place of the actual values.</span></span> <span data-ttu-id="97203-1371">ほとんどを組み合わせることができます (たとえば、 `UpperCase + Wide`)、相互に排他的な場合以外 (たとえば、 `VbStrConv.Wide + VbStrConv.Narrow`)。</span><span class="sxs-lookup"><span data-stu-id="97203-1371">Most can be combined (for example, `UpperCase + Wide`), except when they are mutually exclusive (for example, `VbStrConv.Wide + VbStrConv.Narrow`).</span></span>  
  
 <span data-ttu-id="97203-1372">適切な大文字と小文字の有効な単語の区切り文字を次に示します: Null (`Chr$(0)`)、水平タブ (`Chr$(9)`)、ライン フィード (`Chr$(10)`)、垂直タブ (`Chr$(11)`)、フォーム フィード (`Chr$(12)`)、キャリッジ リターン (`Chr$(13)`)、スペース (1 バイト文字セット) (`Chr$(32)`)。</span><span class="sxs-lookup"><span data-stu-id="97203-1372">The following are valid word separators for proper casing: Null (`Chr$(0)`), horizontal tab (`Chr$(9)`), line feed (`Chr$(10)`), vertical tab (`Chr$(11)`), form feed (`Chr$(12)`), carriage return (`Chr$(13)`), space (single-byte character set) (`Chr$(32)`).</span></span> <span data-ttu-id="97203-1373">指定できますが、完全または幅の半分領域の実際の値は、東アジア言語のカルチャの国または地域によって異なります。</span><span class="sxs-lookup"><span data-stu-id="97203-1373">The actual value for a space, which can be full or half width, varies by country/region for East Asian cultures.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1374">この例は、テキストをすべて小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="97203-1374">This example converts text into all lowercase letters.</span></span>  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97203-1375">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</span><span class="sxs-lookup"><span data-stu-id="97203-1375">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97203-1376">Returns a string or object consisting of the specified character repeated the specified number of times.</span><span class="sxs-lookup"><span data-stu-id="97203-1376">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="97203-1377">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1377">Required.</span></span> <span data-ttu-id="97203-1378"><see langword="Integer" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1378"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="97203-1379">The length to the string to be returned.</span><span class="sxs-lookup"><span data-stu-id="97203-1379">The length to the string to be returned.</span></span></param>
        <param name="Character"><span data-ttu-id="97203-1380">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1380">Required.</span></span> <span data-ttu-id="97203-1381">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1381">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span></span> <span data-ttu-id="97203-1382">Only the first character of the expression will be used.</span><span class="sxs-lookup"><span data-stu-id="97203-1382">Only the first character of the expression will be used.</span></span> <span data-ttu-id="97203-1383">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span><span class="sxs-lookup"><span data-stu-id="97203-1383">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span></span></param>
        <summary><span data-ttu-id="97203-1384">Returns a string or object consisting of the specified character repeated the specified number of times.</span><span class="sxs-lookup"><span data-stu-id="97203-1384">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
        <returns><span data-ttu-id="97203-1385">Returns a string or object consisting of the specified character repeated the specified number of times.</span><span class="sxs-lookup"><span data-stu-id="97203-1385">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1386">この関数を返します、`String`の文字の繰り返しで構成します。</span><span class="sxs-lookup"><span data-stu-id="97203-1386">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="97203-1387">文字列を構成する文字が最初の文字、`Character`引数、およびそれが重複して`Number`回数。</span><span class="sxs-lookup"><span data-stu-id="97203-1387">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1388">この例では、`StrDup`の文字列を返す関数には、文字が重複しています。</span><span class="sxs-lookup"><span data-stu-id="97203-1388">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-1389"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span><span class="sxs-lookup"><span data-stu-id="97203-1389"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="97203-1390"><paramref name="Character" /> is <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="97203-1390"><paramref name="Character" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="97203-1391">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1391">Required.</span></span> <span data-ttu-id="97203-1392"><see langword="Integer" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1392"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="97203-1393">The length to the string to be returned.</span><span class="sxs-lookup"><span data-stu-id="97203-1393">The length to the string to be returned.</span></span></param>
        <param name="Character"><span data-ttu-id="97203-1394">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1394">Required.</span></span> <span data-ttu-id="97203-1395">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1395">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span></span> <span data-ttu-id="97203-1396">Only the first character of the expression will be used.</span><span class="sxs-lookup"><span data-stu-id="97203-1396">Only the first character of the expression will be used.</span></span> <span data-ttu-id="97203-1397">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span><span class="sxs-lookup"><span data-stu-id="97203-1397">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span></span></param>
        <summary><span data-ttu-id="97203-1398">Returns a string or object consisting of the specified character repeated the specified number of times.</span><span class="sxs-lookup"><span data-stu-id="97203-1398">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
        <returns><span data-ttu-id="97203-1399">Returns a string or object consisting of the specified character repeated the specified number of times.</span><span class="sxs-lookup"><span data-stu-id="97203-1399">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1400">この関数を返します、`String`の文字の繰り返しで構成します。</span><span class="sxs-lookup"><span data-stu-id="97203-1400">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="97203-1401">文字列を構成する文字が最初の文字、`Character`引数、およびそれが重複して`Number`回数。</span><span class="sxs-lookup"><span data-stu-id="97203-1401">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1402">この例では、`StrDup`の文字列を返す関数には、文字が重複しています。</span><span class="sxs-lookup"><span data-stu-id="97203-1402">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-1403"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span><span class="sxs-lookup"><span data-stu-id="97203-1403"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="97203-1404"><paramref name="Character" /> is <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="97203-1404"><paramref name="Character" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="97203-1405">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1405">Required.</span></span> <span data-ttu-id="97203-1406"><see langword="Integer" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1406"><see langword="Integer" /> expression.</span></span> <span data-ttu-id="97203-1407">The length to the string to be returned.</span><span class="sxs-lookup"><span data-stu-id="97203-1407">The length to the string to be returned.</span></span></param>
        <param name="Character"><span data-ttu-id="97203-1408">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1408">Required.</span></span> <span data-ttu-id="97203-1409">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1409">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span></span> <span data-ttu-id="97203-1410">Only the first character of the expression will be used.</span><span class="sxs-lookup"><span data-stu-id="97203-1410">Only the first character of the expression will be used.</span></span> <span data-ttu-id="97203-1411">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span><span class="sxs-lookup"><span data-stu-id="97203-1411">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span></span></param>
        <summary><span data-ttu-id="97203-1412">Returns a string or object consisting of the specified character repeated the specified number of times.</span><span class="sxs-lookup"><span data-stu-id="97203-1412">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></summary>
        <returns><span data-ttu-id="97203-1413">Returns a string or object consisting of the specified character repeated the specified number of times.</span><span class="sxs-lookup"><span data-stu-id="97203-1413">Returns a string or object consisting of the specified character repeated the specified number of times.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1414">この関数を返します、`String`の文字の繰り返しで構成します。</span><span class="sxs-lookup"><span data-stu-id="97203-1414">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="97203-1415">文字列を構成する文字が最初の文字、`Character`引数、およびそれが重複して`Number`回数。</span><span class="sxs-lookup"><span data-stu-id="97203-1415">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1416">この例では、`StrDup`の文字列を返す関数には、文字が重複しています。</span><span class="sxs-lookup"><span data-stu-id="97203-1416">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="97203-1417"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span><span class="sxs-lookup"><span data-stu-id="97203-1417"><paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="97203-1418"><paramref name="Character" /> is <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="97203-1418"><paramref name="Character" /> is <see langword="Nothing" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="97203-1419">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1419">Required.</span></span> <span data-ttu-id="97203-1420">String expression whose characters are to be reversed.</span><span class="sxs-lookup"><span data-stu-id="97203-1420">String expression whose characters are to be reversed.</span></span> <span data-ttu-id="97203-1421">If <c>Expression</c> is a zero-length string (""), a zero-length string is returned.</span><span class="sxs-lookup"><span data-stu-id="97203-1421">If <c>Expression</c> is a zero-length string (""), a zero-length string is returned.</span></span></param>
        <summary><span data-ttu-id="97203-1422">Returns a string in which the character order of a specified string is reversed.</span><span class="sxs-lookup"><span data-stu-id="97203-1422">Returns a string in which the character order of a specified string is reversed.</span></span></summary>
        <returns><span data-ttu-id="97203-1423">Returns a string in which the character order of a specified string is reversed.</span><span class="sxs-lookup"><span data-stu-id="97203-1423">Returns a string in which the character order of a specified string is reversed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1424">`StrReverse`関数と同じ文字を含む文字列を返します`Expression`、その逆の順序で。</span><span class="sxs-lookup"><span data-stu-id="97203-1424">The `StrReverse` function returns a string that contains the same characters as `Expression`, but in the opposite order.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="97203-1425">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1425">Required.</span></span> <span data-ttu-id="97203-1426">Any valid <see langword="String" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1426">Any valid <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="97203-1427">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span><span class="sxs-lookup"><span data-stu-id="97203-1427">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></summary>
        <returns><span data-ttu-id="97203-1428">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span><span class="sxs-lookup"><span data-stu-id="97203-1428">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1429">`LTrim`、 `RTrim`、および`Trim`関数は、文字列の末尾からスペースを削除します。</span><span class="sxs-lookup"><span data-stu-id="97203-1429">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1430">この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。</span><span class="sxs-lookup"><span data-stu-id="97203-1430">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="97203-1431">また、`Trim` 関数を使って両方のタイプの空白を除去しています。</span><span class="sxs-lookup"><span data-stu-id="97203-1431">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97203-1432">Returns a string or character containing the specified string converted to uppercase.</span><span class="sxs-lookup"><span data-stu-id="97203-1432">Returns a string or character containing the specified string converted to uppercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="97203-1433">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1433">Required.</span></span> <span data-ttu-id="97203-1434">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1434">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="97203-1435">Returns a string or character containing the specified string converted to uppercase.</span><span class="sxs-lookup"><span data-stu-id="97203-1435">Returns a string or character containing the specified string converted to uppercase.</span></span></summary>
        <returns><span data-ttu-id="97203-1436">Returns a string or character containing the specified string converted to uppercase.</span><span class="sxs-lookup"><span data-stu-id="97203-1436">Returns a string or character containing the specified string converted to uppercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1437">小文字のみが変換を大文字です。すべてのアルファベットの大文字とアルファベット以外の文字は変更されません。</span><span class="sxs-lookup"><span data-stu-id="97203-1437">Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="97203-1438">この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="97203-1438">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="97203-1439">アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。</span><span class="sxs-lookup"><span data-stu-id="97203-1439">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="97203-1440">詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="97203-1440">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1441">`UCase` 関数を使って文字列を大文字に変換して返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-1441">This example uses the `UCase` function to return an uppercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value"><span data-ttu-id="97203-1442">Required.</span><span class="sxs-lookup"><span data-stu-id="97203-1442">Required.</span></span> <span data-ttu-id="97203-1443">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span><span class="sxs-lookup"><span data-stu-id="97203-1443">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span></span></param>
        <summary><span data-ttu-id="97203-1444">Returns a string or character containing the specified string converted to uppercase.</span><span class="sxs-lookup"><span data-stu-id="97203-1444">Returns a string or character containing the specified string converted to uppercase.</span></span></summary>
        <returns><span data-ttu-id="97203-1445">Returns a string or character containing the specified string converted to uppercase.</span><span class="sxs-lookup"><span data-stu-id="97203-1445">Returns a string or character containing the specified string converted to uppercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97203-1446">小文字のみが変換を大文字です。すべてのアルファベットの大文字とアルファベット以外の文字は変更されません。</span><span class="sxs-lookup"><span data-stu-id="97203-1446">Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="97203-1447">この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="97203-1447">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="97203-1448">アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。</span><span class="sxs-lookup"><span data-stu-id="97203-1448">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="97203-1449">詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="97203-1449">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97203-1450">`UCase` 関数を使って文字列を大文字に変換して返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97203-1450">This example uses the `UCase` function to return an uppercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
  </Members>
</Type>