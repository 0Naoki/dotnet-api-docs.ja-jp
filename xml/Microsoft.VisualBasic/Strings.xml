<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4f13c149a72369d178effaa99f3e4cb3e277653b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659851" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The <see langword="Strings" /> module contains procedures used to perform string operations.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このモジュールは、Visual Basic 言語キーワードおよび文字列操作のランタイム ライブラリ メンバーをサポートします。  
  
   
  
## Examples  
 次の例では、そのスペースに文字列に分割する方法を示します。  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返します、*コード ポイントが*、または、入力文字の文字コード。 0 ~ 1 バイト文字セット (SBCS) の値の 255-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。  
  
 `AscW` 入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。  
  
> [!NOTE]
>  `AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。  
  
   
  
## Examples  
 次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返します、*コード ポイントが*、または、入力文字の文字コード。 0 ~ 1 バイト文字セット (SBCS) の値の 255-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。  
  
 `AscW` 入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。  
  
> [!NOTE]
>  `AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。  
  
   
  
## Examples  
 次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返します、*コード ポイントが*、または、入力文字の文字コード。 0 ~ 1 バイト文字セット (SBCS) の値の 255-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。  
  
 `AscW` 入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。  
  
> [!NOTE]
>  `AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。  
  
   
  
## Examples  
 次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返します、*コード ポイントが*、または、入力文字の文字コード。 0 ~ 1 バイト文字セット (SBCS) の値の 255-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。  
  
 `AscW` 入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。  
  
> [!NOTE]
>  `AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。  
  
   
  
## Examples  
 次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Required. An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</param>
        <summary>Returns the character associated with the specified character code.</summary>
        <returns>Returns the character associated with the specified character code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 受け入れられるように非対称範囲`CharCode`記憶域の違いを補正、`Short`と`Integer`です。 たとえば、-29183 は、 `Short` +36353 が、`Integer`です。 これには、Visual Basic 6.0 との互換性も容易になります。  
  
 `Chr` 使用して、<xref:System.Text.Encoding>クラス内で、<xref:System.Text?displayProperty=nameWithType>セット (DBCS) の名前空間を現在のスレッドが 1 バイト文字セット (SBCS) または 2 バイト文字を使用するかどうかを判断します。 その`CharCode`コードとして、適切な一連のポイントします。 範囲は 0 ~ 255 の SBCS 文字-32768 から 65535 までの DBCS 文字を指定できます。  
  
 返される値に含まれている現在のスレッドのコード ページによって異なります、<xref:System.Globalization.TextInfo.ANSICodePage%2A>のプロパティ、<xref:System.Globalization.TextInfo>クラス内で、<xref:System.Globalization>名前空間。 取得することができます<xref:System.Globalization.TextInfo.ANSICodePage%2A>を指定して`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`です。  
  
 `ChrW` 受け取る`CharCode`unicode コード ポイント。 範囲は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。 -32768 ~-1 の値では、+32768 +65535 ~ の範囲内の値として扱われる同じです。  
  
 0 ~ 31 の数値では、標準の ASCII コードと同じです。 たとえば、`Chr(10)`ライン フィード文字を返します。  
  
> [!NOTE]
>  `ChrB`以前のバージョンの Visual Basic での関数は、1 バイトを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic と .NET Framework でのすべての文字列が Unicode がおよび`ChrB`は現在サポートされていません。  
  
   
  
## Examples  
 次の例では、`Chr`関数を指定した文字コードに関連付けられている文字を返します。  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Required. An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</param>
        <summary>Returns the character associated with the specified character code.</summary>
        <returns>Returns the character associated with the specified character code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 受け入れられるように非対称範囲`CharCode`記憶域の違いを補正、`Short`と`Integer`です。 たとえば、-29183 は、 `Short` +36353 が、`Integer`です。 これには、Visual Basic 6.0 との互換性も容易になります。  
  
 `Chr` 使用して、<xref:System.Text.Encoding>クラス内で、<xref:System.Text?displayProperty=nameWithType>セット (DBCS) の名前空間を現在のスレッドが 1 バイト文字セット (SBCS) または 2 バイト文字を使用するかどうかを判断します。 その`CharCode`コードとして、適切な一連のポイントします。 範囲は 0 ~ 255 の SBCS 文字-32768 から 65535 までの DBCS 文字を指定できます。  
  
 返される値に含まれている現在のスレッドのコード ページによって異なります、<xref:System.Globalization.TextInfo.ANSICodePage%2A>のプロパティ、<xref:System.Globalization.TextInfo>クラス内で、<xref:System.Globalization>名前空間。 取得することができます<xref:System.Globalization.TextInfo.ANSICodePage%2A>を指定して`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`です。  
  
 `ChrW` 受け取る`CharCode`unicode コード ポイント。 範囲は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。 -32768 ~-1 の値では、+32768 +65535 ~ の範囲内の値として扱われる同じです。  
  
 0 ~ 31 の数値では、標準の ASCII コードと同じです。 たとえば、`Chr(10)`ライン フィード文字を返します。  
  
> [!NOTE]
>  `ChrB`以前のバージョンの Visual Basic での関数は、1 バイトを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic と .NET Framework でのすべての文字列が Unicode がおよび`ChrB`は現在サポートされていません。  
  
   
  
## Examples  
 次の例では、`Chr`関数を指定した文字コードに関連付けられている文字を返します。  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Required. One-dimensional array of strings to be searched.</param>
        <param name="Match">Required. String to search for.</param>
        <param name="Include">Optional. <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>. If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring. If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
        <returns>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合の一致なし`Match`内で見つかった`Source`、`Filter`関数は、空の配列を返します。 エラーが発生`Source`に設定されている`Nothing`か、1 次元配列ではありません。  
  
 によって返される配列、`Filter`関数には、一致した項目のみの要素が含まれています。  
  
 `Compare`引数は、次の値を持つことができます。  
  
|定数|説明|  
|-|-|  
|定数|説明|  
|`CompareMethod.Binary`|バイナリ比較を実行します|  
|`CompareMethod.Text`|テキストの比較を実行します。|  
  
   
  
## Examples  
 この例での使用、`Filter`関数。  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Required. One-dimensional array of strings to be searched.</param>
        <param name="Match">Required. String to search for.</param>
        <param name="Include">Optional. <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>. If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring. If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
        <returns>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合の一致なし`Match`内で見つかった`Source`、`Filter`関数は、空の配列を返します。 エラーが発生`Source`に設定されている`Nothing`か、1 次元配列ではありません。  
  
 によって返される配列、`Filter`関数には、一致した項目のみの要素が含まれています。  
  
 `Compare`引数は、次の値を持つことができます。  
  
|定数|説明|  
|-|-|  
|`CompareMethod.Binary`|バイナリ比較を実行します|  
|`CompareMethod.Text`|テキストの比較を実行します。|  
  
   
  
## Examples  
 この例での使用、`Filter`関数。  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Any valid expression.</param>
        <param name="Style">Optional. A valid named or user-defined format <see langword="String" /> expression.</param>
        <summary>Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</summary>
        <returns>Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType>メソッドには、同様の機能も用意されています。  
  
 ローカライズされていない数値文字列の書式を設定する場合は、目的の書式が得られるようにするユーザー定義の数値書式指定を使用する必要があります。  
  
 数値の書式設定を指定せずにしようとすると`Style`、`Format`関数と同様の機能を提供する、`Str`関数が国際的に注意してください。 ただし、正の数値形式文字列を使用して、`Format`関数値の符号の予約済み先頭を空白を含めない; を使用して、変換、`Str`関数は、先頭にスペースを保持します。  
  
## <a name="different-formats-for-different-numeric-values"></a>別の数値を別の形式  
 数値の書式のユーザー定義の式は、セミコロンで区切られた 3 つのセクションを 1 つからができます。 場合、`Style`の引数、`Format`関数には、定義済み数値書式のいずれかが含まれて、1 つだけのセクションでは許可します。  
  
|使用する場合|これは、結果|  
|-|-|  
|1 つのセクションのみ|フォーマット式は、すべての値に適用されます。|  
|2 つ|最初のセクションが正の値とゼロに適用されます。2 つ目は、負の値に適用されます。|  
|3 つ|最初のセクションが正の値に適用されます、負の値に適用される 2 番目および 3 つ目がゼロに適用されます。|  
  
 次の例は 2 つのセクション: 最初の正の値と 0 です書式を定義する。2 番目のセクションでは、負の値の形式を定義します。 以降、`Style`の引数、`Format`関数は、文字列を受け取り、引用符で囲まれています。  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 何もそれらの間のセミコロンを含める場合は、正の値の形式を使用して、欠落したセクションが印刷されます。 たとえば、次の形式が正の値が表示されます、負の値の最初のセクションで、形式を使用および表示`Zero`値が 0 の場合。  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>定義済み数値書式  
 次の表は、定義済み数値書式の名前を識別します。 これらは名前で使用する、`Style`の引数、`Format`関数。  
  
|形式名|説明|  
|-|-|  
|`General Number`、 `G`、または `g`|桁区切り記号なしの数を表示します。<br /><br /> たとえば、`Format(&H3FA, "g")`返します`1018`です。|  
|`Currency`、 `C`、または `c`|必要であれば、桁区切り記号の数が表示されます。小数点区切り文字の右側に 2 桁の数字を表示します。 出力は、システムのロケール設定に基づきます。<br /><br /> たとえば、`Format(1234567, "c")`返します`$1,234,567.00`です。|  
|`Fixed`、 `F`、または `f`|小数点区切り文字の右側に少なくとも 1 つの数値を左および 2 桁の数字を表示します。<br /><br /> たとえば、`Format(1234567, "f")`返します`1234567.00`です。|  
|`Standard`、 `N`、または `n`|小数点区切り文字の右側に桁区切り記号、少なくとも 1 つの数値を左および 2 桁の数字の数を表示します。<br /><br /> たとえば、`Format(1234567, "n")`返します`1,234,567.00`です。|  
|`Percent`|右側にすぐに追加されたパーセント記号 (%) 100 で乗算する数が表示されます。 常に、小数点区切り文字の右側に 2 桁の数字が表示されます。<br /><br /> たとえば、`Format(0.4744, "Percent")`返します`47.44%`です。|  
|`P`、または `p`|1 つのスペースで右側に付加パーセント記号 (%) 100 倍して桁区切り記号の数が表示されます。 常に、小数点区切り文字の右側に 2 桁の数字が表示されます。<br /><br /> たとえば、`Format(0.80345, "p")`返します`80.35 %`です。|  
|`Scientific`|2 つの有効桁数を提供する標準の科学的表記法を使用します。<br /><br /> たとえば、`Format(1234567, "Scientific")`返します`1.23E+06`です。|  
|`E`、または `e`|6 つの有効桁数を提供する標準の科学的表記法を使用します。<br /><br /> たとえば、`Format(1234567, "e")`返します`1.234567e+006`です。|  
|`D`、または `d`|数値を 10 進数 (基数 10) の書式による数値の値を含む文字列として表示します。 このオプションは整数型のサポート (`Byte`、 `Short`、 `Integer`、 `Long`) のみです。<br /><br /> たとえば、`Format(&H7F, "d")`返します`127`です。|  
|`X`、または `x`|数値を 16 進数 (基数 16) の書式による数値の値を含む文字列として表示します。 このオプションは整数型のサポート (`Byte`、 `Short`、 `Integer`、 `Long`) のみです。<br /><br /> たとえば、`Format(127, "x")`返します`7f`です。|  
|`Yes/No`|表示`No`番号が 0、それ以外の場合は、表示`Yes`です。<br /><br /> たとえば、`Format(0, "Yes/No")`返します`No`です。|  
|`True/False`|表示`False`番号が 0、それ以外の場合は、表示`True`です。<br /><br /> たとえば、`Format(1, "True/False")`返します`True`です。|  
|`On/Off`|表示`Off`番号が 0、それ以外の場合は、表示`On`です。<br /><br /> たとえば、`Format(1, "On/Off")`返します`On`です。|  
  
### <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Yes/No`、 `True/False`、および`On/Off`形式がサポートされていません。  
  
## <a name="user-defined-numeric-formats"></a>ユーザー定義の数値書式  
 次の表では、ユーザー定義の数値書式の作成に使用できる文字を識別します。 これらは、ビルドに使用される可能性があります、`Style`の引数、`Format`関数。  
  
|文字|説明|  
|-|-|  
|なし|書式なしで数値を表示します。|  
|(`0`)|桁プレース ホルダーです。 1 桁の数字または 0 を表示します。 式では、書式指定文字列でのゼロに対応する位置に数字がある、表示します。それ以外の場合、その位置に 0 が表示されます。<br /><br /> 0 の場合数がある少ない桁数られます (のどちらにも、10 進数) 書式指定式、先頭または末尾のゼロが表示されます。 数よりも、小数点区切り文字の右側にある複数の数字がある場合、フォーマット式の中で小数点の右側に 0 に数値の小数点以下桁数が 0 としてのラウンドのられます。 数値の小数点区切り文字の左側の桁がある場合、フォーマット式の中で小数点の左側にゼロであり、変更せず余分な桁が表示されますがあります。|  
|(`#`)|桁プレース ホルダーです。 1 桁の数字または何も表示されます。 式の位置に数字がある場合で、`#`表示; それ以外の場合、その位置に何も表示書式指定文字列に文字が表示されます。<br /><br /> この記号のような機能、`0`桁プレース ホルダー、先頭と末尾のゼロは、数がある少ない桁数よりも多い場合に表示されていない点を除いて`#`フォーマット式の中で小数点の両側の文字です。|  
|(`.`)|小数点のプレース ホルダーです。 小数点のプレース ホルダーは、小数点区切り文字の右側および左側に表示される数字の数を決定します。 フォーマット式にのみ含まれる場合`#`この記号の左側にある文字以外の数値は小数点区切り文字で始め、1 よりも小さいです。 小数部の先頭にゼロを表示するには、小数点区切り文字の左側に最初の桁プレース ホルダーとして 0 を使用します。 いくつかのロケールでは、小数点区切り文字としてコンマが使用されます。 書式設定された出力で小数点のプレース ホルダーとして使用される実際の文字は、システムによって認識される数値書式によって異なります。 したがって、場合でも、小数点のプレース ホルダーとしてコンマを使用するロケールではの形式で小数点のプレース ホルダーとして、期間を使用する必要があります。 書式指定文字列は、ロケールの正しい形式で表示されます。|  
|(`%`)|パーセント プレース ホルダーです。 式は、100 を乗算します。 パーセント記号 (`%`) 書式指定文字列の表示位置に挿入されます。|  
|(`,`)|桁区切り記号。 桁区切り記号は、千が 4 桁以上、小数点区切り文字の左側にある数値の中で、百の位を区切ります。 桁区切り記号の標準の使用が指定の形式に桁プレース ホルダーで囲まれた、桁区切り記号が含まれるかどうか (`0`または`#`)。<br /><br /> (10 進数を指定するかどうか)、小数点区切り文字のまたは一番左にすぐに、桁区切り記号文字の文字列に「スケール数を 1000 で除算して必要に応じて丸める」 500 以上 1,000 未満の数として表示されます`1`、および 500 として表示されるよりも小さい番号`0`です。 2 つ隣接する 1000 単位の区切りにはこの位置の 100万、係数と、各追加の区切りに 1,000 の拡大縮小します。<br /><br /> 小数点区切り文字の左側にすぐに以外の位置または文字列の右端の位置で複数の区切り記号は、桁区切り記号の使用を指定するだけでとして扱われます。 ロケールによって、桁区切り記号としてピリオドが使用されます。 書式設定された出力で桁区切り記号として使用される実際の文字は、システムによって認識される数値書式によって異なります。 したがって、場合でも、桁区切り記号としてピリオドを使用するロケールではの形式で桁区切り記号としてコンマを使用する必要があります。 書式指定文字列は、ロケールの正しい形式で表示されます。<br /><br /> たとえば、次の 3 つの次の書式指定文字列があるとします。<br /><br /> -   `"#,0."`、どの桁区切り記号として「100,000, 000」、文字列、数値の 1億を書式設定をします。<br />-   `"#0,."`、数値の 1億を書式設定文字列「100000」として 1,000 分の 1 の因子を使用します。<br />-   `"#,0,."`、どの桁区切り記号および数値の 1億を書式設定文字列「100,000」として 1,000 分の 1 で、スケーリングします。|  
|(`:`)|時刻の区切り記号。 いくつかのロケールでは、その他の文字を時刻の区切り記号を表すが使用されます。 時刻の区切り記号は、時間、分、および時刻の値が書式設定されるとき秒を区切ります。 書式付き出力の時刻の区切り記号として使用される実際の文字は、システム設定によって決まります。|  
|(`/`)|日付の区切り記号。 いくつかのロケールでは、その他の文字を日付の区切り記号を表すが使用されます。 日付の区切り記号は、日付の書式設定日、月、および年を区切ります。 書式設定された出力で日付の区切り記号として使用される実際の文字は、システム設定によって決まります。|  
|(`E-``E+``e-``e+`)|指数書式。 書式指定式が少なくとも 1 つの桁プレース ホルダーが含まれるかどうか (`0`または`#`) の左側に`E-`、 `E+`、 `e-`、または`e+`、指数形式、番号が表示されると`E`または`e`数と指数部の間に挿入します。 左側の桁プレース ホルダーの数は、指数部の桁数を決定します。 使用して`E-`または`e-`負の指数の横にマイナス記号を挿入します。 使用して`E+`または`e+`を負の指数の横にマイナス記号、正の指数の横にあるプラス記号を配置します。 正しく書式設定をこの記号の右側に桁プレース ホルダーを追加することもあります。|  
|`-``+``$` ( )|リテラル文字です。 これらの文字が書式指定文字列で入力したとおりに表示されます。 リストされているのいずれかの以外の文字を表示するには、先頭に円記号 (`\`) または二重引用符で囲みます ("") です。|  
|(`\`)|書式指定文字列内の次の文字を表示します。 リテラル文字として特別な意味を持つ文字を表示するには、先頭に円記号 (`\`)。 円記号自体は表示されません。 円記号の使用は、次の文字を二重引用符で囲むことと同じです。 円記号を表示するには、次の 2 つの円記号を使用 (`\\`)。<br /><br /> リテラルの文字が日付の書式設定と時刻の書式設定文字として表示できません文字の例 (`a`、 `c`、 `d`、 `h`、 `m`、 `n`、 `p`、 `q`、 `s`、 `t`、 `w`、 `y`、 `/`、および`:`)、数値の書式設定文字 (`#`、 `0`、 `%`、 `E`、 `e`、コンマ、および期間)、および文字列の書式設定文字 (`@`、 `&`、 `<`、 `>`、および`!`)。|  
|(`"``ABC``"`)|二重引用符で囲んだ文字列が表示されます ("") です。 コード内からスタイル引数に文字列を含める、使用する必要があります`Chr(34)`テキストを囲みます (`34`引用符 (") の文字コードに示します)。|  
  
### <a name="legacy-code-example"></a>古いコードの例  
 次の表には、数値のフォーマット式サンプルにはが含まれています。 (これらの例は、システムのロケール設定が英語 (米国) であると仮定)最初の列には書式指定文字列が含まれています、`Style`の引数、`Format`関数以外のフォーマット済みのデータが列見出しで指定された値を持つ場合、結果の出力を含む、他の列です。  
  
|書式設定 (`Style`)|「5」に設定として書式の設定|「-5」として書式設定|「0.5」に設定として書式の設定|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>定義済み日付/時刻の形式  
 次の表は、定義済みの日付と時刻形式の名前を識別します。 これらの名前でのスタイル引数として使用することがあります、`Format`関数。  
  
|形式名|説明|  
|-|-|  
|`General Date`、または `G`|日付/時刻が表示されます。 たとえば、`3/12/2008 11:07:31 AM` のようにします。 日付の表示は、アプリケーションの現在のカルチャ値によって決定されます。|  
|`Long Date`、 `Medium Date`、または `D`|現在のカルチャの長い日付形式に従って日付を表示します。 たとえば、`Wednesday, March 12, 2008` のようにします。|  
|`Short Date`、または `d`|現在のカルチャの短い日付形式を使用して日付を表示します。 たとえば、`3/12/2008` のようにします。<br /><br /> `d`文字は、ユーザー定義の日付形式で日付を表示します。|  
|`Long Time`、 `Medium Time`、または `T`|は現在のカルチャの長い形式の時刻の形式を使用して時刻を表示します。通常、時間、分、秒数が含まれます。 たとえば、`11:07:31 AM` のようにします。|  
|`Short Time` または `t`|現在のカルチャの短い時刻形式を使用して時刻を表示します。 たとえば、`11:07 AM` のようにします。<br /><br /> `t`文字表示`AM`または`PM`値ユーザー定義の時刻の形式で 12 時間制を使用するロケール。|  
|`f`|長い日付パターンと短い形式の時刻を現在のカルチャの書式に従って表示されます。 たとえば、`Wednesday, March 12, 2008 11:07 AM` のようにします。|  
|`F`|長い日付パターンと現在のカルチャの書式に従って長い時間が表示されます。 たとえば、`Wednesday, March 12, 2008 11:07:31 AM` のようにします。|  
|`g`|短い形式の日付と短い形式の時刻を現在のカルチャの書式に従って表示します。 たとえば、`3/12/2008 11:07 AM` のようにします。|  
|`M`, `m`|月と日付の日を表示します。 たとえば、`March 12` のようにします。<br /><br /> `M`文字は、ユーザー定義の日付書式で月を表示します。 `m`文字は、ユーザー定義の時刻書式で分を表示します。|  
|`R`, `r`|に従って日付を書式設定、<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>プロパティです。 たとえば、`Wed, 12 Mar 2008 11:07:31 GMT` のようにします。 書式設定された日付は、日付と時刻の値を調整できません。 呼び出しの前に gmt 時刻、日付/時刻値を調整する必要があります、`Format`関数。|  
|`s`|日付と時刻を並べ替え可能なインデックスとして書式設定します。 たとえば、`2008-03-12T11:07:31` のようにします。<br /><br /> `s`文字は、ユーザー定義の時刻書式で秒を表示します。|  
|`u`|日付と時刻を GMT 並べ替え可能なインデックスとして書式設定します。 たとえば、`2008-03-12 11:07:31Z` のようにします。|  
|`U`|日付と時間の長い日付と長い時刻 GMT で書式設定します。 たとえば、`Wednesday, March 12, 2008 6:07:31 PM` のようにします。|  
|`Y`, `y`|年、月と日付の書式を設定します。 たとえば、`March, 2008` のようにします。<br /><br /> `Y`と`y`文字は、ユーザー定義の日付書式で年を表示します。|  
  
 アプリケーションの現在のカルチャ情報の詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)です。  
  
## <a name="user-defined-datetime-formats"></a>ユーザー定義の日付/時刻書式  
 ユーザー定義の日付/時刻書式の作成に使用できる文字を次の表に示します。 異なり以前のバージョンの Visual Basic では、これらの形式の文字は大文字小文字を区別します。  
  
|文字|説明|  
|-|-|  
|(`:`)|時刻の区切り記号。 いくつかのロケールでは、その他の文字を時刻の区切り記号を表すが使用されます。 時刻の区切り記号は、時間、分、および時刻の値が書式設定されるとき秒を区切ります。 書式付き出力の時刻の区切り記号として使用される実際の文字は、アプリケーションの現在のカルチャ値によって決まります。|  
|(`/`)|日付の区切り記号。 いくつかのロケールでは、その他の文字を日付の区切り記号を表すが使用されます。 日付の区切り記号は、日付の書式設定日、月、および年を区切ります。 書式設定された出力で日付の区切り記号として使用される実際の文字は、アプリケーションの現在のカルチャによって決まります。|  
|(`%`)|次の文字が後続の文字に関係なく 1 文字書式として読み取ることを示すために使用します。 ユーザー定義の書式として 1 文字書式を読み取ることを示すためにも使用されます。 追加の詳細については、下記を参照してください。|  
|`d`|0 を付けない数値で日を表示 (たとえば、 `1`)。 使用して`%d`場合、これは、ユーザー定義の数値書式で唯一の文字です。|  
|`dd`|0 を付けた数値で日を表示 (たとえば、 `01`)。|  
|`ddd`|省略形として、曜日を表示します (たとえば、 `Sun`)。|  
|`dddd`|完全な名前の曜日を表示します (たとえば、 `Sunday`)。|  
|`M`|0 を付けない数値で月を表示 (たとえば、1 月は`1`)。 使用して`%M`場合、これは、ユーザー定義の数値書式で唯一の文字です。|  
|`MM`|数値に先行ゼロで、月が表示されます (たとえば、 `01/12/01`)。|  
|`MMM`|省略形として、月が表示されます (たとえば、 `Jan`)。|  
|`MMMM`|月の正式名として月を表示します (たとえば、 `January`)。|  
|`gg`|期間または年号を表す文字列が表示されます (たとえば、 `A.D.`)。|  
|`h`|12 時間制を使用して 0 を付けない数値で時間を表示します (たとえば、 `1:15:15 PM`)。 使用して`%h`場合、これは、ユーザー定義の数値書式で唯一の文字です。|  
|`hh`|12 時間制を使用してゼロで始まる数値で時間を表示します (たとえば、 `01:15:15 PM`)。|  
|`H`|24 時間制を使用して 0 を付けない数値で時間を表示します (たとえば、 `1:15:15`)。 使用して`%H`場合、これは、ユーザー定義の数値書式で唯一の文字です。|  
|`HH`|24 時間制を使用してゼロで始まる数値で時間を表示します (たとえば、 `01:15:15`)。|  
|`m`|0 を付けない数値で分を表示します (たとえば、 `12:1:15`)。 使用して`%m`場合、これは、ユーザー定義の数値書式で唯一の文字です。|  
|`mm`|ゼロで始まる数値で分を表示します (たとえば、 `12:01:15`)。|  
|`s`|0 を付けない数値で秒を表示します (たとえば、 `12:15:5`)。 使用して`%s`場合、これは、ユーザー定義の数値書式で唯一の文字です。|  
|`ss`|ゼロで始まる数値で秒を表示します (たとえば、 `12:15:05`)。|  
|`f`|秒の小数部を表示します。 たとえば`ff`が表示されますが、秒の部分の 1/100`ffff`秒の部分の 1/10000 を表示します。 最大 7 を使用することは`f`ユーザー定義の書式シンボル。 使用して`%f`場合、これは、ユーザー定義の数値書式で唯一の文字です。|  
|`t`|12 時間制を使用し、表示、大文字`A`正午前に、の時間に大文字が表示されます`P`の正午と午後 11 時 59 分の間の時間 使用して`%t`場合、これは、ユーザー定義の数値書式で唯一の文字です。|  
|`tt`|12 時間制を使用するロケールでは、表示、大文字`AM`正午前に、の時間が表示されます、大文字`PM`正午と午後 11 時 59 分の間の時間に<br /><br /> 24 時間制を使用するロケールでは、何も表示されません。|  
|`y`|0 を付けない年数字 (0 ~ 9) を表示します。 使用して`%y`場合、これは、ユーザー定義の数値書式で唯一の文字です。|  
|`yy`|該当する場合に 0 を付けた 2 桁の数値書式で年を表示します。|  
|`yyy`|4 桁の数値書式で年を表示します。|  
|`yyyy`|4 桁の数値書式で年を表示します。|  
|`z`|先行ゼロなしのタイム ゾーン オフセットを表示します (たとえば、 `-8`)。 使用して`%z`場合、これは、ユーザー定義の数値書式で唯一の文字です。|  
|`zz`|先行ゼロ付きのタイム ゾーン オフセットを表示します (たとえば、 `-08`)|  
|`zzz`|完全なタイムゾーン オフセットが表示されます (たとえば、 `-08:00`)|  
  
### <a name="legacy-code-example"></a>古いコードの例  
 ユーザー定義の日付と時刻の形式の例を次に`December 7, 1958, 8:50 PM, 35 seconds`:  
  
|形式|表示|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 デバイスの最小期間の精度は、デバイスの製造元によって決定されます。 デバイスの時刻解像度が十分に粗い場合、`f`形式の文字は、そのデバイス上で実行するときは 0 を返します。  
  
   
  
## Examples  
 `Format` の書式指定とユーザー定義の書式指定の両方を使って値の書式を指定する、`String` 関数のさまざまな使用例を次に示します。 日付の区切り記号 (`/`)、時刻の区切り記号 (`:`)、および午前/午後を示す文字 (`t` および `tt`) について、システムで実際に表示される書式は、コードが使用するロケール設定によって決まります。 時刻と日付を開発環境で表示する場合は、コード ロケールの短い時刻書式と短い日付書式が使用されます。  
  
> [!NOTE]
>  24 時間制を使用するロケールでは、午前/午後を示す記号 (`t` および `tt`) では何も表示されません。  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. Default value is –1, which indicates that the computer's regional settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values. See "Remarks" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses. See "Remarks" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See "Remarks" for values.</param>
        <summary>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</summary>
        <returns>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1 つまたは複数の省略可能な引数を省略すると、コンピューターの地域設定と一致する値が代わりに使用されます。  
  
 通貨値を基準として通貨記号の位置は、システムの地域設定によって決まります。  
  
> [!NOTE]
>  すべての設定情報は、アプリケーションのロケールから取得されます。 既定では、コントロール パネルで設定されているロケールとなります。 ただし、これによって変化する可能性プログラムから由来ゼロ以外、.NET Framework を使用して、`Number`タブです。  
  
 `IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数が小数点の左側の次の列挙値を取得します。  
  
|[値]|説明|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|コンピューターの地域の設定|  
  
   
  
## Examples  
 `FormatCurrency` 関数の使用例を次に示します。  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Number of digits after decimal point is greater than 99.</exception>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. <see langword="Date" /> expression to be formatted.</param>
        <param name="NamedFormat">Optional. Numeric value that indicates the date/time format used. If omitted, <see langword="DateFormat.GeneralDate" /> is used.</param>
        <summary>Returns a string expression representing a date/time value.</summary>
        <returns>Returns a string expression representing a date/time value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date`データ型には常に日付と時刻の両方の情報が含まれています。 型変換のために、Visual Basic と 1/1/1 (1 月 1 日 1 年) を基準値の日、00時 00分: 00 (午前 0 時) に中立的な値であること。 書式を設定する場合、`Date`日付/時刻の文字列として値`FormatDateTime`結果の文字列に中立的な値は含まれません。 #1/1/0001 を変換する場合など、9時 30分: 00 # 結果の文字列を「9時 30分: 00」です。日付情報は表示されません。 ただし、日付情報は、元にまだ存在している`Date`値し、などの関数で回復できる`DatePart`です。  
  
> [!NOTE]
>  渡す場合、`Expression`引数として、`String`リテラル、`FormatDateTime`に従って解釈される、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>アプリケーションの設定。 ただし、として渡した場合、`Date`リテラル、形式 #mm/dd/yyyy # ため`FormatDateTime`常に、解釈、`Date`英語 (米国) カルチャに従ってリテラルです。 これは、必要なため、アプリケーションを開発しを使用してコード化された場合`Date`から 1 つのリテラルは、カルチャが、別のカルチャのプラットフォームで実行されます、`Date`リテラルが正しく解析するされない可能性があります。  
  
 `NamedFormat`引数は、次の設定。  
  
|定数|説明|  
|-|-|  
|`DateFormat.GeneralDate`|日付/時刻を表示します。 短い形式の日付として、日付部分を表示します。 時刻部分がある場合は、長い時間として表示します。 存在する場合、両方のパーツを表示します。|  
|`DateFormat.LongDate`|コンピューターの地域設定で指定された長い日付形式を使用して日付を表示します。|  
|`DateFormat.ShortDate`|コンピューターの地域設定で指定された短い日付形式を使用して日付を表示します。|  
|`DateFormat.LongTime`|コンピューターの地域設定で指定された時刻の形式を使用して時刻を表示します。|  
|`DateFormat.ShortTime`|24 時間形式 (hh:mm) を使用して時刻を表示します。|  
  
   
  
## Examples  
 この例での使用、`FormatDateTime`関数。  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NamedFormat" /> setting is not valid.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. The default value is –1, which indicates that the computer's regional settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values. See "Settings" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses. See "Settings" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
        <summary>Returns an expression formatted as a number.</summary>
        <returns>Returns an expression formatted as a number.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1 つまたは複数の省略可能な引数を省略すると、省略された引数の値は、ロケール設定によって提供されます。  
  
> [!NOTE]
>  すべての設定情報は、アプリケーションのロケールから取得されます。 既定では、コントロール パネルで設定されているロケールとなります。 ただし、その可能性があります変更プログラムで .NET Framework を使用しています。  
  
 `IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数がある、次の設定。  
  
|定数|説明|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|コンピューターの地域の設定|  
  
   
  
## Examples  
 この例で、`FormatNumber`関数。  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1, which indicates that the locale settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values. See "Settings" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses. See "Settings" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
        <summary>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</summary>
        <returns>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1 つまたは複数の省略可能な引数を省略すると、省略された引数の値は、ロケール設定によって提供されます。  
  
> [!NOTE]
>  すべての設定情報は、アプリケーションのロケールから取得されます。 既定では、コントロール パネルで設定されているロケールとなります。 ただし、その可能性があります変更プログラムで .NET Framework を使用しています。  
  
 `IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数がある、次の設定。  
  
|定数|説明|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|コンピューターの地域の設定|  
  
   
  
## Examples  
 この例での使用、`FormatPercent`関数。  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <param name="Index">Required. <see langword="Integer" /> expression. The (1-based) index of the character in <c>str</c> to be returned.</param>
        <summary>Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</summary>
        <returns>
          <see langword="Char" /> value representing the character from the specified index in the supplied string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`Index`が 1 より小さいか、または最後の文字のインデックスより大きくなって`str`、`ArgumentException`がスローされます。  
  
   
  
## Examples  
 この例を使用する方法を示しています、`GetChar`で指定したインデックスから文字を取得する関数、`String`です。  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.  The integer is a one-based index if a match is found.  If no match is found, the function returns zero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Required. <see langword="String" /> expression being searched.</param>
        <param name="String2">Required. <see langword="String" /> expression sought.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStr returns  </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
              <description> The starting position for the search, which defaults to the first character position.  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is found within <paramref name="String1" /></term>
              <description> Position where match begins  </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、`InStr`文字列を解析するときに関数を使用します。  
  
> [!NOTE]
>  `InStrB`以前のバージョンの Visual Basic での関数が文字の位置ではなくバイト単位の数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`InStrB`は現在サポートされていません。  
  
 `Compare` 引数の設定は以下の通りです。  
  
|定数|値|説明|  
|-|-|-|  
|`Binary`|0|バイナリ比較を実行します|  
|`Text`|1|テキストの比較を実行します。|  
  
   
  
## Examples  
 `InStr` 関数を使って、ある文字列の中から指定された文字列を検索し、最初に見つかった文字位置を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1-based.</param>
        <param name="String1">Required. <see langword="String" /> expression being searched.</param>
        <param name="String2">Required. <see langword="String" /> expression sought.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStr returns  </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is found within <paramref name="String1" /></term>
              <description> Position where match begins  </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; length of <paramref name="String1" /></term>
              <description> 0  </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、`InStr`文字列を解析するときに関数を使用します。  
  
> [!NOTE]
>  `InStrB`以前のバージョンの Visual Basic での関数が文字の位置ではなくバイト単位の数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`InStrB`は現在サポートされていません。  
  
 `Compare` 引数の設定は以下の通りです。  
  
|定数|値|説明|  
|-|-|-|  
|`Binary`|0|バイナリ比較を実行します|  
|`Text`|1|テキストの比較を実行します。|  
  
   
  
## Examples  
 `InStr` 関数を使って、ある文字列の中から指定された文字列を検索し、最初に見つかった文字位置を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Required. String expression being searched.</param>
        <param name="StringMatch">Required. String expression being searched for.</param>
        <param name="Start">Optional. Numeric expression setting the one-based starting position for each search, starting from the left side of the string. If <c>Start</c> is omitted then –1 is used, meaning the search begins at the last character position. Search then proceeds from right to left.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.</param>
        <summary>Returns the position of the first occurrence of one string within another, starting from the right side of the string.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStrRev returns  </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> is zero-length  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is zero-length  </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is found within <paramref name="StringCheck" /></term>
              <description> Position at which the first match is found, starting with the right side of the string.  </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> is greater than length of <paramref name="StringMatch" /></term>
              <description> 0  </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 なおの構文、`InStrRev`関数の構文と同じではありません、`InStr`関数。  
  
 `Compare`引数は、次の値を持つことができます。  
  
|定数|説明|  
|-|-|  
|`Binary`|バイナリ比較を実行します。|  
|`Text`|テキストの比較を実行します。|  
  
   
  
## Examples  
 この例での使用、`InStrRev`関数。  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
        <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</param>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
        <returns>Returns a string created by joining a number of substrings contained in an array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 間のパリティがある、`Join`と`Split`関数。 `Join`関数は文字列の配列を使用し、区切り文字列を使用して、1 つの文字列を取得するで結合します。 `Split`関数の文字列を受け取り、文字列の配列を返すため、区切り記号で区切ります。 主な違いが、その`Join`文字列を区切り記号の文字列と連結できる`Split`単一の文字の区切り記号を使用して文字列を区切ることができますのみです。  
  
   
  
## Examples  
 次の例で使用する方法、`Join`いくつかの文字列からリストを作成する関数。  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> is not one dimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
        <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</param>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
        <returns>Returns a string created by joining a number of substrings contained in an array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 間のパリティがある、`Join`と`Split`関数。 `Join`関数は文字列の配列を使用し、区切り文字列を使用して、1 つの文字列を取得するで結合します。 `Split`関数の文字列を受け取り、文字列の配列を返すため、区切り記号で区切ります。 主な違いが、その`Join`文字列を区切り記号の文字列と連結できる`Split`単一の文字の区切り記号を使用して文字列を区切ることができますのみです。  
  
   
  
## Examples  
 次の例で使用する方法、`Join`いくつかの文字列からリストを作成する関数。  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> is not one dimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or character converted to lowercase.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character converted to lowercase.</summary>
        <returns>Returns a string or character converted to lowercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大文字のみが変換を小文字です。すべての英小文字とアルファベット以外の文字は変更されません。  
  
 この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。 詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)です。  
  
   
  
## Examples  
 この例では、`LCase`関数を文字列の小文字のバージョンを返します。  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character converted to lowercase.</summary>
        <returns>Returns a string or character converted to lowercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 大文字のみが変換を小文字です。すべての英小文字とアルファベット以外の文字は変更されません。  
  
 この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。 詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)です。  
  
   
  
## Examples  
 この例では、`LCase`関数を文字列の小文字のバージョンを返します。  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which the leftmost characters are returned.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</param>
        <summary>Returns a string containing a specified number of characters from the left side of a string.</summary>
        <returns>Returns a string containing a specified number of characters from the left side of a string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内の文字の数を決定する`str`を使用して、`Len`関数。 Windows フォーム アプリケーションの場合、またはを持つ他のクラスで使用する場合、`Left`プロパティを持つ関数が完全修飾する必要があります`Microsoft.VisualBasic.Left`です。  
  
> [!NOTE]
>  `LeftB`以前のバージョンの Visual Basic での関数が文字ではなくバイト単位で文字列を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LeftB`は現在サポートされていません。  
  
   
  
## Examples  
 この例での使用、`Left`の部分文字列を返す関数を指定された`String`です。 持つクラスで、`Left`プロパティである可能性がありますを完全に修飾するために必要な`Left`関数。  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Required. <see langword="String" /> expression. Name of string variable.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Length of returned string.</param>
        <summary>Returns a left-aligned string containing the specified string adjusted to the specified length.</summary>
        <returns>Returns a left-aligned string containing the specified string adjusted to the specified length.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定した文字列が指定された長さよりも長い場合は、返される文字列は指定の長さに短縮されます。 指定した文字列が指定された長さより短い場合は、スペースは、適切な長さを生成するために返される文字列の右端に追加されます。  
  
   
  
## Examples  
 この例での使用、`LSet`関数。  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`、 `RTrim`、および`Trim`関数は、文字列の末尾からスペースを削除します。  
  
   
  
## Examples  
 この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。 また、`Trim` 関数を使って両方のタイプの空白を除去しています。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string that contains characters from a specified string.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which characters are returned.</param>
        <param name="Start">Required. <see langword="Integer" /> expression. Starting position of the characters to return. If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string (""). <c>Start</c> is one-based.</param>
        <summary>Returns a string that contains all the characters starting from a specified position in a string.</summary>
        <returns>A string that consists of all the characters starting from the specified position in the string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内の文字の数を決定する`str`を使用して、`Len`関数。  
  
 Visual Basic には、`Mid`関数と`Mid`ステートメントです。 この要素はどちらも、文字列の文字の指定された数が、`Mid`関数の中に文字を返します、`Mid`文字をステートメントに置き換えます。 詳細については、次を参照してください。 [Mid ステートメント](~/docs/visual-basic/language-reference/statements/mid-statement.md)です。  
  
> [!NOTE]
>  `MidB`以前のバージョンの Visual Basic での関数が文字ではなくバイト単位で文字列を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、すべての Visual Basic の文字列と`MidB`は現在サポートされていません。  
  
   
  
## Examples  
 この例の最後の行のこのオーバー ロードを使用して、`Mid`関数を文字列から 5 番目以降の文字を返します。  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which characters are returned.</param>
        <param name="Start">Required. <see langword="Integer" /> expression. Starting position of the characters to return. If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string (""). <c>Start</c> is one based.</param>
        <param name="Length">Optional. <see langword="Integer" /> expression. Number of characters to return. If omitted or if there are fewer than <c>Length</c> characters in the text (including the character at position <c>Start</c>), all characters from the start position to the end of the string are returned.</param>
        <summary>Returns a string that contains a specified number of characters starting from a specified position in a string.</summary>
        <returns>A string that consists of the specified number of characters starting from the specified position in the string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内の文字の数を決定する`str`を使用して、`Len`関数。  
  
 Visual Basic には、`Mid`関数と`Mid`ステートメントです。 この要素はどちらも、文字列の文字の指定された数が、`Mid`関数の中に文字を返します、`Mid`文字をステートメントに置き換えます。 詳細については、次を参照してください。 [Mid ステートメント](~/docs/visual-basic/language-reference/statements/mid-statement.md)です。  
  
> [!NOTE]
>  `MidB`以前のバージョンの Visual Basic での関数が文字ではなくバイト単位で文字列を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、すべての Visual Basic の文字列と`MidB`は現在サポートされていません。  
  
   
  
## Examples  
 最初の 2 つ`Mid`この例では関数では、指定した位置から始まる、文字列から指定された文字数を返します。 (最後の関数を示しています、<xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29>オーバー ロードして、文字列抽出の開始位置を指定するだけです)。  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Required. String expression containing substring to replace.</param>
        <param name="Find">Required. Substring being searched for.</param>
        <param name="Replacement">Required. Replacement substring.</param>
        <param name="Start">Optional. Position within <c>Expression</c> that starts a substring used for replacement. The return value of <see langword="Replace" /> is a string that begins at <c>Start</c>, with appropriate substitutions. If omitted, 1 is assumed.</param>
        <param name="Count">Optional. Number of substring substitutions to perform. If omitted, the default value is –1, which means "make all possible substitutions."</param>
        <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.</param>
        <summary>Returns a string in which a specified substring has been replaced with another substring a specified number of times.</summary>
        <returns>
          <see langword="Replace" /> returns the following values.  
  
 <list type="table"><item><term> If  </term><description> Replace returns  </description></item><item><term><paramref name="Find" /> is zero-length or <see langword="Nothing" /></term><description> Copy of <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> is zero-length  </term><description> Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> is 0  </term><description> Copy of <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値、`Replace`関数は、指定した位置から始まる文字列`Start`の末尾で終了し、`Expression`で置き換えが行われた文字列で指定されたとおり、`Find`と`Replace`値。  
  
 `Compare`引数は、次の値を持つことができます。  
  
|定数|説明|  
|-|-|  
|`Binary`|バイナリ比較を実行します|  
|`Text`|テキストの比較を実行します。|  
  
   
  
## Examples  
 この例で、`Replace`関数。  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which the rightmost characters are returned.</param>
        <param name="Length">Required. <see langword="Integer" />. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</param>
        <summary>Returns a string containing a specified number of characters from the right side of a string.</summary>
        <returns>Returns a string containing a specified number of characters from the right side of a string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内の文字の数を決定する`str`を使用して、`Len`関数。 Windows フォーム、またはを持つ他のクラスで使用されている場合、`Right`プロパティを持つ関数が完全修飾する必要があります`Microsoft.VisualBasic.Strings.Right`です。  
  
> [!NOTE]
>  `RightB`以前のバージョンの Visual Basic での関数が文字ではなく、(バイト単位) の文字列を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`RightB`は現在サポートされていません。  
  
   
  
## Examples  
 この例での使用、`Right`の部分文字列を返す関数を指定された`String`です。 持つクラスで、`Right`プロパティである可能性がありますを完全に修飾するために必要な`Right`関数。  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Required. <see langword="String" /> expression. Name of string variable.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Length of returned string.</param>
        <summary>Returns a right-aligned string containing the specified string adjusted to the specified length.</summary>
        <returns>Returns a right-aligned string containing the specified string adjusted to the specified length.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`Source`よりも長い`Length`、`RSet`のみ、左端の文字、最大の長さを配置`Source`、返される文字列にします。 指定した文字列が指定された長さより短い場合は、適切な長さを生成するために、文字列の左端にスペースが追加されます。 指定した文字列が指定された長さよりも長い場合は、指定された長さに部分は切り捨てられます。  
  
   
  
## Examples  
 この例での使用、`RSet`関数。  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`、 `RTrim`、および`Trim`関数は、文字列の末尾からスペースを削除します。  
  
   
  
## Examples  
 この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。 また、`Trim` 関数を使って両方のタイプの空白を除去しています。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The number of spaces you want in the string.</param>
        <summary>Returns a string consisting of the specified number of spaces.</summary>
        <returns>Returns a string consisting of the specified number of spaces.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space`関数は出力を書式設定および固定長文字列内のデータをクリアするのに役立ちます。  
  
   
  
## Examples  
 この例では、`Space`関数を指定した数のスペースから成る文字列を返します。  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Required. <see langword="String" /> expression containing substrings and delimiters.</param>
        <param name="Delimiter">Optional. Any single character used to identify substring limits. If <c>Delimiter</c> is omitted, the space character (" ") is assumed to be the delimiter.</param>
        <param name="Limit">Optional. Maximum number of substrings into which the input string should be split. The default, –1, indicates that the input string should be split at every occurrence of the <c>Delimiter</c> string.</param>
        <param name="Compare">Optional. Numeric value indicating the comparison to use when evaluating substrings. See "Settings" for values.</param>
        <summary>Returns a zero-based, one-dimensional array containing a specified number of substrings.</summary>
        <returns>
          <see langword="String" /> array. If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string. If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、または`Limit`、-1、`Split`関数は、区切り記号文字列の出現個所をすべてで、入力文字列を分割し、配列内の各部分文字列を返します。 ときに、`Limit`パラメーターは、ゼロより大きく、`Split`関数が、最初は文字列を分割`Limit`-1 出現する、区切り記号の後の部分文字列の配列を返します。 たとえば、`Split("a:b:c", ":")`配列を返します`{"a", "b", "c"}`、中に`Split("a:b:c", ":", 2)`配列を返します`{"a", "b:c"}`です。  
  
 ときに、`Split`関数には、行で、次の 2 つの区切り記号または先頭または文字列の末尾に区切り記号が検出すると、空の文字列を囲むとして解釈 ("") です。 たとえば、 `Split("xx", "x")` 3 つの空の文字列を含む配列を返します: 文字列と最初の"x"、"x"、文字列、2 つの間から 1 つの先頭つと最後の"x"と、文字列の末尾の 1 つです。  
  
 次の表に示す方法、省略可能な`Delimiter`、 `Limit`、および`Compare`パラメーターの動作を変更することができます、`Split`関数。  
  
|呼び出しを分割します。|戻り値|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{「Alice と Bob」}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice"、"Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"someone", "example.com"}|  
  
 `Compare`引数は、次の値を持つことができます。  
  
|定数|説明|[値]|  
|-|-|-|  
|`CompareMethod.Binary`|バイナリ比較を実行します|0|  
|`CompareMethod.Text`|テキストの比較を実行します。|1|  
  
   
  
## Examples  
 次の例では、そのスペースに文字列に分割する方法を示します。  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 次の例では、行の複数の区切り記号の文字列を分割して、空の文字列をフィルター処理する方法を示します。  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Required. Any valid <see langword="String" /> expression.</param>
        <param name="String2">Required. Any valid <see langword="String" /> expression.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns -1, 0, or 1, based on the result of a string comparison.</summary>
        <returns>The <see langword="StrComp" /> function has the following return values.  
  
 <list type="table"><item><term> If  </term><description> StrComp returns  </description></item><item><term><paramref name="String1" /> sorts ahead of <paramref name="String2" /></term><description> -1  </description></item><item><term><paramref name="String1" /> is equal to <paramref name="String2" /></term><description> 0  </description></item><item><term><paramref name="String1" /> sorts after <paramref name="String2" /></term><description> 1  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字列は、最初の文字で始まり、英数字の並べ替え値によって比較されます。 バイナリの比較、テキストの比較および並べ替え順序の詳細については、次を参照してください。 [Option Compare ステートメント](~/docs/visual-basic/language-reference/statements/option-compare-statement.md)です。  
  
 `Compare` 引数の設定は以下の通りです。  
  
|定数|説明|  
|-|-|  
|`Binary`|文字の内部バイナリ表現から派生した並べ替え順序に基づいて、バイナリ比較を実行します。|  
|`Text`|システムのによって決まる、大文字と小文字のテキスト並べ替え順序に基づいて、文字列比較を行います`LocaleID`値。|  
  
   
  
## Examples  
 この例では、`StrComp`文字列比較の結果を返す関数。  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Compare" /> value is not valid.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression to be converted.</param>
        <param name="Conversion">Required. <see cref="T:Microsoft.VisualBasic.VbStrConv" /> member. The enumeration value specifying the type of conversion to perform.</param>
        <param name="LocaleID">Optional. The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value. (The system <see langword="LocaleID" /> value is the default.)</param>
        <summary>Returns a string converted as specified.</summary>
        <returns>Returns a string converted as specified.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 定数`VbStrConv.Wide`、 `VbStrConv.Narrow`、 `VbStrConv.SimplifiedChinese`、 `VbStrConv.TraditionalChinese`、 `VbStrConv.Katakana`、および`VbStrConv.Hiragana`ここでは適用されません、ロケールで使用する場合の実行時エラーが発生することができますが、常にではありません: 定数`VbStrConv.Katakana`と`VbStrConv.Hiragana`日本語言語パックがインストールされて、日本語以外のシステムで使用できます。 さらに、定数の使用`VbStrConv.Wide`と`VbStrConv.Narrow`インストール東アジア言語のすべてのシステムではサポートされています。  
  
 この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。 詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)です。  
  
 `Conversion` 引数の設定は以下の通りです。  
  
|列挙体のメンバー|説明|  
|-|-|  
|`VbStrConv.None`|変換は行われません|  
|`VbStrConv.LinguisticCasing`|ファイル システム (既定値) ではなく、大文字と小文字、言語の規則を使用します。 有効な`VbStrConv.UpperCase`と`VbStrConv.LowerCase`のみです。|  
|`VbStrConv.UpperCase`|文字列を大文字に変換します。|  
|`VbStrConv.LowerCase`|文字列を小文字に変換します。|  
|`VbStrConv.ProperCase`|文字列を大文字に内の各単語の最初の文字に変換します。|  
|`VbStrConv.Wide` <sup>*</sup>|半角、全角文字 (全角) に文字列 (半角) 文字に変換します。 [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|(全角) 全角文字 (半角) の文字を文字列に変換します。|  
|`VbStrConv.Katakana` <sup>**</sup>|文字列内のひらがな文字をカタカナ文字に変換します。|  
|`VbStrConv.Hiragana` <sup>**</sup>|文字列内のカタカナ文字をひらがな文字に変換します。|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|繁体字中国語文字を簡体字中国語に変換します。|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|簡体字中国語の文字を繁体字中国語に変換します。|  
  
 <sup>*</sup> アジアのロケールに適用されます。  
  
 <sup>**</sup> Japan にのみ適用されます。  
  
> [!NOTE]
>  これらの定数は、.NET Framework 共通言語ランタイムで指定されます。 その結果、それらで指定できます任意の場所、実際の値の代わりに、コード。 ほとんどを組み合わせることができます (たとえば、 `UpperCase + Wide`)、相互に排他的な場合以外 (たとえば、 `VbStrConv.Wide + VbStrConv.Narrow`)。  
  
 適切な大文字と小文字の有効な単語の区切り文字を次に示します: Null (`Chr$(0)`)、水平タブ (`Chr$(9)`)、ライン フィード (`Chr$(10)`)、垂直タブ (`Chr$(11)`)、フォーム フィード (`Chr$(12)`)、キャリッジ リターン (`Chr$(13)`)、スペース (1 バイト文字セット) (`Chr$(32)`)。 指定できますが、完全または幅の半分領域の実際の値は、東アジア言語のカルチャの国または地域によって異なります。  
  
   
  
## Examples  
 この例は、テキストをすべて小文字に変換します。  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この関数を返します、`String`の文字の繰り返しで構成します。 文字列を構成する文字が最初の文字、`Character`引数、およびそれが重複して`Number`回数。  
  
   
  
## Examples  
 この例では、`StrDup`の文字列を返す関数には、文字が重複しています。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この関数を返します、`String`の文字の繰り返しで構成します。 文字列を構成する文字が最初の文字、`Character`引数、およびそれが重複して`Number`回数。  
  
   
  
## Examples  
 この例では、`StrDup`の文字列を返す関数には、文字が重複しています。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この関数を返します、`String`の文字の繰り返しで構成します。 文字列を構成する文字が最初の文字、`Character`引数、およびそれが重複して`Number`回数。  
  
   
  
## Examples  
 この例では、`StrDup`の文字列を返す関数には、文字が重複しています。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. String expression whose characters are to be reversed. If <c>Expression</c> is a zero-length string (""), a zero-length string is returned.</param>
        <summary>Returns a string in which the character order of a specified string is reversed.</summary>
        <returns>Returns a string in which the character order of a specified string is reversed.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `StrReverse`関数と同じ文字を含む文字列を返します`Expression`、その逆の順序で。  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`、 `RTrim`、および`Trim`関数は、文字列の末尾からスペースを削除します。  
  
   
  
## Examples  
 この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。 また、`Trim` 関数を使って両方のタイプの空白を除去しています。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
        <returns>Returns a string or character containing the specified string converted to uppercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小文字のみが変換を大文字です。すべてのアルファベットの大文字とアルファベット以外の文字は変更されません。  
  
 この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。 詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)です。  
  
   
  
## Examples  
 `UCase` 関数を使って文字列を大文字に変換して返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
        <returns>Returns a string or character containing the specified string converted to uppercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小文字のみが変換を大文字です。すべてのアルファベットの大文字とアルファベット以外の文字は変更されません。  
  
 この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。 詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)です。  
  
   
  
## Examples  
 `UCase` 関数を使って文字列を大文字に変換して返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
  </Members>
</Type>