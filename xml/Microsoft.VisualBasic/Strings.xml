<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bf4c75593584da586235d5b1ccfbae1c22c5b513" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53223345" /></Metadata><TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Strings" /> モジュールに含まれるプロシージャを使って、文字列操作を実行します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このモジュールは、Visual Basic 言語のキーワードと文字列を操作するランタイム ライブラリ メンバーをサポートします。  
  
   
  
## Examples  
 次の例では、その空白で文字列を分割する方法を示します。  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">キーワード (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic ランタイム ライブラリ メンバー</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">必須です。 任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。 <paramref name="String" /> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。 <paramref name="String" /> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</param>
        <summary>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</summary>
        <returns>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返します、*コード ポイント*、または入力文字の文字コード。 0 ~ 255 の 1 バイト文字セット (SBCS) 値-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。  
  
 `AscW` 入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッド カルチャとコード ページの設定に依存しません。  
  
> [!NOTE]
>  `AscB`以前のバージョンの Visual Basic の関数が文字ではなく、バイトのコードを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic 2005 のすべての文字列が Unicode では、`AscB`現在サポートされていません。  
  
   
  
## Examples  
 次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">関数 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">必須です。 任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。 <paramref name="String" /> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。 <paramref name="String" /> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</param>
        <summary>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</summary>
        <returns>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返します、*コード ポイント*、または入力文字の文字コード。 0 ~ 255 の 1 バイト文字セット (SBCS) 値-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。  
  
 `AscW` 入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッド カルチャとコード ページの設定に依存しません。  
  
> [!NOTE]
>  `AscB`以前のバージョンの Visual Basic の関数が文字ではなく、バイトのコードを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic 2005 のすべての文字列が Unicode では、`AscB`現在サポートされていません。  
  
   
  
## Examples  
 次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">関数 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">必須です。 任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。 <paramref name="String" /> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。 <paramref name="String" /> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</param>
        <summary>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</summary>
        <returns>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返します、*コード ポイント*、または入力文字の文字コード。 0 ~ 255 の 1 バイト文字セット (SBCS) 値-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。  
  
 `AscW` 入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッド カルチャとコード ページの設定に依存しません。  
  
> [!NOTE]
>  `AscB`以前のバージョンの Visual Basic の関数が文字ではなく、バイトのコードを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic 2005 のすべての文字列が Unicode では、`AscB`現在サポートされていません。  
  
   
  
## Examples  
 次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">関数 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">必須です。 任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。 <paramref name="String" /> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。 <paramref name="String" /> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</param>
        <summary>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</summary>
        <returns>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返します、*コード ポイント*、または入力文字の文字コード。 0 ~ 255 の 1 バイト文字セット (SBCS) 値-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。  
  
 `AscW` 入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッド カルチャとコード ページの設定に依存しません。  
  
> [!NOTE]
>  `AscB`以前のバージョンの Visual Basic の関数が文字ではなく、バイトのコードを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic 2005 のすべての文字列が Unicode では、`AscB`現在サポートされていません。  
  
   
  
## Examples  
 次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">関数 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">必須です。 文字の <c>code point</c> (文字コード) を表す <see langword="Integer" /> 型の式。</param>
        <summary>指定された文字コードに対応する文字を返します。</summary>
        <returns>指定された文字コードに対応する文字を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非対称の範囲が受け入れられる`CharCode`ストレージの違いを補正、 `Short` 、`Integer`します。 -29183 があるなど、 `Short` +36353 が、`Integer`します。 これには、Visual Basic 6.0 との互換性も容易になります。  
  
 `Chr` 使用して、<xref:System.Text.Encoding>クラス、<xref:System.Text?displayProperty=nameWithType>セット (DBCS) のかどうか、現在のスレッドが 1 バイト文字セット (SBCS) または 2 バイト文字を使用して特定の名前空間。 その`CharCode`をコードとして適切なセットにポイントします。 範囲は 0 ~ 255 文字の SBCS の-32768 から 65535 までの DBCS 文字であることができます。  
  
 返される値に含まれている、現在のスレッドのコード ページによって異なります、<xref:System.Globalization.TextInfo.ANSICodePage%2A>のプロパティ、<xref:System.Globalization.TextInfo>クラス、<xref:System.Globalization>名前空間。 取得することができます<xref:System.Globalization.TextInfo.ANSICodePage%2A>を指定して`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`します。  
  
 `ChrW` `CharCode`として、Unicode コード ポイント。 範囲は、現在のスレッドのカルチャとコード ページの設定に依存しません。 -32768 ~-1 の値には、+32768 ~ +65535 範囲の値として同じが扱われます。  
  
 0 ~ 31 の数値では、標準の ASCII コードと同じです。 たとえば、`Chr(10)`ライン フィード文字を返します。  
  
> [!NOTE]
>  `ChrB`以前のバージョンの Visual Basic の関数は、1 バイトを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic と .NET Framework でのすべての文字列が Unicode がおよび`ChrB`現在サポートされていません。  
  
   
  
## Examples  
 次の例では、`Chr`関数を指定した文字コードに関連付けられている文字を返します。  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="Chr" /> の <paramref name="CharCode" /> は、&lt; 0 または &gt; 255。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">必須です。 文字の <c>code point</c> (文字コード) を表す <see langword="Integer" /> 型の式。</param>
        <summary>指定された文字コードに対応する文字を返します。</summary>
        <returns>指定された文字コードに対応する文字を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非対称の範囲が受け入れられる`CharCode`ストレージの違いを補正、 `Short` 、`Integer`します。 -29183 があるなど、 `Short` +36353 が、`Integer`します。 これには、Visual Basic 6.0 との互換性も容易になります。  
  
 `Chr` 使用して、<xref:System.Text.Encoding>クラス、<xref:System.Text?displayProperty=nameWithType>セット (DBCS) のかどうか、現在のスレッドが 1 バイト文字セット (SBCS) または 2 バイト文字を使用して特定の名前空間。 その`CharCode`をコードとして適切なセットにポイントします。 範囲は 0 ~ 255 文字の SBCS の-32768 から 65535 までの DBCS 文字であることができます。  
  
 返される値に含まれている、現在のスレッドのコード ページによって異なります、<xref:System.Globalization.TextInfo.ANSICodePage%2A>のプロパティ、<xref:System.Globalization.TextInfo>クラス、<xref:System.Globalization>名前空間。 取得することができます<xref:System.Globalization.TextInfo.ANSICodePage%2A>を指定して`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`します。  
  
 `ChrW` `CharCode`として、Unicode コード ポイント。 範囲は、現在のスレッドのカルチャとコード ページの設定に依存しません。 -32768 ~-1 の値には、+32768 ~ +65535 範囲の値として同じが扱われます。  
  
 0 ~ 31 の数値では、標準の ASCII コードと同じです。 たとえば、`Chr(10)`ライン フィード文字を返します。  
  
> [!NOTE]
>  `ChrB`以前のバージョンの Visual Basic の関数は、1 バイトを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic と .NET Framework でのすべての文字列が Unicode がおよび`ChrB`現在サポートされていません。  
  
   
  
## Examples  
 次の例では、`Chr`関数を指定した文字コードに関連付けられている文字を返します。  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="ChrW" /> の <paramref name="CharCode" /> は、&lt; -32768 または &gt; 65535。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">必須です。 検索対象の文字列の 1 次元配列。</param>
        <param name="Match">必須です。 検索する文字列。</param>
        <param name="Include">任意。 戻り値の部分文字列に <paramref name="Match" /> を含むか含まないかを指定する <see langword="Boolean" /> 値。 <paramref name="Include" /> が <see langword="True" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <paramref name="Match" /> を含む配列のサブセットを返します。 <paramref name="Include" /> が <see langword="False" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <paramref name="Match" /> を含まない配列のサブセットを返します。</param>
        <param name="Compare">任意。 使用する文字列比較の種類を示す数値。 値については、「設定」を参照してください。</param>
        <summary>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</summary>
        <returns>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一致なしの場合`Match`内にある`Source`、`Filter`関数は空の配列を返します。 エラーが発生`Source`に設定されている`Nothing`または 1 次元配列ではありません。  
  
 によって返される配列、`Filter`関数には、一致した項目の数を格納するための十分な要素のみが含まれています。  
  
 `Compare`引数は、次の値であることができます。  
  
|定数|説明|  
|-|-|  
|定数|説明|  
|`CompareMethod.Binary`|バイナリ比較を実行します。|  
|`CompareMethod.Text`|テキスト比較を実行します。|  
  
   
  
## Examples  
 この例の使用、`Filter`関数。  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> が <see langword="Nothing" /> であるか、1 次元の配列ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">必須です。 検索対象の文字列の 1 次元配列。</param>
        <param name="Match">必須です。 検索する文字列。</param>
        <param name="Include">任意。 戻り値の部分文字列に <paramref name="Match" /> を含むか含まないかを指定する <see langword="Boolean" /> 値。 <paramref name="Include" /> が <see langword="True" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <paramref name="Match" /> を含む配列のサブセットを返します。 <paramref name="Include" /> が <see langword="False" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <paramref name="Match" /> を含まない配列のサブセットを返します。</param>
        <param name="Compare">任意。 使用する文字列比較の種類を示す数値。 値については、「設定」を参照してください。</param>
        <summary>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</summary>
        <returns>指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一致なしの場合`Match`内にある`Source`、`Filter`関数は空の配列を返します。 エラーが発生`Source`に設定されている`Nothing`または 1 次元配列ではありません。  
  
 によって返される配列、`Filter`関数には、一致した項目の数を格納するための十分な要素のみが含まれています。  
  
 `Compare`引数は、次の値であることができます。  
  
|定数|説明|  
|-|-|  
|`CompareMethod.Binary`|バイナリ比較を実行します。|  
|`CompareMethod.Text`|テキスト比較を実行します。|  
  
   
  
## Examples  
 この例の使用、`Filter`関数。  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> が <see langword="Nothing" /> であるか、1 次元の配列ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 任意の有効な式。</param>
        <param name="Style">任意。 有効な名前の付いた、またはユーザー定義による <see langword="String" /> 型の書式指定式</param>
        <summary>書式指定文字列 (<see langword="String" />) 式に含まれる指示に従って書式設定された文字列を返します。</summary>
        <returns>書式指定文字列 (<see langword="String" />) 式に含まれる指示に従って書式設定された文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType>メソッドには、同様の機能も用意されています。  
  
 ローカライズされていない数値文字列の書式を設定する場合は、希望の外観を取得するために、ユーザー定義の数値書式指定を使用する必要があります。  
  
 数値の書式設定を指定せずにしようとすると`Style`、`Format`関数と同様の機能を提供する、`Str`関数が国際的に注意してください。 ただし、正の数値を使用して文字列として書式設定、`Format`関数には、値の符号用に予約された先頭にスペースが含まれていません。 を使用して、変換、`Str`関数は、先頭にスペースを保持します。  
  
## <a name="different-formats-for-different-numeric-values"></a>別の数値を別の形式  
 数値の書式をユーザー定義の式は、セミコロンで区切られた 3 つのセクションを 1 つからができます。 場合、`Style`の引数、`Format`関数には、定義済み数値書式のいずれかが含まれています、使用できるセクションの 1 つだけです。  
  
|使用する場合|これは、結果|  
|-|-|  
|1 つのセクションのみ|フォーマット式は、すべての値に適用されます。|  
|2 つ|最初のセクションが正の値とゼロに適用されます。2 つ目は、負の値に適用されます。|  
|3 つ|最初のセクションが正の値に適用されます、2 つ目は負の値に適用されます、および 3 つ目がゼロに適用されます。|  
  
 次の例が 2 つのセクション: 最初の正の値と 0; の形式を定義します2 番目のセクションでは、負の値の書式を定義します。 以降、`Style`の引数、`Format`関数は文字列を受け取り、引用符で囲まれています。  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 それらの間にセミコロンを含める場合は、正の値の形式を使用して、欠落したセクションが印刷されます。 たとえば、次の形式が正の値が表示されますされ負では最初のセクションで、形式を使用して値が表示されます`Zero`値が 0 の場合。  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>定義済み数値書式  
 次の表は、定義済み数値書式の名前を識別します。 これらと名前で使用できる、`Style`の引数、`Format`関数。  
  
|形式名|説明|  
|-|-|  
|`General Number`、 `G`、または `g`|桁区切り記号なしで番号を表示します。<br /><br /> たとえば、`Format(&H3FA, "g")`返します`1018`します。|  
|`Currency`、 `C`、または `c`|必要であれば、桁区切り記号の数が表示されます。10 進数の区切り記号の右側に 2 桁の数字が表示されます。 出力は、システムのロケール設定に基づきます。<br /><br /> たとえば、`Format(1234567, "c")`返します`$1,234,567.00`します。|  
|`Fixed`、 `F`、または `f`|10 進数の区切り記号の右側には、左側に少なくとも 1 つの桁と 2 桁の数字を表示します。<br /><br /> たとえば、`Format(1234567, "f")`返します`1234567.00`します。|  
|`Standard`、 `N`、または `n`|10 進数の区切り記号の右側に桁区切り記号、左側に少なくとも 1 つの数字、および 2 桁の数字の数を表示します。<br /><br /> たとえば、`Format(1234567, "n")`返します`1,234,567.00`します。|  
|`Percent`|右側にすぐに追加されたパーセント記号 (%) の 100 を乗算する数が表示されます。 常に 10 進数の区切り記号の右側に 2 桁の数字が表示されます。<br /><br /> たとえば、`Format(0.4744, "Percent")`返します`47.44%`します。|  
|`P`、または `p`|右方向と区切りを 1 つのスペースにより追加されたパーセント記号 (%) の 100 倍の数が表示されます。 常に 10 進数の区切り記号の右側に 2 桁の数字が表示されます。<br /><br /> たとえば、`Format(0.80345, "p")`返します`80.35 %`します。|  
|`Scientific`|2 つの有効桁数を提供する標準の科学的表記法を使用します。<br /><br /> たとえば、`Format(1234567, "Scientific")`返します`1.23E+06`します。|  
|`E`、または `e`|6 つの有効桁数を提供する標準の科学的表記法を使用します。<br /><br /> たとえば、`Format(1234567, "e")`返します`1.234567e+006`します。|  
|`D`、または `d`|数値は、10 進数 (基数 10) の形式で番号の値を含む文字列として表示します。 このオプションは、整数型のサポート (`Byte`、 `Short`、 `Integer`、 `Long`) のみです。<br /><br /> たとえば、`Format(&H7F, "d")`返します`127`します。|  
|`X`、または `x`|数値は、16 進数 (基数 16) 形式で番号の値を含む文字列として表示します。 このオプションは、整数型のサポート (`Byte`、 `Short`、 `Integer`、 `Long`) のみです。<br /><br /> たとえば、`Format(127, "x")`返します`7f`します。|  
|`Yes/No`|表示`No`番号が 0、それ以外の場合は、表示`Yes`します。<br /><br /> たとえば、`Format(0, "Yes/No")`返します`No`します。|  
|`True/False`|表示`False`番号が 0、それ以外の場合は、表示`True`します。<br /><br /> たとえば、`Format(1, "True/False")`返します`True`します。|  
|`On/Off`|表示`Off`番号が 0、それ以外の場合は、表示`On`します。<br /><br /> たとえば、`Format(1, "On/Off")`返します`On`します。|  
  
### <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Yes/No`、 `True/False`、および`On/Off`形式がサポートされていません。  
  
## <a name="user-defined-numeric-formats"></a>ユーザー定義の数値書式  
 次の表は、番号の書式をユーザー定義の作成に使用できる文字を識別します。 これらは、ビルドに使用可能性があります、`Style`の引数、`Format`関数。  
  
|文字|説明|  
|-|-|  
|なし|書式なしで数値を表示します。|  
|(`0`)|数字のプレース ホルダーです。 1 桁の数字または 0 を表示します。 場合は、式では、書式指定文字列での 0 に対応する位置に数字がある、それを表示します。それ以外の場合、その位置に 0 が表示されます。<br /><br /> 0 の場合数がある少ない桁数られます (小数点の左側) にフォーマット式の先頭または末尾のゼロが表示されます。 数よりも桁区切り記号の右側の桁数がある場合は、フォーマット式の小数点区切り文字の右側にゼロに数値の小数点以下桁数が 0 に丸められます。 数よりも桁区切り記号の左側の数字がある場合は、フォーマット式の小数点区切り文字の左側にゼロであり、変更しなくても、余分な桁が表示されます。|  
|(`#`)|数字のプレース ホルダーです。 1 桁の数字、または何も表示されます。 式の位置に数字がある場合で、`#`表示します。 それ以外の場合、その位置に何も表示、書式指定文字列に文字が表示されます。<br /><br /> この記号のような機能、`0`桁プレース ホルダーを先頭または末尾のゼロは、数がより少ない桁数がある場合に表示されていない点を除いて`#`フォーマット式の小数点の両側の文字。|  
|(`.`)|小数点のプレース ホルダーです。 小数点のプレース ホルダーは、小数点区切り文字の右側と左側に表示する桁数を決定します。 フォーマット式にのみ含まれる場合`#`この記号の左側にある文字。 1 は、小数点区切り文字で始まるよりも小さい数値。 小数部の先頭にゼロを表示するには、小数点区切り文字の左側に最初の数字プレース ホルダーとして 0 を使用します。 いくつかのロケールでは、コンマが小数点区切り文字として使用されます。 書式設定された出力で小数点のプレース ホルダーとして使用される実際の文字は、システムによって認識される数値書式によって異なります。 したがって、場合でも、小数点のプレース ホルダーとしてコンマを使用するロケールではの形式で小数点のプレース ホルダーとして、期間を使用する必要があります。 書式設定された文字列は、ロケールの正しい形式で表示されます。|  
|(`%`)|パーセント プレース ホルダーです。 100 で、式を乗算します。 パーセント記号 (`%`) 書式指定文字列の表示位置に挿入されます。|  
|(`,`)|桁区切り記号。 桁区切り記号は、4 つ以上の桁数、小数点区切り文字の左側の数値の中で数百から数千を区切ります。 桁区切り記号の標準の使用が指定の形式が数字のプレース ホルダーで囲まれた、桁区切り記号が含まれるかどうか (`0`または`#`)。<br /><br /> すぐまたは右端として (10 進数を指定するかどうか)、小数点区切り文字の左側に桁区切り記号文字の文字列に「スケール数を 1000 で除算して必要に応じて丸める」 500 以上 1,000 より小さい数として表示されます`1`、および数値として表示が 500 よりも小さい`0`します。 この位置に隣接する 2 つの桁区切りは、100万の係数と 1,000 の各追加の区切り線の追加の要素でスケールします。<br /><br /> 複数の区切り記号、小数点区切り文字の左側にすぐに以外の位置または文字列の右端の位置では、桁区切り記号の使用を指定するだけとして扱われます。 いくつかのロケールでは、ピリオドが桁区切り記号として使用されます。 書式設定された出力で桁区切り記号として使用される実際の文字は、システムによって認識される数値書式によって異なります。 したがって、場合でも桁区切り記号としてピリオドを使用するロケールではの形式で桁区切り記号としてコンマを使用する必要があります。 書式設定された文字列は、ロケールの正しい形式で表示されます。<br /><br /> たとえば、次の 3 つの書式設定文字列があるとします。<br /><br /> -   `"#,0."`、数値の 1億を書式設定文字列「100,000, 000」としてどの桁区切り記号。<br />-   `"#0,."`、1,000 の倍数でスケーリングを数値の 1億を書式設定文字列「100000」として使用します。<br />-   `"#,0,."`、どの桁区切り記号と 1000 として「100,000」文字列、数値の 1億を書式設定でスケーリングします。|  
|(`:`)|時刻の区切り記号。 いくつかのロケールでは、その他の文字を表す時刻の区切り記号が使用されます。 時刻の区切り記号は、時間、分、および秒の時刻の値が書式設定されるときを区切ります。 書式設定された出力で時刻の区切り記号として使用される実際の文字は、システム設定によって決まります。|  
|(`/`)|日付の区切り記号。 いくつかのロケールで日付の区切り記号を表すその他の文字を使用可能性があります。 日付の区切り記号は、日付の書式設定日、月、年を区切ります。 書式設定された出力で日付の区切り記号として使用される実際の文字は、システム設定によって決まります。|  
|(`E-``E+``e-``e+`)|指数書式。 フォーマット式が少なくとも 1 つの桁プレース ホルダーが含まれるかどうか (`0`または`#`) の左側に`E-`、 `E+`、 `e-`、または`e+`、指数形式、番号が表示されると`E`または`e`数と指数の間に挿入されます。 左側の数字のプレース ホルダーの数は、指数部の桁数を決定します。 使用`E-`または`e-`負の指数の横にマイナス記号を挿入します。 使用`E+`または`e+`負の指数の横にマイナス記号と正の指数の横にあるプラス記号を配置します。 正しく書式設定を取得するこの記号の右側に数字のプレース ホルダーを追加することもあります。|  
|`-``+``$` ( )|リテラル文字です。 これらの文字が書式指定文字列で入力したとおりに表示されます。 一覧に含まれていない文字を表示する前に円記号 (`\`) または二重引用符で囲みます ("")。|  
|(`\`)|書式指定文字列では、次の文字を表示します。 リテラル文字として特別な意味を持つ文字を表示する前に円記号 (`\`)。 円記号自体は表示されません。 円記号の使用は、次の文字を二重引用符で囲むことと同じです。 円記号を表示するには、2 つの円記号を使用 (`\\`)。<br /><br /> リテラル文字は、日付の書式設定と時刻の書式設定文字として表示できない文字の例 (`a`、 `c`、 `d`、 `h`、 `m`、 `n`、 `p`、 `q`、 `s`、 `t`、 `w`、 `y`、 `/`、および`:`)、数値の書式設定文字 (`#`、 `0`、 `%`、 `E`、 `e`、コンマ、および期間)、および文字列の書式設定文字 (`@`、 `&`、 `<`、 `>`、および`!`)。|  
|(`"``ABC``"`)|二重引用符内の文字列が表示されます ("")。 使用する必要がありますに文字列をコード内からスタイル引数に含める`Chr(34)`テキストを囲みます (`34`は引用符 (") の文字コードです)。|  
  
### <a name="legacy-code-example"></a>古いコードの例  
 次の表には、数値のフォーマット式サンプルにはが含まれています。 (これらの例は、システムのロケール設定が英語 (米国) であると仮定)最初の列には書式指定文字列が含まれています、`Style`の引数、`Format`関数、書式設定されたデータに列見出しで指定された値がある場合、結果の出力を含むその他の列。  
  
|形式 (`Style`)|「5」に設定として書式の設定|「-5」として書式設定|「0.5」に設定として書式の設定|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>定義済み日付/時刻書式  
 次の表は、定義済みの日付/時刻書式名を識別します。 これらは名前のスタイル引数として使用することがあります、`Format`関数。  
  
|形式名|説明|  
|-|-|  
|`General Date`、または `G`|日付/時刻を表示します。 たとえば、`3/12/2008 11:07:31 AM` のようにします。 日付の表示については、アプリケーションの現在のカルチャ値によって決まります。|  
|`Long Date`、 `Medium Date`、または `D`|現在のカルチャの長い日付形式に従って日付を表示します。 たとえば、`Wednesday, March 12, 2008` のようにします。|  
|`Short Date`、または `d`|現在のカルチャの短い日付形式を使用して日付を表示します。 たとえば、`3/12/2008` のようにします。<br /><br /> `d`文字は、ユーザー定義の日付形式で日付を表示します。|  
|`Long Time`、 `Medium Time`、または `T`|現在のカルチャの長い時刻形式では; を使用して時刻を表示します通常、時間、分、秒数が含まれます。 たとえば、`11:07:31 AM` のようにします。|  
|`Short Time` または `t`|現在のカルチャの短い形式の時刻の形式を使用して時刻を表示します。 たとえば、`11:07 AM` のようにします。<br /><br /> `t`文字表示`AM`または`PM`ユーザー定義の時刻の形式で 12 時間制を使用するロケールの値。|  
|`f`|長い日付と短い形式の時刻を現在のカルチャの書式に従って表示します。 たとえば、`Wednesday, March 12, 2008 11:07 AM` のようにします。|  
|`F`|長い日付と現在のカルチャの書式に従って長い時間が表示されます。 たとえば、`Wednesday, March 12, 2008 11:07:31 AM` のようにします。|  
|`g`|短い形式の日付と短い形式の時刻を現在のカルチャの書式に従って表示します。 たとえば、`3/12/2008 11:07 AM` のようにします。|  
|`M`、 `m`|月と日付の日が表示されます。 たとえば、`March 12` のようにします。<br /><br /> `M`文字は、ユーザー定義の日付書式で月を表示します。 `m`文字は、ユーザー定義の時刻書式で分を表示します。|  
|`R`、 `r`|に従って日付の書式設定、<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>プロパティ。 たとえば、`Wed, 12 Mar 2008 11:07:31 GMT` のようにします。 書式設定された日付では、日付と時刻の値は調整されません。 呼び出しの前に GMT の日付/時刻値を調整する必要があります、`Format`関数。|  
|`s`|日付と時刻を並べ替え可能なインデックスとして書式設定します。 たとえば、`2008-03-12T11:07:31` のようにします。<br /><br /> `s`文字は、ユーザー定義の時刻書式で秒を表示します。|  
|`u`|日付と時刻を GMT 並べ替え可能なインデックスとして書式設定します。 たとえば、`2008-03-12 11:07:31Z` のようにします。|  
|`U`|日付と時間の長い日付と長い時刻 GMT で書式設定します。 たとえば、`Wednesday, March 12, 2008 6:07:31 PM` のようにします。|  
|`Y`、 `y`|年と月と日付の書式を設定します。 たとえば、`March, 2008` のようにします。<br /><br /> `Y`と`y`文字は、ユーザー定義の日付書式で年を表示します。|  
  
 アプリケーションの現在のカルチャ情報の詳細については、次を参照してください。[どのカルチャに影響を与えます Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)します。  
  
## <a name="user-defined-datetime-formats"></a>ユーザー定義の日付/時刻書式  
 次の表では、ユーザー定義の日付/時刻書式の作成に使用できる文字を示します。 異なり以前のバージョンの Visual Basic では、これらの形式の文字は大文字小文字を区別します。  
  
|文字|説明|  
|-|-|  
|(`:`)|時刻の区切り記号。 いくつかのロケールでは、その他の文字を表す時刻の区切り記号が使用されます。 時刻の区切り記号は、時間、分、および秒の時刻の値が書式設定されるときを区切ります。 書式設定された出力で時刻の区切り記号として使用される実際の文字は、アプリケーションの現在のカルチャ値によって決まります。|  
|(`/`)|日付の区切り記号。 いくつかのロケールで日付の区切り記号を表すその他の文字を使用可能性があります。 日付の区切り記号は、日付の書式設定日、月、年を区切ります。 書式設定された出力で日付の区切り記号として使用される実際の文字は、アプリケーションの現在のカルチャによって決まります。|  
|(`%`)|後続の文字に関係なく 1 文字書式として次の文字が読み取られることを示すために使用します。 1 文字書式をユーザー定義の書式として読み取ることを示すためにも使用されます。 追加の詳細については、下記を参照してください。|  
|`d`|0 を付けない数値として曜日を表示します (たとえば、 `1`)。 使用`%d`場合、これは、ユーザー定義の数値書式文字のみです。|  
|`dd`|先頭にゼロを数値として曜日を表示します (たとえば、 `01`)。|  
|`ddd`|省略形として日を表示します (たとえば、 `Sun`)。|  
|`dddd`|完全な名前の日を表示します (たとえば、 `Sunday`)。|  
|`M`|0 を付けない数値として月を表示します (たとえば、年 1 月として表されます`1`)。 使用`%M`場合、これは、ユーザー定義の数値書式文字のみです。|  
|`MM`|先頭にゼロを数値として月を表示します (たとえば、 `01/12/01`)。|  
|`MMM`|月の省略形を表示します (たとえば、 `Jan`)。|  
|`MMMM`|月の正式名として月を表示します (たとえば、 `January`)。|  
|`gg`|期間/時代 (年号) の文字列を表示します (たとえば、 `A.D.`)。|  
|`h`|12 時間制を使用して 0 を付けない数値として時間を表示します (たとえば、 `1:15:15 PM`)。 使用`%h`場合、これは、ユーザー定義の数値書式文字のみです。|  
|`hh`|数値に先行するゼロを 12 時間制を使用して時間を表示します (たとえば、 `01:15:15 PM`)。|  
|`H`|24 時間制を使用して 0 を付けない数値として時間を表示します (たとえば、 `1:15:15`)。 使用`%H`場合、これは、ユーザー定義の数値書式文字のみです。|  
|`HH`|数値に先行するゼロを 24 時間制を使用して時間を表示します (たとえば、 `01:15:15`)。|  
|`m`|0 を付けない数値として分を表示します (たとえば、 `12:1:15`)。 使用`%m`場合、これは、ユーザー定義の数値書式文字のみです。|  
|`mm`|数値に先行するゼロとして分を表示します (たとえば、 `12:01:15`)。|  
|`s`|0 を付けない数値 2 つ目を表示します (たとえば、 `12:15:5`)。 使用`%s`場合、これは、ユーザー定義の数値書式文字のみです。|  
|`ss`|数値に先行するゼロ秒を表示します (たとえば、 `12:15:05`)。|  
|`f`|秒の小数部を表示します。 たとえば`ff`1/100 秒が表示されますが、`ffff`秒の部分の 1/10000 を表示します。 最大 7 を使用することが`f`ユーザー定義の書式シンボル。 使用`%f`場合、これは、ユーザー定義の数値書式文字のみです。|  
|`t`|12 時間制を使用して、大文字`A`正午前に、の時間に大文字が表示されます`P`の正午と午後 11 時 59 分の間の時間 使用`%t`場合、これは、ユーザー定義の数値書式文字のみです。|  
|`tt`|12 時間制を使用するロケールによっては、表示、大文字`AM`正午前に、の時間に大文字が表示されます`PM`正午と午後 11 時 59 分の間の時間で<br /><br /> 24 時間制を使用するロケールによっては、何も表示されません。|  
|`y`|0 を付けない年の数 (0 ~ 9) が表示されます。 使用`%y`場合、これは、ユーザー定義の数値書式文字のみです。|  
|`yy`|該当する場合に 0 を付けた 2 桁の数値書式で年が表示されます。|  
|`yyy`|4 桁の数値書式で年を表示します。|  
|`yyyy`|4 桁の数値書式で年を表示します。|  
|`z`|先行ゼロなしのタイム ゾーン オフセットを表示します (たとえば、 `-8`)。 使用`%z`場合、これは、ユーザー定義の数値書式文字のみです。|  
|`zz`|先行ゼロ付きのタイム ゾーン オフセットを表示します (たとえば、 `-08`)|  
|`zzz`|完全なタイムゾーン オフセットを表示します (たとえば、 `-08:00`)|  
  
### <a name="legacy-code-example"></a>古いコードの例  
 ユーザー定義の日付と時刻の形式の例を次に`December 7, 1958, 8:50 PM, 35 seconds`:  
  
|形式|表示|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 デバイスの最小期間の精度は、デバイスの製造元によって決定されます。 デバイスの期間の精度は十分に粗い場合、`f`書式指定文字がそのデバイス上で実行するときは 0 を返します。  
  
   
  
## Examples  
 `Format` の書式指定とユーザー定義の書式指定の両方を使って値の書式を指定する、`String` 関数のさまざまな使用例を次に示します。 日付の区切り記号 (`/`)、時刻の区切り記号 (`:`)、および午前/午後を示す文字 (`t` および `tt`) について、システムで実際に表示される書式は、コードが使用するロケール設定によって決まります。 時刻と日付を開発環境で表示する場合は、コード ロケールの短い時刻書式と短い日付書式が使用されます。  
  
> [!NOTE]
>  24 時間制を使用するロケールでは、午前/午後を示す記号 (`t` および `tt`) では何も表示されません。  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 書式指定される式。</param>
        <param name="NumDigitsAfterDecimal">任意。 表示される小数点以下の桁数を示す数値。 既定値は -1 です。これは、コンピューターの地域設定が使用されることを示しています。</param>
        <param name="IncludeLeadingDigit">任意。 小数値の先頭の 0 を表示するかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 列挙体。 値については、「解説」を参照してください。</param>
        <param name="UseParensForNegativeNumbers">任意。 負の値をかっこで囲むかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 列挙体。 値については、「解説」を参照してください。</param>
        <param name="GroupDigits">任意。 コンピューターの地域設定で指定されている桁区切り記号を使用して数値を区切るかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 列挙体。 値については、「解説」を参照してください。</param>
        <summary>システムの [コントロール パネル] で定義されている通貨記号を使って通貨形式の文字列に書式設定して返す文字列処理関数です。</summary>
        <returns>システムの [コントロール パネル] で定義されている通貨記号を使って通貨形式の文字列に書式設定して返す文字列処理関数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1 つまたは複数の省略可能な引数は省略すると、コンピューターの地域設定と一致する値が代わりに使用されます。  
  
 通貨の値、通貨記号の位置については、システムの地域設定によって決まります。  
  
> [!NOTE]
>  すべての設定情報は、アプリケーションのロケールから取得されます。 既定では、コントロール パネル に設定されているロケールなります。 ただし、これがプログラムで変更するからゼロ以外、.NET Framework を使用して、`Number`タブ。  
  
 `IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数が小数点の左側の次の列挙値を取得します。  
  
|[値]|説明|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|コンピューターの地域の設定|  
  
   
  
## Examples  
 `FormatCurrency` 関数の使用例を次に示します。  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">小数点以下の桁数が 99 を超えています。</exception>
        <exception cref="T:System.InvalidCastException">型が数字ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作</related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 書式設定する <see langword="Date" /> 型の式。</param>
        <param name="NamedFormat">任意。 使用する日付/時刻形式を示す数値。 省略した場合は、<see langword="DateFormat.GeneralDate" /> が使用されます。</param>
        <summary>日時の値を表す文字列式を返します。</summary>
        <returns>日時の値を表す文字列式を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date`データ型には常に日付と時刻の両方の情報が含まれています。 型変換のために、Visual Basic と見なされる 1/1/1 (1 月 1日年 1 月) を日付、および 00時 00分: 00 (午前 0 時) を時間のニュートラル値のニュートラルの値。 書式を設定する場合、`Date`日付/時刻の文字列として値`FormatDateTime`結果の文字列に基準値を含めません。 たとえば、#1/1/0001 を変換する 9時 30分: 00 と、結果文字列には、"9時 30分: 00 AM"とします。日付情報は表示されません。 ただし、日付情報は、元に引き続き存在`Date`値し、などの関数で回復できる`DatePart`します。  
  
> [!NOTE]
>  渡す場合、`Expression`引数として、`String`リテラル、`FormatDateTime`に従って解釈される、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>アプリケーションの設定。 ただし、として値を渡す場合、`Date`リテラルには、形式 # ・ mm dd を使用して/yyyy # ため`FormatDateTime`常に、解釈、`Date`英語 (米国) カルチャに基づくリテラル。 これは、必要なため、アプリケーションが開発しを使用してコード化された場合`Date`から 1 つのリテラルが、別のカルチャのプラットフォームで実行し、`Date`リテラルが正しく解析ができませんでした。  
  
 `NamedFormat`引数は、次の設定。  
  
|定数|説明|  
|-|-|  
|`DateFormat.GeneralDate`|日付/時刻を表示します。 短い形式の日付として、日付部分を表示します。 時刻部分がある場合は、長い時間として表示します。 存在する場合、両方のパーツを表示します。|  
|`DateFormat.LongDate`|コンピューターの地域設定で指定された長い日付形式を使用して日付を表示します。|  
|`DateFormat.ShortDate`|コンピューターの地域設定で指定された短い日付形式を使用して日付を表示します。|  
|`DateFormat.LongTime`|コンピューターの地域設定で指定された時刻の形式を使用して時刻を表示します。|  
|`DateFormat.ShortTime`|24 時間形式 (hh:mm) を使用して時間を表示します。|  
  
   
  
## Examples  
 この例の使用、`FormatDateTime`関数。  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NamedFormat" /> の設定が有効ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 書式指定される式。</param>
        <param name="NumDigitsAfterDecimal">任意。 表示される小数点以下の桁数を示す数値。 既定値は -1 です。これは、コンピューターの地域設定が使用されることを示しています。</param>
        <param name="IncludeLeadingDigit">任意。 小数値の先頭の 0 を表示するかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数。 値については、「設定」を参照してください。</param>
        <param name="UseParensForNegativeNumbers">任意。 負の値をかっこで囲むかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数。 値については、「設定」を参照してください。</param>
        <param name="GroupDigits">任意。 ロケール設定で指定されている桁区切り記号を使用して、数値を区切るかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
        <summary>数値形式の文字列に書式設定して返す文字列処理関数です。</summary>
        <returns>数値形式の文字列に書式設定して返す文字列処理関数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1 つまたは複数の省略可能な引数を省略すると、省略された引数の値は、ロケール設定によって提供されます。  
  
> [!NOTE]
>  すべての設定情報は、アプリケーションのロケールから取得されます。 既定では、コントロール パネル に設定されているロケールなります。 ただし、その可能性がありますプログラムで変更する .NET Framework を使用しています。  
  
 `IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数が、次の設定があります。  
  
|定数|説明|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|コンピューターの地域の設定|  
  
   
  
## Examples  
 この例では、`FormatNumber`関数。  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">型が数字ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 書式指定される式。</param>
        <param name="NumDigitsAfterDecimal">任意。 小数点以下に表示する桁数を表す数値を指定します。 既定値は -1 であり、ロケール設定が使用されることを示しています。</param>
        <param name="IncludeLeadingDigit">任意。 小数点の左側のゼロを表示するかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
        <param name="UseParensForNegativeNumbers">任意。 負の値をかっこで囲むかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
        <param name="GroupDigits">任意。 ロケール設定で指定されている桁区切り記号を使用して、数値を区切るかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
        <summary>パーセント記号 (%) が付加されたパーセント形式 (100 で乗算した) の文字列に書式設定して返す文字列処理関数です。</summary>
        <returns>パーセント記号 (%) が付加されたパーセント形式 (100 で乗算した) の文字列に書式設定して返す文字列処理関数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1 つまたは複数の省略可能な引数を省略すると、省略された引数の値は、ロケール設定によって提供されます。  
  
> [!NOTE]
>  すべての設定情報は、アプリケーションのロケールから取得されます。 既定では、コントロール パネル に設定されているロケールなります。 ただし、その可能性がありますプログラムで変更する .NET Framework を使用しています。  
  
 `IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数が、次の設定があります。  
  
|定数|説明|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|コンピューターの地域の設定|  
  
   
  
## Examples  
 この例での使用、`FormatPercent`関数。  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">型が数字ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必須です。 任意の有効な <see langword="String" /> 式。</param>
        <param name="Index">必須です。 整数型 (<see langword="Integer" />) の式を指定します。 <paramref name="str" /> から取り出す部分の文字を指定する (1 から始まる) インデックス。</param>
        <summary>指定された文字列の指定されたインデックス位置にある文字を表す <see langword="Char" /> 値を返します。</summary>
        <returns>指定された文字列の指定されたインデックス位置にある文字を表す <see langword="Char" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`Index`が 1 より小さいか、最後の文字のインデックスよりも大きい`str`、`ArgumentException`がスローされます。  
  
   
  
## Examples  
 この例は、使用する方法を示します、`GetChar`で指定したインデックスから文字を取得する関数を`String`します。  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="str" /> が <see langword="Nothing" />、<paramref name="Index" /> &lt; 1、または <paramref name="Index" /> が <paramref name="str" /> の最後の文字のインデックスよりも大きいです。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。  一致するものが見つかった場合は、整数は、1 から始まるインデックスです。  一致するものが見つからない場合は、関数は 0 を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">必須です。 検索対象の <see langword="String" /> 型の式。</param>
        <param name="String2">必須です。 検索対象の <see langword="String" /> 型の式。</param>
        <param name="Compare">任意。 文字列比較の種類を指定します。 <paramref name="Compare" /> が省略されている場合、<see langword="Option Compare" /> 設定により比較の種類を決定します。</param>
        <summary>ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。</summary>
        <returns><list type="table">
            <item>
              <term> If 
 </term>
              <description> InStr の戻り値 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> の長さが 0、または <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> の長さが 0、または <see langword="Nothing" /></term>
              <description> 既定では最初の文字の位置となる、検索の開始位置です。  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> が見つかりません。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> が内部にある <paramref name="String1" /></term>
              <description> 一致する文字列の開始位置 
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、`InStr`文字列を解析するときに関数を使用します。  
  
> [!NOTE]
>  `InStrB`以前のバージョンの Visual Basic の関数は文字の位置ではなく、バイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic 2005 のすべての文字列が Unicode では、`InStrB`現在サポートされていません。  
  
 `Compare` 引数の設定は以下の通りです。  
  
|定数|[値]|説明|  
|-|-|-|  
|`Binary`|0|バイナリ比較を実行します。|  
|`Text`|1|テキスト比較を実行します。|  
  
   
  
## Examples  
 `InStr` 関数を使って、ある文字列の中から指定された文字列を検索し、最初に見つかった文字位置を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic における文字列</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic の文字列の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare ステートメント</related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">任意。 各検索の開始位置を設定する数式。 省略した場合、検索は最初の文字位置から開始されます。 開始インデックスは 1 から始まっています。</param>
        <param name="String1">必須です。 検索対象の <see langword="String" /> 型の式。</param>
        <param name="String2">必須です。 検索対象の <see langword="String" /> 型の式。</param>
        <param name="Compare">任意。 文字列比較の種類を指定します。 <paramref name="Compare" /> が省略されている場合、<see langword="Option Compare" /> 設定により比較の種類を決定します。</param>
        <summary>ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。</summary>
        <returns><list type="table">
            <item>
              <term> If 
 </term>
              <description> InStr の戻り値 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> の長さが 0、または <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> の長さが 0、または <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> が見つかりません。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> が内部にある <paramref name="String1" /></term>
              <description> 一致する文字列の開始位置 
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; <paramref name="String1" /> の長さ</term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、`InStr`文字列を解析するときに関数を使用します。  
  
> [!NOTE]
>  `InStrB`以前のバージョンの Visual Basic の関数は文字の位置ではなく、バイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic 2005 のすべての文字列が Unicode では、`InStrB`現在サポートされていません。  
  
 `Compare` 引数の設定は以下の通りです。  
  
|定数|[値]|説明|  
|-|-|-|  
|`Binary`|0|バイナリ比較を実行します。|  
|`Text`|1|テキスト比較を実行します。|  
  
   
  
## Examples  
 `InStr` 関数を使って、ある文字列の中から指定された文字列を検索し、最初に見つかった文字位置を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic における文字列</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic の文字列の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare ステートメント</related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">必須です。 検索対象の文字列式。</param>
        <param name="StringMatch">必須です。 検索対象の文字列式。</param>
        <param name="Start">任意。 文字列の左側から開始して、各検索に対して 1 から始まる開始位置を設定する数式。 <paramref name="Start" /> を省略した場合は -1 が使用されます。この値は、検索が最後の文字位置から開始されることを示しています。 検索は右から左へと行われます。</param>
        <param name="Compare">任意。 部分文字列を評価する場合に使用する比較の種類を示す数値。 省略した場合、バイナリ比較が実行されます。 値については、「設定」を参照してください。</param>
        <summary>ある文字列の中から指定された文字列を最後の文字位置から検索を開始し、最初に見つかった文字位置 (先頭からその位置までの文字数) を返します。</summary>
        <returns><list type="table">
            <item>
              <term> If 
 </term>
              <description> InStrRev の戻り値 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> が長さ 0 の文字列 ("") のとき 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> が長さ 0 の文字列 ("") のとき 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> が見つかりません。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> が内部にある <paramref name="StringCheck" /></term>
              <description> 文字列の先頭から検索して最初に文字列が見つかった位置  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> が <paramref name="StringMatch" /> の長さよりも大きいとき</term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 注意の構文、`InStrRev`関数がないための構文と同じ、`InStr`関数。  
  
 `Compare`引数は、次の値であることができます。  
  
|定数|説明|  
|-|-|  
|`Binary`|バイナリ比較を実行します。|  
|`Text`|テキスト比較を実行します。|  
  
   
  
## Examples  
 この例の使用、`InStrRev`関数。  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> = 0 または <paramref name="Start" /> &lt; -1。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic における文字列</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic の文字列の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">必須です。 結合する部分文字列を含む 1 次元配列。</param>
        <param name="Delimiter">任意。 返された文字列内の部分文字列を区切るために使用される任意の文字列。 省略した場合は、空白文字 (" ") が使用されます。 <paramref name="Delimiter" /> が長さ 0 の文字列 ("") または <see langword="Nothing" /> の場合、リスト内のすべてのアイテムが区切り文字なしで連結されます。</param>
        <summary>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</summary>
        <returns>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 間の類似性がある、`Join`と`Split`関数。 `Join`関数が文字列の配列に受け取りを 1 つの文字列を返す、区切り文字列を使用してそれらを参加させます。 `Split`関数の文字列を受け取り、文字列の配列を返す、区切り記号で分割します。 ただし、重要な違いを`Join`区切り記号の文字列と文字列を連結できます`Split`1 つの文字の区切り記号を使用して文字列を区切ることができますのみです。  
  
   
  
## Examples  
 次の例では、使用する方法、`Join`いくつかの文字列からリストを作成する関数。  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> が 1 次元ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">必須です。 結合する部分文字列を含む 1 次元配列。</param>
        <param name="Delimiter">任意。 返された文字列内の部分文字列を区切るために使用される任意の文字列。 省略した場合は、空白文字 (" ") が使用されます。 <paramref name="Delimiter" /> が長さ 0 の文字列 ("") または <see langword="Nothing" /> の場合、リスト内のすべてのアイテムが区切り文字なしで連結されます。</param>
        <summary>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</summary>
        <returns>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 間の類似性がある、`Join`と`Split`関数。 `Join`関数が文字列の配列に受け取りを 1 つの文字列を返す、区切り文字列を使用してそれらを参加させます。 `Split`関数の文字列を受け取り、文字列の配列を返す、区切り記号で分割します。 ただし、重要な違いを`Join`区切り記号の文字列と文字列を連結できます`Split`1 つの文字の区切り記号を使用して文字列を区切ることができますのみです。  
  
   
  
## Examples  
 次の例では、使用する方法、`Join`いくつかの文字列からリストを作成する関数。  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> が 1 次元ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>小文字に変換した文字列または文字を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">必須です。 任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</param>
        <summary>小文字に変換した文字列または文字を返します。</summary>
        <returns>小文字に変換した文字列または文字を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 だけに大文字に変換されます 小文字に。すべての小文字とアルファベット以外の文字は変更されません。  
  
 この関数は、大文字と小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションがセキュリティ上の決定の比較またはケース変更操作の結果に基づくかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。 詳細については、次を参照してください。[どのカルチャに影響を与えます Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)します。  
  
   
  
## Examples  
 この例では、`LCase`関数を文字列の小文字のバージョンを返します。  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic における文字列</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic の文字列の概要</related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">必須です。 任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</param>
        <summary>小文字に変換した文字列または文字を返します。</summary>
        <returns>小文字に変換した文字列または文字を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 だけに大文字に変換されます 小文字に。すべての小文字とアルファベット以外の文字は変更されません。  
  
 この関数は、大文字と小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションがセキュリティ上の決定の比較またはケース変更操作の結果に基づくかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。 詳細については、次を参照してください。[どのカルチャに影響を与えます Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)します。  
  
   
  
## Examples  
 この例では、`LCase`関数を文字列の小文字のバージョンを返します。  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic における文字列</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic の文字列の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必須です。 左端の文字が返される <see langword="String" /> 型の式。</param>
        <param name="Length">必須です。 整数型 (<see langword="Integer" />) の式を指定します。 返す文字の数を示す数式。 0 を指定すると、長さ 0 の文字列 ("") が返されます。 <paramref name="str" /> 内の文字数以上を指定すると、文字列全体が返されます。</param>
        <summary>指定された文字数を含む文字列を返します。</summary>
        <returns>指定された文字数を含む文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内の文字の数を決定する`str`を使用して、`Len`関数。 Windows フォーム アプリケーション、またはその他のクラスを持つで使用する場合、`Left`プロパティ、関数を完全修飾する必要があります`Microsoft.VisualBasic.Left`します。  
  
> [!NOTE]
>  `LeftB`以前のバージョンの Visual Basic の関数が文字ではなくバイトで文字列を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LeftB`現在サポートされていません。  
  
   
  
## Examples  
 この例の使用、`Left`の部分文字列を返す関数を指定した`String`。 持つクラスで、`Left`プロパティ、可能性がある完全修飾するために必要な`Left`関数。  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 型の式または変数名。 <paramref name="Expression" /> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</param>
        <summary>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</summary>
        <returns>文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。  
  
 `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。 `Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。  
  
> [!NOTE]
>  `Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。  
  
> [!NOTE]
>  `LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。  
  
## <a name="smart-device-developer-notes"></a>スマート デバイスの開発者向け注意事項  
 `Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。 場合、`Object`が含まれています、`String`の長さが返されます、`String`します。 パラメーターが NULL の場合`Object`参照、関数は 0 を返します。 場合、 `Object` 、他の種類を含む、例外がスローされます。  
  
   
  
## Examples  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">必須です。 整数型 (<see langword="String" />) の式を指定します。 変数の名前を指定します。</param>
        <param name="Length">必須です。 整数型 (<see langword="Integer" />) の式を指定します。 返される文字列の長さを指定します。</param>
        <summary>指定の文字列が含まれている文字列を左寄せで指定の長さに調整して返します。</summary>
        <returns>指定の文字列が含まれている文字列を左寄せで指定の長さに調整して返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定した文字列が指定された長さよりも長い場合は、返される文字列は、指定された長さに短縮します。 指定した文字列が指定された長さよりも短い場合は、スペースは、適切な長さを生成するために、返される文字列の右端に追加されます。  
  
   
  
## Examples  
 この例の使用、`LSet`関数。  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">データ型の有効な使用方法</related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">必須です。 任意の有効な <see langword="String" /> 式。</param>
        <summary>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</summary>
        <returns>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`、 `RTrim`、および`Trim`関数は、文字列の両端から空白を削除します。  
  
   
  
## Examples  
 この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。 また、`Trim` 関数を使って両方のタイプの空白を除去しています。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された文字列からの文字を含む文字列を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必須です。 文字が返される <see langword="String" /> 型の式。</param>
        <param name="Start">必須です。 整数型 (<see langword="Integer" />) の式を指定します。 返す文字の開始位置。 <paramref name="Start" /> の値が <paramref name="str" /> 内の文字数よりも大きい場合、<see langword="Mid" /> 関数は長さ 0 の文字列 ("") を返します。 <paramref name="Start" /> は 1 から始まります。</param>
        <summary>文字列の指定の位置から始まるすべての文字を含む文字列を返します。</summary>
        <returns>文字列の指定の位置から始まるすべての文字を含む文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内の文字の数を決定する`str`を使用して、`Len`関数。  
  
 Visual Basic には、`Mid`関数と`Mid`ステートメント。 これらの要素で指定された数、文字列内の文字の両方の動作が、`Mid`関数の中に文字を返します、`Mid`ステートメントには、文字が置き換えられます。 詳細については、次を参照してください。 [Mid ステートメント](~/docs/visual-basic/language-reference/statements/mid-statement.md)します。  
  
> [!NOTE]
>  `MidB`以前のバージョンの Visual Basic の関数が文字ではなくバイトで文字列を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic のすべての文字列が Unicode では、`MidB`現在サポートされていません。  
  
   
  
## Examples  
 この例では、最後の行のこのオーバー ロードを使用して、`Mid`関数を文字列から 5 番目以降の文字を返します。  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 または <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic における文字列</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic の文字列の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid ステートメント</related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必須です。 文字が返される <see langword="String" /> 型の式。</param>
        <param name="Start">必須です。 整数型 (<see langword="Integer" />) の式を指定します。 返す文字の開始位置。 <paramref name="Start" /> の値が <paramref name="str" /> 内の文字数よりも大きい場合、<see langword="Mid" /> 関数は長さ 0 の文字列 ("") を返します。 <paramref name="Start" /> は 1 から始まります。</param>
        <param name="Length">任意。 整数型 (<see langword="Integer" />) の式を指定します。 返される文字数。 省略した場合、またはテキスト内の <paramref name="Length" /> の文字数 (位置 <paramref name="Start" /> の文字を含む) よりも少なかった場合は、開始位置から文字列の末尾までのすべての文字が返されます。</param>
        <summary>文字列の指定の位置から始まる指定の数の文字を含む文字列を返します。</summary>
        <returns>文字列の指定の位置から始まる指定の数の文字を含む文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内の文字の数を決定する`str`を使用して、`Len`関数。  
  
 Visual Basic には、`Mid`関数と`Mid`ステートメント。 これらの要素で指定された数、文字列内の文字の両方の動作が、`Mid`関数の中に文字を返します、`Mid`ステートメントには、文字が置き換えられます。 詳細については、次を参照してください。 [Mid ステートメント](~/docs/visual-basic/language-reference/statements/mid-statement.md)します。  
  
> [!NOTE]
>  `MidB`以前のバージョンの Visual Basic の関数が文字ではなくバイトで文字列を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic のすべての文字列が Unicode では、`MidB`現在サポートされていません。  
  
   
  
## Examples  
 最初の 2 つ`Mid`この例では関数は、指定した位置から始まる、文字列から指定された文字数を返します。 (最後の関数を示しています、<xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29>オーバー ロードし、のみ文字列抽出の開始位置を指定します)。  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 または <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic における文字列</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic の文字列の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid ステートメント</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 置換する部分文字列を含む文字列式。</param>
        <param name="Find">必須です。 検索する部分文字列。</param>
        <param name="Replacement">必須です。 置換する部分文字列。</param>
        <param name="Start">任意。 置換に使用される部分文字列を開始する、<paramref name="Expression" /> 内の位置。 <see langword="Replace" /> の戻り値は、<paramref name="Start" /> で始まる、適切な置換を行った文字列です。 省略した場合、1 が使用されます。</param>
        <param name="Count">任意。 置換する部分文字列の数。 省略した場合、既定値は -1 となります。この値は、すべての候補が置換されることを示しています。</param>
        <param name="Compare">任意。 部分文字列を評価する場合に使用する比較の種類を示す数値。 値については、「設定」を参照してください。</param>
        <summary>指定された文字列の一部を指定された回数分別の部分文字列で置換した文字列を返します。</summary>
        <returns><see langword="Replace" /> 関数の戻り値は次のとおりです。  
  
 <list type="table"><item><term> If 
 </term><description> Replace の戻り値 
 </description></item><item><term><paramref name="Find" /> の長さが 0、または <see langword="Nothing" /></term><description> <paramref name="Expression" /> のコピー</description></item><item><term><paramref name="Replace" /> が長さ 0 の文字列 ("") のとき 
 </term><description> <paramref name="Expression" /> の出現しない <paramref name="Find" /> のコピー</description></item><item><term><paramref name="Expression" /> の長さが 0 か <see langword="Nothing" />、または <paramref name="Start" /> の値が <paramref name="Expression" /> の長さよりも大きいとき</term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> が 0 のとき 
 </term><description> <paramref name="Expression" /> のコピー</description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値、`Replace`関数は、文字列の先頭で指定された位置にある`Start`し、最後の最後に、`Expression`で置き換えが行われた文字列の指定に従って、`Find`と`Replace`値。  
  
 `Compare`引数は、次の値であることができます。  
  
|定数|説明|  
|-|-|  
|`Binary`|バイナリ比較を実行します。|  
|`Text`|テキスト比較を実行します。|  
  
   
  
## Examples  
 この例では、`Replace`関数。  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Count" /> &lt; -1 または <paramref name="Start" /> &lt;= 0。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必須です。 右端の文字が返される <see langword="String" /> 型の式。</param>
        <param name="Length">必須です。 <see langword="Integer" />。 返す文字の数を示す数式。 0 を指定すると、長さ 0 の文字列 ("") が返されます。 <paramref name="str" /> 内の文字数以上を指定すると、文字列全体が返されます。</param>
        <summary>文字列の右端から指定された文字数分の文字列を返します。</summary>
        <returns>文字列の右端から指定された文字数分の文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内の文字の数を決定する`str`を使用して、`Len`関数。 Windows フォーム、またはその他のクラスを持つで使用する場合、`Right`プロパティ、関数を完全修飾する必要があります`Microsoft.VisualBasic.Strings.Right`します。  
  
> [!NOTE]
>  `RightB`以前のバージョンの Visual Basic の関数が文字ではなく、(バイト単位) の文字列を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode では、`RightB`現在サポートされていません。  
  
   
  
## Examples  
 この例の使用、`Right`の部分文字列を返す関数を指定した`String`。 持つクラスで、`Right`プロパティ、可能性がある完全修飾するために必要な`Right`関数。  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">必須です。 整数型 (<see langword="String" />) の式を指定します。 変数の名前を指定します。</param>
        <param name="Length">必須です。 整数型 (<see langword="Integer" />) の式を指定します。 返される文字列の長さを指定します。</param>
        <summary>文字列と長さが指定され、その長さに調整された文字列右揃えにして文字列を返します。</summary>
        <returns>文字列と長さが指定され、その長さに調整された文字列右揃えにして文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`Source`よりも長い`Length`、`RSet`の長さまで、左端文字のみを配置`Source`、返される文字列にします。 指定した文字列が指定された長さよりも短い場合は、スペースは、適切な長さを生成するために、文字列の左の端に追加されます。 指定した文字列が指定された長さよりも長い場合は、指定した長さを短縮します。  
  
   
  
## Examples  
 この例の使用、`RSet`関数。  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">データ型の有効な使用方法</related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">必須です。 任意の有効な <see langword="String" /> 式。</param>
        <summary>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</summary>
        <returns>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`、 `RTrim`、および`Trim`関数は、文字列の両端から空白を削除します。  
  
   
  
## Examples  
 この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。 また、`Trim` 関数を使って両方のタイプの空白を除去しています。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">必須です。 整数型 (<see langword="Integer" />) の式を指定します。 文字列に必要な空白の数。</param>
        <summary>指定された数のスペースから成る文字列を返します。</summary>
        <returns>指定された数のスペースから成る文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space`関数は出力を書式設定および固定長文字列内のデータをクリアするのに役立ちます。  
  
   
  
## Examples  
 この例では、`Space`関数を指定した数のスペースで構成される文字列を返します。  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 部分文字列および区切り記号を含む <see langword="String" /> 型の式。</param>
        <param name="Delimiter">任意。 文字列の区切りを識別するために使用する任意の 1 文字。 <paramref name="Delimiter" /> が省略された場合、空白文字 (" ") が区切り記号として使用されます。</param>
        <param name="Limit">任意。 入力文字列を分割する場合の部分文字列の最大数。 既定値の -1 は、<paramref name="Delimiter" /> 文字列が出現するたびに入力文字列が分割されることを示しています。</param>
        <param name="Compare">任意。 部分文字列を評価する場合に使用する比較を示す数値。 値については、「設定」を参照してください。</param>
        <summary>部分文字列ごとに区切られた文字列からゼロ ベースの 1 次元配列を作成し、返します。</summary>
        <returns><see langword="String" /> 配列 <paramref name="Expression" /> が長さ 0 の文字列 ("") の場合、<see langword="Split" /> は、長さ 0 の文字列を含む単一要素の配列を返します。 <paramref name="Delimiter" /> が長さ 0 の文字列である場合、または <paramref name="Expression" /> に Delimiter がない場合に、<see langword="Split" /> は <paramref name="Expression" /> 型の文字列を含む単一要素の配列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、または`Limit`-1 に等しい、`Split`関数が出現するすべての区切り記号の文字列で、入力文字列を分割し、配列内の部分文字列を返します。 ときに、`Limit`パラメーターが 0 より大きい、`Split`関数では 1 つ目の文字列を分割`Limit`区切り記号の出現回数を-1、結果として得られる部分文字列の配列を返します。 たとえば、`Split("a:b:c", ":")`配列を返します`{"a", "b", "c"}`、中に`Split("a:b:c", ":", 2)`配列を返します`{"a", "b:c"}`します。  
  
 ときに、`Split`関数には、行で、2 つの区切り記号または先頭または文字列の末尾に区切り記号が検出すると、空の文字列を囲むとして解釈 ("")。 たとえば、 `Split("xx", "x")` 3 つの空の文字列を含む配列を返します: つと文字列"x"、"x"の文字列、2 つの範囲のいずれか 1 つ目の最初と最後の"x"と、文字列の末尾の 1 つ。  
  
 次の表に示す方法、省略可能な`Delimiter`、 `Limit`、および`Compare`パラメーターの動作を変更することができます、`Split`関数。  
  
|呼び出しを分割します。|戻り値|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{「Alice と Bob」}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice"、"Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"someone", "example.com"}|  
  
 `Compare`引数は、次の値であることができます。  
  
|定数|説明|[値]|  
|-|-|-|  
|`CompareMethod.Binary`|バイナリ比較を実行します。|0|  
|`CompareMethod.Text`|テキスト比較を実行します。|1|  
  
   
  
## Examples  
 次の例では、その空白で文字列を分割する方法を示します。  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 次の例では、行の複数の区切り記号の文字列を分割し、空の文字列をフィルター処理する方法を示します。  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">必須です。 任意の有効な <see langword="String" /> 式。</param>
        <param name="String2">必須です。 任意の有効な <see langword="String" /> 式。</param>
        <param name="Compare">任意。 文字列比較の種類を指定します。 <paramref name="Compare" /> が省略されている場合、<see langword="Option Compare" /> 設定により比較の種類を決定します。</param>
        <summary>文字列比較の結果により、-1、0、または 1 のいずれかを返します。</summary>
        <returns><see langword="StrComp" /> 関数の戻り値は次のとおりです。  
  
 <list type="table"><item><term> If 
 </term><description> StrComp の戻り値 
 </description></item><item><term><paramref name="String1" /> が <paramref name="String2" /> よりも先に来る</term><description> -1 
 </description></item><item><term><paramref name="String1" /> と <paramref name="String2" /> は等価です。</term><description> 0 
 </description></item><item><term><paramref name="String1" /> が <paramref name="String2" /> の後に来る</term><description> 1 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字列は、最初の文字で始まる英数字の並べ替えの値によって比較されます。 バイナリの比較、テキストの比較および並べ替え順序の詳細については、次を参照してください。 [Option Compare ステートメント](~/docs/visual-basic/language-reference/statements/option-compare-statement.md)します。  
  
 `Compare` 引数の設定は以下の通りです。  
  
|定数|説明|  
|-|-|  
|`Binary`|文字の内部バイナリ表現から派生した並べ替え順序に基づいて、バイナリ比較を実行します。|  
|`Text`|システムのによって決まる、区別しないテキスト並べ替え順序に基づいてテキスト比較を実行`LocaleID`値。|  
  
   
  
## Examples  
 この例では、`StrComp`文字列比較の結果を返す関数。  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Compare" /> の値が無効です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic における文字列</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic の文字列の概要</related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必須です。 変換する <see langword="String" /> 型の式。</param>
        <param name="Conversion">必須です。 <see cref="T:Microsoft.VisualBasic.VbStrConv" /> のメンバー。 実行する比較の種類を指定する列挙値。</param>
        <param name="LocaleID">任意。 システム <see langword="LocaleID" /> 値と異なる場合の <see langword="LocaleID" /> 値。 既定値は、システムの <see langword="LocaleID" /> です。</param>
        <summary>指定に従って変換された文字列型の値を返します。</summary>
        <returns>指定に従って変換された文字列型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 定数`VbStrConv.Wide`、 `VbStrConv.Narrow`、 `VbStrConv.SimplifiedChinese`、 `VbStrConv.TraditionalChinese`、`VbStrConv.Katakana`と`VbStrConv.Hiragana`場所は適用されません、ロケールで使用すると、実行時エラーが発生することができますが、常にではありません: 定数`VbStrConv.Katakana`と`VbStrConv.Hiragana`日本語言語パックがインストールされて、日本語以外のシステムで使用できます。 さらに、定数の使用`VbStrConv.Wide`と`VbStrConv.Narrow`東アジア言語がインストールされている任意のシステムでサポートされます。  
  
 この関数は、大文字と小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションがセキュリティ上の決定の比較またはケース変更操作の結果に基づくかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。 詳細については、次を参照してください。[どのカルチャに影響を与えます Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)します。  
  
 `Conversion` 引数の設定は以下の通りです。  
  
|列挙型のメンバー|説明|  
|-|-|  
|`VbStrConv.None`|変換は行われません|  
|`VbStrConv.LinguisticCasing`|ファイル システム (既定値) ではなく、大文字と小文字、言語の規則を使用します。 有効な`VbStrConv.UpperCase`と`VbStrConv.LowerCase`のみです。|  
|`VbStrConv.UpperCase`|文字列を大文字に変換します。|  
|`VbStrConv.LowerCase`|文字列を小文字に変換します。|  
|`VbStrConv.ProperCase`|文字列を大文字に内の各単語の最初の文字に変換します。|  
|`VbStrConv.Wide` <sup>*</sup>|変換は、広い (全角) 文字を文字列に (半角) 文字を絞り込みます。 [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|(半角) 文字を文字列に広い (全角) 文字に変換します。|  
|`VbStrConv.Katakana` <sup>**</sup>|文字列内のひらがな文字をカタカナ文字に変換します。|  
|`VbStrConv.Hiragana` <sup>**</sup>|文字列内のカタカナ文字をひらがな文字に変換します。|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|繁体字中国語の文字を簡体字中国語に変換します。|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|簡体字中国語の文字を繁体字中国語に変換します。|  
  
 <sup>*</sup> アジアのロケールに適用されます。  
  
 <sup>**</sup> 日本にのみ適用されます。  
  
> [!NOTE]
>  これらの定数は、.NET Framework 共通言語ランタイムで指定されます。 その結果が使用できます任意の場所で実際の値の代わりに、コード。 ほとんどを組み合わせることができます (たとえば、 `UpperCase + Wide`)、相互に排他的な場合以外 (たとえば、 `VbStrConv.Wide + VbStrConv.Narrow`)。  
  
 以下は、適切な大文字と小文字の有効な単語の区切り文字です。Null (`Chr$(0)`)、水平タブ (`Chr$(9)`)、ライン フィード (`Chr$(10)`)、垂直タブ (`Chr$(11)`)、フォーム フィード (`Chr$(12)`)、キャリッジ リターン (`Chr$(13)`)、スペース (1 バイト文字セット) (`Chr$(32)`)。 完全または幅の半分ができる、スペースの実際の値は、国/地域の東アジア言語のカルチャによって異なります。  
  
   
  
## Examples  
 この例は、テキストをすべて小文字に変換します。  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="LocaleID" /> の値がサポートされていない、<paramref name="Conversion" /> が &lt; 0 または &gt; 2048、あるいは変換の方法が指定されたロケールでサポートされていない。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">必須です。 整数型 (<see langword="Integer" />) の式を指定します。 取得する文字列の長さ。</param>
        <param name="Character">必須です。 有効な <see langword="Char" /> 型、<see langword="String" /> 型、または <see langword="Object" /> 型の式。 式の最初の文字だけが使用されます。 文字の型が <see langword="Object" /> である場合は、<see langword="Char" /> 値または <see langword="String" /> 値を含む必要があります。</param>
        <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
        <returns>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この関数を返します、`String`繰り返しの文字で構成されます。 文字列を構成する文字が最初の文字、`Character`引数とそれが重複している`Number`回数。  
  
   
  
## Examples  
 この例では、`StrDup`の文字列を返す関数には、文字が重複しています。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> が 0 以下の数字、または <paramref name="Character" /> の型が無効。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> は <see langword="Nothing" /> です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必須です。 整数型 (<see langword="Integer" />) の式を指定します。 取得する文字列の長さ。</param>
        <param name="Character">必須です。 有効な <see langword="Char" /> 型、<see langword="String" /> 型、または <see langword="Object" /> 型の式。 式の最初の文字だけが使用されます。 文字の型が <see langword="Object" /> である場合は、<see langword="Char" /> 値または <see langword="String" /> 値を含む必要があります。</param>
        <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
        <returns>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この関数を返します、`String`繰り返しの文字で構成されます。 文字列を構成する文字が最初の文字、`Character`引数とそれが重複している`Number`回数。  
  
   
  
## Examples  
 この例では、`StrDup`の文字列を返す関数には、文字が重複しています。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> が 0 以下の数字、または <paramref name="Character" /> の型が無効。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> は <see langword="Nothing" /> です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">必須です。 整数型 (<see langword="Integer" />) の式を指定します。 取得する文字列の長さ。</param>
        <param name="Character">必須です。 有効な <see langword="Char" /> 型、<see langword="String" /> 型、または <see langword="Object" /> 型の式。 式の最初の文字だけが使用されます。 文字の型が <see langword="Object" /> である場合は、<see langword="Char" /> 値または <see langword="String" /> 値を含む必要があります。</param>
        <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
        <returns>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この関数を返します、`String`繰り返しの文字で構成されます。 文字列を構成する文字が最初の文字、`Character`引数とそれが重複している`Number`回数。  
  
   
  
## Examples  
 この例では、`StrDup`の文字列を返す関数には、文字が重複しています。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> が 0 以下の数字、または <paramref name="Character" /> の型が無効。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> は <see langword="Nothing" /> です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 文字の順序を逆にする文字列式。 <paramref name="Expression" /> が長さ 0 の文字列 ("") である場合、長さ 0 の文字列が返されます。</param>
        <summary>指定された文字列の文字の並び順を逆にした文字列を返します。</summary>
        <returns>指定された文字列の文字の並び順を逆にした文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `StrReverse`関数と同じ文字を含む文字列を返します`Expression`、逆の順序で。  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">必須です。 任意の有効な <see langword="String" /> 式。</param>
        <summary>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</summary>
        <returns>指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`、 `RTrim`、および`Trim`関数は、文字列の両端から空白を削除します。  
  
   
  
## Examples  
 この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。 また、`Trim` 関数を使って両方のタイプの空白を除去しています。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">必須です。 任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</param>
        <summary>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</summary>
        <returns>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小文字のみが変換を大文字にすべての大文字とアルファベット以外の文字は変更されません。  
  
 この関数は、大文字と小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションがセキュリティ上の決定の比較またはケース変更操作の結果に基づくかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。 詳細については、次を参照してください。[どのカルチャに影響を与えます Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)します。  
  
   
  
## Examples  
 `UCase` 関数を使って文字列を大文字に変換して返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic における文字列</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic の文字列の概要</related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">必須です。 任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</param>
        <summary>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</summary>
        <returns>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 小文字のみが変換を大文字にすべての大文字とアルファベット以外の文字は変更されません。  
  
 この関数は、大文字と小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションがセキュリティ上の決定の比較またはケース変更操作の結果に基づくかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。 詳細については、次を参照してください。[どのカルチャに影響を与えます Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)します。  
  
   
  
## Examples  
 `UCase` 関数を使って文字列を大文字に変換して返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">文字列操作の概要</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic における文字列</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic の文字列の概要</related>
      </Docs>
    </Member>
  </Members>
</Type>