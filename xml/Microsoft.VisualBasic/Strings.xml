<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6f80a22eca24fd7816ce2bd5da52f56f7f5f8c97" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39835430" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2a0ea-101">
        <see langword="Strings" /> モジュールに含まれるプロシージャを使って、文字列操作を実行します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2a0ea-101">The <see langword="Strings" /> module contains procedures used to perform string operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-102">このモジュールは、Visual Basic 言語のキーワードと文字列を操作するランタイム ライブラリ メンバーをサポートします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-102">This module supports the Visual Basic language keywords and run-time library members that manipulate strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-103">次の例では、その空白で文字列を分割する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-103">The following example demonstrates how to split a string at its spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a0ea-104">文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-104">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">
          <span data-ttu-id="2a0ea-105">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-105">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-106">任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-106">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-107">
            <c>String</c> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-107">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span>
          </span>
          <span data-ttu-id="2a0ea-108">
            <c>String</c> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-108">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-109">文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-109">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-110">文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-110">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-111">`Asc` 返します、*コード ポイント*、または入力文字の文字コード。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-111">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="2a0ea-112">0 ~ 255 の 1 バイト文字セット (SBCS) 値-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-112">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="2a0ea-113">`AscW` 入力文字の Unicode コード ポイントを返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-113">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="2a0ea-114">これは、0 ~ 65535 です。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-114">This can be 0 through 65535.</span></span> <span data-ttu-id="2a0ea-115">返される値は、現在のスレッド カルチャとコード ページの設定に依存しません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-115">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-116">`AscB`以前のバージョンの Visual Basic の関数が文字ではなく、バイトのコードを返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-116">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="2a0ea-117">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-117">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-118">Visual Basic 2005 のすべての文字列が Unicode では、`AscB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-118">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-119">次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-119">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">
          <span data-ttu-id="2a0ea-120">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-120">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-121">任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-121">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-122">
            <c>String</c> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-122">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span>
          </span>
          <span data-ttu-id="2a0ea-123">
            <c>String</c> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-123">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-124">文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-124">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-125">文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-125">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-126">`Asc` 返します、*コード ポイント*、または入力文字の文字コード。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-126">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="2a0ea-127">0 ~ 255 の 1 バイト文字セット (SBCS) 値-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-127">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="2a0ea-128">`AscW` 入力文字の Unicode コード ポイントを返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-128">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="2a0ea-129">これは、0 ~ 65535 です。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-129">This can be 0 through 65535.</span></span> <span data-ttu-id="2a0ea-130">返される値は、現在のスレッド カルチャとコード ページの設定に依存しません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-130">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-131">`AscB`以前のバージョンの Visual Basic の関数が文字ではなく、バイトのコードを返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-131">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="2a0ea-132">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-132">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-133">Visual Basic 2005 のすべての文字列が Unicode では、`AscB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-133">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-134">次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-134">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a0ea-135">文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-135">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">
          <span data-ttu-id="2a0ea-136">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-136">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-137">任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-137">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-138">
            <c>String</c> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-138">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span>
          </span>
          <span data-ttu-id="2a0ea-139">
            <c>String</c> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-139">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-140">文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-140">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-141">文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-141">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-142">`Asc` 返します、*コード ポイント*、または入力文字の文字コード。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-142">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="2a0ea-143">0 ~ 255 の 1 バイト文字セット (SBCS) 値-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-143">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="2a0ea-144">`AscW` 入力文字の Unicode コード ポイントを返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-144">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="2a0ea-145">これは、0 ~ 65535 です。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-145">This can be 0 through 65535.</span></span> <span data-ttu-id="2a0ea-146">返される値は、現在のスレッド カルチャとコード ページの設定に依存しません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-146">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-147">`AscB`以前のバージョンの Visual Basic の関数が文字ではなく、バイトのコードを返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-147">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="2a0ea-148">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-148">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-149">Visual Basic 2005 のすべての文字列が Unicode では、`AscB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-149">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-150">次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-150">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">
          <span data-ttu-id="2a0ea-151">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-151">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-152">任意の有効な <see langword="Char" /> 型または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-152">Any valid <see langword="Char" /> or <see langword="String" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-153">
            <c>String</c> が <see langword="String" /> 型の式である場合は、文字列の最初の文字のみが入力に使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-153">If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input.</span>
          </span>
          <span data-ttu-id="2a0ea-154">
            <c>String</c> が <see langword="Nothing" /> であるか、文字を含んでいない場合は、<see cref="T:System.ArgumentException" /> エラーが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-154">If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-155">文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-155">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-156">文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-156">Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-157">`Asc` 返します、*コード ポイント*、または入力文字の文字コード。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-157">`Asc` returns the *code point*, or character code, for the input character.</span></span> <span data-ttu-id="2a0ea-158">0 ~ 255 の 1 バイト文字セット (SBCS) 値-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-158">This can be 0 through 255 for single-byte character set (SBCS) values and -32768 through 32767 for double-byte character set (DBCS) values.</span></span>  
  
 <span data-ttu-id="2a0ea-159">`AscW` 入力文字の Unicode コード ポイントを返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-159">`AscW` returns the Unicode code point for the input character.</span></span> <span data-ttu-id="2a0ea-160">これは、0 ~ 65535 です。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-160">This can be 0 through 65535.</span></span> <span data-ttu-id="2a0ea-161">返される値は、現在のスレッド カルチャとコード ページの設定に依存しません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-161">The returned value is independent of the culture and code page settings for the current thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-162">`AscB`以前のバージョンの Visual Basic の関数が文字ではなく、バイトのコードを返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-162">The `AscB` function of earlier versions of Visual Basic returns a code for a byte, rather than a character.</span></span> <span data-ttu-id="2a0ea-163">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-163">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-164">Visual Basic 2005 のすべての文字列が Unicode では、`AscB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-164">All Visual Basic 2005 strings are in Unicode, and `AscB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-165">次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-165">The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.</span></span>  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">
          <span data-ttu-id="2a0ea-166">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-166">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-167">文字の <c>code point</c> (文字コード) を表す <see langword="Integer" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-167">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-168">指定された文字コードに対応する文字を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-168">Returns the character associated with the specified character code.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-169">指定された文字コードに対応する文字を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-169">Returns the character associated with the specified character code.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-170">非対称の範囲が受け入れられる`CharCode`ストレージの違いを補正、 `Short` 、`Integer`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-170">The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`.</span></span> <span data-ttu-id="2a0ea-171">-29183 があるなど、 `Short` +36353 が、`Integer`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-171">For example, -29183 is a `Short` but +36353 is an `Integer`.</span></span> <span data-ttu-id="2a0ea-172">これには、Visual Basic 6.0 との互換性も容易になります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-172">This also facilitates compatibility with Visual Basic 6.0.</span></span>  
  
 <span data-ttu-id="2a0ea-173">`Chr` 使用して、<xref:System.Text.Encoding>クラス、<xref:System.Text?displayProperty=nameWithType>セット (DBCS) のかどうか、現在のスレッドが 1 バイト文字セット (SBCS) または 2 バイト文字を使用して特定の名前空間。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-173">`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=nameWithType> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</span></span> <span data-ttu-id="2a0ea-174">その`CharCode`をコードとして適切なセットにポイントします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-174">It then takes `CharCode` as a code point in the appropriate set.</span></span> <span data-ttu-id="2a0ea-175">範囲は 0 ~ 255 文字の SBCS の-32768 から 65535 までの DBCS 文字であることができます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-175">The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</span></span>  
  
 <span data-ttu-id="2a0ea-176">返される値に含まれている、現在のスレッドのコード ページによって異なります、<xref:System.Globalization.TextInfo.ANSICodePage%2A>のプロパティ、<xref:System.Globalization.TextInfo>クラス、<xref:System.Globalization>名前空間。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-176">The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace.</span></span> <span data-ttu-id="2a0ea-177">取得することができます<xref:System.Globalization.TextInfo.ANSICodePage%2A>を指定して`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-177">You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span></span>  
  
 <span data-ttu-id="2a0ea-178">`ChrW` `CharCode`として、Unicode コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-178">`ChrW` takes `CharCode` as a Unicode code point.</span></span> <span data-ttu-id="2a0ea-179">範囲は、現在のスレッドのカルチャとコード ページの設定に依存しません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-179">The range is independent of the culture and code page settings for the current thread.</span></span> <span data-ttu-id="2a0ea-180">-32768 ~-1 の値には、+32768 ~ +65535 範囲の値として同じが扱われます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-180">Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</span></span>  
  
 <span data-ttu-id="2a0ea-181">0 ~ 31 の数値では、標準の ASCII コードと同じです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-181">Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</span></span> <span data-ttu-id="2a0ea-182">たとえば、`Chr(10)`ライン フィード文字を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-182">For example, `Chr(10)` returns a line feed character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-183">`ChrB`以前のバージョンの Visual Basic の関数は、1 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-183">The `ChrB` function in earlier versions of Visual Basic returns a single byte.</span></span> <span data-ttu-id="2a0ea-184">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-184">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-185">Visual Basic と .NET Framework でのすべての文字列が Unicode がおよび`ChrB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-185">All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-186">次の例では、`Chr`関数を指定した文字コードに関連付けられている文字を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-186">The following example uses the `Chr` function to return the character associated with the specified character code.</span></span>  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-187">
            <see langword="Chr" /> の <paramref name="CharCode" /> は、&lt; 0 または &gt; 255。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-187">
              <paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">
          <span data-ttu-id="2a0ea-188">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-188">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-189">文字の <c>code point</c> (文字コード) を表す <see langword="Integer" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-189">An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-190">指定された文字コードに対応する文字を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-190">Returns the character associated with the specified character code.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-191">指定された文字コードに対応する文字を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-191">Returns the character associated with the specified character code.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-192">非対称の範囲が受け入れられる`CharCode`ストレージの違いを補正、 `Short` 、`Integer`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-192">The asymmetric range accepted for `CharCode` compensates for the storage differences between the `Short` and the `Integer`.</span></span> <span data-ttu-id="2a0ea-193">-29183 があるなど、 `Short` +36353 が、`Integer`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-193">For example, -29183 is a `Short` but +36353 is an `Integer`.</span></span> <span data-ttu-id="2a0ea-194">これには、Visual Basic 6.0 との互換性も容易になります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-194">This also facilitates compatibility with Visual Basic 6.0.</span></span>  
  
 <span data-ttu-id="2a0ea-195">`Chr` 使用して、<xref:System.Text.Encoding>クラス、<xref:System.Text?displayProperty=nameWithType>セット (DBCS) のかどうか、現在のスレッドが 1 バイト文字セット (SBCS) または 2 バイト文字を使用して特定の名前空間。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-195">`Chr` uses the <xref:System.Text.Encoding> class in the <xref:System.Text?displayProperty=nameWithType> namespace to determine if the current thread is using a single-byte character set (SBCS) or a double-byte character set (DBCS).</span></span> <span data-ttu-id="2a0ea-196">その`CharCode`をコードとして適切なセットにポイントします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-196">It then takes `CharCode` as a code point in the appropriate set.</span></span> <span data-ttu-id="2a0ea-197">範囲は 0 ~ 255 文字の SBCS の-32768 から 65535 までの DBCS 文字であることができます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-197">The range can be 0 through 255 for SBCS characters and -32768 through 65535 for DBCS characters.</span></span>  
  
 <span data-ttu-id="2a0ea-198">返される値に含まれている、現在のスレッドのコード ページによって異なります、<xref:System.Globalization.TextInfo.ANSICodePage%2A>のプロパティ、<xref:System.Globalization.TextInfo>クラス、<xref:System.Globalization>名前空間。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-198">The returned value depends on the code page for the current thread, which is contained in the <xref:System.Globalization.TextInfo.ANSICodePage%2A> property of the <xref:System.Globalization.TextInfo> class in the <xref:System.Globalization> namespace.</span></span> <span data-ttu-id="2a0ea-199">取得することができます<xref:System.Globalization.TextInfo.ANSICodePage%2A>を指定して`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-199">You can obtain <xref:System.Globalization.TextInfo.ANSICodePage%2A> by specifying `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</span></span>  
  
 <span data-ttu-id="2a0ea-200">`ChrW` `CharCode`として、Unicode コード ポイント。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-200">`ChrW` takes `CharCode` as a Unicode code point.</span></span> <span data-ttu-id="2a0ea-201">範囲は、現在のスレッドのカルチャとコード ページの設定に依存しません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-201">The range is independent of the culture and code page settings for the current thread.</span></span> <span data-ttu-id="2a0ea-202">-32768 ~-1 の値には、+32768 ~ +65535 範囲の値として同じが扱われます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-202">Values from -32768 through -1 are treated the same as values in the range +32768 through +65535.</span></span>  
  
 <span data-ttu-id="2a0ea-203">0 ~ 31 の数値では、標準の ASCII コードと同じです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-203">Numbers from 0 through 31 are the same as standard nonprintable ASCII codes.</span></span> <span data-ttu-id="2a0ea-204">たとえば、`Chr(10)`ライン フィード文字を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-204">For example, `Chr(10)` returns a line feed character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-205">`ChrB`以前のバージョンの Visual Basic の関数は、1 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-205">The `ChrB` function in earlier versions of Visual Basic returns a single byte.</span></span> <span data-ttu-id="2a0ea-206">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-206">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-207">Visual Basic と .NET Framework でのすべての文字列が Unicode がおよび`ChrB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-207">All strings in Visual Basic and the .NET Framework are in Unicode, and `ChrB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-208">次の例では、`Chr`関数を指定した文字コードに関連付けられている文字を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-208">The following example uses the `Chr` function to return the character associated with the specified character code.</span></span>  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-209">
            <see langword="ChrW" /> の <paramref name="CharCode" /> は、&lt; -32768 または &gt; 65535。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-209">
              <paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a0ea-210">指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-210">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="2a0ea-211">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-211">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-212">検索対象の文字列の 1 次元配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-212">One-dimensional array of strings to be searched.</span>
          </span>
        </param>
        <param name="Match">
          <span data-ttu-id="2a0ea-213">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-213">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-214">検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-214">String to search for.</span>
          </span>
        </param>
        <param name="Include">
          <span data-ttu-id="2a0ea-215">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-215">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-216">戻り値の部分文字列に <c>Match</c> を含むか含まないかを指定する <see langword="Boolean" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-216">
              <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>.</span>
          </span>
          <span data-ttu-id="2a0ea-217">
            <c>Include</c> が <see langword="True" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <c>Match</c> を含む配列のサブセットを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-217">If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring.</span>
          </span>
          <span data-ttu-id="2a0ea-218">
            <c>Include</c> が <see langword="False" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <c>Match</c> を含まない配列のサブセットを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-218">If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="2a0ea-219">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-219">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-220">使用する文字列比較の種類を示す数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-220">Numeric value indicating the kind of string comparison to use.</span>
          </span>
          <span data-ttu-id="2a0ea-221">値については、「設定」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-221">See "Settings" for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-222">指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-222">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-223">指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-223">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-224">一致なしの場合`Match`内にある`Source`、`Filter`関数は空の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-224">If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array.</span></span> <span data-ttu-id="2a0ea-225">エラーが発生`Source`に設定されている`Nothing`または 1 次元配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-225">An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.</span></span>  
  
 <span data-ttu-id="2a0ea-226">によって返される配列、`Filter`関数には、一致した項目の数を格納するための十分な要素のみが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-226">The array returned by the `Filter` function contains only enough elements to contain the number of matched items.</span></span>  
  
 <span data-ttu-id="2a0ea-227">`Compare`引数は、次の値であることができます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-227">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="2a0ea-228">定数</span><span class="sxs-lookup"><span data-stu-id="2a0ea-228">Constant</span></span>|<span data-ttu-id="2a0ea-229">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-229">Description</span></span>|  
|-|-|  
|<span data-ttu-id="2a0ea-230">定数</span><span class="sxs-lookup"><span data-stu-id="2a0ea-230">Constant</span></span>|<span data-ttu-id="2a0ea-231">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-231">Description</span></span>|  
|`CompareMethod.Binary`|<span data-ttu-id="2a0ea-232">バイナリ比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-232">Performs a binary comparison</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="2a0ea-233">テキスト比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-233">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-234">この例の使用、`Filter`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-234">This example demonstrates the use of the `Filter` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-235">
            <paramref name="Source" /> が <see langword="Nothing" /> であるか、1 次元の配列ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-235">
              <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="2a0ea-236">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-236">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-237">検索対象の文字列の 1 次元配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-237">One-dimensional array of strings to be searched.</span>
          </span>
        </param>
        <param name="Match">
          <span data-ttu-id="2a0ea-238">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-238">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-239">検索する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-239">String to search for.</span>
          </span>
        </param>
        <param name="Include">
          <span data-ttu-id="2a0ea-240">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-240">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-241">戻り値の部分文字列に <c>Match</c> を含むか含まないかを指定する <see langword="Boolean" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-241">
              <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>.</span>
          </span>
          <span data-ttu-id="2a0ea-242">
            <c>Include</c> が <see langword="True" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <c>Match</c> を含む配列のサブセットを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-242">If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring.</span>
          </span>
          <span data-ttu-id="2a0ea-243">
            <c>Include</c> が <see langword="False" /> の場合、<see langword="Filter" /> 関数は、部分文字列として <c>Match</c> を含まない配列のサブセットを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-243">If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="2a0ea-244">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-244">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-245">使用する文字列比較の種類を示す数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-245">Numeric value indicating the kind of string comparison to use.</span>
          </span>
          <span data-ttu-id="2a0ea-246">値については、「設定」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-246">See "Settings" for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-247">指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-247">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-248">指定されたフィルター条件に基づいた文字列 (<see langword="String" />) 配列のサブセットを含むゼロ ベースの配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-248">Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-249">一致なしの場合`Match`内にある`Source`、`Filter`関数は空の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-249">If no matches of `Match` are found within `Source`, the `Filter` function returns an empty array.</span></span> <span data-ttu-id="2a0ea-250">エラーが発生`Source`に設定されている`Nothing`または 1 次元配列ではありません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-250">An error occurs if `Source` is set to `Nothing` or is not a one-dimensional array.</span></span>  
  
 <span data-ttu-id="2a0ea-251">によって返される配列、`Filter`関数には、一致した項目の数を格納するための十分な要素のみが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-251">The array returned by the `Filter` function contains only enough elements to contain the number of matched items.</span></span>  
  
 <span data-ttu-id="2a0ea-252">`Compare`引数は、次の値であることができます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-252">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="2a0ea-253">定数</span><span class="sxs-lookup"><span data-stu-id="2a0ea-253">Constant</span></span>|<span data-ttu-id="2a0ea-254">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-254">Description</span></span>|  
|-|-|  
|`CompareMethod.Binary`|<span data-ttu-id="2a0ea-255">バイナリ比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-255">Performs a binary comparison</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="2a0ea-256">テキスト比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-256">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-257">この例の使用、`Filter`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-257">This example demonstrates the use of the `Filter` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-258">
            <paramref name="Source" /> が <see langword="Nothing" /> であるか、1 次元の配列ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-258">
              <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-259">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-259">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-260">任意の有効な式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-260">Any valid expression.</span>
          </span>
        </param>
        <param name="Style">
          <span data-ttu-id="2a0ea-261">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-261">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-262">有効な名前の付いた、またはユーザー定義による <see langword="String" /> 型の書式指定式</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-262">A valid named or user-defined format <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-263">書式指定文字列 (<see langword="String" />) 式に含まれる指示に従って書式設定された文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-263">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-264">書式指定文字列 (<see langword="String" />) 式に含まれる指示に従って書式設定された文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-264">Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-265"><xref:System.String.Format%2A?displayProperty=nameWithType>メソッドには、同様の機能も用意されています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-265">The <xref:System.String.Format%2A?displayProperty=nameWithType> method also provides similar functionality.</span></span>  
  
 <span data-ttu-id="2a0ea-266">ローカライズされていない数値文字列の書式を設定する場合は、希望の外観を取得するために、ユーザー定義の数値書式指定を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-266">If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.</span></span>  
  
 <span data-ttu-id="2a0ea-267">数値の書式設定を指定せずにしようとすると`Style`、`Format`関数と同様の機能を提供する、`Str`関数が国際的に注意してください。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-267">If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware.</span></span> <span data-ttu-id="2a0ea-268">ただし、正の数値を使用して文字列として書式設定、`Format`関数には、値の符号用に予約された先頭にスペースが含まれていません。 を使用して、変換、`Str`関数は、先頭にスペースを保持します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-268">However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.</span></span>  
  
## <a name="different-formats-for-different-numeric-values"></a><span data-ttu-id="2a0ea-269">別の数値を別の形式</span><span class="sxs-lookup"><span data-stu-id="2a0ea-269">Different Formats for Different Numeric Values</span></span>  
 <span data-ttu-id="2a0ea-270">数値の書式をユーザー定義の式は、セミコロンで区切られた 3 つのセクションを 1 つからができます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-270">A user-defined format expression for numbers can have from one to three sections separated by semicolons.</span></span> <span data-ttu-id="2a0ea-271">場合、`Style`の引数、`Format`関数には、定義済み数値書式のいずれかが含まれています、使用できるセクションの 1 つだけです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-271">If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.</span></span>  
  
|<span data-ttu-id="2a0ea-272">使用する場合</span><span class="sxs-lookup"><span data-stu-id="2a0ea-272">If you use</span></span>|<span data-ttu-id="2a0ea-273">これは、結果</span><span class="sxs-lookup"><span data-stu-id="2a0ea-273">This is the result</span></span>|  
|-|-|  
|<span data-ttu-id="2a0ea-274">1 つのセクションのみ</span><span class="sxs-lookup"><span data-stu-id="2a0ea-274">One section only</span></span>|<span data-ttu-id="2a0ea-275">フォーマット式は、すべての値に適用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-275">The format expression applies to all values.</span></span>|  
|<span data-ttu-id="2a0ea-276">2 つ</span><span class="sxs-lookup"><span data-stu-id="2a0ea-276">Two sections</span></span>|<span data-ttu-id="2a0ea-277">最初のセクションが正の値とゼロに適用されます。2 つ目は、負の値に適用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-277">The first section applies to positive values and zeros; the second applies to negative values.</span></span>|  
|<span data-ttu-id="2a0ea-278">3 つ</span><span class="sxs-lookup"><span data-stu-id="2a0ea-278">Three sections</span></span>|<span data-ttu-id="2a0ea-279">最初のセクションが正の値に適用されます、2 つ目は負の値に適用されます、および 3 つ目がゼロに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-279">The first section applies to positive values, the second applies to negative values, and the third applies to zeros.</span></span>|  
  
 <span data-ttu-id="2a0ea-280">次の例が 2 つのセクション: 最初の正の値と 0; の形式を定義します2 番目のセクションでは、負の値の書式を定義します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-280">The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values.</span></span> <span data-ttu-id="2a0ea-281">以降、`Style`の引数、`Format`関数は文字列を受け取り、引用符で囲まれています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-281">Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.</span></span>  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 <span data-ttu-id="2a0ea-282">それらの間にセミコロンを含める場合は、正の値の形式を使用して、欠落したセクションが印刷されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-282">If you include semicolons with nothing between them, the missing section is printed using the format of the positive value.</span></span> <span data-ttu-id="2a0ea-283">たとえば、次の形式が正の値が表示されますされ負では最初のセクションで、形式を使用して値が表示されます`Zero`値が 0 の場合。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-283">For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.</span></span>  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a><span data-ttu-id="2a0ea-284">定義済み数値書式</span><span class="sxs-lookup"><span data-stu-id="2a0ea-284">Predefined Numeric Formats</span></span>  
 <span data-ttu-id="2a0ea-285">次の表は、定義済み数値書式の名前を識別します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-285">The following table identifies the predefined numeric format names.</span></span> <span data-ttu-id="2a0ea-286">これらと名前で使用できる、`Style`の引数、`Format`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-286">These may be used by name as the `Style` argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="2a0ea-287">形式名</span><span class="sxs-lookup"><span data-stu-id="2a0ea-287">Format name</span></span>|<span data-ttu-id="2a0ea-288">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-288">Description</span></span>|  
|-|-|  
|<span data-ttu-id="2a0ea-289">`General Number`、 `G`、または `g`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-289">`General Number`, `G`, or `g`</span></span>|<span data-ttu-id="2a0ea-290">桁区切り記号なしで番号を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-290">Displays number with no thousand separator.</span></span><br /><br /> <span data-ttu-id="2a0ea-291">たとえば、`Format(&H3FA, "g")`返します`1018`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-291">For example, `Format(&H3FA, "g")` returns `1018`.</span></span>|  
|<span data-ttu-id="2a0ea-292">`Currency`、 `C`、または `c`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-292">`Currency`, `C`, or `c`</span></span>|<span data-ttu-id="2a0ea-293">必要であれば、桁区切り記号の数が表示されます。10 進数の区切り記号の右側に 2 桁の数字が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-293">Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator.</span></span> <span data-ttu-id="2a0ea-294">出力は、システムのロケール設定に基づきます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-294">Output is based on system locale settings.</span></span><br /><br /> <span data-ttu-id="2a0ea-295">たとえば、`Format(1234567, "c")`返します`$1,234,567.00`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-295">For example, `Format(1234567, "c")` returns `$1,234,567.00`.</span></span>|  
|<span data-ttu-id="2a0ea-296">`Fixed`、 `F`、または `f`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-296">`Fixed`, `F`, or `f`</span></span>|<span data-ttu-id="2a0ea-297">10 進数の区切り記号の右側には、左側に少なくとも 1 つの桁と 2 桁の数字を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-297">Displays at least one digit to the left and two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="2a0ea-298">たとえば、`Format(1234567, "f")`返します`1234567.00`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-298">For example, `Format(1234567, "f")` returns `1234567.00`.</span></span>|  
|<span data-ttu-id="2a0ea-299">`Standard`、 `N`、または `n`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-299">`Standard`, `N`, or `n`</span></span>|<span data-ttu-id="2a0ea-300">10 進数の区切り記号の右側に桁区切り記号、左側に少なくとも 1 つの数字、および 2 桁の数字の数を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-300">Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="2a0ea-301">たとえば、`Format(1234567, "n")`返します`1,234,567.00`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-301">For example, `Format(1234567, "n")` returns `1,234,567.00`.</span></span>|  
|`Percent`|<span data-ttu-id="2a0ea-302">右側にすぐに追加されたパーセント記号 (%) の 100 を乗算する数が表示されます。 常に 10 進数の区切り記号の右側に 2 桁の数字が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-302">Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="2a0ea-303">たとえば、`Format(0.4744, "Percent")`返します`47.44%`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-303">For example, `Format(0.4744, "Percent")` returns `47.44%`.</span></span>|  
|<span data-ttu-id="2a0ea-304">`P`、または `p`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-304">`P`, or `p`</span></span>|<span data-ttu-id="2a0ea-305">右方向と区切りを 1 つのスペースにより追加されたパーセント記号 (%) の 100 倍の数が表示されます。 常に 10 進数の区切り記号の右側に 2 桁の数字が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-305">Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.</span></span><br /><br /> <span data-ttu-id="2a0ea-306">たとえば、`Format(0.80345, "p")`返します`80.35 %`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-306">For example, `Format(0.80345, "p")` returns `80.35 %`.</span></span>|  
|`Scientific`|<span data-ttu-id="2a0ea-307">2 つの有効桁数を提供する標準の科学的表記法を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-307">Uses standard scientific notation, providing two significant digits.</span></span><br /><br /> <span data-ttu-id="2a0ea-308">たとえば、`Format(1234567, "Scientific")`返します`1.23E+06`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-308">For example, `Format(1234567, "Scientific")` returns `1.23E+06`.</span></span>|  
|<span data-ttu-id="2a0ea-309">`E`、または `e`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-309">`E`, or `e`</span></span>|<span data-ttu-id="2a0ea-310">6 つの有効桁数を提供する標準の科学的表記法を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-310">Uses standard scientific notation, providing six significant digits.</span></span><br /><br /> <span data-ttu-id="2a0ea-311">たとえば、`Format(1234567, "e")`返します`1.234567e+006`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-311">For example, `Format(1234567, "e")` returns `1.234567e+006`.</span></span>|  
|<span data-ttu-id="2a0ea-312">`D`、または `d`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-312">`D`, or `d`</span></span>|<span data-ttu-id="2a0ea-313">数値は、10 進数 (基数 10) の形式で番号の値を含む文字列として表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-313">Displays number as a string that contains the value of the number in Decimal (base 10) format.</span></span> <span data-ttu-id="2a0ea-314">このオプションは、整数型のサポート (`Byte`、 `Short`、 `Integer`、 `Long`) のみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-314">This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.</span></span><br /><br /> <span data-ttu-id="2a0ea-315">たとえば、`Format(&H7F, "d")`返します`127`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-315">For example, `Format(&H7F, "d")` returns `127`.</span></span>|  
|<span data-ttu-id="2a0ea-316">`X`、または `x`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-316">`X`, or `x`</span></span>|<span data-ttu-id="2a0ea-317">数値は、16 進数 (基数 16) 形式で番号の値を含む文字列として表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-317">Displays number as a string that contains the value of the number in Hexadecimal (base 16) format.</span></span> <span data-ttu-id="2a0ea-318">このオプションは、整数型のサポート (`Byte`、 `Short`、 `Integer`、 `Long`) のみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-318">This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.</span></span><br /><br /> <span data-ttu-id="2a0ea-319">たとえば、`Format(127, "x")`返します`7f`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-319">For example, `Format(127, "x")` returns `7f`.</span></span>|  
|`Yes/No`|<span data-ttu-id="2a0ea-320">表示`No`番号が 0、それ以外の場合は、表示`Yes`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-320">Displays `No` if number is 0; otherwise, displays `Yes`.</span></span><br /><br /> <span data-ttu-id="2a0ea-321">たとえば、`Format(0, "Yes/No")`返します`No`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-321">For example, `Format(0, "Yes/No")` returns `No`.</span></span>|  
|`True/False`|<span data-ttu-id="2a0ea-322">表示`False`番号が 0、それ以外の場合は、表示`True`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-322">Displays `False` if number is 0; otherwise, displays `True`.</span></span><br /><br /> <span data-ttu-id="2a0ea-323">たとえば、`Format(1, "True/False")`返します`True`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-323">For example, `Format(1, "True/False")` returns `True`.</span></span>|  
|`On/Off`|<span data-ttu-id="2a0ea-324">表示`Off`番号が 0、それ以外の場合は、表示`On`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-324">Displays `Off` if number is 0; otherwise, displays `On`.</span></span><br /><br /> <span data-ttu-id="2a0ea-325">たとえば、`Format(1, "On/Off")`返します`On`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-325">For example, `Format(1, "On/Off")` returns `On`.</span></span>|  
  
### <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-326">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-326">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-327">`Yes/No`、 `True/False`、および`On/Off`形式がサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-327">The `Yes/No`, `True/False`, and `On/Off` formats are not supported.</span></span>  
  
## <a name="user-defined-numeric-formats"></a><span data-ttu-id="2a0ea-328">ユーザー定義の数値書式</span><span class="sxs-lookup"><span data-stu-id="2a0ea-328">User-Defined Numeric Formats</span></span>  
 <span data-ttu-id="2a0ea-329">次の表は、番号の書式をユーザー定義の作成に使用できる文字を識別します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-329">The following table identifies characters you can use to create user-defined number formats.</span></span> <span data-ttu-id="2a0ea-330">これらは、ビルドに使用可能性があります、`Style`の引数、`Format`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-330">These may be used to build the `Style` argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="2a0ea-331">文字</span><span class="sxs-lookup"><span data-stu-id="2a0ea-331">Character</span></span>|<span data-ttu-id="2a0ea-332">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-332">Description</span></span>|  
|-|-|  
|<span data-ttu-id="2a0ea-333">なし</span><span class="sxs-lookup"><span data-stu-id="2a0ea-333">None</span></span>|<span data-ttu-id="2a0ea-334">書式なしで数値を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-334">Displays the number with no formatting.</span></span>|  
|<span data-ttu-id="2a0ea-335">(`0`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-335">(`0`)</span></span>|<span data-ttu-id="2a0ea-336">数字のプレース ホルダーです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-336">Digit placeholder.</span></span> <span data-ttu-id="2a0ea-337">1 桁の数字または 0 を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-337">Displays a digit or a zero.</span></span> <span data-ttu-id="2a0ea-338">場合は、式では、書式指定文字列での 0 に対応する位置に数字がある、それを表示します。それ以外の場合、その位置に 0 が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-338">If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.</span></span><br /><br /> <span data-ttu-id="2a0ea-339">0 の場合数がある少ない桁数られます (小数点の左側) にフォーマット式の先頭または末尾のゼロが表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-339">If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros.</span></span> <span data-ttu-id="2a0ea-340">数よりも桁区切り記号の右側の桁数がある場合は、フォーマット式の小数点区切り文字の右側にゼロに数値の小数点以下桁数が 0 に丸められます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-340">If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros.</span></span> <span data-ttu-id="2a0ea-341">数よりも桁区切り記号の左側の数字がある場合は、フォーマット式の小数点区切り文字の左側にゼロであり、変更しなくても、余分な桁が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-341">If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.</span></span>|  
|<span data-ttu-id="2a0ea-342">(`#`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-342">(`#`)</span></span>|<span data-ttu-id="2a0ea-343">数字のプレース ホルダーです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-343">Digit placeholder.</span></span> <span data-ttu-id="2a0ea-344">1 桁の数字、または何も表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-344">Displays a digit or nothing.</span></span> <span data-ttu-id="2a0ea-345">式の位置に数字がある場合で、`#`表示します。 それ以外の場合、その位置に何も表示、書式指定文字列に文字が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-345">If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.</span></span><br /><br /> <span data-ttu-id="2a0ea-346">この記号のような機能、`0`桁プレース ホルダーを先頭または末尾のゼロは、数がより少ない桁数がある場合に表示されていない点を除いて`#`フォーマット式の小数点の両側の文字。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-346">This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.</span></span>|  
|<span data-ttu-id="2a0ea-347">(`.`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-347">(`.`)</span></span>|<span data-ttu-id="2a0ea-348">小数点のプレース ホルダーです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-348">Decimal placeholder.</span></span> <span data-ttu-id="2a0ea-349">小数点のプレース ホルダーは、小数点区切り文字の右側と左側に表示する桁数を決定します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-349">The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator.</span></span> <span data-ttu-id="2a0ea-350">フォーマット式にのみ含まれる場合`#`この記号の左側にある文字。 1 は、小数点区切り文字で始まるよりも小さい数値。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-350">If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator.</span></span> <span data-ttu-id="2a0ea-351">小数部の先頭にゼロを表示するには、小数点区切り文字の左側に最初の数字プレース ホルダーとして 0 を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-351">To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator.</span></span> <span data-ttu-id="2a0ea-352">いくつかのロケールでは、コンマが小数点区切り文字として使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-352">In some locales, a comma is used as the decimal separator.</span></span> <span data-ttu-id="2a0ea-353">書式設定された出力で小数点のプレース ホルダーとして使用される実際の文字は、システムによって認識される数値書式によって異なります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-353">The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system.</span></span> <span data-ttu-id="2a0ea-354">したがって、場合でも、小数点のプレース ホルダーとしてコンマを使用するロケールではの形式で小数点のプレース ホルダーとして、期間を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-354">Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder.</span></span> <span data-ttu-id="2a0ea-355">書式設定された文字列は、ロケールの正しい形式で表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-355">The formatted string will appear in the format correct for the locale.</span></span>|  
|<span data-ttu-id="2a0ea-356">(`%`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-356">(`%`)</span></span>|<span data-ttu-id="2a0ea-357">パーセント プレース ホルダーです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-357">Percent placeholder.</span></span> <span data-ttu-id="2a0ea-358">100 で、式を乗算します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-358">Multiplies the expression by 100.</span></span> <span data-ttu-id="2a0ea-359">パーセント記号 (`%`) 書式指定文字列の表示位置に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-359">The percent character (`%`) is inserted in the position where it appears in the format string.</span></span>|  
|<span data-ttu-id="2a0ea-360">(`,`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-360">(`,`)</span></span>|<span data-ttu-id="2a0ea-361">桁区切り記号。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-361">Thousand separator.</span></span> <span data-ttu-id="2a0ea-362">桁区切り記号は、4 つ以上の桁数、小数点区切り文字の左側の数値の中で数百から数千を区切ります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-362">The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator.</span></span> <span data-ttu-id="2a0ea-363">桁区切り記号の標準の使用が指定の形式が数字のプレース ホルダーで囲まれた、桁区切り記号が含まれるかどうか (`0`または`#`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-363">Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).</span></span><br /><br /> <span data-ttu-id="2a0ea-364">すぐまたは右端として (10 進数を指定するかどうか)、小数点区切り文字の左側に桁区切り記号文字の文字列に「スケール数を 1000 で除算して必要に応じて丸める」</span><span class="sxs-lookup"><span data-stu-id="2a0ea-364">A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means "scale the number by dividing it by 1,000, rounding as needed."</span></span> <span data-ttu-id="2a0ea-365">500 以上 1,000 より小さい数として表示されます`1`、および数値として表示が 500 よりも小さい`0`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-365">Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`.</span></span> <span data-ttu-id="2a0ea-366">この位置に隣接する 2 つの桁区切りは、100万の係数と 1,000 の各追加の区切り線の追加の要素でスケールします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-366">Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.</span></span><br /><br /> <span data-ttu-id="2a0ea-367">複数の区切り記号、小数点区切り文字の左側にすぐに以外の位置または文字列の右端の位置では、桁区切り記号の使用を指定するだけとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-367">Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator.</span></span> <span data-ttu-id="2a0ea-368">いくつかのロケールでは、ピリオドが桁区切り記号として使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-368">In some locales, a period is used as a thousand separator.</span></span> <span data-ttu-id="2a0ea-369">書式設定された出力で桁区切り記号として使用される実際の文字は、システムによって認識される数値書式によって異なります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-369">The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system.</span></span> <span data-ttu-id="2a0ea-370">したがって、場合でも桁区切り記号としてピリオドを使用するロケールではの形式で桁区切り記号としてコンマを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-370">Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator.</span></span> <span data-ttu-id="2a0ea-371">書式設定された文字列は、ロケールの正しい形式で表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-371">The formatted string will appear in the format correct for the locale.</span></span><br /><br /> <span data-ttu-id="2a0ea-372">たとえば、次の 3 つの書式設定文字列があるとします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-372">For example, consider the three following format strings:</span></span><br /><br /> <span data-ttu-id="2a0ea-373">-   `"#,0."`、数値の 1億を書式設定文字列「100,000, 000」としてどの桁区切り記号。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-373">-   `"#,0."`, which uses the thousands separator to format the number 100 million as the string "100,000,000".</span></span><br /><span data-ttu-id="2a0ea-374">-   `"#0,."`、1,000 の倍数でスケーリングを数値の 1億を書式設定文字列「100000」として使用します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-374">-   `"#0,."`, which uses scaling by a factor of one thousand to format the number 100 million as the string "100000".</span></span><br /><span data-ttu-id="2a0ea-375">-   `"#,0,."`、どの桁区切り記号と 1000 として「100,000」文字列、数値の 1億を書式設定でスケーリングします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-375">-   `"#,0,."`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string "100,000".</span></span>|  
|<span data-ttu-id="2a0ea-376">(`:`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-376">(`:`)</span></span>|<span data-ttu-id="2a0ea-377">時刻の区切り記号。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-377">Time separator.</span></span> <span data-ttu-id="2a0ea-378">いくつかのロケールでは、その他の文字を表す時刻の区切り記号が使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-378">In some locales, other characters may be used to represent the time separator.</span></span> <span data-ttu-id="2a0ea-379">時刻の区切り記号は、時間、分、および秒の時刻の値が書式設定されるときを区切ります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-379">The time separator separates hours, minutes, and seconds when time values are formatted.</span></span> <span data-ttu-id="2a0ea-380">書式設定された出力で時刻の区切り記号として使用される実際の文字は、システム設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-380">The actual character used as the time separator in formatted output is determined by your system settings.</span></span>|  
|<span data-ttu-id="2a0ea-381">(`/`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-381">(`/`)</span></span>|<span data-ttu-id="2a0ea-382">日付の区切り記号。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-382">Date separator.</span></span> <span data-ttu-id="2a0ea-383">いくつかのロケールで日付の区切り記号を表すその他の文字を使用可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-383">In some locales, other characters may be used to represent the date separator.</span></span> <span data-ttu-id="2a0ea-384">日付の区切り記号は、日付の書式設定日、月、年を区切ります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-384">The date separator separates the day, month, and year when date values are formatted.</span></span> <span data-ttu-id="2a0ea-385">書式設定された出力で日付の区切り記号として使用される実際の文字は、システム設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-385">The actual character used as the date separator in formatted output is determined by your system settings.</span></span>|  
|<span data-ttu-id="2a0ea-386">(`E-``E+``e-``e+`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-386">(`E-``E+``e-``e+`)</span></span>|<span data-ttu-id="2a0ea-387">指数書式。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-387">Scientific format.</span></span> <span data-ttu-id="2a0ea-388">フォーマット式が少なくとも 1 つの桁プレース ホルダーが含まれるかどうか (`0`または`#`) の左側に`E-`、 `E+`、 `e-`、または`e+`、指数形式、番号が表示されると`E`または`e`数と指数の間に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-388">If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent.</span></span> <span data-ttu-id="2a0ea-389">左側の数字のプレース ホルダーの数は、指数部の桁数を決定します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-389">The number of digit placeholders to the left determines the number of digits in the exponent.</span></span> <span data-ttu-id="2a0ea-390">使用`E-`または`e-`負の指数の横にマイナス記号を挿入します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-390">Use `E-` or `e-` to place a minus sign next to negative exponents.</span></span> <span data-ttu-id="2a0ea-391">使用`E+`または`e+`負の指数の横にマイナス記号と正の指数の横にあるプラス記号を配置します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-391">Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents.</span></span> <span data-ttu-id="2a0ea-392">正しく書式設定を取得するこの記号の右側に数字のプレース ホルダーを追加することもあります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-392">You must also include digit placeholders to the right of this symbol to get correct formatting.</span></span>|  
|<span data-ttu-id="2a0ea-393">`-``+``$` ( )</span><span class="sxs-lookup"><span data-stu-id="2a0ea-393">`-` `+` `$` ( )</span></span>|<span data-ttu-id="2a0ea-394">リテラル文字です。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-394">Literal characters.</span></span> <span data-ttu-id="2a0ea-395">これらの文字が書式指定文字列で入力したとおりに表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-395">These characters are displayed exactly as typed in the format string.</span></span> <span data-ttu-id="2a0ea-396">一覧に含まれていない文字を表示する前に円記号 (`\`) または二重引用符で囲みます ("")。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-396">To display a character other than one of those listed, precede it with a backslash (`\`) or enclose it in double quotation marks (" ").</span></span>|  
|<span data-ttu-id="2a0ea-397">(`\`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-397">(`\`)</span></span>|<span data-ttu-id="2a0ea-398">書式指定文字列では、次の文字を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-398">Displays the next character in the format string.</span></span> <span data-ttu-id="2a0ea-399">リテラル文字として特別な意味を持つ文字を表示する前に円記号 (`\`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-399">To display a character that has special meaning as a literal character, precede it with a backslash (`\`).</span></span> <span data-ttu-id="2a0ea-400">円記号自体は表示されません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-400">The backslash itself isn't displayed.</span></span> <span data-ttu-id="2a0ea-401">円記号の使用は、次の文字を二重引用符で囲むことと同じです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-401">Using a backslash is the same as enclosing the next character in double quotation marks.</span></span> <span data-ttu-id="2a0ea-402">円記号を表示するには、2 つの円記号を使用 (`\\`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-402">To display a backslash, use two backslashes (`\\`).</span></span><br /><br /> <span data-ttu-id="2a0ea-403">リテラル文字は、日付の書式設定と時刻の書式設定文字として表示できない文字の例 (`a`、 `c`、 `d`、 `h`、 `m`、 `n`、 `p`、 `q`、 `s`、 `t`、 `w`、 `y`、 `/`、および`:`)、数値の書式設定文字 (`#`、 `0`、 `%`、 `E`、 `e`、コンマ、および期間)、および文字列の書式設定文字 (`@`、 `&`、 `<`、 `>`、および`!`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-403">Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).</span></span>|  
|<span data-ttu-id="2a0ea-404">(`"``ABC``"`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-404">(`"``ABC``"`)</span></span>|<span data-ttu-id="2a0ea-405">二重引用符内の文字列が表示されます ("")。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-405">Displays the string inside the double quotation marks (" ").</span></span> <span data-ttu-id="2a0ea-406">使用する必要がありますに文字列をコード内からスタイル引数に含める`Chr(34)`テキストを囲みます (`34`は引用符 (") の文字コードです)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-406">To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (")).</span></span>|  
  
### <a name="legacy-code-example"></a><span data-ttu-id="2a0ea-407">古いコードの例</span><span class="sxs-lookup"><span data-stu-id="2a0ea-407">Legacy Code Example</span></span>  
 <span data-ttu-id="2a0ea-408">次の表には、数値のフォーマット式サンプルにはが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-408">The following table contains some sample format expressions for numbers.</span></span> <span data-ttu-id="2a0ea-409">(これらの例は、システムのロケール設定が英語 (米国) であると仮定)最初の列には書式指定文字列が含まれています、`Style`の引数、`Format`関数、書式設定されたデータに列見出しで指定された値がある場合、結果の出力を含むその他の列。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-409">(These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.</span></span>  
  
|<span data-ttu-id="2a0ea-410">形式 (`Style`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-410">Format (`Style`)</span></span>|<span data-ttu-id="2a0ea-411">「5」に設定として書式の設定</span><span class="sxs-lookup"><span data-stu-id="2a0ea-411">"5" formatted as</span></span>|<span data-ttu-id="2a0ea-412">「-5」として書式設定</span><span class="sxs-lookup"><span data-stu-id="2a0ea-412">"-5" formatted as</span></span>|<span data-ttu-id="2a0ea-413">「0.5」に設定として書式の設定</span><span class="sxs-lookup"><span data-stu-id="2a0ea-413">"0.5" formatted as</span></span>|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a><span data-ttu-id="2a0ea-414">定義済み日付/時刻書式</span><span class="sxs-lookup"><span data-stu-id="2a0ea-414">Predefined Date/Time Formats</span></span>  
 <span data-ttu-id="2a0ea-415">次の表は、定義済みの日付/時刻書式名を識別します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-415">The following table identifies the predefined date and time format names.</span></span> <span data-ttu-id="2a0ea-416">これらは名前のスタイル引数として使用することがあります、`Format`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-416">These may be used by name as the style argument for the `Format` function:</span></span>  
  
|<span data-ttu-id="2a0ea-417">形式名</span><span class="sxs-lookup"><span data-stu-id="2a0ea-417">Format Name</span></span>|<span data-ttu-id="2a0ea-418">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-418">Description</span></span>|  
|-|-|  
|<span data-ttu-id="2a0ea-419">`General Date`、または `G`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-419">`General Date`, or `G`</span></span>|<span data-ttu-id="2a0ea-420">日付/時刻を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-420">Displays a date and/or time.</span></span> <span data-ttu-id="2a0ea-421">たとえば、`3/12/2008 11:07:31 AM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-421">For example, `3/12/2008 11:07:31 AM`.</span></span> <span data-ttu-id="2a0ea-422">日付の表示については、アプリケーションの現在のカルチャ値によって決まります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-422">Date display is determined by your application's current culture value.</span></span>|  
|<span data-ttu-id="2a0ea-423">`Long Date`、 `Medium Date`、または `D`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-423">`Long Date`, `Medium Date`, or `D`</span></span>|<span data-ttu-id="2a0ea-424">現在のカルチャの長い日付形式に従って日付を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-424">Displays a date according to your current culture's long date format.</span></span> <span data-ttu-id="2a0ea-425">たとえば、`Wednesday, March 12, 2008` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-425">For example, `Wednesday, March 12, 2008`.</span></span>|  
|<span data-ttu-id="2a0ea-426">`Short Date`、または `d`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-426">`Short Date`, or `d`</span></span>|<span data-ttu-id="2a0ea-427">現在のカルチャの短い日付形式を使用して日付を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-427">Displays a date using your current culture's short date format.</span></span> <span data-ttu-id="2a0ea-428">たとえば、`3/12/2008` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-428">For example, `3/12/2008`.</span></span><br /><br /> <span data-ttu-id="2a0ea-429">`d`文字は、ユーザー定義の日付形式で日付を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-429">The `d` character displays the day in a user-defined date format.</span></span>|  
|<span data-ttu-id="2a0ea-430">`Long Time`、 `Medium Time`、または `T`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-430">`Long Time`, `Medium Time`, or `T`</span></span>|<span data-ttu-id="2a0ea-431">現在のカルチャの長い時刻形式では; を使用して時刻を表示します通常、時間、分、秒数が含まれます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-431">Displays a time using your current culture's long time format; typically includes hours, minutes, seconds.</span></span> <span data-ttu-id="2a0ea-432">たとえば、`11:07:31 AM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-432">For example, `11:07:31 AM`.</span></span>|  
|<span data-ttu-id="2a0ea-433">`Short Time` または `t`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-433">`Short Time` or `t`</span></span>|<span data-ttu-id="2a0ea-434">現在のカルチャの短い形式の時刻の形式を使用して時刻を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-434">Displays a time using your current culture's short time format.</span></span> <span data-ttu-id="2a0ea-435">たとえば、`11:07 AM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-435">For example, `11:07 AM`.</span></span><br /><br /> <span data-ttu-id="2a0ea-436">`t`文字表示`AM`または`PM`ユーザー定義の時刻の形式で 12 時間制を使用するロケールの値。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-436">The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.</span></span>|  
|`f`|<span data-ttu-id="2a0ea-437">長い日付と短い形式の時刻を現在のカルチャの書式に従って表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-437">Displays the long date and short time according to your current culture's format.</span></span> <span data-ttu-id="2a0ea-438">たとえば、`Wednesday, March 12, 2008 11:07 AM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-438">For example, `Wednesday, March 12, 2008 11:07 AM`.</span></span>|  
|`F`|<span data-ttu-id="2a0ea-439">長い日付と現在のカルチャの書式に従って長い時間が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-439">Displays the long date and long time according to your current culture's format.</span></span> <span data-ttu-id="2a0ea-440">たとえば、`Wednesday, March 12, 2008 11:07:31 AM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-440">For example, `Wednesday, March 12, 2008 11:07:31 AM`.</span></span>|  
|`g`|<span data-ttu-id="2a0ea-441">短い形式の日付と短い形式の時刻を現在のカルチャの書式に従って表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-441">Displays the short date and short time according to your current culture's format.</span></span> <span data-ttu-id="2a0ea-442">たとえば、`3/12/2008 11:07 AM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-442">For example, `3/12/2008 11:07 AM`.</span></span>|  
|<span data-ttu-id="2a0ea-443">`M`, `m`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-443">`M`, `m`</span></span>|<span data-ttu-id="2a0ea-444">月と日付の日が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-444">Displays the month and the day of a date.</span></span> <span data-ttu-id="2a0ea-445">たとえば、`March 12` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-445">For example, `March 12`.</span></span><br /><br /> <span data-ttu-id="2a0ea-446">`M`文字は、ユーザー定義の日付書式で月を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-446">The `M` character displays the month in a user-defined date format.</span></span> <span data-ttu-id="2a0ea-447">`m`文字は、ユーザー定義の時刻書式で分を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-447">The `m` character displays the minutes in a user-defined time format.</span></span>|  
|<span data-ttu-id="2a0ea-448">`R`, `r`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-448">`R`, `r`</span></span>|<span data-ttu-id="2a0ea-449">に従って日付の書式設定、<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-449">Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property.</span></span> <span data-ttu-id="2a0ea-450">たとえば、`Wed, 12 Mar 2008 11:07:31 GMT` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-450">For example, `Wed, 12 Mar 2008 11:07:31 GMT`.</span></span> <span data-ttu-id="2a0ea-451">書式設定された日付では、日付と時刻の値は調整されません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-451">The formatted date does not adjust the value of the date and time.</span></span> <span data-ttu-id="2a0ea-452">呼び出しの前に GMT の日付/時刻値を調整する必要があります、`Format`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-452">You must adjust the Date/Time value to GMT before calling the `Format` function.</span></span>|  
|`s`|<span data-ttu-id="2a0ea-453">日付と時刻を並べ替え可能なインデックスとして書式設定します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-453">Formats the date and time as a sortable index.</span></span> <span data-ttu-id="2a0ea-454">たとえば、`2008-03-12T11:07:31` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-454">For example, `2008-03-12T11:07:31`.</span></span><br /><br /> <span data-ttu-id="2a0ea-455">`s`文字は、ユーザー定義の時刻書式で秒を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-455">The `s` character displays the seconds in a user-defined time format.</span></span>|  
|`u`|<span data-ttu-id="2a0ea-456">日付と時刻を GMT 並べ替え可能なインデックスとして書式設定します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-456">Formats the date and time as a GMT sortable index.</span></span> <span data-ttu-id="2a0ea-457">たとえば、`2008-03-12 11:07:31Z` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-457">For example, `2008-03-12 11:07:31Z`.</span></span>|  
|`U`|<span data-ttu-id="2a0ea-458">日付と時間の長い日付と長い時刻 GMT で書式設定します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-458">Formats the date and time with the long date and long time as GMT.</span></span> <span data-ttu-id="2a0ea-459">たとえば、`Wednesday, March 12, 2008 6:07:31 PM` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-459">For example, `Wednesday, March 12, 2008 6:07:31 PM`.</span></span>|  
|<span data-ttu-id="2a0ea-460">`Y`, `y`</span><span class="sxs-lookup"><span data-stu-id="2a0ea-460">`Y`, `y`</span></span>|<span data-ttu-id="2a0ea-461">年と月と日付の書式を設定します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-461">Formats the date as the year and month.</span></span> <span data-ttu-id="2a0ea-462">たとえば、`March, 2008` のようにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-462">For example, `March, 2008`.</span></span><br /><br /> <span data-ttu-id="2a0ea-463">`Y`と`y`文字は、ユーザー定義の日付書式で年を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-463">The `Y` and `y` characters display the year in a user-defined date format.</span></span>|  
  
 <span data-ttu-id="2a0ea-464">アプリケーションの現在のカルチャ情報の詳細については、次を参照してください。[どのカルチャに影響を与えます Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-464">For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
## <a name="user-defined-datetime-formats"></a><span data-ttu-id="2a0ea-465">ユーザー定義の日付/時刻書式</span><span class="sxs-lookup"><span data-stu-id="2a0ea-465">User-Defined Date/Time Formats</span></span>  
 <span data-ttu-id="2a0ea-466">次の表では、ユーザー定義の日付/時刻書式の作成に使用できる文字を示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-466">The following table shows characters you can use to create user-defined date/time formats.</span></span> <span data-ttu-id="2a0ea-467">異なり以前のバージョンの Visual Basic では、これらの形式の文字は大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-467">Unlike in earlier versions of Visual Basic, these format characters are case-sensitive.</span></span>  
  
|<span data-ttu-id="2a0ea-468">文字</span><span class="sxs-lookup"><span data-stu-id="2a0ea-468">Character</span></span>|<span data-ttu-id="2a0ea-469">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-469">Description</span></span>|  
|-|-|  
|<span data-ttu-id="2a0ea-470">(`:`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-470">(`:`)</span></span>|<span data-ttu-id="2a0ea-471">時刻の区切り記号。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-471">Time separator.</span></span> <span data-ttu-id="2a0ea-472">いくつかのロケールでは、その他の文字を表す時刻の区切り記号が使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-472">In some locales, other characters may be used to represent the time separator.</span></span> <span data-ttu-id="2a0ea-473">時刻の区切り記号は、時間、分、および秒の時刻の値が書式設定されるときを区切ります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-473">The time separator separates hours, minutes, and seconds when time values are formatted.</span></span> <span data-ttu-id="2a0ea-474">書式設定された出力で時刻の区切り記号として使用される実際の文字は、アプリケーションの現在のカルチャ値によって決まります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-474">The actual character that is used as the time separator in formatted output is determined by your application's current culture value.</span></span>|  
|<span data-ttu-id="2a0ea-475">(`/`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-475">(`/`)</span></span>|<span data-ttu-id="2a0ea-476">日付の区切り記号。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-476">Date separator.</span></span> <span data-ttu-id="2a0ea-477">いくつかのロケールで日付の区切り記号を表すその他の文字を使用可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-477">In some locales, other characters may be used to represent the date separator.</span></span> <span data-ttu-id="2a0ea-478">日付の区切り記号は、日付の書式設定日、月、年を区切ります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-478">The date separator separates the day, month, and year when date values are formatted.</span></span> <span data-ttu-id="2a0ea-479">書式設定された出力で日付の区切り記号として使用される実際の文字は、アプリケーションの現在のカルチャによって決まります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-479">The actual character that is used as the date separator in formatted output is determined by your application's current culture.</span></span>|  
|<span data-ttu-id="2a0ea-480">(`%`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-480">(`%`)</span></span>|<span data-ttu-id="2a0ea-481">後続の文字に関係なく 1 文字書式として次の文字が読み取られることを示すために使用します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-481">Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters.</span></span> <span data-ttu-id="2a0ea-482">1 文字書式をユーザー定義の書式として読み取ることを示すためにも使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-482">Also used to indicate that a single-letter format is read as a user-defined format.</span></span> <span data-ttu-id="2a0ea-483">追加の詳細については、下記を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-483">See what follows for additional details.</span></span>|  
|`d`|<span data-ttu-id="2a0ea-484">0 を付けない数値として曜日を表示します (たとえば、 `1`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-484">Displays the day as a number without a leading zero (for example, `1`).</span></span> <span data-ttu-id="2a0ea-485">使用`%d`場合、これは、ユーザー定義の数値書式文字のみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-485">Use `%d` if this is the only character in your user-defined numeric format.</span></span>|  
|`dd`|<span data-ttu-id="2a0ea-486">先頭にゼロを数値として曜日を表示します (たとえば、 `01`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-486">Displays the day as a number with a leading zero (for example, `01`).</span></span>|  
|`ddd`|<span data-ttu-id="2a0ea-487">省略形として日を表示します (たとえば、 `Sun`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-487">Displays the day as an abbreviation (for example, `Sun`).</span></span>|  
|`dddd`|<span data-ttu-id="2a0ea-488">完全な名前の日を表示します (たとえば、 `Sunday`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-488">Displays the day as a full name (for example, `Sunday`).</span></span>|  
|`M`|<span data-ttu-id="2a0ea-489">0 を付けない数値として月を表示します (たとえば、年 1 月として表されます`1`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-489">Displays the month as a number without a leading zero (for example, January is represented as `1`).</span></span> <span data-ttu-id="2a0ea-490">使用`%M`場合、これは、ユーザー定義の数値書式文字のみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-490">Use `%M` if this is the only character in your user-defined numeric format.</span></span>|  
|`MM`|<span data-ttu-id="2a0ea-491">先頭にゼロを数値として月を表示します (たとえば、 `01/12/01`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-491">Displays the month as a number with a leading zero (for example, `01/12/01`).</span></span>|  
|`MMM`|<span data-ttu-id="2a0ea-492">月の省略形を表示します (たとえば、 `Jan`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-492">Displays the month as an abbreviation (for example, `Jan`).</span></span>|  
|`MMMM`|<span data-ttu-id="2a0ea-493">月の正式名として月を表示します (たとえば、 `January`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-493">Displays the month as a full month name (for example, `January`).</span></span>|  
|`gg`|<span data-ttu-id="2a0ea-494">期間/時代 (年号) の文字列を表示します (たとえば、 `A.D.`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-494">Displays the period/era string (for example, `A.D.`).</span></span>|  
|`h`|<span data-ttu-id="2a0ea-495">12 時間制を使用して 0 を付けない数値として時間を表示します (たとえば、 `1:15:15 PM`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-495">Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`).</span></span> <span data-ttu-id="2a0ea-496">使用`%h`場合、これは、ユーザー定義の数値書式文字のみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-496">Use `%h` if this is the only character in your user-defined numeric format.</span></span>|  
|`hh`|<span data-ttu-id="2a0ea-497">数値に先行するゼロを 12 時間制を使用して時間を表示します (たとえば、 `01:15:15 PM`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-497">Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).</span></span>|  
|`H`|<span data-ttu-id="2a0ea-498">24 時間制を使用して 0 を付けない数値として時間を表示します (たとえば、 `1:15:15`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-498">Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`).</span></span> <span data-ttu-id="2a0ea-499">使用`%H`場合、これは、ユーザー定義の数値書式文字のみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-499">Use `%H` if this is the only character in your user-defined numeric format.</span></span>|  
|`HH`|<span data-ttu-id="2a0ea-500">数値に先行するゼロを 24 時間制を使用して時間を表示します (たとえば、 `01:15:15`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-500">Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).</span></span>|  
|`m`|<span data-ttu-id="2a0ea-501">0 を付けない数値として分を表示します (たとえば、 `12:1:15`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-501">Displays the minute as a number without leading zeros (for example, `12:1:15`).</span></span> <span data-ttu-id="2a0ea-502">使用`%m`場合、これは、ユーザー定義の数値書式文字のみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-502">Use `%m` if this is the only character in your user-defined numeric format.</span></span>|  
|`mm`|<span data-ttu-id="2a0ea-503">数値に先行するゼロとして分を表示します (たとえば、 `12:01:15`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-503">Displays the minute as a number with leading zeros (for example, `12:01:15`).</span></span>|  
|`s`|<span data-ttu-id="2a0ea-504">0 を付けない数値 2 つ目を表示します (たとえば、 `12:15:5`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-504">Displays the second as a number without leading zeros (for example, `12:15:5`).</span></span> <span data-ttu-id="2a0ea-505">使用`%s`場合、これは、ユーザー定義の数値書式文字のみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-505">Use `%s` if this is the only character in your user-defined numeric format.</span></span>|  
|`ss`|<span data-ttu-id="2a0ea-506">数値に先行するゼロ秒を表示します (たとえば、 `12:15:05`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-506">Displays the second as a number with leading zeros (for example, `12:15:05`).</span></span>|  
|`f`|<span data-ttu-id="2a0ea-507">秒の小数部を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-507">Displays fractions of seconds.</span></span> <span data-ttu-id="2a0ea-508">たとえば`ff`1/100 秒が表示されますが、`ffff`秒の部分の 1/10000 を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-508">For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds.</span></span> <span data-ttu-id="2a0ea-509">最大 7 を使用することが`f`ユーザー定義の書式シンボル。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-509">You may use up to seven `f` symbols in your user-defined format.</span></span> <span data-ttu-id="2a0ea-510">使用`%f`場合、これは、ユーザー定義の数値書式文字のみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-510">Use `%f` if this is the only character in your user-defined numeric format.</span></span>|  
|`t`|<span data-ttu-id="2a0ea-511">12 時間制を使用して、大文字`A`正午前に、の時間に大文字が表示されます`P`の正午と午後 11 時 59 分の間の時間</span><span class="sxs-lookup"><span data-stu-id="2a0ea-511">Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M.</span></span> <span data-ttu-id="2a0ea-512">使用`%t`場合、これは、ユーザー定義の数値書式文字のみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-512">Use `%t` if this is the only character in your user-defined numeric format.</span></span>|  
|`tt`|<span data-ttu-id="2a0ea-513">12 時間制を使用するロケールによっては、表示、大文字`AM`正午前に、の時間に大文字が表示されます`PM`正午と午後 11 時 59 分の間の時間で</span><span class="sxs-lookup"><span data-stu-id="2a0ea-513">For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.</span></span><br /><br /> <span data-ttu-id="2a0ea-514">24 時間制を使用するロケールによっては、何も表示されません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-514">For locales that use a 24-hour clock, displays nothing.</span></span>|  
|`y`|<span data-ttu-id="2a0ea-515">0 を付けない年の数 (0 ~ 9) が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-515">Displays the year number (0-9) without leading zeros.</span></span> <span data-ttu-id="2a0ea-516">使用`%y`場合、これは、ユーザー定義の数値書式文字のみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-516">Use `%y` if this is the only character in your user-defined numeric format.</span></span>|  
|`yy`|<span data-ttu-id="2a0ea-517">該当する場合に 0 を付けた 2 桁の数値書式で年が表示されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-517">Displays the year in two-digit numeric format with a leading zero, if applicable.</span></span>|  
|`yyy`|<span data-ttu-id="2a0ea-518">4 桁の数値書式で年を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-518">Displays the year in four-digit numeric format.</span></span>|  
|`yyyy`|<span data-ttu-id="2a0ea-519">4 桁の数値書式で年を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-519">Displays the year in four-digit numeric format.</span></span>|  
|`z`|<span data-ttu-id="2a0ea-520">先行ゼロなしのタイム ゾーン オフセットを表示します (たとえば、 `-8`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-520">Displays the timezone offset without a leading zero (for example, `-8`).</span></span> <span data-ttu-id="2a0ea-521">使用`%z`場合、これは、ユーザー定義の数値書式文字のみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-521">Use `%z` if this is the only character in your user-defined numeric format.</span></span>|  
|`zz`|<span data-ttu-id="2a0ea-522">先行ゼロ付きのタイム ゾーン オフセットを表示します (たとえば、 `-08`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-522">Displays the timezone offset with a leading zero (for example, `-08`)</span></span>|  
|`zzz`|<span data-ttu-id="2a0ea-523">完全なタイムゾーン オフセットを表示します (たとえば、 `-08:00`)</span><span class="sxs-lookup"><span data-stu-id="2a0ea-523">Displays the full timezone offset (for example, `-08:00`)</span></span>|  
  
### <a name="legacy-code-example"></a><span data-ttu-id="2a0ea-524">古いコードの例</span><span class="sxs-lookup"><span data-stu-id="2a0ea-524">Legacy Code Example</span></span>  
 <span data-ttu-id="2a0ea-525">ユーザー定義の日付と時刻の形式の例を次に`December 7, 1958, 8:50 PM, 35 seconds`:</span><span class="sxs-lookup"><span data-stu-id="2a0ea-525">The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:</span></span>  
  
|<span data-ttu-id="2a0ea-526">形式</span><span class="sxs-lookup"><span data-stu-id="2a0ea-526">Format</span></span>|<span data-ttu-id="2a0ea-527">表示</span><span class="sxs-lookup"><span data-stu-id="2a0ea-527">Displays</span></span>|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-528">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-528">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-529">デバイスの最小期間の精度は、デバイスの製造元によって決定されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-529">The minimum time resolution for a device is determined by the manufacturer of the device.</span></span> <span data-ttu-id="2a0ea-530">デバイスの期間の精度は十分に粗い場合、`f`書式指定文字がそのデバイス上で実行するときは 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-530">If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-531">`Format` の書式指定とユーザー定義の書式指定の両方を使って値の書式を指定する、`String` 関数のさまざまな使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-531">This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats.</span></span> <span data-ttu-id="2a0ea-532">日付の区切り記号 (`/`)、時刻の区切り記号 (`:`)、および午前/午後を示す文字 (`t` および `tt`) について、システムで実際に表示される書式は、コードが使用するロケール設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-532">For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using.</span></span> <span data-ttu-id="2a0ea-533">時刻と日付を開発環境で表示する場合は、コード ロケールの短い時刻書式と短い日付書式が使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-533">When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-534">24 時間制を使用するロケールでは、午前/午後を示す記号 (`t` および `tt`) では何も表示されません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-534">For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.</span></span>  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-535">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-535">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-536">書式指定される式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-536">Expression to be formatted.</span>
          </span>
        </param>
        <param name="NumDigitsAfterDecimal">
          <span data-ttu-id="2a0ea-537">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-537">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-538">表示される小数点以下の桁数を示す数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-538">Numeric value indicating how many places are displayed to the right of the decimal.</span>
          </span>
          <span data-ttu-id="2a0ea-539">既定値は –1 です。これは、コンピューターの地域設定が使用されることを示しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-539">Default value is –1, which indicates that the computer's regional settings are used.</span>
          </span>
        </param>
        <param name="IncludeLeadingDigit">
          <span data-ttu-id="2a0ea-540">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-540">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-541">小数値の先頭の 0 を表示するかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-541">
              <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values.</span>
          </span>
          <span data-ttu-id="2a0ea-542">値については、「解説」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-542">See "Remarks" for values.</span>
          </span>
        </param>
        <param name="UseParensForNegativeNumbers">
          <span data-ttu-id="2a0ea-543">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-543">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-544">負の値をかっこで囲むかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-544">
              <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses.</span>
          </span>
          <span data-ttu-id="2a0ea-545">値については、「解説」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-545">See "Remarks" for values.</span>
          </span>
        </param>
        <param name="GroupDigits">
          <span data-ttu-id="2a0ea-546">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-546">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-547">コンピューターの地域設定で指定されている桁区切り記号を使用して数値を区切るかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-547">
              <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings.</span>
          </span>
          <span data-ttu-id="2a0ea-548">値については、「解説」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-548">See "Remarks" for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-549">システムの [コントロール パネル] で定義されている通貨記号を使って通貨形式の文字列に書式設定して返す文字列処理関数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-549">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-550">システムの [コントロール パネル] で定義されている通貨記号を使って通貨形式の文字列に書式設定して返す文字列処理関数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-550">Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-551">1 つまたは複数の省略可能な引数は省略すると、コンピューターの地域設定と一致する値が代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-551">When one or more optional arguments are omitted, the computer's matching regional-settings values are used instead.</span></span>  
  
 <span data-ttu-id="2a0ea-552">通貨の値、通貨記号の位置については、システムの地域設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-552">The position of the currency symbol relative to the currency value is determined by the system's regional settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-553">すべての設定情報は、アプリケーションのロケールから取得されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-553">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="2a0ea-554">既定では、コントロール パネル に設定されているロケールなります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-554">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="2a0ea-555">ただし、これがプログラムで変更するからゼロ以外、.NET Framework を使用して、`Number`タブ。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-555">However, it may be changed programmatically by using the .NET Framework, except leading zero, which comes from the `Number` tab.</span></span>  
  
 <span data-ttu-id="2a0ea-556">`IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数が小数点の左側の次の列挙値を取得します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-556">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments take the following TriState enumeration values.</span></span>  
  
|<span data-ttu-id="2a0ea-557">[値]</span><span class="sxs-lookup"><span data-stu-id="2a0ea-557">Value</span></span>|<span data-ttu-id="2a0ea-558">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-558">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="2a0ea-559">True</span><span class="sxs-lookup"><span data-stu-id="2a0ea-559">True</span></span>|  
|`TriState.False`|<span data-ttu-id="2a0ea-560">False</span><span class="sxs-lookup"><span data-stu-id="2a0ea-560">False</span></span>|  
|`TriState.UseDefault`|<span data-ttu-id="2a0ea-561">コンピューターの地域の設定</span><span class="sxs-lookup"><span data-stu-id="2a0ea-561">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-562">`FormatCurrency` 関数の使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-562">The following example illustrates the use of the `FormatCurrency` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-563">小数点以下の桁数が 99 を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-563">Number of digits after decimal point is greater than 99.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="2a0ea-564">型が数字ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-564">Type is not numeric.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-565">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-565">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-566">書式設定する <see langword="Date" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-566">
              <see langword="Date" /> expression to be formatted.</span>
          </span>
        </param>
        <param name="NamedFormat">
          <span data-ttu-id="2a0ea-567">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-567">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-568">使用する日付/時刻形式を示す数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-568">Numeric value that indicates the date/time format used.</span>
          </span>
          <span data-ttu-id="2a0ea-569">省略した場合は、<see langword="DateFormat.GeneralDate" /> が使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-569">If omitted, <see langword="DateFormat.GeneralDate" /> is used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-570">日時の値を表す文字列式を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-570">Returns a string expression representing a date/time value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-571">日時の値を表す文字列式を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-571">Returns a string expression representing a date/time value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-572">`Date`データ型には常に日付と時刻の両方の情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-572">The `Date` data type always contains both date and time information.</span></span> <span data-ttu-id="2a0ea-573">型変換のために、Visual Basic と見なされる 1/1/1 (1 月 1日年 1 月) を日付、および 00時 00分: 00 (午前 0 時) を時間のニュートラル値のニュートラルの値。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-573">For purposes of type conversion, Visual Basic considers 1/1/1 (January 1 of the year 1) to be a neutral value for the date, and 00:00:00 (midnight) to be a neutral value for the time.</span></span> <span data-ttu-id="2a0ea-574">書式を設定する場合、`Date`日付/時刻の文字列として値`FormatDateTime`結果の文字列に基準値を含めません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-574">If you format a `Date` value as a date/time string, `FormatDateTime` does not include neutral values in the resulting string.</span></span> <span data-ttu-id="2a0ea-575">たとえば、#1/1/0001 を変換する 9時 30分: 00 と、結果文字列には、"9時 30分: 00 AM"とします。日付情報は表示されません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-575">For example, if you convert #1/1/0001 9:30:00# to a string, the result is "9:30:00 AM"; the date information is suppressed.</span></span> <span data-ttu-id="2a0ea-576">ただし、日付情報は、元に引き続き存在`Date`値し、などの関数で回復できる`DatePart`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-576">However, the date information is still present in the original `Date` value and can be recovered with functions such as `DatePart`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-577">渡す場合、`Expression`引数として、`String`リテラル、`FormatDateTime`に従って解釈される、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>アプリケーションの設定。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-577">If you pass the `Expression` argument as a `String` literal, `FormatDateTime` interprets it according to the <xref:System.Globalization.CultureInfo.CurrentCulture%2A> setting of your application.</span></span> <span data-ttu-id="2a0ea-578">ただし、として値を渡す場合、`Date`リテラルには、形式 # ・ mm dd を使用して/yyyy # ため`FormatDateTime`常に、解釈、`Date`英語 (米国) カルチャに基づくリテラル。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-578">However, if you pass it as a `Date` literal, use the format #mm/dd/yyyy#, because `FormatDateTime` always interprets a `Date` literal according to the English (US) culture.</span></span> <span data-ttu-id="2a0ea-579">これは、必要なため、アプリケーションが開発しを使用してコード化された場合`Date`から 1 つのリテラルが、別のカルチャのプラットフォームで実行し、`Date`リテラルが正しく解析ができませんでした。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-579">This is necessary because, if an application is developed and coded using `Date` literals from one culture, but is then executed on a platform with a different culture, the `Date` literals could be parsed incorrectly.</span></span>  
  
 <span data-ttu-id="2a0ea-580">`NamedFormat`引数は、次の設定。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-580">The `NamedFormat` argument has the following settings.</span></span>  
  
|<span data-ttu-id="2a0ea-581">定数</span><span class="sxs-lookup"><span data-stu-id="2a0ea-581">Constant</span></span>|<span data-ttu-id="2a0ea-582">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-582">Description</span></span>|  
|-|-|  
|`DateFormat.GeneralDate`|<span data-ttu-id="2a0ea-583">日付/時刻を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-583">Display a date and/or time.</span></span> <span data-ttu-id="2a0ea-584">短い形式の日付として、日付部分を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-584">Display a date part as a short date.</span></span> <span data-ttu-id="2a0ea-585">時刻部分がある場合は、長い時間として表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-585">If there is a time part, display it as a long time.</span></span> <span data-ttu-id="2a0ea-586">存在する場合、両方のパーツを表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-586">If present, both parts display.</span></span>|  
|`DateFormat.LongDate`|<span data-ttu-id="2a0ea-587">コンピューターの地域設定で指定された長い日付形式を使用して日付を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-587">Display a date using the long date format specified in your computer's regional settings.</span></span>|  
|`DateFormat.ShortDate`|<span data-ttu-id="2a0ea-588">コンピューターの地域設定で指定された短い日付形式を使用して日付を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-588">Display a date using the short date format specified in your computer's regional settings.</span></span>|  
|`DateFormat.LongTime`|<span data-ttu-id="2a0ea-589">コンピューターの地域設定で指定された時刻の形式を使用して時刻を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-589">Display a time using the time format specified in your computer's regional settings.</span></span>|  
|`DateFormat.ShortTime`|<span data-ttu-id="2a0ea-590">24 時間形式 (hh:mm) を使用して時間を表示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-590">Display a time using the 24-hour format (hh:mm).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-591">この例の使用、`FormatDateTime`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-591">This example demonstrates the use of the `FormatDateTime` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-592">
            <paramref name="NamedFormat" /> の設定が有効ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-592">
              <paramref name="NamedFormat" /> setting is not valid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-593">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-593">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-594">書式指定される式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-594">Expression to be formatted.</span>
          </span>
        </param>
        <param name="NumDigitsAfterDecimal">
          <span data-ttu-id="2a0ea-595">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-595">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-596">表示される小数点以下の桁数を示す数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-596">Numeric value indicating how many places are displayed to the right of the decimal.</span>
          </span>
          <span data-ttu-id="2a0ea-597">既定値は –1 です。これは、コンピューターの地域設定が使用されることを示しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-597">The default value is –1, which indicates that the computer's regional settings are used.</span>
          </span>
        </param>
        <param name="IncludeLeadingDigit">
          <span data-ttu-id="2a0ea-598">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-598">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-599">小数値の先頭の 0 を表示するかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-599">
              <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values.</span>
          </span>
          <span data-ttu-id="2a0ea-600">値については、「設定」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-600">See "Settings" for values.</span>
          </span>
        </param>
        <param name="UseParensForNegativeNumbers">
          <span data-ttu-id="2a0ea-601">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-601">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-602">負の値をかっこで囲むかどうかを示す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-602">
              <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses.</span>
          </span>
          <span data-ttu-id="2a0ea-603">値については、「設定」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-603">See "Settings" for values.</span>
          </span>
        </param>
        <param name="GroupDigits">
          <span data-ttu-id="2a0ea-604">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-604">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-605">ロケール設定で指定されている桁区切り記号を使用して、数値を区切るかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-605">
              <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span>
          </span>
          <span data-ttu-id="2a0ea-606">値については、「設定」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-606">See "Settings" for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-607">数値形式の文字列に書式設定して返す文字列処理関数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-607">Returns an expression formatted as a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-608">数値形式の文字列に書式設定して返す文字列処理関数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-608">Returns an expression formatted as a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-609">1 つまたは複数の省略可能な引数を省略すると、省略された引数の値は、ロケール設定によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-609">When one or more optional arguments are omitted the values for omitted arguments are provided by the locale settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-610">すべての設定情報は、アプリケーションのロケールから取得されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-610">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="2a0ea-611">既定では、コントロール パネル に設定されているロケールなります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-611">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="2a0ea-612">ただし、その可能性がありますプログラムで変更する .NET Framework を使用しています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-612">However, it may be changed programmatically by using the .NET Framework.</span></span>  
  
 <span data-ttu-id="2a0ea-613">`IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数が、次の設定があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-613">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.</span></span>  
  
|<span data-ttu-id="2a0ea-614">定数</span><span class="sxs-lookup"><span data-stu-id="2a0ea-614">Constant</span></span>|<span data-ttu-id="2a0ea-615">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-615">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="2a0ea-616">True</span><span class="sxs-lookup"><span data-stu-id="2a0ea-616">True</span></span>|  
|`TriState.False`|<span data-ttu-id="2a0ea-617">False</span><span class="sxs-lookup"><span data-stu-id="2a0ea-617">False</span></span>|  
|`TriState.UseDefault`|<span data-ttu-id="2a0ea-618">コンピューターの地域の設定</span><span class="sxs-lookup"><span data-stu-id="2a0ea-618">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-619">この例では、`FormatNumber`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-619">This example demonstrates the `FormatNumber` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="2a0ea-620">型が数字ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-620">Type is not numeric.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-621">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-621">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-622">書式指定される式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-622">Expression to be formatted.</span>
          </span>
        </param>
        <param name="NumDigitsAfterDecimal">
          <span data-ttu-id="2a0ea-623">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-623">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-624">小数点以下に表示する桁数を表す数値を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-624">Numeric value indicating how many places to the right of the decimal are displayed.</span>
          </span>
          <span data-ttu-id="2a0ea-625">既定値は -1 で、ロケール設定を使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-625">Default value is –1, which indicates that the locale settings are used.</span>
          </span>
        </param>
        <param name="IncludeLeadingDigit">
          <span data-ttu-id="2a0ea-626">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-626">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-627">小数点の左側のゼロを表示するかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-627">
              <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values.</span>
          </span>
          <span data-ttu-id="2a0ea-628">値については、「設定」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-628">See "Settings" for values.</span>
          </span>
        </param>
        <param name="UseParensForNegativeNumbers">
          <span data-ttu-id="2a0ea-629">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-629">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-630">負の値をかっこで囲むかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-630">
              <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses.</span>
          </span>
          <span data-ttu-id="2a0ea-631">値については、「設定」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-631">See "Settings" for values.</span>
          </span>
        </param>
        <param name="GroupDigits">
          <span data-ttu-id="2a0ea-632">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-632">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-633">ロケール設定で指定されている桁区切り記号を使用して、数値を区切るかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-633">
              <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings.</span>
          </span>
          <span data-ttu-id="2a0ea-634">値については、「設定」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-634">See "Settings" for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-635">パーセント記号 (%) が付加されたパーセント形式 (100 で乗算した) の文字列に書式設定して返す文字列処理関数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-635">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-636">パーセント記号 (%) が付加されたパーセント形式 (100 で乗算した) の文字列に書式設定して返す文字列処理関数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-636">Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-637">1 つまたは複数の省略可能な引数を省略すると、省略された引数の値は、ロケール設定によって提供されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-637">When one or more optional arguments are omitted, the values for omitted arguments are provided by the locale settings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-638">すべての設定情報は、アプリケーションのロケールから取得されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-638">All settings information comes from the locale of the application.</span></span> <span data-ttu-id="2a0ea-639">既定では、コントロール パネル に設定されているロケールなります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-639">By default, that will be the locale set in the control panel.</span></span> <span data-ttu-id="2a0ea-640">ただし、その可能性がありますプログラムで変更する .NET Framework を使用しています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-640">However, it may be changed programmatically by using the .NET Framework.</span></span>  
  
 <span data-ttu-id="2a0ea-641">`IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数が、次の設定があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-641">The `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, and `GroupDigits` arguments have the following settings.</span></span>  
  
|<span data-ttu-id="2a0ea-642">定数</span><span class="sxs-lookup"><span data-stu-id="2a0ea-642">Constant</span></span>|<span data-ttu-id="2a0ea-643">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-643">Description</span></span>|  
|-|-|  
|`TriState.True`|<span data-ttu-id="2a0ea-644">True</span><span class="sxs-lookup"><span data-stu-id="2a0ea-644">True</span></span>|  
|`TriState.False`|<span data-ttu-id="2a0ea-645">False</span><span class="sxs-lookup"><span data-stu-id="2a0ea-645">False</span></span>|  
|`TriState.Default`|<span data-ttu-id="2a0ea-646">コンピューターの地域の設定</span><span class="sxs-lookup"><span data-stu-id="2a0ea-646">The computer's regional settings</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-647">この例での使用、`FormatPercent`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-647">This example illustrates the use of the `FormatPercent` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="2a0ea-648">型が数字ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-648">Type is not numeric.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="2a0ea-649">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-649">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-650">任意の有効な <see langword="String" /> 式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-650">Any valid <see langword="String" /> expression.</span>
          </span>
        </param>
        <param name="Index">
          <span data-ttu-id="2a0ea-651">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-651">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-652">整数型 (<see langword="Integer" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-652">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-653">
            <c>str</c> から取り出す部分の文字を指定する (1 から始まる) インデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-653">The (1-based) index of the character in <c>str</c> to be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-654">指定された文字列の指定されたインデックス位置にある文字を表す <see langword="Char" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-654">Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-655">指定された文字列の指定されたインデックス位置にある文字を表す <see langword="Char" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-655">
              <see langword="Char" /> value representing the character from the specified index in the supplied string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-656">場合`Index`が 1 より小さいか、最後の文字のインデックスよりも大きい`str`、`ArgumentException`がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-656">If `Index` is less than 1 or greater than the index of the last character in `str`, an `ArgumentException` is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-657">この例は、使用する方法を示します、`GetChar`で指定したインデックスから文字を取得する関数を`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-657">This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.</span></span>  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-658">
            <paramref name="str" /> が <see langword="Nothing" />、<paramref name="Index" /> &lt; 1、または <paramref name="Index" /> が <paramref name="str" /> の最後の文字のインデックスよりも大きいです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-658">
              <paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a0ea-659">ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-659">Returns an integer specifying the start position of the first occurrence of one string within another.</span>
          </span>
          <span data-ttu-id="2a0ea-660">一致するものが見つかった場合は、整数は、1 から始まるインデックスです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-660">The integer is a one-based index if a match is found.</span>
          </span>
          <span data-ttu-id="2a0ea-661">一致するものが見つからない場合は、関数は 0 を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-661">If no match is found, the function returns zero.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">
          <span data-ttu-id="2a0ea-662">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-662">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-663">検索対象の <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-663">
              <see langword="String" /> expression being searched.</span>
          </span>
        </param>
        <param name="String2">
          <span data-ttu-id="2a0ea-664">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-664">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-665">検索対象の <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-665">
              <see langword="String" /> expression sought.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="2a0ea-666">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-666">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-667">文字列比較の種類を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-667">Specifies the type of string comparison.</span>
          </span>
          <span data-ttu-id="2a0ea-668">
            <c>Compare</c> が省略されている場合、<see langword="Option Compare" /> 設定により比較の種類を決定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-668">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-669">ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-669">Returns an integer specifying the start position of the first occurrence of one string within another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-670">
            <list type="table">
              <item>
                <term> 条件  </term>
                <description> InStr の戻り値  </description>
              </item>
              <item>
                <term>
                  <paramref name="String1" /> の長さが 0 または <see langword="Nothing" /> です。</term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="String2" /> の長さが 0 または <see langword="Nothing" /> です。</term>
                <description> 既定では最初の文字の位置となる、検索の開始位置です。  </description>
              </item>
              <item>
                <term>
                  <paramref name="String2" /> が見つかりません。</term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="String2" /> が内部にある <paramref name="String1" /></term>
                <description> 一致する文字列の開始位置  </description>
              </item>
              <item>
                <term></term>
                <description></description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-670">
              <list type="table">
                <item>
                  <term> If  </term>
                  <description> InStr returns  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
                  <description> The starting position for the search, which defaults to the first character position.  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String2" /> is not found  </term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String2" /> is found within <paramref name="String1" /></term>
                  <description> Position where match begins  </description>
                </item>
                <item>
                  <term></term>
                  <description></description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-671">通常、`InStr`文字列を解析するときに関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-671">Typically, the `InStr` function is used when parsing strings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-672">`InStrB`以前のバージョンの Visual Basic の関数は文字の位置ではなく、バイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-672">The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position.</span></span> <span data-ttu-id="2a0ea-673">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-673">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-674">Visual Basic 2005 のすべての文字列が Unicode では、`InStrB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-674">All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.</span></span>  
  
 <span data-ttu-id="2a0ea-675">`Compare` 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-675">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="2a0ea-676">定数</span><span class="sxs-lookup"><span data-stu-id="2a0ea-676">Constant</span></span>|<span data-ttu-id="2a0ea-677">[値]</span><span class="sxs-lookup"><span data-stu-id="2a0ea-677">Value</span></span>|<span data-ttu-id="2a0ea-678">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-678">Description</span></span>|  
|-|-|-|  
|`Binary`|<span data-ttu-id="2a0ea-679">0</span><span class="sxs-lookup"><span data-stu-id="2a0ea-679">0</span></span>|<span data-ttu-id="2a0ea-680">バイナリ比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-680">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="2a0ea-681">1</span><span class="sxs-lookup"><span data-stu-id="2a0ea-681">1</span></span>|<span data-ttu-id="2a0ea-682">テキスト比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-682">Performs a text comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-683">`InStr` 関数を使って、ある文字列の中から指定された文字列を検索し、最初に見つかった文字位置を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-683">This example uses the `InStr` function to return the position of the first occurrence of one string within another.</span></span>  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">
          <span data-ttu-id="2a0ea-684">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-684">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-685">各検索の開始位置を設定する数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-685">Numeric expression that sets the starting position for each search.</span>
          </span>
          <span data-ttu-id="2a0ea-686">省略した場合、検索は最初の文字位置から開始されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-686">If omitted, search begins at the first character position.</span>
          </span>
          <span data-ttu-id="2a0ea-687">開始インデックスは 1 から始まっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-687">The start index is 1-based.</span>
          </span>
        </param>
        <param name="String1">
          <span data-ttu-id="2a0ea-688">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-688">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-689">検索対象の <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-689">
              <see langword="String" /> expression being searched.</span>
          </span>
        </param>
        <param name="String2">
          <span data-ttu-id="2a0ea-690">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-690">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-691">検索対象の <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-691">
              <see langword="String" /> expression sought.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="2a0ea-692">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-692">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-693">文字列比較の種類を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-693">Specifies the type of string comparison.</span>
          </span>
          <span data-ttu-id="2a0ea-694">
            <c>Compare</c> が省略されている場合、<see langword="Option Compare" /> 設定により比較の種類を決定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-694">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-695">ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-695">Returns an integer specifying the start position of the first occurrence of one string within another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-696">
            <list type="table">
              <item>
                <term> 条件  </term>
                <description> InStr の戻り値  </description>
              </item>
              <item>
                <term>
                  <paramref name="String1" /> の長さが 0 または <see langword="Nothing" /> です。</term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="String2" /> の長さが 0 または <see langword="Nothing" /> です。</term>
                <description>
                  <paramref name="start" />
                </description>
              </item>
              <item>
                <term>
                  <paramref name="String2" /> が見つかりません。  </term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="String2" /> が内部にある <paramref name="String1" /></term>
                <description> 一致する文字列の開始位置  </description>
              </item>
              <item>
                <term>
                  <paramref name="Start" />
                  <paramref name="String1" /> の &gt; の長さ。</term>
                <description> 0  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-696">
              <list type="table">
                <item>
                  <term> If  </term>
                  <description> InStr returns  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
                  <description>
                    <paramref name="start" />
                  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String2" /> is not found  </term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String2" /> is found within <paramref name="String1" /></term>
                  <description> Position where match begins  </description>
                </item>
                <item>
                  <term>
                    <paramref name="Start" /> &gt; length of <paramref name="String1" /></term>
                  <description> 0  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-697">通常、`InStr`文字列を解析するときに関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-697">Typically, the `InStr` function is used when parsing strings.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-698">`InStrB`以前のバージョンの Visual Basic の関数は文字の位置ではなく、バイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-698">The `InStrB` function in previous versions of Visual Basic returns a number of bytes rather than a character position.</span></span> <span data-ttu-id="2a0ea-699">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-699">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-700">Visual Basic 2005 のすべての文字列が Unicode では、`InStrB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-700">All Visual Basic 2005 strings are in Unicode, and `InStrB` is no longer supported.</span></span>  
  
 <span data-ttu-id="2a0ea-701">`Compare` 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-701">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="2a0ea-702">定数</span><span class="sxs-lookup"><span data-stu-id="2a0ea-702">Constant</span></span>|<span data-ttu-id="2a0ea-703">[値]</span><span class="sxs-lookup"><span data-stu-id="2a0ea-703">Value</span></span>|<span data-ttu-id="2a0ea-704">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-704">Description</span></span>|  
|-|-|-|  
|`Binary`|<span data-ttu-id="2a0ea-705">0</span><span class="sxs-lookup"><span data-stu-id="2a0ea-705">0</span></span>|<span data-ttu-id="2a0ea-706">バイナリ比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-706">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="2a0ea-707">1</span><span class="sxs-lookup"><span data-stu-id="2a0ea-707">1</span></span>|<span data-ttu-id="2a0ea-708">テキスト比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-708">Performs a text comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-709">`InStr` 関数を使って、ある文字列の中から指定された文字列を検索し、最初に見つかった文字位置を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-709">This example uses the `InStr` function to return the position of the first occurrence of one string within another.</span></span>  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-710">
            <paramref name="Start" /> &lt; 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-710">
              <paramref name="Start" /> &lt; 1.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">
          <span data-ttu-id="2a0ea-711">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-711">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-712">検索対象の文字列式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-712">String expression being searched.</span>
          </span>
        </param>
        <param name="StringMatch">
          <span data-ttu-id="2a0ea-713">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-713">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-714">検索対象の文字列式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-714">String expression being searched for.</span>
          </span>
        </param>
        <param name="Start">
          <span data-ttu-id="2a0ea-715">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-715">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-716">文字列の左側から開始して、各検索に対して 1 から始まる開始位置を設定する数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-716">Numeric expression setting the one-based starting position for each search, starting from the left side of the string.</span>
          </span>
          <span data-ttu-id="2a0ea-717">
            <c>Start</c> を省略した場合は –1 が使用されます。この値は、検索が最後の文字位置から開始されることを示しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-717">If <c>Start</c> is omitted then –1 is used, meaning the search begins at the last character position.</span>
          </span>
          <span data-ttu-id="2a0ea-718">検索は右から左へと行われます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-718">Search then proceeds from right to left.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="2a0ea-719">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-719">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-720">部分文字列を評価する場合に使用する比較の種類を示す数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-720">Numeric value indicating the kind of comparison to use when evaluating substrings.</span>
          </span>
          <span data-ttu-id="2a0ea-721">省略した場合、バイナリ比較が実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-721">If omitted, a binary comparison is performed.</span>
          </span>
          <span data-ttu-id="2a0ea-722">値については、「設定」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-722">See Settings for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-723">ある文字列の中から指定された文字列を最後の文字位置から検索を開始し、最初に見つかった文字位置 (先頭からその位置までの文字数) を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-723">Returns the position of the first occurrence of one string within another, starting from the right side of the string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-724">
            <list type="table">
              <item>
                <term> 条件  </term>
                <description> InStrRev の戻り値  </description>
              </item>
              <item>
                <term>
                  <paramref name="StringCheck" /> が長さ 0 の文字列 ("") のとき  </term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="StringMatch" /> が長さ 0 の文字列 ("") のとき  </term>
                <description>
                  <paramref name="Start" />
                </description>
              </item>
              <item>
                <term>
                  <paramref name="StringMatch" /> が見つからない場合  </term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="StringMatch" /> が内部にある <paramref name="StringCheck" /></term>
                <description> 文字列の先頭から検索して最初に文字列が見つかった位置  </description>
              </item>
              <item>
                <term>
                  <paramref name="Start" /> が <paramref name="StringMatch" /> の長さよりも大きいとき</term>
                <description> 0  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-724">
              <list type="table">
                <item>
                  <term> If  </term>
                  <description> InStrRev returns  </description>
                </item>
                <item>
                  <term>
                    <paramref name="StringCheck" /> is zero-length  </term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="StringMatch" /> is zero-length  </term>
                  <description>
                    <paramref name="Start" />
                  </description>
                </item>
                <item>
                  <term>
                    <paramref name="StringMatch" /> is not found  </term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="StringMatch" /> is found within <paramref name="StringCheck" /></term>
                  <description> Position at which the first match is found, starting with the right side of the string.  </description>
                </item>
                <item>
                  <term>
                    <paramref name="Start" /> is greater than length of <paramref name="StringMatch" /></term>
                  <description> 0  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-725">注意の構文、`InStrRev`関数がないための構文と同じ、`InStr`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-725">Note that the syntax for the `InStrRev` function is not the same as the syntax for the `InStr` function.</span></span>  
  
 <span data-ttu-id="2a0ea-726">`Compare`引数は、次の値であることができます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-726">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="2a0ea-727">定数</span><span class="sxs-lookup"><span data-stu-id="2a0ea-727">Constant</span></span>|<span data-ttu-id="2a0ea-728">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-728">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="2a0ea-729">バイナリ比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-729">Performs a binary comparison.</span></span>|  
|`Text`|<span data-ttu-id="2a0ea-730">テキスト比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-730">Performs a textual comparison.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-731">この例の使用、`InStrRev`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-731">This example demonstrates the use of the `InStrRev` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-732">
            <paramref name="Start" /> = 0 または <paramref name="Start" /> &lt; -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-732">
              <paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a0ea-733">配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-733">Returns a string created by joining a number of substrings contained in an array.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">
          <span data-ttu-id="2a0ea-734">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-734">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-735">結合する部分文字列を含む 1 次元配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-735">One-dimensional array containing substrings to be joined.</span>
          </span>
        </param>
        <param name="Delimiter">
          <span data-ttu-id="2a0ea-736">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-736">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-737">返された文字列内の部分文字列を区切るために使用される任意の文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-737">Any string, used to separate the substrings in the returned string.</span>
          </span>
          <span data-ttu-id="2a0ea-738">省略した場合は、空白文字 (" ") が使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-738">If omitted, the space character (" ") is used.</span>
          </span>
          <span data-ttu-id="2a0ea-739">
            <c>Delimiter</c> が長さ 0 の文字列 ("") または <see langword="Nothing" /> の場合、リスト内のすべてのアイテムが区切り文字なしで連結されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-739">If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-740">配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-740">Returns a string created by joining a number of substrings contained in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-741">配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-741">Returns a string created by joining a number of substrings contained in an array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-742">間の類似性がある、`Join`と`Split`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-742">There is a parity between the `Join` and `Split` functions.</span></span> <span data-ttu-id="2a0ea-743">`Join`関数が文字列の配列に受け取りを 1 つの文字列を返す、区切り文字列を使用してそれらを参加させます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-743">The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string.</span></span> <span data-ttu-id="2a0ea-744">`Split`関数の文字列を受け取り、文字列の配列を返す、区切り記号で分割します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-744">The `Split` function takes a string and separates it at the delimiter, to return an array of strings.</span></span> <span data-ttu-id="2a0ea-745">ただし、重要な違いを`Join`区切り記号の文字列と文字列を連結できます`Split`1 つの文字の区切り記号を使用して文字列を区切ることができますのみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-745">However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-746">次の例では、使用する方法、`Join`いくつかの文字列からリストを作成する関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-746">The following example demonstrates how to use the `Join` function to create a list from several strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-747">
            <paramref name="SourceArray" /> が 1 次元ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-747">
              <paramref name="SourceArray" /> is not one dimensional.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">
          <span data-ttu-id="2a0ea-748">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-748">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-749">結合する部分文字列を含む 1 次元配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-749">One-dimensional array containing substrings to be joined.</span>
          </span>
        </param>
        <param name="Delimiter">
          <span data-ttu-id="2a0ea-750">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-750">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-751">返された文字列内の部分文字列を区切るために使用される任意の文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-751">Any string, used to separate the substrings in the returned string.</span>
          </span>
          <span data-ttu-id="2a0ea-752">省略した場合は、空白文字 (" ") が使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-752">If omitted, the space character (" ") is used.</span>
          </span>
          <span data-ttu-id="2a0ea-753">
            <c>Delimiter</c> が長さ 0 の文字列 ("") または <see langword="Nothing" /> の場合、リスト内のすべてのアイテムが区切り文字なしで連結されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-753">If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-754">配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-754">Returns a string created by joining a number of substrings contained in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-755">配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-755">Returns a string created by joining a number of substrings contained in an array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-756">間の類似性がある、`Join`と`Split`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-756">There is a parity between the `Join` and `Split` functions.</span></span> <span data-ttu-id="2a0ea-757">`Join`関数が文字列の配列に受け取りを 1 つの文字列を返す、区切り文字列を使用してそれらを参加させます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-757">The `Join` function takes an array of strings and joins them using a delimiter string, to return a single string.</span></span> <span data-ttu-id="2a0ea-758">`Split`関数の文字列を受け取り、文字列の配列を返す、区切り記号で分割します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-758">The `Split` function takes a string and separates it at the delimiter, to return an array of strings.</span></span> <span data-ttu-id="2a0ea-759">ただし、重要な違いを`Join`区切り記号の文字列と文字列を連結できます`Split`1 つの文字の区切り記号を使用して文字列を区切ることができますのみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-759">However, a key difference is that `Join` can concatenate strings with any delimiter string, `Split` can only separate strings using a single character delimiter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-760">次の例では、使用する方法、`Join`いくつかの文字列からリストを作成する関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-760">The following example demonstrates how to use the `Join` function to create a list from several strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-761">
            <paramref name="SourceArray" /> が 1 次元ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-761">
              <paramref name="SourceArray" /> is not one dimensional.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a0ea-762">小文字に変換した文字列または文字を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-762">Returns a string or character converted to lowercase.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">
          <span data-ttu-id="2a0ea-763">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-763">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-764">任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-764">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-765">小文字に変換した文字列または文字を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-765">Returns a string or character converted to lowercase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-766">小文字に変換した文字列または文字を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-766">Returns a string or character converted to lowercase.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-767">だけに大文字に変換されます 小文字に。すべての小文字とアルファベット以外の文字は変更されません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-767">Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="2a0ea-768">この関数は、大文字と小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-768">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2a0ea-769">アプリケーションがセキュリティ上の決定の比較またはケース変更操作の結果に基づくかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-769">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="2a0ea-770">詳細については、次を参照してください。[どのカルチャに影響を与えます Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-770">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-771">この例では、`LCase`関数を文字列の小文字のバージョンを返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-771">This example uses the `LCase` function to return a lowercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">
          <span data-ttu-id="2a0ea-772">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-772">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-773">任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-773">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-774">小文字に変換した文字列または文字を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-774">Returns a string or character converted to lowercase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-775">小文字に変換した文字列または文字を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-775">Returns a string or character converted to lowercase.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-776">だけに大文字に変換されます 小文字に。すべての小文字とアルファベット以外の文字は変更されません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-776">Only uppercase letters are converted to lowercase; all lowercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="2a0ea-777">この関数は、大文字と小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-777">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2a0ea-778">アプリケーションがセキュリティ上の決定の比較またはケース変更操作の結果に基づくかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-778">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="2a0ea-779">詳細については、次を参照してください。[どのカルチャに影響を与えます Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-779">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-780">この例では、`LCase`関数を文字列の小文字のバージョンを返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-780">This example uses the `LCase` function to return a lowercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="2a0ea-781">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-781">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-782">左端の文字が返される <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-782">
              <see langword="String" /> expression from which the leftmost characters are returned.</span>
          </span>
        </param>
        <param name="Length">
          <span data-ttu-id="2a0ea-783">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-783">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-784">整数型 (<see langword="Integer" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-784">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-785">返す文字の数を示す数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-785">Numeric expression indicating how many characters to return.</span>
          </span>
          <span data-ttu-id="2a0ea-786">0 を指定すると、長さ 0 の文字列 ("") が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-786">If 0, a zero-length string ("") is returned.</span>
          </span>
          <span data-ttu-id="2a0ea-787">
            <c>str</c> 内の文字数以上を指定すると、文字列全体が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-787">If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-788">指定された文字数を含む文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-788">Returns a string containing a specified number of characters from the left side of a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-789">指定された文字数を含む文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-789">Returns a string containing a specified number of characters from the left side of a string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-790">内の文字の数を決定する`str`を使用して、`Len`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-790">To determine the number of characters in `str`, use the `Len` function.</span></span> <span data-ttu-id="2a0ea-791">Windows フォーム アプリケーション、またはその他のクラスを持つで使用する場合、`Left`プロパティ、関数を完全修飾する必要があります`Microsoft.VisualBasic.Left`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-791">If used in a Windows Forms application, or any other class that has a `Left` property, you must fully qualify the function with `Microsoft.VisualBasic.Left`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-792">`LeftB`以前のバージョンの Visual Basic の関数が文字ではなくバイトで文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-792">The `LeftB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="2a0ea-793">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-793">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-794">現在 Visual Basic のすべての文字列が Unicode では、`LeftB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-794">All current Visual Basic strings are in Unicode, and `LeftB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-795">この例の使用、`Left`の部分文字列を返す関数を指定した`String`。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-795">This example demonstrates the use of the `Left` function to return a substring of a given `String`.</span></span> <span data-ttu-id="2a0ea-796">持つクラスで、`Left`プロパティ、可能性がある完全修飾するために必要な`Left`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-796">In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-797">
            <paramref name="Length" /> &lt; 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-797">
              <paramref name="Length" /> &lt; 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a0ea-798">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-798">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-799">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-799">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-800">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-800">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-801">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-801">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-802">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-802">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-803">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-803">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-804">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-804">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-805">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-805">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-806">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-806">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-807">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-807">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-808">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-808">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-809">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-809">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-810">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-810">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-811">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-811">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-812">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-812">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-813">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-813">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-814">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-814">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-815">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-815">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-816">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-816">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-817">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-817">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-818">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-818">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-819">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-819">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-820">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-820">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-821">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-821">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-822">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-822">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-823">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-823">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-824">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-824">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-825">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-825">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-826">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-826">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-827">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-827">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-828">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-828">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-829">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-829">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-830">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-830">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-831">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-831">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-832">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-832">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-833">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-833">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-834">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-834">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-835">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-835">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-836">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-836">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-837">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-837">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-838">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-838">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-839">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-839">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-840">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-840">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-841">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-841">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-842">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-842">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-843">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-843">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-844">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-844">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-845">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-845">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-846">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-846">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-847">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-847">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-848">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-848">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-849">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-849">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-850">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-850">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-851">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-851">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-852">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-852">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-853">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-853">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-854">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-854">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-855">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-855">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-856">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-856">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-857">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-857">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-858">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-858">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-859">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-859">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-860">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-860">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-861">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-861">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-862">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-862">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-863">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-863">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-864">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-864">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-865">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-865">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-866">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-866">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-867">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-867">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-868">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-868">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-869">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-869">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-870">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-870">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-871">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-871">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-872">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-872">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-873">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-873">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-874">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-874">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-875">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-875">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-876">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-876">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-877">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-877">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-878">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-878">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-879">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-879">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-880">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-880">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-881">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-881">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-882">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-882">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-883">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-883">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-884">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-884">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-885">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-885">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-886">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-886">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-887">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-887">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-888">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-888">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-889">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-889">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-890">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-890">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-891">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-891">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-892">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-892">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-893">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-893">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-894">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-894">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-895">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-895">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-896">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-896">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-897">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-897">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-898">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-898">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-899">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-899">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-900">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-900">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-901">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-901">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-902">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-902">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-903">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-903">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-904">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-904">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-905">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-905">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-906">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-906">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-907">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-907">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-908">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-908">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-909">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-909">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-910">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-910">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-911">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-911">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-912">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-912">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-913">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-913">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-914">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-914">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-915">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-915">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-916">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-916">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-917">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-917">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-918">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-918">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-919">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-919">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-920">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-920">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-921">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-921">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-922">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-922">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-923">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-923">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-924">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-924">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-925">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-925">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-926">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-926">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-927">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-927">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-928">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-928">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-929">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-929">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-930">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-930">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-931">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-931">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-932">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-932">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-933">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-933">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-934">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-934">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-935">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-935">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-936">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-936">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-937">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-937">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-938">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-938">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-939">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-939">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-940">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-940">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-941">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-941">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-942">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-942">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-943">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-943">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-944">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-944">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-945">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-945">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-946">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-946">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-947">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-947">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-948">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-948">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-949">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-949">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-950">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-950">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-951">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-951">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-952">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-952">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-953">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-953">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-954">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-954">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-955">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-955">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-956">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-956">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-957">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-957">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-958">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-958">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-959">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-959">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-960">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-960">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-961">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-961">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-962">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-962">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-963">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-963">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-964">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-964">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-965">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-965">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-966">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-966">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-967">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-967">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-968">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-968">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-969">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-969">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-970">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-970">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-971">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-971">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-972">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-972">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-973">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-973">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-974">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-974">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-975">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-975">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-976">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-976">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-977">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-977">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-978">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-978">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-979">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-979">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-980">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-980">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-981">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-981">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-982">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-982">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-983">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-983">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-984">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-984">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-985">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-985">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-986">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-986">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-987">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-987">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-988">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-988">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-989">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-989">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-990">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-990">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-991">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-991">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-992">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-992">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-993">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-993">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-994">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-994">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-995">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-995">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-996">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-996">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-997">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-997">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-998">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-998">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-999">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-999">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-1000">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1000">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-1001">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1001">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-1002">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1002">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-1003">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1003">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-1004">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1004">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-1005">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1005">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-1006">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1006">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1007">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1007">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-1008">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1008">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-1009">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1009">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1010">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1010">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1011">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1011">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1012">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1012">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-1013">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1013">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-1014">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1014">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-1015">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1015">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-1016">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1016">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1017">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1017">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1018">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1018">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-1019">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1019">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-1020">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1020">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-1021">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1021">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-1022">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1022">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-1023">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1023">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-1024">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1024">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-1025">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1025">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1026">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1026">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-1027">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1027">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-1028">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1028">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1029">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1029">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1030">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1030">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1031">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1031">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-1032">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1032">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-1033">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1033">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-1034">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1034">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-1035">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1035">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1036">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1036">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1037">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1037">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-1038">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1038">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-1039">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1039">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-1040">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1040">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-1041">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1041">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-1042">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1042">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-1043">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1043">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-1044">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1044">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1045">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1045">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-1046">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1046">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-1047">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1047">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1048">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1048">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1049">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1049">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1050">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1050">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-1051">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1051">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-1052">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1052">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-1053">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1053">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-1054">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1054">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1055">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1055">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1056">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1056">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-1057">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1057">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-1058">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1058">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-1059">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1059">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-1060">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1060">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-1061">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1061">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-1062">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1062">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-1063">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1063">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1064">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1064">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-1065">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1065">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-1066">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1066">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1067">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1067">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1068">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1068">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1069">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1069">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-1070">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1070">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-1071">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1071">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-1072">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1072">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-1073">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1073">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1074">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1074">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1075">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1075">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-1076">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1076">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-1077">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1077">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-1078">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1078">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-1079">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1079">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-1080">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1080">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-1081">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1081">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-1082">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1082">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1083">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1083">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-1084">任意の有効な <see langword="String" /> 型の式または変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1084">Any valid <see langword="String" /> expression or variable name.</span>
          </span>
          <span data-ttu-id="2a0ea-1085">
            <c>Expression</c> の型が <see langword="Object" /> である場合、<see langword="Len" /> 関数は、その型が <see langword="FilePut" /> 関数によってファイルに書き込まれるときのサイズを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1085">If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1086">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1086">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1087">文字列内の文字数または変数を格納するために必要な公称バイト数を表す整数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1087">Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1088">ユーザー定義型と`Object`、変数、`Len`関数は、によってファイルに書き込まれるときにサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1088">With user-defined types and `Object` variables, the `Len` function returns the size as it will be written to the file by the `FilePut` function.</span></span> <span data-ttu-id="2a0ea-1089">場合、`Object`が含まれています、`String`文字列の長さが返されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1089">If an `Object` contains a `String`, it will return the length of the string.</span></span> <span data-ttu-id="2a0ea-1090">場合、 `Object` 、他の種類を含むによってファイルに書き込まれるときは、オブジェクトのサイズを返します、`FilePut`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1090">If an `Object` contains any other type, it will return the size of the object as it will be written to the file by the `FilePut` function.</span></span>  
  
 <span data-ttu-id="2a0ea-1091">`VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1091">The `VBFixedString` attribute can be applied to string fields in objects to indicate the size of the string, in bytes, when written to disk.</span></span> <span data-ttu-id="2a0ea-1092">`Len`関数は、`VBFixedString`属性は、可能な場合のサイズを決定するときに`Object`変数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1092">The `Len` function uses the `VBFixedString` attribute, if available, when determining the size of `Object` variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1093">`Len`関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を決定できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1093">The `Len` function may not be able to determine the actual number of storage bytes required when used with variable-length strings in user-defined data types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1094">`LenB`以前のバージョンの Visual Basic の関数が文字ではなく文字列内のバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1094">The `LenB` function in earlier versions of Visual Basic returns the number of bytes in a string rather than characters.</span></span> <span data-ttu-id="2a0ea-1095">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1095">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-1096">現在 Visual Basic のすべての文字列が Unicode では、`LenB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1096">All current Visual Basic strings are in Unicode, and `LenB` is no longer supported.</span></span>  
  
## <a name="smart-device-developer-notes"></a><span data-ttu-id="2a0ea-1097">スマート デバイスの開発者向け注意事項</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1097">Smart Device Developer Notes</span></span>  
 <span data-ttu-id="2a0ea-1098">`Len`関数だけを受け入れる`String`と`Object`変数をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1098">The `Len` function accepts only `String` and `Object` variables as parameters.</span></span> <span data-ttu-id="2a0ea-1099">場合、`Object`が含まれています、`String`の長さが返されます、`String`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1099">If an `Object` contains a `String`, it will return the length of the `String`.</span></span> <span data-ttu-id="2a0ea-1100">パラメーターが NULL の場合`Object`参照、関数は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1100">If a parameter is a NULL `Object` reference, the function returns zero.</span></span> <span data-ttu-id="2a0ea-1101">場合、 `Object` 、他の種類を含む、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1101">If an `Object` contains any other type, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1102">`Len` 関数を使って文字列の文字数を返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1102">This example uses `Len` to return the number of characters in a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="2a0ea-1103">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1103">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1104">整数型 (<see langword="String" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1104">
              <see langword="String" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1105">変数の名前を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1105">Name of string variable.</span>
          </span>
        </param>
        <param name="Length">
          <span data-ttu-id="2a0ea-1106">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1106">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1107">整数型 (<see langword="Integer" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1107">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1108">返される文字列の長さを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1108">Length of returned string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1109">指定の文字列が含まれている文字列を左寄せで指定の長さに調整して返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1109">Returns a left-aligned string containing the specified string adjusted to the specified length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1110">指定の文字列が含まれている文字列を左寄せで指定の長さに調整して返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1110">Returns a left-aligned string containing the specified string adjusted to the specified length.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1111">指定した文字列が指定された長さよりも長い場合は、返される文字列は、指定された長さに短縮します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1111">If the specified string is longer than the specified length, the returned string is shortened to the specified length.</span></span> <span data-ttu-id="2a0ea-1112">指定した文字列が指定された長さよりも短い場合は、スペースは、適切な長さを生成するために、返される文字列の右端に追加されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1112">If the specified string is shorter than the specified length, spaces are added to the right end of the returned string to produce the appropriate length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1113">この例の使用、`LSet`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1113">This example demonstrates the use of the `LSet` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="2a0ea-1114">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1114">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1115">任意の有効な <see langword="String" /> 式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1115">Any valid <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1116">指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1116">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1117">指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1117">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1118">`LTrim`、 `RTrim`、および`Trim`関数は、文字列の両端から空白を削除します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1118">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1119">この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1119">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="2a0ea-1120">また、`Trim` 関数を使って両方のタイプの空白を除去しています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1120">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a0ea-1121">指定された文字列からの文字を含む文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1121">Returns a string that contains characters from a specified string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="2a0ea-1122">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1122">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1123">文字が返される <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1123">
              <see langword="String" /> expression from which characters are returned.</span>
          </span>
        </param>
        <param name="Start">
          <span data-ttu-id="2a0ea-1124">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1124">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1125">整数型 (<see langword="Integer" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1125">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1126">返す文字の開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1126">Starting position of the characters to return.</span>
          </span>
          <span data-ttu-id="2a0ea-1127">
            <c>Start</c> の値が <c>str</c> 内の文字数よりも大きい場合、<see langword="Mid" /> 関数は長さ 0 の文字列 ("") を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1127">If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string ("").</span>
          </span>
          <span data-ttu-id="2a0ea-1128">
            <c>Start</c> は 1 から始まります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1128">
              <c>Start</c> is one-based.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1129">文字列の指定の位置から始まるすべての文字を含む文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1129">Returns a string that contains all the characters starting from a specified position in a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1130">文字列の指定の位置から始まるすべての文字を含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1130">A string that consists of all the characters starting from the specified position in the string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1131">内の文字の数を決定する`str`を使用して、`Len`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1131">To determine the number of characters in `str`, use the `Len` function.</span></span>  
  
 <span data-ttu-id="2a0ea-1132">Visual Basic には、`Mid`関数と`Mid`ステートメント。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1132">Visual Basic has a `Mid` function and a `Mid` statement.</span></span> <span data-ttu-id="2a0ea-1133">これらの要素で指定された数、文字列内の文字の両方の動作が、`Mid`関数の中に文字を返します、`Mid`ステートメントには、文字が置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1133">These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters.</span></span> <span data-ttu-id="2a0ea-1134">詳細については、次を参照してください。 [Mid ステートメント](~/docs/visual-basic/language-reference/statements/mid-statement.md)します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1134">For more information, see [Mid Statement](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1135">`MidB`以前のバージョンの Visual Basic の関数が文字ではなくバイトで文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1135">The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="2a0ea-1136">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1136">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-1137">Visual Basic のすべての文字列が Unicode では、`MidB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1137">All Visual Basic strings are in Unicode, and `MidB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1138">この例では、最後の行のこのオーバー ロードを使用して、`Mid`関数を文字列から 5 番目以降の文字を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1138">The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-1139">
            <paramref name="Start" /> &lt;= 0 または <paramref name="Length" /> &lt; 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1139">
              <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="2a0ea-1140">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1140">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1141">文字が返される <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1141">
              <see langword="String" /> expression from which characters are returned.</span>
          </span>
        </param>
        <param name="Start">
          <span data-ttu-id="2a0ea-1142">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1142">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1143">整数型 (<see langword="Integer" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1143">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1144">返す文字の開始位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1144">Starting position of the characters to return.</span>
          </span>
          <span data-ttu-id="2a0ea-1145">
            <c>Start</c> の値が <c>str</c> 内の文字数よりも大きい場合、<see langword="Mid" /> 関数は長さ 0 の文字列 ("") を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1145">If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string ("").</span>
          </span>
          <span data-ttu-id="2a0ea-1146">
            <c>Start</c> は 1 から始まります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1146">
              <c>Start</c> is one based.</span>
          </span>
        </param>
        <param name="Length">
          <span data-ttu-id="2a0ea-1147">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1147">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-1148">整数型 (<see langword="Integer" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1148">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1149">返される文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1149">Number of characters to return.</span>
          </span>
          <span data-ttu-id="2a0ea-1150">省略した場合、またはテキスト内の <c>Length</c> の文字数 (位置 <c>Start</c> の文字を含む) よりも少なかった場合は、開始位置から文字列の末尾までのすべての文字が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1150">If omitted or if there are fewer than <c>Length</c> characters in the text (including the character at position <c>Start</c>), all characters from the start position to the end of the string are returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1151">文字列の指定の位置から始まる指定の数の文字を含む文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1151">Returns a string that contains a specified number of characters starting from a specified position in a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1152">文字列の指定の位置から始まる指定の数の文字を含む文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1152">A string that consists of the specified number of characters starting from the specified position in the string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1153">内の文字の数を決定する`str`を使用して、`Len`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1153">To determine the number of characters in `str`, use the `Len` function.</span></span>  
  
 <span data-ttu-id="2a0ea-1154">Visual Basic には、`Mid`関数と`Mid`ステートメント。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1154">Visual Basic has a `Mid` function and a `Mid` statement.</span></span> <span data-ttu-id="2a0ea-1155">これらの要素で指定された数、文字列内の文字の両方の動作が、`Mid`関数の中に文字を返します、`Mid`ステートメントには、文字が置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1155">These elements both operate on a specified number of characters in a string, but the `Mid` function returns the characters while the `Mid` statement replaces the characters.</span></span> <span data-ttu-id="2a0ea-1156">詳細については、次を参照してください。 [Mid ステートメント](~/docs/visual-basic/language-reference/statements/mid-statement.md)します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1156">For more information, see [Mid Statement](~/docs/visual-basic/language-reference/statements/mid-statement.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1157">`MidB`以前のバージョンの Visual Basic の関数が文字ではなくバイトで文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1157">The `MidB` function in previous versions of Visual Basic returns a string in bytes rather than characters.</span></span> <span data-ttu-id="2a0ea-1158">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1158">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-1159">Visual Basic のすべての文字列が Unicode では、`MidB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1159">All Visual Basic strings are in Unicode, and `MidB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1160">最初の 2 つ`Mid`この例では関数は、指定した位置から始まる、文字列から指定された文字数を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1160">The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions.</span></span> <span data-ttu-id="2a0ea-1161">(最後の関数を示しています、<xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29>オーバー ロードし、のみ文字列抽出の開始位置を指定します)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1161">(The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)</span></span>  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-1162">
            <paramref name="Start" /> &lt;= 0 または <paramref name="Length" /> &lt; 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1162">
              <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-1163">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1163">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1164">置換する部分文字列を含む文字列式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1164">String expression containing substring to replace.</span>
          </span>
        </param>
        <param name="Find">
          <span data-ttu-id="2a0ea-1165">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1165">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1166">検索する部分文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1166">Substring being searched for.</span>
          </span>
        </param>
        <param name="Replacement">
          <span data-ttu-id="2a0ea-1167">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1167">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1168">置換する部分文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1168">Replacement substring.</span>
          </span>
        </param>
        <param name="Start">
          <span data-ttu-id="2a0ea-1169">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1169">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-1170">置換に使用される部分文字列を開始する、<c>Expression</c> 内の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1170">Position within <c>Expression</c> that starts a substring used for replacement.</span>
          </span>
          <span data-ttu-id="2a0ea-1171">
            <see langword="Replace" /> の戻り値は、<c>Start</c> で始まる、適切な置換を行った文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1171">The return value of <see langword="Replace" /> is a string that begins at <c>Start</c>, with appropriate substitutions.</span>
          </span>
          <span data-ttu-id="2a0ea-1172">省略した場合、1 が使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1172">If omitted, 1 is assumed.</span>
          </span>
        </param>
        <param name="Count">
          <span data-ttu-id="2a0ea-1173">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1173">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-1174">置換する部分文字列の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1174">Number of substring substitutions to perform.</span>
          </span>
          <span data-ttu-id="2a0ea-1175">省略した場合は、既定値の –1 が使用され、すべての候補が置換されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1175">If omitted, the default value is –1, which means "make all possible substitutions."</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="2a0ea-1176">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1176">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-1177">部分文字列を評価する場合に使用する比較の種類を示す数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1177">Numeric value indicating the kind of comparison to use when evaluating substrings.</span>
          </span>
          <span data-ttu-id="2a0ea-1178">値については、「設定」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1178">See Settings for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1179">指定された文字列の一部を指定された回数分別の部分文字列で置換した文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1179">Returns a string in which a specified substring has been replaced with another substring a specified number of times.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1180">
            <see langword="Replace" /> 関数の戻り値は次のとおりです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1180">
              <see langword="Replace" /> returns the following values.</span>
          </span>
          <span data-ttu-id="2a0ea-1181">
            <list type="table">
              <item>
                <term> 条件  </term>
                <description> Replace の戻り値  </description>
              </item>
              <item>
                <term>
                  <paramref name="Find" /> の長さが 0、または <see langword="Nothing" /></term>
                <description>
                  <paramref name="Expression" />のコピー</description>
              </item>
              <item>
                <term>
                  <paramref name="Replace" /> の長さが 0  </term>
                <description>
                  <paramref name="Find" /> の出現しない <paramref name="Expression" /> のコピー</description>
              </item>
              <item>
                <term>
                  <paramref name="Expression" /> の長さが 0、または <see langword="Nothing" />、または <paramref name="Start" /> の値が <paramref name="Expression" /> の長さよりも大きいとき</term>
                <description>
                  <see langword="Nothing" />
                </description>
              </item>
              <item>
                <term>
                  <paramref name="Count" /> が 0  </term>
                <description>
                  <paramref name="Expression" />のコピー</description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1181">
              <list type="table">
                <item>
                  <term> If  </term>
                  <description> Replace returns  </description>
                </item>
                <item>
                  <term>
                    <paramref name="Find" /> is zero-length or <see langword="Nothing" /></term>
                  <description> Copy of <paramref name="Expression" /></description>
                </item>
                <item>
                  <term>
                    <paramref name="Replace" /> is zero-length  </term>
                  <description> Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /></description>
                </item>
                <item>
                  <term>
                    <paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /></term>
                  <description>
                    <see langword="Nothing" />
                  </description>
                </item>
                <item>
                  <term>
                    <paramref name="Count" /> is 0  </term>
                  <description> Copy of <paramref name="Expression" /></description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1182">戻り値、`Replace`関数は、文字列の先頭で指定された位置にある`Start`し、最後の最後に、`Expression`で置き換えが行われた文字列の指定に従って、`Find`と`Replace`値。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1182">The return value of the `Replace` function is a string that begins at the position specified by `Start` and concludes at the end of the `Expression` string, with the substitutions made as specified by the `Find` and `Replace` values.</span></span>  
  
 <span data-ttu-id="2a0ea-1183">`Compare`引数は、次の値であることができます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1183">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="2a0ea-1184">定数</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1184">Constant</span></span>|<span data-ttu-id="2a0ea-1185">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1185">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="2a0ea-1186">バイナリ比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1186">Performs a binary comparison</span></span>|  
|`Text`|<span data-ttu-id="2a0ea-1187">テキスト比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1187">Performs a textual comparison</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1188">この例では、`Replace`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1188">This example demonstrates the `Replace` function.</span></span>  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-1189">
            <paramref name="Count" /> &lt; -1 または <paramref name="Start" /> &lt;= 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1189">
              <paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="2a0ea-1190">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1190">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1191">右端の文字が返される <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1191">
              <see langword="String" /> expression from which the rightmost characters are returned.</span>
          </span>
        </param>
        <param name="Length">
          <span data-ttu-id="2a0ea-1192">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1192">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1193">
            <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1193">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="2a0ea-1194">返す文字の数を示す数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1194">Numeric expression indicating how many characters to return.</span>
          </span>
          <span data-ttu-id="2a0ea-1195">0 を指定すると、長さ 0 の文字列 ("") が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1195">If 0, a zero-length string ("") is returned.</span>
          </span>
          <span data-ttu-id="2a0ea-1196">
            <c>str</c> 内の文字数以上を指定すると、文字列全体が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1196">If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1197">文字列の右端から指定された文字数分の文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1197">Returns a string containing a specified number of characters from the right side of a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1198">文字列の右端から指定された文字数分の文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1198">Returns a string containing a specified number of characters from the right side of a string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1199">内の文字の数を決定する`str`を使用して、`Len`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1199">To determine the number of characters in `str`, use the `Len` function.</span></span> <span data-ttu-id="2a0ea-1200">Windows フォーム、またはその他のクラスを持つで使用する場合、`Right`プロパティ、関数を完全修飾する必要があります`Microsoft.VisualBasic.Strings.Right`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1200">If used in a Windows Form, or any other class that has a `Right` property, you must fully qualify the function with `Microsoft.VisualBasic.Strings.Right`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1201">`RightB`以前のバージョンの Visual Basic の関数が文字ではなく、(バイト単位) の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1201">The `RightB` function in earlier versions of Visual Basic returns a string in bytes, rather than characters.</span></span> <span data-ttu-id="2a0ea-1202">2 バイト文字セット (DBCS) のアプリケーションで文字列に変換するためには、主に使用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1202">It is used primarily for converting strings in double-byte character set (DBCS) applications.</span></span> <span data-ttu-id="2a0ea-1203">現在 Visual Basic のすべての文字列が Unicode では、`RightB`現在サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1203">All current Visual Basic strings are in Unicode, and `RightB` is no longer supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1204">この例の使用、`Right`の部分文字列を返す関数を指定した`String`。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1204">This example demonstrates the use of the `Right` function to return a substring of a given `String`.</span></span> <span data-ttu-id="2a0ea-1205">持つクラスで、`Right`プロパティ、可能性がある完全修飾するために必要な`Right`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1205">In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-1206">
            <paramref name="Length" /> &lt; 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1206">
              <paramref name="Length" /> &lt; 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="2a0ea-1207">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1207">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1208">整数型 (<see langword="String" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1208">
              <see langword="String" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1209">変数の名前を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1209">Name of string variable.</span>
          </span>
        </param>
        <param name="Length">
          <span data-ttu-id="2a0ea-1210">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1210">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1211">整数型 (<see langword="Integer" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1211">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1212">返される文字列の長さを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1212">Length of returned string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1213">文字列と長さが指定され、その長さに調整された文字列右揃えにして文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1213">Returns a right-aligned string containing the specified string adjusted to the specified length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1214">文字列と長さが指定され、その長さに調整された文字列右揃えにして文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1214">Returns a right-aligned string containing the specified string adjusted to the specified length.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1215">場合`Source`よりも長い`Length`、`RSet`の長さまで、左端文字のみを配置`Source`、返される文字列にします。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1215">If `Source` is longer than `Length`, `RSet` places only the leftmost characters, up to the length of `Source`, in the returned string.</span></span> <span data-ttu-id="2a0ea-1216">指定した文字列が指定された長さよりも短い場合は、スペースは、適切な長さを生成するために、文字列の左の端に追加されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1216">If the specified string is shorter than the specified length, spaces are added to the left end of the string to produce the appropriate length.</span></span> <span data-ttu-id="2a0ea-1217">指定した文字列が指定された長さよりも長い場合は、指定した長さを短縮します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1217">If the specified string is longer than the specified length, it is shortened to the specified length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1218">この例の使用、`RSet`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1218">This example demonstrates the use of the `RSet` function.</span></span>  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="2a0ea-1219">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1219">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1220">任意の有効な <see langword="String" /> 式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1220">Any valid <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1221">指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1221">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1222">指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1222">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1223">`LTrim`、 `RTrim`、および`Trim`関数は、文字列の両端から空白を削除します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1223">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1224">この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1224">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="2a0ea-1225">また、`Trim` 関数を使って両方のタイプの空白を除去しています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1225">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="2a0ea-1226">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1226">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1227">整数型 (<see langword="Integer" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1227">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1228">文字列に必要な空白の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1228">The number of spaces you want in the string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1229">指定された数のスペースから成る文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1229">Returns a string consisting of the specified number of spaces.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1230">指定された数のスペースから成る文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1230">Returns a string consisting of the specified number of spaces.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1231">`Space`関数は出力を書式設定および固定長文字列内のデータをクリアするのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1231">The `Space` function is useful for formatting output and clearing data in fixed-length strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1232">この例では、`Space`関数を指定した数のスペースで構成される文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1232">This example uses the `Space` function to return a string consisting of a specified number of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-1233">
            <paramref name="Number" /> &lt; 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1233">
              <paramref name="Number" /> &lt; 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-1234">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1234">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1235">部分文字列および区切り記号を含む <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1235">
              <see langword="String" /> expression containing substrings and delimiters.</span>
          </span>
        </param>
        <param name="Delimiter">
          <span data-ttu-id="2a0ea-1236">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1236">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-1237">文字列の区切りを識別するために使用する任意の 1 文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1237">Any single character used to identify substring limits.</span>
          </span>
          <span data-ttu-id="2a0ea-1238">
            <c>Delimiter</c> が省略された場合、空白文字 (" ") が区切り記号として使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1238">If <c>Delimiter</c> is omitted, the space character (" ") is assumed to be the delimiter.</span>
          </span>
        </param>
        <param name="Limit">
          <span data-ttu-id="2a0ea-1239">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1239">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-1240">入力文字列を分割する場合の部分文字列の最大数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1240">Maximum number of substrings into which the input string should be split.</span>
          </span>
          <span data-ttu-id="2a0ea-1241">既定値の –1 は、<c>Delimiter</c> 文字列が出現するたびに入力文字列を分割することを示しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1241">The default, –1, indicates that the input string should be split at every occurrence of the <c>Delimiter</c> string.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="2a0ea-1242">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1242">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-1243">部分文字列を評価する場合に使用する比較を示す数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1243">Numeric value indicating the comparison to use when evaluating substrings.</span>
          </span>
          <span data-ttu-id="2a0ea-1244">値については、「設定」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1244">See "Settings" for values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1245">部分文字列ごとに区切られた文字列からゼロ ベースの 1 次元配列を作成し、返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1245">Returns a zero-based, one-dimensional array containing a specified number of substrings.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1246">
            <see langword="String" /> 配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1246">
              <see langword="String" /> array.</span>
          </span>
          <span data-ttu-id="2a0ea-1247">
            <paramref name="Expression" /> が長さ 0 の文字列 ("") の場合、<see langword="Split" /> は、長さ 0 の文字列を含む単一要素の配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1247">If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string.</span>
          </span>
          <span data-ttu-id="2a0ea-1248">
            <paramref name="Delimiter" /> が長さ 0 の文字列である場合、または <paramref name="Expression" /> に Delimiter がない場合に、<see langword="Split" /> は <paramref name="Expression" /> 型の文字列を含む単一要素の配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1248">If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1249">既定では、または`Limit`-1 に等しい、`Split`関数が出現するすべての区切り記号の文字列で、入力文字列を分割し、配列内の部分文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1249">By default, or when `Limit` equals -1, the `Split` function splits the input string at every occurrence of the delimiter string, and returns the substrings in an array.</span></span> <span data-ttu-id="2a0ea-1250">ときに、`Limit`パラメーターが 0 より大きい、`Split`関数では 1 つ目の文字列を分割`Limit`区切り記号の出現回数を-1、結果として得られる部分文字列の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1250">When the `Limit` parameter is greater than zero, the `Split` function splits the string at the first `Limit`-1 occurrences of the delimiter, and returns an array with the resulting substrings.</span></span> <span data-ttu-id="2a0ea-1251">たとえば、`Split("a:b:c", ":")`配列を返します`{"a", "b", "c"}`、中に`Split("a:b:c", ":", 2)`配列を返します`{"a", "b:c"}`します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1251">For example, `Split("a:b:c", ":")` returns the array `{"a", "b", "c"}`, while `Split("a:b:c", ":", 2)` returns the array `{"a", "b:c"}`.</span></span>  
  
 <span data-ttu-id="2a0ea-1252">ときに、`Split`関数には、行で、2 つの区切り記号または先頭または文字列の末尾に区切り記号が検出すると、空の文字列を囲むとして解釈 ("")。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1252">When the `Split` function encounters two delimiters in a row, or a delimiter at the beginning or end of the string, it interprets them as surrounding an empty string ("").</span></span> <span data-ttu-id="2a0ea-1253">たとえば、 `Split("xx", "x")` 3 つの空の文字列を含む配列を返します: つと文字列"x"、"x"の文字列、2 つの範囲のいずれか 1 つ目の最初と最後の"x"と、文字列の末尾の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1253">For example, `Split("xx", "x")` returns the array containing three empty strings: one from between the beginning of the string and the first "x", one from between the two "x" strings, and one from between the last "x" and the end of the string.</span></span>  
  
 <span data-ttu-id="2a0ea-1254">次の表に示す方法、省略可能な`Delimiter`、 `Limit`、および`Compare`パラメーターの動作を変更することができます、`Split`関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1254">This table demonstrates how the optional `Delimiter`, `Limit`, and `Compare` parameters can change the behavior of the `Split` function.</span></span>  
  
|<span data-ttu-id="2a0ea-1255">呼び出しを分割します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1255">Split Call</span></span>|<span data-ttu-id="2a0ea-1256">戻り値</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1256">Return Value</span></span>|  
|-|-|  
|`Split("42, 12, 19")`|<span data-ttu-id="2a0ea-1257">{"42," , "12," , "19"}</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1257">{"42," , "12," , "19"}</span></span>|  
|`Split("42, 12, 19", ", ")`|<span data-ttu-id="2a0ea-1258">{"42", "12", "19"}</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1258">{"42", "12", "19"}</span></span>|  
|`Split("42, 12, 19", ", ", 2)`|<span data-ttu-id="2a0ea-1259">{"42", "12, 19"}</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1259">{"42", "12, 19"}</span></span>|  
|`Split("192.168.0.1", ".")`|<span data-ttu-id="2a0ea-1260">{"192", "168", "0", "1"}</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1260">{"192", "168", "0", "1"}</span></span>|  
|`Split("Alice and Bob", " AND ")`|<span data-ttu-id="2a0ea-1261">{「Alice と Bob」}</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1261">{"Alice and Bob"}</span></span>|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|<span data-ttu-id="2a0ea-1262">{"Alice"、"Bob"}</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1262">{"Alice", "Bob"}</span></span>|  
|`Split("someone@example.com", "@",1)`|<span data-ttu-id="2a0ea-1263">{"someone@example.com"}</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1263">{"someone@example.com"}</span></span>|  
|`Split("someone@example.com", "@",2)`|<span data-ttu-id="2a0ea-1264">{"someone", "example.com"}</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1264">{"someone", "example.com"}</span></span>|  
  
 <span data-ttu-id="2a0ea-1265">`Compare`引数は、次の値であることができます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1265">The `Compare` argument can have the following values.</span></span>  
  
|<span data-ttu-id="2a0ea-1266">定数</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1266">Constant</span></span>|<span data-ttu-id="2a0ea-1267">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1267">Description</span></span>|<span data-ttu-id="2a0ea-1268">[値]</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1268">Value</span></span>|  
|-|-|-|  
|`CompareMethod.Binary`|<span data-ttu-id="2a0ea-1269">バイナリ比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1269">Performs a binary comparison</span></span>|<span data-ttu-id="2a0ea-1270">0</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1270">0</span></span>|  
|`CompareMethod.Text`|<span data-ttu-id="2a0ea-1271">テキスト比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1271">Performs a textual comparison</span></span>|<span data-ttu-id="2a0ea-1272">1</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1272">1</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1273">次の例では、その空白で文字列を分割する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1273">The following example demonstrates how to split a string at its spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 <span data-ttu-id="2a0ea-1274">次の例では、行の複数の区切り記号の文字列を分割し、空の文字列をフィルター処理する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1274">The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.</span></span>  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">
          <span data-ttu-id="2a0ea-1275">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1275">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1276">任意の有効な <see langword="String" /> 式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1276">Any valid <see langword="String" /> expression.</span>
          </span>
        </param>
        <param name="String2">
          <span data-ttu-id="2a0ea-1277">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1277">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1278">任意の有効な <see langword="String" /> 式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1278">Any valid <see langword="String" /> expression.</span>
          </span>
        </param>
        <param name="Compare">
          <span data-ttu-id="2a0ea-1279">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1279">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-1280">文字列比較の種類を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1280">Specifies the type of string comparison.</span>
          </span>
          <span data-ttu-id="2a0ea-1281">
            <c>Compare</c> が省略されている場合、<see langword="Option Compare" /> 設定により比較の種類を決定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1281">If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1282">文字列比較の結果により、-1、0、または 1 のいずれかを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1282">Returns -1, 0, or 1, based on the result of a string comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1283">
            <see langword="StrComp" /> 関数の戻り値は次のとおりです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1283">The <see langword="StrComp" /> function has the following return values.</span>
          </span>
          <span data-ttu-id="2a0ea-1284">
            <list type="table">
              <item>
                <term> 条件  </term>
                <description> StrComp の戻り値  </description>
              </item>
              <item>
                <term>
                  <paramref name="String1" /> が <paramref name="String2" /> よりも先に来る</term>
                <description> -1  </description>
              </item>
              <item>
                <term>
                  <paramref name="String1" /> と <paramref name="String2" /> が等しい</term>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="String1" /> が <paramref name="String2" /> の後に来る</term>
                <description> 1  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1284">
              <list type="table">
                <item>
                  <term> If  </term>
                  <description> StrComp returns  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String1" /> sorts ahead of <paramref name="String2" /></term>
                  <description> -1  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String1" /> is equal to <paramref name="String2" /></term>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="String1" /> sorts after <paramref name="String2" /></term>
                  <description> 1  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1285">文字列は、最初の文字で始まる英数字の並べ替えの値によって比較されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1285">The strings are compared by alphanumeric sort values beginning with the first character.</span></span> <span data-ttu-id="2a0ea-1286">バイナリの比較、テキストの比較および並べ替え順序の詳細については、次を参照してください。 [Option Compare ステートメント](~/docs/visual-basic/language-reference/statements/option-compare-statement.md)します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1286">For further information on binary comparisons, textual comparisons, and sort order, see [Option Compare Statement](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).</span></span>  
  
 <span data-ttu-id="2a0ea-1287">`Compare` 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1287">The `Compare` argument settings are:</span></span>  
  
|<span data-ttu-id="2a0ea-1288">定数</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1288">Constant</span></span>|<span data-ttu-id="2a0ea-1289">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1289">Description</span></span>|  
|-|-|  
|`Binary`|<span data-ttu-id="2a0ea-1290">文字の内部バイナリ表現から派生した並べ替え順序に基づいて、バイナリ比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1290">Performs a binary comparison, based on a sort order derived from the internal binary representations of the characters.</span></span>|  
|`Text`|<span data-ttu-id="2a0ea-1291">システムのによって決まる、区別しないテキスト並べ替え順序に基づいてテキスト比較を実行`LocaleID`値。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1291">Performs a text comparison, based on a case-insensitive text sort order determined by your system's `LocaleID` value.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1292">この例では、`StrComp`文字列比較の結果を返す関数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1292">This example uses the `StrComp` function to return the results of a string comparison.</span></span>  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-1293">
            <paramref name="Compare" /> の値が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1293">
              <paramref name="Compare" /> value is not valid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="2a0ea-1294">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1294">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1295">変換する <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1295">
              <see langword="String" /> expression to be converted.</span>
          </span>
        </param>
        <param name="Conversion">
          <span data-ttu-id="2a0ea-1296">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1296">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1297">
            <see cref="T:Microsoft.VisualBasic.VbStrConv" /> のメンバー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1297">
              <see cref="T:Microsoft.VisualBasic.VbStrConv" /> member.</span>
          </span>
          <span data-ttu-id="2a0ea-1298">実行する比較の種類を指定する列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1298">The enumeration value specifying the type of conversion to perform.</span>
          </span>
        </param>
        <param name="LocaleID">
          <span data-ttu-id="2a0ea-1299">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1299">Optional.</span>
          </span>
          <span data-ttu-id="2a0ea-1300">システム <see langword="LocaleID" /> 値と異なる場合の <see langword="LocaleID" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1300">The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value.</span>
          </span>
          <span data-ttu-id="2a0ea-1301">既定値は、システムの <see langword="LocaleID" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1301">(The system <see langword="LocaleID" /> value is the default.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1302">指定に従って変換された文字列型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1302">Returns a string converted as specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1303">指定に従って変換された文字列型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1303">Returns a string converted as specified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1304">定数`VbStrConv.Wide`、 `VbStrConv.Narrow`、 `VbStrConv.SimplifiedChinese`、 `VbStrConv.TraditionalChinese`、`VbStrConv.Katakana`と`VbStrConv.Hiragana`場所は適用されません、ロケールで使用すると、実行時エラーが発生することができますが、常にではありません: 定数`VbStrConv.Katakana`と`VbStrConv.Hiragana`日本語言語パックがインストールされて、日本語以外のシステムで使用できます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1304">The constants `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, and `VbStrConv.Hiragana` can cause run-time errors when used in locales where they do not apply, but not always: the constants `VbStrConv.Katakana` and `VbStrConv.Hiragana` can be used in a non-Japanese system with the Japanese Language Pack installed.</span></span> <span data-ttu-id="2a0ea-1305">さらに、定数の使用`VbStrConv.Wide`と`VbStrConv.Narrow`東アジア言語がインストールされている任意のシステムでサポートされます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1305">In addition, use of the constants `VbStrConv.Wide` and `VbStrConv.Narrow` is supported on any system with an East Asian language installed.</span></span>  
  
 <span data-ttu-id="2a0ea-1306">この関数は、大文字と小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1306">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2a0ea-1307">アプリケーションがセキュリティ上の決定の比較またはケース変更操作の結果に基づくかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1307">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="2a0ea-1308">詳細については、次を参照してください。[どのカルチャに影響を与えます Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1308">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
 <span data-ttu-id="2a0ea-1309">`Conversion` 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1309">The `Conversion` argument settings are:</span></span>  
  
|<span data-ttu-id="2a0ea-1310">列挙型のメンバー</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1310">Enumeration member</span></span>|<span data-ttu-id="2a0ea-1311">説明</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1311">Description</span></span>|  
|-|-|  
|`VbStrConv.None`|<span data-ttu-id="2a0ea-1312">変換は行われません</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1312">Performs no conversion</span></span>|  
|`VbStrConv.LinguisticCasing`|<span data-ttu-id="2a0ea-1313">ファイル システム (既定値) ではなく、大文字と小文字、言語の規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1313">Uses linguistic rules for casing, rather than File System (default).</span></span> <span data-ttu-id="2a0ea-1314">有効な`VbStrConv.UpperCase`と`VbStrConv.LowerCase`のみです。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1314">Valid with `VbStrConv.UpperCase` and `VbStrConv.LowerCase` only.</span></span>|  
|`VbStrConv.UpperCase`|<span data-ttu-id="2a0ea-1315">文字列を大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1315">Converts the string to uppercase characters.</span></span>|  
|`VbStrConv.LowerCase`|<span data-ttu-id="2a0ea-1316">文字列を小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1316">Converts the string to lowercase characters.</span></span>|  
|`VbStrConv.ProperCase`|<span data-ttu-id="2a0ea-1317">文字列を大文字に内の各単語の最初の文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1317">Converts the first letter of every word in string to uppercase.</span></span>|  
|<span data-ttu-id="2a0ea-1318">`VbStrConv.Wide` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="2a0ea-1318">`VbStrConv.Wide` <sup>\*</sup></span></span>|<span data-ttu-id="2a0ea-1319">変換は、広い (全角) 文字を文字列に (半角) 文字を絞り込みます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1319">Converts narrow (half-width) characters in the string to wide (full-width) characters.</span></span> [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|<span data-ttu-id="2a0ea-1320">`VbStrConv.Narrow` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="2a0ea-1320">`VbStrConv.Narrow` <sup>\*</sup></span></span>|<span data-ttu-id="2a0ea-1321">(半角) 文字を文字列に広い (全角) 文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1321">Converts wide (full-width) characters in the string to narrow (half-width) characters.</span></span>|  
|<span data-ttu-id="2a0ea-1322">`VbStrConv.Katakana` <sup>**</sup></span><span class="sxs-lookup"><span data-stu-id="2a0ea-1322">`VbStrConv.Katakana` <sup>**</sup></span></span>|<span data-ttu-id="2a0ea-1323">文字列内のひらがな文字をカタカナ文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1323">Converts Hiragana characters in the string to Katakana characters.</span></span>|  
|<span data-ttu-id="2a0ea-1324">`VbStrConv.Hiragana` <sup>**</sup></span><span class="sxs-lookup"><span data-stu-id="2a0ea-1324">`VbStrConv.Hiragana` <sup>**</sup></span></span>|<span data-ttu-id="2a0ea-1325">文字列内のカタカナ文字をひらがな文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1325">Converts Katakana characters in the string to Hiragana characters.</span></span>|  
|<span data-ttu-id="2a0ea-1326">`VbStrConv.SimplifiedChinese` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="2a0ea-1326">`VbStrConv.SimplifiedChinese` <sup>\*</sup></span></span>|<span data-ttu-id="2a0ea-1327">繁体字中国語の文字を簡体字中国語に変換します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1327">Converts Traditional Chinese characters to Simplified Chinese.</span></span>|  
|<span data-ttu-id="2a0ea-1328">`VbStrConv.TraditionalChinese` <sup>\*</sup></span><span class="sxs-lookup"><span data-stu-id="2a0ea-1328">`VbStrConv.TraditionalChinese` <sup>\*</sup></span></span>|<span data-ttu-id="2a0ea-1329">簡体字中国語の文字を繁体字中国語に変換します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1329">Converts Simplified Chinese characters to Traditional Chinese.</span></span>|  
  
 <span data-ttu-id="2a0ea-1330"><sup>\*</sup> アジアのロケールに適用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1330"><sup>\*</sup> Applies to Asian locales.</span></span>  
  
 <span data-ttu-id="2a0ea-1331"><sup>**</sup> 日本にのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1331"><sup>**</sup> Applies to Japan only.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2a0ea-1332">これらの定数は、.NET Framework 共通言語ランタイムで指定されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1332">These constants are specified in the .NET Framework common language runtime.</span></span> <span data-ttu-id="2a0ea-1333">その結果が使用できます任意の場所で実際の値の代わりに、コード。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1333">As a result, they can be used anywhere in your code in place of the actual values.</span></span> <span data-ttu-id="2a0ea-1334">ほとんどを組み合わせることができます (たとえば、 `UpperCase + Wide`)、相互に排他的な場合以外 (たとえば、 `VbStrConv.Wide + VbStrConv.Narrow`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1334">Most can be combined (for example, `UpperCase + Wide`), except when they are mutually exclusive (for example, `VbStrConv.Wide + VbStrConv.Narrow`).</span></span>  
  
 <span data-ttu-id="2a0ea-1335">次に適切な大文字と小文字の有効な単語の区切り文字: Null (`Chr$(0)`)、水平タブ (`Chr$(9)`)、ライン フィード (`Chr$(10)`)、垂直タブ (`Chr$(11)`)、フォーム フィード (`Chr$(12)`)、キャリッジ リターン (`Chr$(13)`)、(のスペース1 バイト文字セット) (`Chr$(32)`)。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1335">The following are valid word separators for proper casing: Null (`Chr$(0)`), horizontal tab (`Chr$(9)`), line feed (`Chr$(10)`), vertical tab (`Chr$(11)`), form feed (`Chr$(12)`), carriage return (`Chr$(13)`), space (single-byte character set) (`Chr$(32)`).</span></span> <span data-ttu-id="2a0ea-1336">完全または幅の半分ができる、スペースの実際の値は、国/地域の東アジア言語のカルチャによって異なります。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1336">The actual value for a space, which can be full or half width, varies by country/region for East Asian cultures.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1337">この例は、テキストをすべて小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1337">This example converts text into all lowercase letters.</span></span>  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-1338">
            <paramref name="LocaleID" /> の値がサポートされていない、<paramref name="Conversion" /> が &lt; 0 または &gt; 2048、あるいは変換の方法が指定されたロケールでサポートされていない。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1338">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a0ea-1339">指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1339">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="2a0ea-1340">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1340">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1341">整数型 (<see langword="Integer" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1341">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1342">取得する文字列の長さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1342">The length to the string to be returned.</span>
          </span>
        </param>
        <param name="Character">
          <span data-ttu-id="2a0ea-1343">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1343">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1344">有効な <see langword="Char" /> 型、<see langword="String" /> 型、または <see langword="Object" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1344">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1345">式の最初の文字だけが使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1345">Only the first character of the expression will be used.</span>
          </span>
          <span data-ttu-id="2a0ea-1346">文字の型が <see langword="Object" /> である場合は、<see langword="Char" /> 値または <see langword="String" /> 値を含む必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1346">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1347">指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1347">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1348">指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1348">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1349">この関数を返します、`String`繰り返しの文字で構成されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1349">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="2a0ea-1350">文字列を構成する文字が最初の文字、`Character`引数とそれが重複している`Number`回数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1350">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1351">この例では、`StrDup`の文字列を返す関数には、文字が重複しています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1351">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-1352">
            <paramref name="Number" /> が 0 以下の数字、または <paramref name="Character" /> の型が無効。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1352">
              <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2a0ea-1353">
            <paramref name="Character" /> は <see langword="Nothing" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1353">
              <paramref name="Character" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="2a0ea-1354">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1354">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1355">整数型 (<see langword="Integer" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1355">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1356">取得する文字列の長さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1356">The length to the string to be returned.</span>
          </span>
        </param>
        <param name="Character">
          <span data-ttu-id="2a0ea-1357">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1357">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1358">有効な <see langword="Char" /> 型、<see langword="String" /> 型、または <see langword="Object" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1358">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1359">式の最初の文字だけが使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1359">Only the first character of the expression will be used.</span>
          </span>
          <span data-ttu-id="2a0ea-1360">文字の型が <see langword="Object" /> である場合は、<see langword="Char" /> 値または <see langword="String" /> 値を含む必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1360">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1361">指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1361">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1362">指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1362">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1363">この関数を返します、`String`繰り返しの文字で構成されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1363">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="2a0ea-1364">文字列を構成する文字が最初の文字、`Character`引数とそれが重複している`Number`回数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1364">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1365">この例では、`StrDup`の文字列を返す関数には、文字が重複しています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1365">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-1366">
            <paramref name="Number" /> が 0 以下の数字、または <paramref name="Character" /> の型が無効。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1366">
              <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2a0ea-1367">
            <paramref name="Character" /> は <see langword="Nothing" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1367">
              <paramref name="Character" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="2a0ea-1368">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1368">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1369">整数型 (<see langword="Integer" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1369">
              <see langword="Integer" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1370">取得する文字列の長さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1370">The length to the string to be returned.</span>
          </span>
        </param>
        <param name="Character">
          <span data-ttu-id="2a0ea-1371">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1371">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1372">有効な <see langword="Char" /> 型、<see langword="String" /> 型、または <see langword="Object" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1372">Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression.</span>
          </span>
          <span data-ttu-id="2a0ea-1373">式の最初の文字だけが使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1373">Only the first character of the expression will be used.</span>
          </span>
          <span data-ttu-id="2a0ea-1374">文字の型が <see langword="Object" /> である場合は、<see langword="Char" /> 値または <see langword="String" /> 値を含む必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1374">If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1375">指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1375">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1376">指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1376">Returns a string or object consisting of the specified character repeated the specified number of times.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1377">この関数を返します、`String`繰り返しの文字で構成されます。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1377">This function returns a `String` made up of repeated characters.</span></span> <span data-ttu-id="2a0ea-1378">文字列を構成する文字が最初の文字、`Character`引数とそれが重複している`Number`回数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1378">The character that makes up the string is the first character in the `Character` argument, and it is duplicated `Number` number of times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1379">この例では、`StrDup`の文字列を返す関数には、文字が重複しています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1379">This example uses the `StrDup` function to return a string of duplicated characters.</span></span>  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2a0ea-1380">
            <paramref name="Number" /> が 0 以下の数字、または <paramref name="Character" /> の型が無効。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1380">
              <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2a0ea-1381">
            <paramref name="Character" /> は <see langword="Nothing" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1381">
              <paramref name="Character" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="2a0ea-1382">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1382">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1383">文字の順序を逆にする文字列式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1383">String expression whose characters are to be reversed.</span>
          </span>
          <span data-ttu-id="2a0ea-1384">
            <c>Expression</c> が長さ 0 の文字列 ("") である場合、長さ 0 の文字列が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1384">If <c>Expression</c> is a zero-length string (""), a zero-length string is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1385">指定された文字列の文字の並び順を逆にした文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1385">Returns a string in which the character order of a specified string is reversed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1386">指定された文字列の文字の並び順を逆にした文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1386">Returns a string in which the character order of a specified string is reversed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1387">`StrReverse`関数と同じ文字を含む文字列を返します`Expression`、逆の順序で。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1387">The `StrReverse` function returns a string that contains the same characters as `Expression`, but in the opposite order.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="2a0ea-1388">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1388">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1389">任意の有効な <see langword="String" /> 式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1389">Any valid <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1390">指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1390">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1391">指定された文字列から、先頭の空白を除いたコピー (<see langword="LTrim" />)、後続の空白を除いたコピー (<see langword="RTrim" />)、または先頭と後続の空白を除いたコピー (<see langword="Trim" />) を格納する文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1391">Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1392">`LTrim`、 `RTrim`、および`Trim`関数は、文字列の両端から空白を削除します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1392">The `LTrim`, `RTrim`, and `Trim` functions remove spaces from the ends of strings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1393">この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1393">This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable.</span></span> <span data-ttu-id="2a0ea-1394">また、`Trim` 関数を使って両方のタイプの空白を除去しています。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1394">It uses the `Trim` function to strip both types of spaces.</span></span>  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2a0ea-1395">指定された文字列を大文字に変換して文字列型または char 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1395">Returns a string or character containing the specified string converted to uppercase.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">
          <span data-ttu-id="2a0ea-1396">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1396">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1397">任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1397">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1398">指定された文字列を大文字に変換して文字列型または char 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1398">Returns a string or character containing the specified string converted to uppercase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1399">指定された文字列を大文字に変換して文字列型または char 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1399">Returns a string or character containing the specified string converted to uppercase.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1400">小文字のみが変換を大文字にすべての大文字とアルファベット以外の文字は変更されません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1400">Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="2a0ea-1401">この関数は、大文字と小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1401">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2a0ea-1402">アプリケーションがセキュリティ上の決定の比較またはケース変更操作の結果に基づくかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1402">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="2a0ea-1403">詳細については、次を参照してください。[どのカルチャに影響を与えます Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1403">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1404">`UCase` 関数を使って文字列を大文字に変換して返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1404">This example uses the `UCase` function to return an uppercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">
          <span data-ttu-id="2a0ea-1405">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1405">Required.</span>
          </span>
          <span data-ttu-id="2a0ea-1406">任意の有効な <see langword="String" /> 型または <see langword="Char" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1406">Any valid <see langword="String" /> or <see langword="Char" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2a0ea-1407">指定された文字列を大文字に変換して文字列型または char 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1407">Returns a string or character containing the specified string converted to uppercase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2a0ea-1408">指定された文字列を大文字に変換して文字列型または char 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2a0ea-1408">Returns a string or character containing the specified string converted to uppercase.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a0ea-1409">小文字のみが変換を大文字にすべての大文字とアルファベット以外の文字は変更されません。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1409">Only lowercase letters are converted to uppercase; all uppercase letters and nonletter characters remain unchanged.</span></span>  
  
 <span data-ttu-id="2a0ea-1410">この関数は、大文字と小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1410">This function uses the application's culture information when manipulating the string so that the case changes are appropriate for the locale in which the application is being used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2a0ea-1411">アプリケーションがセキュリティ上の決定の比較またはケース変更操作の結果に基づくかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッド、およびパス<xref:System.StringComparison.Ordinal>または<xref:System.StringComparison.OrdinalIgnoreCase>の`comparisonType`引数。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1411">If your application makes security decisions based on the result of a comparison or case-change operation, then the operation should use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method, and pass <xref:System.StringComparison.Ordinal> or <xref:System.StringComparison.OrdinalIgnoreCase> for the `comparisonType` argument.</span></span> <span data-ttu-id="2a0ea-1412">詳細については、次を参照してください。[どのカルチャに影響を与えます Visual Basic における文字列](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1412">For more information, see [How Culture Affects Strings in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2a0ea-1413">`UCase` 関数を使って文字列を大文字に変換して返す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="2a0ea-1413">This example uses the `UCase` function to return an uppercase version of a string.</span></span>  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
  </Members>
</Type>