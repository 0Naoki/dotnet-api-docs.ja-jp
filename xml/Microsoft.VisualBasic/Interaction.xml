<Type Name="Interaction" FullName="Microsoft.VisualBasic.Interaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b76b98d6bec15f3c7a8f9c291b52f8ebf60b2745" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48597419" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Interaction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Interaction extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Interaction" />
  <TypeSignature Language="VB.NET" Value="Public Module Interaction" />
  <TypeSignature Language="C++ CLI" Value="public ref class Interaction sealed" />
  <TypeSignature Language="F#" Value="type Interaction = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Interaction" /> モジュールに含まれるプロシージャを使って、オブジェクト、アプリケーション、システムと対話します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このモジュールは、Visual Basic 言語のキーワードと他のプログラムを実行、メソッドまたはプロパティの呼び出し、コンピューターのビープ音、コマンドライン文字列の提供、COM オブジェクトの操作およびダイアログ ボックスの制御をランタイム ライブラリ メンバーをサポートします。  
  
   
  
## Examples  
 次の例では、`Shell`ユーザーによって指定されたアプリケーションを実行する関数。 指定する<xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType>引数として 2 番目の標準サイズで、アプリケーションを開き、フォーカスが与えられます。  
  
```vb  
Dim procID As Integer  
' Run calculator.  
procID = Shell("C:\Windows\system32\calc.exe", AppWinStyle.NormalFocus)  
' The preceding path is for Windows XP.  
' The Windows 2000 path is C:\WINNT\system32\calc.exe.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">情報と対話の概要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">キーワード (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic ランタイム ライブラリ メンバー</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="AppActivate">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>既に実行中のアプリケーションをアクティブにします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (int ProcessId);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(int32 ProcessId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (ProcessId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(int ProcessId);" />
      <MemberSignature Language="F#" Value="static member AppActivate : int -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate ProcessId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProcessId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ProcessId">このプロセスに割り当てられた Win32 プロセス ID 番号を指定する <see langword="Integer" />。 <see cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" /> によって返される ID がゼロでなければ、その ID を使用できます。</param>
        <summary>既に実行中のアプリケーションをアクティブにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する`AppActivate`に焦点を当てるアプリケーションのアクティブなウィンドウを表示します。 ハンドルまたはアクティブなウィンドウへの参照があるしなかったり、特定の時点で、どのウィンドウがアクティブに気付いて可能性があります。 このような場合は、使用することはできません、<xref:System.Windows.Forms.Control.Focus%2A>メソッド。  
  
 `AppActivate`関数の名前付きアプリケーションまたはウィンドウにフォーカスしますが、最大化または最小化するかどうかには影響しません。 ユーザーがいくつかの操作にフォーカスを変更したり、ウィンドウを閉じるときにアクティブ化されたアプリケーション ウィンドウからフォーカスが移動します。 使用することができます、`Shell`アプリケーションを起動し、ウィンドウ スタイルを設定する関数。  
  
 使用する場合、`Title`パラメーター、`AppActivate`大文字と小文字を使用しますが、それ以外の場合、タイトル バーの内容を完全に一致する必要があります。 まず、最上位レベルの windows を使用し、子ウィンドウを検索します。 スローの一致が見つからない場合、<xref:System.ArgumentException>します。  
  
 使用することができます`AppActivate`windows を所有するプロセスでのみです。 ほとんどのコンソール アプリケーションでは、プロセスの一覧にないことを意味している windows を所有していない`AppActivate`検索します。 コンソール アプリケーションから実行すると、システムは、アプリケーションを実行する別のプロセスを作成し、出力コンソール プロセスを返します。 その結果、現在のプロセス ID を要求するときに取得するコンソール アプリケーションのプロセス ID ではなく、このプロセスのプロセス ID  
  
 実行時に、`AppActivate`関数のタイトルが一致する任意の実行中のアプリケーションをアクティブに`Title`と一致するプロセス id または`ProcessId`します。 タイトルの文字列で終わるすべてのアプリケーションがアクティブ化と完全に一致がない場合は、`Title`します。 という名前の 1 つ以上のアプリケーションがあるかどうかは`Title`、`AppActivate`関数が任意にアクティブ化するいずれかを選択します。  
  
> [!NOTE]
>  `AppActivate`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>レベルで、部分的に信頼された状況では、その実行に影響を与える可能性があります。 詳細については、「<xref:System.Security.Permissions.UIPermission>」を参照してください。  
  
   
  
## Examples  
 この例でのさまざまな使用、`AppActivate`アプリケーション ウィンドウをアクティブ化する関数。 例がスローされます、メモ帳プロセスが実行されていない場合、<xref:System.ArgumentException>します。 `Shell`プロシージャでは、アプリケーションは、指定されたパスに前提としています。  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (string Title);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(string Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (Title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(System::String ^ Title);" />
      <MemberSignature Language="F#" Value="static member AppActivate : string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate Title" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Title">アクティブにするアプリケーションのタイトル バーに表示されているタイトルを指定する <see langword="String" /> 式。 起動時にアプリケーションに割り当てられたタイトルを使用できます。</param>
        <summary>既に実行中のアプリケーションをアクティブにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する`AppActivate`に焦点を当てるアプリケーションのアクティブなウィンドウを表示します。 ハンドルまたはアクティブなウィンドウへの参照があるしなかったり、特定の時点で、どのウィンドウがアクティブに気付いて可能性があります。 このような場合は、使用することはできません、<xref:System.Windows.Forms.Control.Focus%2A>メソッド。  
  
 `AppActivate`関数の名前付きアプリケーションまたはウィンドウにフォーカスしますが、最大化または最小化するかどうかには影響しません。 ユーザーがいくつかの操作にフォーカスを変更したり、ウィンドウを閉じるときにアクティブ化されたアプリケーション ウィンドウからフォーカスが移動します。 使用することができます、`Shell`アプリケーションを起動し、ウィンドウ スタイルを設定する関数。  
  
 使用する場合、`Title`パラメーター、`AppActivate`大文字と小文字を使用しますが、それ以外の場合、タイトル バーの内容を完全に一致する必要があります。 まず、最上位レベルの windows を使用し、子ウィンドウを検索します。 スローの一致が見つからない場合、<xref:System.ArgumentException>します。  
  
 使用することができます`AppActivate`windows を所有するプロセスでのみです。 ほとんどのコンソール アプリケーションでは、プロセスの一覧にないことを意味している windows を所有していない`AppActivate`検索します。 コンソール アプリケーションから実行すると、システムは、アプリケーションを実行する別のプロセスを作成し、出力コンソール プロセスを返します。 その結果、現在のプロセス ID を要求するときに取得するコンソール アプリケーションのプロセス ID ではなく、このプロセスのプロセス ID  
  
 実行時に、`AppActivate`関数のタイトルが一致する任意の実行中のアプリケーションをアクティブに`Title`と一致するプロセス id または`ProcessId`します。 タイトルの文字列で終わるすべてのアプリケーションがアクティブ化と完全に一致がない場合は、`Title`します。 という名前の 1 つ以上のアプリケーションがあるかどうかは`Title`、`AppActivate`関数が任意にアクティブ化するいずれかを選択します。  
  
> [!NOTE]
>  `AppActivate`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>レベルで、部分的に信頼された状況では、その実行に影響を与える可能性があります。 詳細については、「<xref:System.Security.Permissions.UIPermission>」を参照してください。  
  
   
  
## Examples  
 この例でのさまざまな使用、`AppActivate`アプリケーション ウィンドウをアクティブ化する関数。 例がスローされます、メモ帳プロセスが実行されていない場合、<xref:System.ArgumentException>します。 `Shell`プロシージャでは、アプリケーションは、指定されたパスに前提としています。  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberSignature Language="F#" Value="static member Beep : unit -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.Beep " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コンピューターのスピーカーを鳴らします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ピッチおよびビープ音の期間は、ハードウェアおよびシステム ソフトウェアに依存し、そのため、コンピューターによって異なります。  
  
> [!NOTE]
>  `Beep`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>レベルで、部分的に信頼された状況では、その実行に影響を与える可能性があります。 詳細については、「<xref:System.Security.Permissions.UIPermission>」を参照してください。  
  
   
  
## Examples  
 この例では、`Beep`を通じてコンピューターのスピーカーの音を鳴らす関数。  
  
 [!code-vb[VbVbalrCatRef#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic ランタイム ライブラリ メンバー</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/playing-sounds.md">サウンドの再生</related>
      </Docs>
    </Member>
    <Member MemberName="CallByName">
      <MemberSignature Language="C#" Value="public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, params object[] Args);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CallByName(object ObjectRef, string ProcName, valuetype Microsoft.VisualBasic.CallType UseCallType, object[] Args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CallByName (ObjectRef As Object, ProcName As String, UseCallType As CallType, ParamArray Args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CallByName(System::Object ^ ObjectRef, System::String ^ ProcName, Microsoft::VisualBasic::CallType UseCallType, ... cli::array &lt;System::Object ^&gt; ^ Args);" />
      <MemberSignature Language="F#" Value="static member CallByName : obj * string * Microsoft.VisualBasic.CallType * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CallByName (ObjectRef, ProcName, UseCallType, Args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ObjectRef" Type="System.Object" />
        <Parameter Name="ProcName" Type="System.String" />
        <Parameter Name="UseCallType" Type="Microsoft.VisualBasic.CallType" />
        <Parameter Name="Args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ObjectRef">必須。 <see langword="Object" />。 プロパティまたはメソッドを公開しているオブジェクトへのポインターです。</param>
        <param name="ProcName">必須。 <see langword="String" />。 オブジェクトのプロパティまたはメソッドの名前を含む文字列式です。</param>
        <param name="UseCallType">必須。 呼び出されるプロシージャの型を表す、<see cref="T:Microsoft.VisualBasic.CallType" /> 型の列挙体のメンバーです。 <see langword="CallType" /> の値は、<see langword="Method" />、<see langword="Get" />、<see langword="Set" /> のいずれかになります。</param>
        <param name="Args">任意。 <see langword="ParamArray" />。 呼び出されるプロパティまたはメソッドに渡される引数を格納するパラメーター配列です。</param>
        <summary>オブジェクトに対してメソッドを実行するか、オブジェクトのプロパティを設定または取得します。</summary>
        <returns>オブジェクトに対してメソッドを実行するか、オブジェクトのプロパティを設定または取得します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CallByName`にプロパティを取得するプロパティを設定し、メソッドの実行時に関数を使用します。  
  
   
  
## Examples  
 次の例では、最初の行を使用して`CallByName`を設定する、`Text`テキスト ボックスのプロパティの値を取得する 2 番目の行、`Text`プロパティ、および 3 番目の行を呼び出す、`Move`テキスト ボックスを移動するメソッド。  
  
 [!code-vb[VbVbalrFunctions#99](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#99)]  
  
 [!code-vb[VbVbalrFunctions#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#20)]  
  
 次の例では、`CallByName`関数を呼び出す、`Add`と`Item`コレクション オブジェクトのメソッド。  
  
 [!code-vb[VbVbalrFunctions#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="UseCallType" /> の値が無効です。<see langword="Method" />、<see langword="Get" />、または <see langword="Set" /> のいずれかを指定してください。</exception>
        <altmember cref="T:Microsoft.VisualBasic.CallType" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/parameter-arrays.md">パラメーター配列</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/calling-a-property-or-method-using-a-string-name.md">文字列名によるプロパティまたはメソッドの呼び出し</related>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public static object Choose (double Index, params object[] Choice);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Choose(float64 Index, object[] Choice) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Index As Double, ParamArray Choice As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Choose(double Index, ... cli::array &lt;System::Object ^&gt; ^ Choice);" />
      <MemberSignature Language="F#" Value="static member Choose : double * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Choose (Index, Choice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Double" />
        <Parameter Name="Choice" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Index">必須。 <see langword="Double" />。 1 から <c>Choice</c> 引数で渡された要素の数までの範囲の値を返す数式です。</param>
        <param name="Choice">必須。 <see langword="Object" /> パラメーター配列。 <see langword="Object" /> データ型、<see langword="Object" /> 変数または式のコンマ区切りの一覧、あるいは <see langword="Object" /> 要素の 1 次元配列として評価される、単一の変数または式を指定できます。</param>
        <summary>引数のリストから値を選択し、返します。</summary>
        <returns>引数のリストから値を選択し、返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Choose`関数に渡される一覧のメンバーを返します`Choice()`の値に基づいて、`Index`します。 一覧の最初のメンバーが選択されているときに`Index`は 1 です。 一覧の最後のメンバーが選択されているときに`Index`は`UBound`(`Choice()`)。 場合`Index`が、これらの制限の範囲外です`Choose`返します`Nothing`します。  
  
 場合`Index`整数を指定のない評価される前に、最も近い整数に丸められます。  
  
 使用することができます`Choose`候補のリスト内の値を検索します。  
  
> [!NOTE]
>  引数リスト内の式は、関数呼び出しを含めることができます。 呼び出しの引数リストを準備の一環として`Choose`、Visual Basic コンパイラがすべての式ですべての関数を呼び出します。 これでさまざまな式が選択されている場合は、呼び出されていない特定の関数に依存できないことを意味`Index`します。  
  
   
  
## Examples  
 この例では、`Choose`関数内のプロシージャに渡されたインデックスへの応答に名前を表示する、`Ind`パラメーター。  
  
 [!code-vb[VbVbalrFunctions#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case ステートメント (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public static string Command ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Command() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Command" />
      <MemberSignature Language="VB.NET" Value="Public Function Command () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Command();" />
      <MemberSignature Language="F#" Value="static member Command : unit -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Command " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Visual Basic を起動するために使用されるコマンド ライン、または Visual Basic を使って開発した実行可能プログラムの引数の部分を返します。 <see langword="My" /> 機能は、<see langword="Command" /> 関数よりも高い生産性とパフォーマンスを実現します。 詳細については、「<see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />」を参照してください。</summary>
        <returns>Visual Basic を起動するために使用されるコマンド ライン、または Visual Basic を使って開発した実行可能プログラムの引数の部分を返します。  
  
<see langword="My" /> 機能は、<see langword="Command" /> 関数よりも高い生産性とパフォーマンスを実現します。 詳細については、「<see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />」を参照してください。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引数が返された後は、スペース、前方または後方のスラッシュ、ハイフン、または引用符を分割または個別のパラメーターの文字列を検索するなどの一般的な区切り記号を検索することができます。  
  
 Visual Basic を使用して開発および .exe ファイルにコンパイルされたアプリケーションの`Command`関数は、このフォームでのコマンド ラインで、アプリケーションの名前の後に表示される任意の引数を返します:`MyApp(cmdlineargs)`します。  
  
   
  
## Examples  
 この例では、`Command`配列を格納しているオブジェクトのコマンドライン引数を返す関数。  
  
 [!code-vb[VbVbalrCatRef#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Environment.GetCommandLineArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic ランタイム ライブラリ メンバー</related>
        <related type="Article" href="~/docs/visual-basic/reference/command-line-compiler/index.md">Visual Basic のコマンド ライン コンパイラ</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/program-structure/structure-of-a-visual-basic-program.md">Visual Basic プログラムの構造</related>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public static object CreateObject (string ProgId, string ServerName = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CreateObject(string ProgId, string ServerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (ProgId As String, Optional ServerName As String = &quot;&quot;) As Object" />
      <MemberSignature Language="F#" Value="static member CreateObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CreateObject (ProgId, ServerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="ServerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ProgId">必須。 <see langword="String" />。 作成するオブジェクトのプログラム ID。</param>
        <param name="ServerName">任意。 <see langword="String" />。 オブジェクトが作成されるネットワーク サーバーの名前。 <c>ServerName</c> が空の文字列 ("") の場合、ローカル コンピューターが使用されます。</param>
        <summary>COM オブジェクトへの参照を作成して返します。 Visual Basic では、クラスが COM コンポーネントとして明示的に公開されない限り、<see langword="CreateObject" /> を使用してそのクラスのインスタンスを作成することはできません。</summary>
        <returns>COM オブジェクトへの参照を作成して返します。 Visual Basic では、クラスが COM コンポーネントとして明示的に公開されない限り、<see langword="CreateObject" /> を使用してそのクラスのインスタンスを作成することはできません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 COM コンポーネントのインスタンスを作成するには、によって返されるオブジェクトを割り当てる`CreateObject`オブジェクト変数に格納します。  
  
```vb  
Sub CreateADODB()  
   Dim adoApp As Object  
   adoApp = CreateObject("ADODB.Connection")  
End Sub  
```  
  
 使用して、返されたオブジェクトを格納するオブジェクト変数の型、アプリケーションのパフォーマンスに影響を与えることができます。 オブジェクト変数を宣言する、`As Object`句がどの型のオブジェクトへの参照を含むことのできる変数を作成します。 ただし、その変数を使用してオブジェクトへのアクセスは*遅延バインディング*プログラムの実行時に、バインディングが発生します。 アプリケーションのパフォーマンスの低下など、遅延バインディングを避ける必要があります多くの理由があります。  
  
 事前バインディングをオブジェクト変数を作成することができます: つまり、バインド、プログラムのコンパイル時にします。 これを行うに、オブジェクトのタイプ ライブラリへの参照を追加、 **COM**のタブ、**参照の追加** ダイアログ ボックスで、**プロジェクト**メニュー。 オブジェクトの特定の型のオブジェクト変数を宣言します。 ほとんどの場合を使用する方が効率的、`Dim`ステートメントと使用するよりも、オブジェクトを作成する場合は、プライマリ相互運用機能アセンブリ、`CreateObject`関数。  
  
## <a name="interacting-with-unmanaged-code"></a>アンマネージ コードと対話します。  
 別の問題は、COM オブジェクトがアンマネージ コードを使用する、共通言語ランタイムの利点もコード。 複雑さの程度があるアンマネージ コードと Visual Basic のマネージ コードを組み合わせると、COM から COM オブジェクトへの参照を追加するときに Visual Basic 検索; ライブラリのプライマリ相互運用機能アセンブリ (PIA)いずれかを検出した場合、それを使用します。 PIA が見つからない場合は、ローカルの相互運用性クラスは、COM ライブラリの各クラスを含む相互運用アセンブリが作成されます。 詳細については、次を参照してください。 [.NET Framework アプリケーションにおける COM 相互運用性](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)します。  
  
 一般に厳密にバインドされたオブジェクトと可能な限りのプライマリ相互運用機能アセンブリを使用する必要があります。 使用して以下の例、`CreateObject`デモについては、Microsoft Office のオブジェクトを持つ関数が目的でのみ提供します。 ただし、これらのオブジェクトは、使いやすい信頼性の高い適切なプライマリ相互運用機能アセンブリで使用する場合は。  
  
## <a name="creating-an-object-on-a-remote-computer"></a>リモート コンピューター上のオブジェクトを作成します。  
 リモート ネットワーク コンピューター上にオブジェクトを作成するには、コンピューターの名前を渡すことによって、`ServerName`の引数、`CreateObject`関数。 その名前は、共有名のコンピューター名の部分と同じ: という名前の共有の"\\\MyServer\Public、"`ServerName`は"myserver"の部分。  
  
> [!NOTE]
>  COM のマニュアルを参照してください (Microsoft Developer Network を参照してください)、アプリケーションにアクセスできるようにリモート ネットワークに接続されたコンピューター上の詳細についてはします。 アプリケーションのレジストリ キーを追加する必要があります。  
  
 次のコードを返しますという名前のリモート コンピューターで実行されている Excel のインスタンスのバージョン番号`MyServer`:  
  
```vb  
Sub CreateRemoteExcelObj()  
    Dim xlApp As Object  
    ' Replace string "\\MyServer" with name of the remote computer.  
    xlApp = CreateObject("Excel.Application", "\\MyServer")  
    MsgBox(xlApp.Version)  
End Sub  
```  
  
 リモート サーバー名が正しい場合、またはが利用できない場合は、実行時エラーが発生します。  
  
> [!NOTE]
>  使用`CreateObject`オブジェクトの現在のインスタンスがない場合。 オブジェクトのインスタンスが既に実行されている場合は、新しいインスタンスを開始すると、され、指定した型のオブジェクトが作成されます。 現在のインスタンスを使用したり、アプリケーションを起動し、ファイルを読み込むを使用して、`GetObject`関数。 単一インスタンスのオブジェクトとして登録されているオブジェクト場合、オブジェクトのインスタンスを 1 つだけ作成方法に関係なく何度も`CreateObject`を実行します。  
  
## <a name="creating-framework-objects"></a>Framework のオブジェクトを作成します。  
 使用することができます、 `CreateObject` COM オブジェクトを作成するためのものです。 .NET Framework オブジェクトを作成するため正確な同等のメカニズムはありません、<xref:System.Activator>で、<xref:System>名前空間には、ローカルまたはリモート オブジェクトを作成するメソッドが含まれています。 具体的には、<xref:System.Activator.CreateInstance%2A>メソッドまたは<xref:System.Activator.CreateInstanceFrom%2A>メソッドが役立つことがあります。  
  
> [!IMPORTANT]
>  `CreateObject`関数が、アンマネージ コード アクセス許可が必要です。 詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。  
  
   
  
## Examples  
 次の例では、 `CreateObject` Microsoft Excel ワークシートを作成する関数をファイルにワークシートを保存します。 この例を使用するには、このプログラムを実行するコンピューターに Excel をインストールする必要があります。 またからタイプ ライブラリへの参照を追加する必要があります、 **COM**のタブ、**参照の追加** ダイアログ ボックスで、**プロジェクト**メニュー。 タイプ ライブラリの名前は、コンピューターにインストールされている Excel のバージョンによって異なります。 たとえば、Microsoft Excel 2002 のタイプ ライブラリの名前は**Microsoft Excel 10.0 Object Library**します。  
  
 [!code-vb[VbVbalrExcelObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">サーバーを利用できません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定された型のオブジェクトが存在していません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.Activator" />
        <altmember cref="Overload:System.Activator.CreateInstance" />
        <altmember cref="Overload:System.Activator.CreateInstanceFrom" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim ステートメント (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/declare-statement.md">Declare Statement</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">.NET Framework アプリケーションにおける COM 相互運用性</related>
        <related type="Article" href="~/docs/framework/interop/index.md">アンマネージ コードとの相互運用</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteSetting">
      <MemberSignature Language="C#" Value="public static void DeleteSetting (string AppName, string Section = null, string Key = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteSetting(string AppName, string Section, string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteSetting (AppName As String, Optional Section As String = null, Optional Key As String = null)" />
      <MemberSignature Language="F#" Value="static member DeleteSetting : string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.DeleteSetting (AppName, Section, Key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">必須。 セクションまたはキーの設定を適用するアプリケーションまたはプロジェクトの名前が含まれている <see langword="String" /> 型の式。</param>
        <param name="Section">必須。 キーの設定を削除するセクションの名前を含む <see langword="String" /> 型の式。 <c>AppName</c> と <c>Section</c> のみを指定した場合、指定したセクションとそれに関連するキー設定がすべて削除されます。</param>
        <param name="Key">任意。 削除するキー設定の名前を含む <see langword="String" /> 型の式。</param>
        <summary>Windows レジストリのアプリケーションのエントリから、セクションやキーの設定を削除します。 <see langword="My" /> 機能を使用すると、<see langword="DeleteSetting" /> 関数を使用した場合よりも生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての引数が指定されている場合は、指定された設定が削除されます。 使用しようとした場合、実行時エラーが発生した`DeleteSetting`存在しないセクションまたはキーの設定。  
  
 `DeleteSetting` ユーザーは、下で動作するためログインする必要があります、`HKEY_LOCAL_USER`レジストリ キーは、ユーザーが対話的にログオンするまでアクティブではありません。  
  
 いずれかで (Mtx.exe) などの非対話型プロセスからアクセスされるレジストリ設定を格納する必要があります、`HKEY_LOCAL_MACHINE\Software\`または`HKEY_USER\DEFAULT\Software`レジストリ キー。  
  
   
  
## Examples  
 次の例を使用して、`SaveSetting`の Windows レジストリにエントリを作成する手順、`MyApp`アプリケーション、および、使用、`DeleteSetting`それらを削除する関数。 ありません`Key`引数を指定すると、全体`Startup`セクション名およびそのキーのすべてを含む、セクションが削除されます。  
  
 [!code-vb[VbVbalrCatRef#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ユーザーがログインしていません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Environ">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オペレーティング システム環境変数に関連付けられた文字列を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(int Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">必須。 環境変数の名前を含む文字列、または環境文字列テーブルにおける環境文字列の番号に対応する整数値を評価する式です。</param>
        <summary>オペレーティング システム環境変数に関連付けられた文字列を返します。</summary>
        <returns>オペレーティング システム環境変数に関連付けられた文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`Expression`文字列を含む、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>関数は、指定された環境文字列に割り当てられているテキストを返します: 環境変数の環境文字列テーブルに等号 (=) の後のテキストは、します。 場合、文字列で`Expression`環境文字列テーブル、長さ 0 の文字列内に見つかりません ("") が返されます。  
  
 場合`Expression`環境文字列テーブル内の数値の位置が返されることを占有している文字列、整数が含まれています。 この場合、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>のすべての環境変数の名前を含む、テキストを返します。 指定された位置に文字列の環境がない場合<xref:Microsoft.VisualBasic.Interaction.Environ%2A>長さ 0 の文字列を返します。  
  
> [!IMPORTANT]
>  <xref:Microsoft.VisualBasic.Interaction.Environ%2A>関数が、環境アクセス許可が必要です。 詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。  
  
   
  
## Examples  
 この例では、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>エントリ数と長さを指定する関数、`PATH`環境文字列テーブルからのステートメント。  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> が指定されていません。</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic ランタイム ライブラリ メンバー</related>
      </Docs>
    </Member>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">必須。 環境変数の名前を含む文字列、または環境文字列テーブルにおける環境文字列の番号に対応する整数値を評価する式です。</param>
        <summary>オペレーティング システム環境変数に関連付けられた文字列を返します。</summary>
        <returns>オペレーティング システム環境変数に関連付けられた文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`Expression`文字列を含む、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>関数は、指定された環境文字列に割り当てられているテキストを返します: 環境変数の環境文字列テーブルに等号 (=) の後のテキストは、します。 場合、文字列で`Expression`環境文字列テーブル、長さ 0 の文字列内に見つかりません ("") が返されます。  
  
 場合`Expression`環境文字列テーブル内の数値の位置が返されることを占有している文字列、整数が含まれています。 この場合、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>のすべての環境変数の名前を含む、テキストを返します。 指定された位置に文字列の環境がない場合<xref:Microsoft.VisualBasic.Interaction.Environ%2A>長さ 0 の文字列を返します。  
  
> [!IMPORTANT]
>  <xref:Microsoft.VisualBasic.Interaction.Environ%2A>関数が、環境アクセス許可が必要です。 詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。  
  
   
  
## Examples  
 この例では、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>エントリ数と長さを指定する関数、`PATH`環境文字列テーブルからのステートメント。  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> が指定されていません。</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic ランタイム ライブラリ メンバー</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllSettings">
      <MemberSignature Language="C#" Value="public static string[,] GetAllSettings (string AppName, string Section);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[,] GetAllSettings(string AppName, string Section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllSettings (AppName As String, Section As String) As String(,)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^, 2&gt; ^ GetAllSettings(System::String ^ AppName, System::String ^ Section);" />
      <MemberSignature Language="F#" Value="static member GetAllSettings : string * string -&gt; string[,]" Usage="Microsoft.VisualBasic.Interaction.GetAllSettings (AppName, Section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[,]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">必須。 キー設定が必要となるアプリケーションまたはプロジェクトの名前を含む <see langword="String" /> 型の式。</param>
        <param name="Section">必須。 キー設定が必要となるセクションの名前を含む <see langword="String" /> 型の式。 <see langword="GetAllSettings" /> は、文字列の 2 次元配列を含むオブジェクトを返します。 文字列には、指定されたセクションにあるすべてのキー設定に加え、その設定に対応する値も含まれます。</param>
        <summary>Windows レジストリのアプリケーションのエントリから、キー設定のリストと各キー設定の値 (以前に <see langword="SaveSetting" /> を使用して作成されたもの) を返します。 <see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</summary>
        <returns>Windows レジストリのアプリケーションのエントリから、キー設定のリストと各キー設定の値 (以前に <see langword="SaveSetting" /> を使用して作成されたもの) を返します。  
  
<see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetAllSettings` 返します、初期化されていない`Object`場合`AppName`または`Section`存在しません。  
  
 下で動作するため、`HKEY_LOCAL_USER`がアクティブでないユーザーが対話的にログオンするまで、レジストリ キー`GetAllSettings`ユーザーがログオンすることが必要です。  
  
 いずれかで (Mtx.exe) などの非対話型プロセスからアクセスされるレジストリ設定を格納する必要があります、`HKEY_LOCAL_MACHINE\Software\`または`HKEY_USER\DEFAULT\Software`レジストリ キー。  
  
   
  
## Examples  
 この例を使用して、`SaveSetting`関数として指定されたアプリケーションの Windows レジストリにエントリを作成する`AppName`を使用して、`GetAllSettings`関数設定を表示します。 そのアプリケーションに注意してください名および`Section`で名前を取得することはできません`GetAllSettings`します。 最後に、`DeleteSetting`関数は、アプリケーションのエントリを削除します。  
  
 [!code-vb[VbVbalrCatRef#68](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ユーザーがログインしていません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (string PathName = null, string Class = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static object GetObject(string PathName, string Class) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObject (Optional PathName As String = null, Optional Class As String = null) As Object" />
      <MemberSignature Language="F#" Value="static member GetObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.GetObject (PathName, Class)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Class" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">任意。 <see langword="String" />。 取得するオブジェクトが含まれているファイルの完全パスと名前です。 <c>PathName</c> を省略した場合は、<c>Class</c> が必須となります。</param>
        <param name="Class">
          <c>PathName</c> が指定されていない場合は必須です。 <see langword="String" />。 オブジェクトのクラスを表す文字列です。 <c>Class</c> 引数の構文と指定項目を次に示します。 
 <c>appname</c><c>.</c><c>objecttype</c>  
  
[1|1] パラメーター 
[1|2] 説明 
[2|1] <c>appname</c>  
  
[2|2] 必須。 <see langword="String" />。 オブジェクトを提供するアプリケーションの名前です。  
  
[3|1] <c>objecttype</c>  
  
[3|2] 必須。 <see langword="String" />。 作成するオブジェクトの型またはクラスです。</param>
        <summary>COM コンポーネントにより得られたオブジェクトへの参照を返します。</summary>
        <returns>COM コンポーネントにより得られたオブジェクトへの参照を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、`GetObject`ファイルから COM コンポーネントのインスタンスを読み込みます。 次に例を示します。  
  
```vb  
Dim CADObject As Object  
CADObject = GetObject("C:\CAD\schema.cad")  
```  
  
 このコードを実行すると、アプリケーションに関連付けられた、指定した`PathName`が開始し、指定したファイル内のオブジェクトがアクティブにします。  
  
## <a name="default-cases"></a>既定のケース  
 場合`PathName`が長さ 0 の文字列 (`""`)、`GetObject`指定されたクラス型の新しいオブジェクト インスタンスを返します。 場合、`PathName`引数を省略すると、`GetObject`で指定されたクラス型の現在アクティブなオブジェクトを返します`Class`します。 指定した型のオブジェクトが存在しない場合、エラーが発生します。  
  
## <a name="accessing-a-subobject"></a>サブオブジェクトへのアクセス  
 一部のアプリケーションでは、ファイルに関連付けられているサブオブジェクトをアクティブ化できます。 これを行うには、感嘆符を追加します (`!`) に従って、ファイル名の末尾に、ファイルの一部を識別する文字列でアクティブ化します。 この文字列を作成する方法については、オブジェクトを作成したアプリケーションのマニュアルを参照してください。  
  
 たとえば、描画アプリケーション ファイルに格納されている図面に複数のレイヤーがあります。 記述すると、レイヤーをアクティブ化する次のコードを使用する可能性があります`schema.cad`します。  
  
```vb  
layerObject = GetObject("C:\CAD\schema.cad!Layer3")  
```  
  
## <a name="specifying-a-class"></a>クラスを指定します。  
 オブジェクトの指定しない場合`Class`オートメーションは、指定するファイル名に基づくをアクティブ化するアプリケーションを開始し、オブジェクトを決定します。 ただし、いくつかのファイルは、オブジェクトの 1 つ以上のクラスをサポートできます。 たとえば、描画は 3 つの異なる型のオブジェクトをサポート可能性があります。`Application`オブジェクト、`Drawing`オブジェクトと`Toolbar`同じファイルの一部であるすべてのオブジェクト。 使用してアクティブ化するファイルのどのオブジェクトを指定する省略可能な`Class`引数。 次に例を示します。  
  
```vb  
Dim drawObj As Object  
drawObj = GetObject("C:\Drawings\sample.drw", "Figment.Drawing")  
```  
  
 前の例では、`Figment`描画アプリケーションの名前を指定し、`Drawing`をサポートするオブジェクトの種類の 1 つです。  
  
## <a name="using-the-object"></a>オブジェクトの使用  
 オブジェクトがアクティブ化されるでを参照することを宣言して、オブジェクト変数を使用してコード。 オブジェクト変数を使用して、新しいオブジェクトのプロパティとメソッドにアクセスする前の例では、`drawObj`します。 次に例を示します。  
  
```vb  
drawObj.Line(9, 90)  
drawObj.InsertText(9, 100, "Hello, world.")  
drawObj.SaveAs("C:\Drawings\sample.drw")  
```  
  
> [!NOTE]
>  使用して、`GetObject`オブジェクトの現在のインスタンスがある場合、または読み込まれたファイルでオブジェクトを作成する場合に機能します。 ファイルが読み込まれた現在のインスタンスがないと、オブジェクトの使用を開始したくない場合を使用して、<xref:Microsoft.VisualBasic.Interaction.CreateObject%2A>関数。  
>   
>  ActiveX の単一インスタンス オブジェクトとして登録されているオブジェクト場合、オブジェクトのインスタンスを 1 つだけ作成方法に関係なく何度も`CreateObject`が呼び出されます。 単一インスタンス オブジェクトは、`GetObject`長さ 0 の文字列で呼び出されたときに、同じインスタンスを常に返します (`""`) 構文、およびその場合エラーが発生、`PathName`引数を省略するとします。 使用することはできません`GetObject`Visual Basic で作成したクラスへの参照を取得します。  
  
> [!IMPORTANT]
>  `GetObject`関数が、アンマネージ コード アクセス許可が必要です。 詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。  
  
   
  
## Examples  
 次の例では、`GetObject`特定の Microsoft Excel ワークシートへの参照を取得します (`excelObj`)。 使用して、ワークシートの`Application`Excel を閉じるには、およびその他の操作を表示するプロパティ。 2 つの API 呼び出しを使用して、`detectExcel`プロシージャは、Excel が検索されが実行されている場合は、オブジェクトを実行しているテーブルで入力します。 最初の呼び出し`GetObject`Excel が既に実行されていない場合、この例で、エラーが発生原因、`excelWasNotRunning`フラグを設定する`True`します。 2 番目の呼び出し`GetObject`開くファイルを指定します。 Excel が実行されていない場合、2 番目の呼び出しが起動され、指定されたファイルによって表されるワークシートへの参照を返します`test.xls`します。 指定した場所にファイルが存在する必要があります。Visual Basic の場合は、スロー、<xref:System.IO.FileNotFoundException>します。 次に、コード例は、Excel と表示されている指定のワークシートを含むウィンドウの両方です。  
  
 この例は`Option Strict Off`遅延バインディングを使用しているため、オブジェクトに割り当てられている型の変数`Object`します。 指定できます`Option Strict On`から Excel のタイプ ライブラリへの参照を追加する場合は、特定のオブジェクトの種類のオブジェクトを宣言し、 **COM**のタブ、**参照の追加**のダイアログ ボックス、 **プロジェクト**Visual Studio のメニュー。  
  
 [!code-vb[VbVbalrExcelObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#2)]  
  
 [!code-vb[VbVbalrExcelObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#4)]  
  
 [!code-vb[VbVbalrExcelObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#5)]  
  
 呼び出すと、`getExcel`関数の場合、チェックが Excel が既に実行されているかどうかに行われます。 そうでない場合、インスタンスが作成されます。  
  
> [!IMPORTANT]
>  前の例をわかりやすくするためは、任意のウィンドウと呼ばれること前提としています`XLMAIN`Microsoft Excel のインスタンスに属しています。 場合は、不正改ざんによって起動された別のオブジェクトは、その名前を持つウィンドウを作成、Excel の意図したすべてのメッセージを受け取る。 運用環境で使用される、アプリケーションのことを確認するより厳密なテストを含める必要があります`XLMAIN`本当に Excel に属しています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">指定されたクラス型のオブジェクトが存在しません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定されたパスおよびファイル名を持つオブジェクトが存在しません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/declare-statement.md">Declare Statement</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-strict-statement.md">Option Strict Statement</related>
      </Docs>
    </Member>
    <Member MemberName="GetSetting">
      <MemberSignature Language="C#" Value="public static string GetSetting (string AppName, string Section, string Key, string Default = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetSetting(string AppName, string Section, string Key, string Default) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetting (AppName As String, Section As String, Key As String, Optional Default As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member GetSetting : string * string * string * string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.GetSetting (AppName, Section, Key, Default)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Default" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">必須。 キー設定が必要となるアプリケーションまたはプロジェクトの名前を含む <see langword="String" /> 型の式。</param>
        <param name="Section">必須。 キーの設定が存在しているセクションの名前を含む <see langword="String" /> 型の式。</param>
        <param name="Key">必須。 返されるキー設定の名前を含む <see langword="String" /> 型の式。</param>
        <param name="Default">任意。 <c>Key</c> 設定に値が設定されていない場合に返される値を含む式です。 省略した場合、<c>Default</c> は長さ 0 の文字列 ("") と想定されます。</param>
        <summary>Windows レジストリのアプリケーションのエントリから、キーの設定値を返します。 <see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</summary>
        <returns>Windows レジストリのアプリケーションのエントリから、キーの設定値を返します。  
  
<see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 名前のアイテムの場合、`GetSetting`引数が存在しない場合は、`GetSetting`の値を返します`Default`します。  
  
 下で動作するため、`HKEY_LOCAL_USER`がアクティブでないユーザーが対話的にログオンするまで、レジストリ キー`GetSetting`ユーザーがログオンすることが必要です。  
  
 いずれかで (Mtx.exe) などの非対話型プロセスからアクセスされるレジストリ設定を格納する必要があります、`HKEY_LOCAL_MACHINE\Software\`または`HKEY_USER\DEFAULT\Software`レジストリ キー。  
  
 `GetSetting` 必要があります`Read`<xref:System.Security.Permissions.RegistryPermission>します。  
  
   
  
## Examples  
 この例を使用して、`SaveSetting`関数として指定されたアプリケーションの Windows レジストリにエントリを作成する`AppName`、しを使用して、`GetSetting`設定のいずれかを表示する関数。 `Default`引数を指定すると、いくつかの値が返される保証されます。 注意`Section`で名前を取得することはできません`GetSetting`します。 最後に、`DeleteSetting`関数は、すべてのアプリケーションのエントリを削除します。  
  
 [!code-vb[VbVbalrCatRef#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">文字列型 (<see langword="String" />) の式でない引数が含まれるか、ユーザーがログインしていません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IIf">
      <MemberSignature Language="C#" Value="public static object IIf (bool Expression, object TruePart, object FalsePart);" />
      <MemberSignature Language="ILAsm" Value=".method public static object IIf(bool Expression, object TruePart, object FalsePart) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IIf (Expression As Boolean, TruePart As Object, FalsePart As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ IIf(bool Expression, System::Object ^ TruePart, System::Object ^ FalsePart);" />
      <MemberSignature Language="F#" Value="static member IIf : bool * obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.IIf (Expression, TruePart, FalsePart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
        <Parameter Name="TruePart" Type="System.Object" />
        <Parameter Name="FalsePart" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須。 <see langword="Boolean" />。 評価する式。</param>
        <param name="TruePart">必須。 <see langword="Object" />。 <c>Expression</c> が <see langword="True" /> に評価された場合に返されます。</param>
        <param name="FalsePart">必須。 <see langword="Object" />。 <c>Expression</c> が <see langword="False" /> に評価された場合に返されます。</param>
        <summary>式の評価に応じて、2 つのオブジェクトのうち 1 つを返します。</summary>
        <returns>式の評価に応じて、2 つのオブジェクトのうち 1 つを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IIf`関数は、3 項の対応を提供[条件演算子:?:](http://msdn.microsoft.com/library/88643ee8-7100-4f86-880a-705ec22b6271) Visual C でします。  
  
   
  
## Examples  
 この例では、`IIf`を評価する関数、`testMe`のパラメーター、`checkIt`プロシージャを返すという単語を返します、それ以外の場合、"Small"word"Large"場合は、金額が 1,000 を超える;。  
  
 [!code-vb[VbVbalrFunctions#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#33)]  
  
 場合`Option Strict`は`On`、使用する必要があります、`CStr`からの戻り値を明示的に変換するキーワード`Object`に`String`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-strict-statement.md">Option Strict Statement</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/if-then-else-statement.md">If...Then...Else ステートメント (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case ステートメント (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="InputBox">
      <MemberSignature Language="C#" Value="public static string InputBox (string Prompt, string Title = &quot;&quot;, string DefaultResponse = &quot;&quot;, int XPos = -1, int YPos = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputBox(string Prompt, string Title, string DefaultResponse, int32 XPos, int32 YPos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputBox (Prompt As String, Optional Title As String = &quot;&quot;, Optional DefaultResponse As String = &quot;&quot;, Optional XPos As Integer = -1, Optional YPos As Integer = -1) As String" />
      <MemberSignature Language="F#" Value="static member InputBox : string * string * string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.InputBox (Prompt, Title, DefaultResponse, XPos, YPos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.String" />
        <Parameter Name="Title" Type="System.String" />
        <Parameter Name="DefaultResponse" Type="System.String" />
        <Parameter Name="XPos" Type="System.Int32" />
        <Parameter Name="YPos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Prompt">必須。ダイアログ ボックスにメッセージとして表示する <see langword="String" /> 式です。 <c>Prompt</c> の最大長は、約 1024 文字です。使用される文字の幅によって変わります。 <c>Prompt</c> が複数の行で構成される場合、復帰文字 (<see langword="Chr(" />13<see langword=")" />)、ライン フィード文字 (<see langword="Chr(" />10<see langword=")" />)、または復帰文字とライン フィード文字の組み合わせ (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) を各行の間で使用して、行を分割できます。</param>
        <param name="Title">任意。 ダイアログ ボックスのタイトル バーに表示される <see langword="String" /> 型の式。 <c>Title</c> を省略した場合、タイトル バーにはアプリケーションの名前が表示されます。</param>
        <param name="DefaultResponse">任意。 他に入力がない場合に、テキスト ボックスに既定値として表示される <see langword="String" /> 型の式。 <c>DefaultResponse</c> を省略すると、表示されるテキスト ボックスは空になります。</param>
        <param name="XPos">任意。 ダイアログ ボックスの左端から画面の左端までの距離を twip 単位で指定する数式です。 <c>XPos</c> を省略すると、ダイアログ ボックスの水平位置が中央になります。</param>
        <param name="YPos">任意。 ダイアログ ボックスの上端から画面の上端までの距離を twip 単位で指定する数式です。 <c>YPos</c> を省略すると、ダイアログ ボックスは垂直方向に対して画面の上端から約 1/3 の位置に配置されます。</param>
        <summary>ダイアログ ボックスにプロンプトを表示して、ユーザーがテキストを入力するか、ボタンをクリックするのを待った後、テキスト ボックスの内容を含む文字列を返します。</summary>
        <returns>ダイアログ ボックスにプロンプトを表示して、ユーザーがテキストを入力するか、ボタンをクリックするのを待った後、テキスト ボックスの内容を含む文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーがクリックした場合**キャンセル**長さ 0 の文字列が返されます。  
  
 最初の引数よりも多くを指定するに使用する必要があります、`InputBox`関数の式。 位置指定引数を省略する場合は、対応するコンマ区切り記号を保持する必要があります。  
  
> [!NOTE]
>  `InputBox`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>レベルで、部分的に信頼された状況では、その実行に影響を与える可能性があります。 詳細については、次を参照してください。 および<xref:System.Security.Permissions.UIPermission>します。  
  
   
  
## Examples  
 この例を使用するさまざまな方法を示しています、`InputBox`値を入力するユーザーを要求する関数。 場合、x と y の位置を省略すると、ダイアログ ボックスが自動的に各軸の中央に配置します。 変数`MyValue`ユーザーが [ok] をクリックするか、ENTER キーを押した場合に、ユーザーが入力した値が含まれています。  
  
 [!code-vb[VbVbalrCatRef#67](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#67)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MsgBox">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.MsgBoxResult MsgBox(object Prompt, valuetype Microsoft.VisualBasic.MsgBoxStyle Buttons, object Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MsgBox (Prompt As Object, Optional Buttons As MsgBoxStyle = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, Optional Title As Object = null) As MsgBoxResult" />
      <MemberSignature Language="F#" Value="static member MsgBox : obj * Microsoft.VisualBasic.MsgBoxStyle * obj -&gt; Microsoft.VisualBasic.MsgBoxResult" Usage="Microsoft.VisualBasic.Interaction.MsgBox (Prompt, Buttons, Title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.Object" />
        <Parameter Name="Buttons" Type="Microsoft.VisualBasic.MsgBoxStyle" />
        <Parameter Name="Title" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Prompt">必須。 ダイアログ ボックスにメッセージとして表示される <see langword="String" /> 型の式。 <c>Prompt</c> の最大長は、約 1024 文字です。使用される文字の幅によって変わります。 <c>Prompt</c> が複数の行で構成される場合、復帰文字 (<see langword="Chr(" />13<see langword=")" />)、ライン フィード文字 (<see langword="Chr(" />10<see langword=")" />)、または復帰文字とライン フィード文字の組み合わせ (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) を各行の間で使用して、行を分割できます。</param>
        <param name="Buttons">任意。 表示するボタンの種類と数、使用するアイコンのスタイル、既定のボタンの ID、メッセージ ボックスのモーダル性を指定する値の総計を表す数式です。 <c>Buttons</c> を省略した場合、既定値は 0 になります。</param>
        <param name="Title">任意。 ダイアログ ボックスのタイトル バーに表示される <see langword="String" /> 型の式。 <c>Title</c> を省略した場合、タイトル バーにはアプリケーションの名前が表示されます。</param>
        <summary>ダイアログ ボックスにメッセージを表示し、ユーザーがボタンをクリックするのを待った後、ユーザーのクリックしたボタンを示す整数値を返します。</summary>
        <returns>
          <list type="table">
            <item>
              <term> 定数 
 </term>
              <description> [値] 
 </description>
            </item>
            <item>
              <term>
                <see langword="OK" />
              </term>
              <description> 1 
 </description>
            </item>
            <item>
              <term>
                <see langword="Cancel" />
              </term>
              <description> 2 
 </description>
            </item>
            <item>
              <term>
                <see langword="Abort" />
              </term>
              <description> 3 
 </description>
            </item>
            <item>
              <term>
                <see langword="Retry" />
              </term>
              <description> 4 
 </description>
            </item>
            <item>
              <term>
                <see langword="Ignore" />
              </term>
              <description> 5 
 </description>
            </item>
            <item>
              <term>
                <see langword="Yes" />
              </term>
              <description> 6 
 </description>
            </item>
            <item>
              <term>
                <see langword="No" />
              </term>
              <description> 7 
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 位置指定引数を省略する場合は、対応するコンマ区切り記号を保持する必要があります。  
  
 ダイアログ ボックスが表示される場合、**キャンセル**ESC キーを押すボタンがクリックした場合と同じ効果**キャンセル**  
  
 ダイアログ ボックスが含まれている場合、**ヘルプ** ダイアログ ボックスで状況依存のヘルプが提供されているボタン。 ただし、他のボタンのいずれかを選択するまでの値は返されません。 Windows フォーム アプリケーションを選択することで、**ヘルプ**ボタンが実行、<xref:System.Windows.Forms.Control.HelpRequested>フォームのイベント。  
  
> [!NOTE]
>  `MsgBox`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>レベルで、部分的に信頼された状況では、その実行に影響を与える可能性があります。 詳細については、「<xref:System.Security.Permissions.UIPermission>」を参照してください。  
  
 `MsgBoxStyle`列挙値は、次の表に記載されています。  
  
|メンバー|[値]|説明|  
|-|-|-|  
|メンバー|[値]|説明|  
|`OKOnly`|0|Ok を表示します ボタンの場合のみです。|  
|`OKCancel`|1|[キャンセル] ボタンおよび [ok] を表示します。|  
|`AbortRetryIgnore`|2|中止、再試行、および無視のボタンが表示されます。|  
|`YesNoCancel`|3|[はい] が表示されます、No、およびキャンセル ボタン。|  
|`YesNo`|4|[はい] と [いいえ] ボタンが表示されます。|  
|`RetryCancel`|5|[再試行] および [キャンセル] ボタンが表示されます。|  
|`Critical`|16|メッセージの重要なアイコンを表示します。|  
|`Question`|32|警告クエリ アイコンを表示します。|  
|`Exclamation`|48|警告メッセージのアイコンを表示します。|  
|`Information`|64|情報メッセージのアイコンを表示します。|  
|`DefaultButton1`|0|最初のボタンは既定値です。|  
|`DefaultButton2`|256|2 番目のボタンは既定値です。|  
|`DefaultButton3`|512|3 番目のボタンは既定値です。|  
|`ApplicationModal`|0|アプリケーションがモーダルでします。 ユーザーは、現在のアプリケーションで作業を続行する前に、メッセージ ボックスに応答する必要があります。|  
|`SystemModal`|4096|システムは、モーダルです。 すべてのアプリケーションがメッセージ ボックスに、ユーザーが応答するまで中断されます。|  
|`MsgBoxSetForeground`|65536|前面のウィンドウとして、メッセージ ボックス ウィンドウを指定します。|  
|`MsgBoxRight`|524288|テキストは、右揃えです。|  
|`MsgBoxRtlReading`|1048576|テキストが右から左のヘブライ語やアラビア語のシステムでの読み取りを表示する必要がありますを指定します。|  
  
 値 (0 ~ 5) の最初のグループには、ダイアログ ボックスに表示されるボタンの種類と数がについて説明します。 (16、32、48、64) は、2 番目のグループには、アイコンのスタイルについて説明します。 3 番目のグループ (0, 256, 512) は、どのボタンは、既定値を決定します。 (0, 4096) の 4 番目のグループが、メッセージ ボックスのモーダルかどうかを決定し、5 番目のグループは、メッセージ ボックス ウィンドウが前面のウィンドウで、配置とテキストの方向でかどうかを指定します。 最後の値を作成する番号を追加するときに、`Buttons`引数、各グループから 1 つの数値を使用します。  
  
   
  
## Examples  
 この例では、 `MsgBox` [はい] と [いいえ] ボタンをダイアログ ボックスで、重大なエラー メッセージを表示する関数。 [いいえ] ボタンは、既定の応答として指定されます。 結合することでこれは、 `MsgBox` 1 つの数値式の定数値。 この例では、4 を追加 (、はい/いいえ ボタンの組み合わせ) と 16 (、**メッセージの重要な**ウィンドウ) で 276 の合計は 256 (既定のボタンとして 2 番目のボタン) とします。 によって返される値、`MsgBox`関数は、ユーザーが選択したボタンに依存します [はい] 6; の値を返します。7 の値を返しますがありません。  
  
 [!code-vb[VbVbalrCatRef#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Prompt" /> が文字列型 (<see langword="String" />) の式でないか、<paramref name="Title" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">プロセスがユーザー対話モードで動作していません。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see langword="MsgBoxResult" /> 列挙型または <see langword="MsgBoxStyle" /> 列挙型のメンバーでないパラメーターが含まれています。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MessageBox.Show(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Partition">
      <MemberSignature Language="C#" Value="public static string Partition (long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Partition(int64 Number, int64 Start, int64 Stop, int64 Interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Partition (Number As Long, Start As Long, Stop As Long, Interval As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Partition(long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="F#" Value="static member Partition : int64 * int64 * int64 * int64 -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Partition (Number, Start, Stop, Interval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
        <Parameter Name="Start" Type="System.Int64" />
        <Parameter Name="Stop" Type="System.Int64" />
        <Parameter Name="Interval" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">必須。 <see langword="Long" />。 計算済み範囲のいずれかに存在する整数値です。</param>
        <param name="Start">必須。 <see langword="Long" />。 計算済み範囲のセットの最小値を示す整数です。 <c>Start</c> を 0 未満にすることはできません。</param>
        <param name="Stop">必須。 <see langword="Long" />。 計算済み範囲のセットの最大値を示す整数です。 <c>Stop</c> には <c>Start</c> 以下の値を指定できません。</param>
        <param name="Interval">必須。 <see langword="Long" />。 <c>Start</c> と <c>Stop</c> の間で計算される、各範囲のサイズを示す整数値です。 <c>Interval</c> を 1 未満にすることはできません。</param>
        <summary>ある数値が含まれる計算済み範囲を表す文字列を返します。</summary>
        <returns>ある数値が含まれる計算済み範囲を表す文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Partition`関数計算一連の数値の範囲で指定された値の数を格納している各`Interval`します。 最初の範囲から始まります`Start`、最後の範囲の終わりと`Stop`します。 `Partition`関数を識別しますどの範囲が含まれる`Number`し、その範囲を説明する文字列を返します。 として文字列で表される範囲"*最大*:*最小*"ここで、範囲の下限 (*最大*) は、ハイ エンドから分離 (*最小*)、コロン (:)。  
  
 必要に応じて、`Partition`関数は、前に先頭のスペースを挿入します*最大*と*最小*値 (文字列の形式と同じ文字数ができるように。`Stop` + 1)。 出力を使用する場合は、これにより、`Partition`のいくつかの値を持つ関数`Number`、以後の並べ替え操作中に、生成されるテキストを正しく処理されます。  
  
 次の表に、3 つのセットを使用して計算範囲の一部のサンプル文字列`Start`、 `Stop`、および`Interval`します。 「最初の範囲」と「最後の範囲」列は、最低と最高可能な指定した範囲の値を表示する`Start`と`Stop`します。 列の値に対して返される文字列の表示"Before"の最初の範囲"と"後の最後の範囲"`Number`未満`Start`以上および`Stop`、それぞれします。  
  
|`Start`|`Stop`|`Interval`|最初の範囲の前に|最初の範囲|最後の範囲|最後の範囲の後|  
|-|-|-|-|-|-|-|  
|0|99|5|":-1"|"0: 4"|「95: 99」|"100:   "|  
|20|199|10|": 19"|「20: 29」|"190:199"|"200:"|  
|100|1010|20|": 99"|「100: 119」|"1000:1010"|"1011:    "|  
  
 前の表では、3 番目の行が結果を示しています。 ときに`Start`と`Stop`で均等に割ることはできませんの数値のセットを定義`Interval`します。 最後の範囲の終わり`Stop`、ようには 11 文字も`Interval`は 20 です。  
  
 場合`Interval`は 1 です。 範囲は、"`Number`:`Number`"に関係なく、、`Start`と`Stop`引数。 たとえば場合、 `Number` 267 は、 `Stop` 1000 と`Interval`は 1 です。 `Partition` "267: 267"を返します。  
  
 `Partition` データベース クエリを構築するときに役に立ちます。 1001 に 2000 を請求書の値は 1、1000 などのさまざまな値の範囲内で発生する注文の数を示す選択クエリを作成することができます。  
  
   
  
## Examples  
 次の例では、1950 2049 から数十年の範囲を設定します。 値を見つけ、`year`内で適切な範囲を返します、`String`範囲を示す値。 場合`year`など、1984 年の値を持つ`Partition`「1980:1989」を返します。  
  
 [!code-vb[VbVbalrFunctions#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 0、<paramref name="Stop" /> &lt;= <paramref name="Start" />、または <paramref name="Interval" /> &lt; 1。</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveSetting">
      <MemberSignature Language="C#" Value="public static void SaveSetting (string AppName, string Section, string Key, string Setting);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SaveSetting(string AppName, string Section, string Key, string Setting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveSetting (AppName As String, Section As String, Key As String, Setting As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SaveSetting(System::String ^ AppName, System::String ^ Section, System::String ^ Key, System::String ^ Setting);" />
      <MemberSignature Language="F#" Value="static member SaveSetting : string * string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.SaveSetting (AppName, Section, Key, Setting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Setting" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">必須。 設定を適用するアプリケーションまたはプロジェクトの名前が含まれている <see langword="String" /> 型の式。</param>
        <param name="Section">必須。 キーの設定を保存するセクションの名前を含む <see langword="String" /> 型の式。</param>
        <param name="Key">必須。 保存するキー設定の名前を含む <see langword="String" /> 型の式。</param>
        <param name="Setting">必須。 <c>Key</c> に設定する値を含む式です。</param>
        <summary>Windows レジストリにアプリケーションのエントリを保存または作成します。 <see langword="My" /> 機能を使用すると、<see langword="SaveSetting" /> を使用した場合より生産性とパフォーマンスが向上します。 詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SaveSetting`関数では、キーを追加します。`HKEY_CURRENT_USER\Software\VB and VBA Program Settings`します。  
  
 何らかの理由は、キーの設定を保存できません、エラーが発生します。  
  
 `SaveSetting` ユーザーは、下で動作するためログインする必要があります、`HKEY_LOCAL_USER`レジストリ キーは、ユーザーが対話的にログオンするまでアクティブではありません。  
  
 いずれかで (Mtx.exe) などの非対話型プロセスからアクセスされるレジストリ設定を格納する必要があります、`HKEY_LOCAL_MACHINE\Software\`または`HKEY_USER\DEFAULT\Software`レジストリ キー。  
  
 `SaveSetting` 必要があります`Write`と`Create`<xref:System.Security.Permissions.RegistryPermission>します。  
  
   
  
## Examples  
 次の例を使用して、`SaveSetting`の Windows レジストリにエントリを作成する関数、`MyApp`アプリケーション、および、使用、`DeleteSetting`それらを削除する関数。  
  
 [!code-vb[VbVbalrCatRef#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">キーのレジストリを作成できませんでした。または、ユーザーがログインしていません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/computer-resources/reading-from-and-writing-to-the-registry.md">レジストリからの読み取りとレジストリへの書き込み (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Shell">
      <MemberSignature Language="C#" Value="public static int Shell (string Pathname, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string Pathname, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (Pathname As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (Pathname, Style, Wait, Timeout)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string PathName, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (PathName As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (PathName, Style, Wait, Timeout)" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Style" Type="Microsoft.VisualBasic.AppWinStyle" Index="1" />
        <Parameter Name="Wait" Type="System.Boolean" Index="2" />
        <Parameter Name="Timeout" Type="System.Int32" Index="3" />
      </Parameters>
      <Docs>
        <param name="PathName">必須。 <see langword="String" />。 実行するプログラムの名前に、必要な引数とコマンド ライン スイッチを加えたものです。 <c>PathName</c> には、ドライブ名とディレクトリ パスまたはフォルダー名も指定できます。  
  
プログラムのパスがわからない場合には、<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />を使用するとパスを調べることができます。 たとえば <c>My.Computer.FileSystem.GetFiles("C:\", True, "testFile.txt")</c> を呼び出すと、ドライブ C:\\\ 内で名前が <c>testFile.txt</c> であるすべてのファイルの完全パスが返されます。</param>
        <param name="Pathname">To be added.</param>
        <param name="Style">任意。 <see langword="AppWinStyle" />。 プログラムが実行されるウィンドウのスタイルを指定する、<see cref="T:Microsoft.VisualBasic.AppWinStyle" /> から選択した値です。 <c>Style</c> を省略すると、<see langword="Shell" /> では <see langword="AppWinStyle.MinimizedFocus" /> が使用されます。この場合、プログラムは最小化し、フォーカスのある状態で起動します。</param>
        <param name="Wait">任意。 <see langword="Boolean" />。 <see langword="Shell" /> 関数で、プログラムが完了するまで待つかどうかを示す値です。 <c>Wait</c> を省略した場合、<see langword="Shell" /> では <see langword="False" /> が使用されます。</param>
        <param name="Timeout">任意。 <see langword="Integer" />。 <c>Wait</c> が <see langword="True" /> の場合に、プログラムの完了を待つ時間をミリ秒単位で指定する数値です。 <c>Timeout</c> を省略すると、<see langword="Shell" /> では -1 が使用されます。この場合、タイムアウトは発生せず、<see langword="Shell" /> はプログラムが終了するまで値を返しません。 したがって、<c>Timeout</c> を省略するか -1 に設定した場合、<see langword="Shell" /> からプログラムに制御が返されなくなる可能性があります。</param>
        <summary>実行可能プログラムを実行します。プログラムがまだ実行中の場合には、プログラムのプロセス ID を含む整数値を返します。</summary>
        <returns>実行可能プログラムを実行します。プログラムがまだ実行中の場合には、プログラムのプロセス ID を含む整数値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 戻り値、`Shell`関数は、プログラムがで指定するかどうかに依存`PathName`タイミングがまだ実行中`Shell`を返します。 設定した場合`Wait`に`True`タイムアウトになると、前に、プログラムが終了して`Shell`は 0 を返します。 省略した場合、またはタイムアウトになると、`Wait`かに設定して`False`、`Shell`プログラムのプロセス ID を返します。 プロセス ID は、実行中のプログラムを識別する一意の番号です。  
  
## <a name="failure-to-start"></a>起動の失敗  
 場合、`Shell`関数は、名前付きのプログラムを起動できません、<xref:System.IO.FileNotFoundException>エラーが発生します。 これに、たとえば、16 ビット プログラムを実行しようとしたときに`command.com`を使用して、アプリケーションから<xref:System.Windows.Forms?displayProperty=nameWithType>します。 この問題を回避するには、目的の 16 ビット プログラムを呼び出すの 32 ビット プログラムを実行できます。 場合に`command.com`、行うことができます`cmd.exe`代わりにします。  
  
## <a name="waiting-for-completion"></a>完了を待機しています  
 既定で、`Shell`関数は、プログラムを非同期的に実行します。 つまり、プログラムを開始、`Shell`関数のステートメントの次の前に実行が完了しない可能性があります、`Shell`関数が実行されます。 続行する前に終了するプログラムを待機する場合は、設定`Wait`に`True`します。  
  
## <a name="determining-the-exit-code"></a>終了コードを決定します。  
 プロセスを返すことができます、*終了コード*が終了したとき。 ただし、使用することはできません`Shell`ためこの終了コードを取得する`Shell`の終了を待機している場合は 0 を返しますとも別のオブジェクトで、プロセスが実行されるため`Shell`します。  
  
 プロセスから終了コードを取得するには、プロセスを開始し、終了まで待機するコードを記述する必要があります。 次の例では、プロセスを開始を終了するまで待機し、その終了コードを取得する方法を示します。  
  
```vb  
Dim procID As Integer  
Dim newProc As Diagnostics.Process  
newProc = Diagnostics.Process.Start("C:\WINDOWS\NOTEPAD.EXE")  
procID = newProc.Id  
newProc.WaitForExit()  
Dim procEC As Integer = -1  
If newProc.HasExited Then  
    procEC = newProc.ExitCode  
End If  
MsgBox("Process with ID " & CStr(ProcID) & _  
    " terminated with exit code " & CStr(procEC))  
```  
  
## <a name="protecting-the-file-specification"></a>ファイルの仕様を保護します。  
 全体のパスとファイルの仕様は、次の例のように、引用符で常に囲む必要があります。  
  
```vb  
ID = Shell("""C:\Program Files\display.exe"" -a -q", , True, 100000)  
```  
  
 隣接する二重引用符の各ペア (`" "`)、文字列内では、リテラルは、文字列内の 1 つの二重引用符文字として解釈されます。 そのため、前の例は、次の文字列を表示します。、`Shell`関数。  
  
```console  
"C:\Program Files\display.exe" -a -q  
```  
  
 Windows という名前のファイルを検索パスを引用符で囲まれていなかった場合`Program.exe`、C:\ ディレクトリ内の代わりに`display.exe`C:\Program Files ディレクトリにします。  
  
> [!IMPORTANT]
>  場合は、パスとファイルの仕様は、引用符では囲まないで、ファイル名またはパスのノードにスペースが含まれている場合にセキュリティ リスクが存在します。 前の例では、パス ノードで`\Program Files`スペースが含まれています。 仕様引用符とという名前のプログラム内でなかったかどうか`Program.exe`c: インストールされていた\\、たとえば、不正改ざんによって Windows に実行されるのではなく`display.exe`します。  
  
> [!IMPORTANT]
>  `Shell`関数が、アンマネージ コード アクセス許可が必要です。 詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。  
  
   
  
## Examples  
 次の例では、`Shell`ユーザーによって指定されたアプリケーションを実行する関数。 指定する<xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType>引数として 2 番目の標準サイズで、アプリケーションを開き、フォーカスが与えられます。  
  
 [!code-vb[VbVbalrFunctions#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Style" /> が 0 ～ 9 (両端を含む) の範囲内の値ではありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <see langword="Shell" /> が <paramref name="PathName" /> ファイルを見つけられません。</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="PathName" /> は <see langword="Nothing" />です。</exception>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.NullReferenceException" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />
        <altmember cref="Overload:Microsoft.VisualBasic.Interaction.AppActivate" />
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static object Switch (params object[] VarExpr);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Switch(object[] VarExpr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Switch (ParamArray VarExpr As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Switch(... cli::array &lt;System::Object ^&gt; ^ VarExpr);" />
      <MemberSignature Language="F#" Value="static member Switch : obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Switch VarExpr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarExpr" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="VarExpr">必須。 <see langword="Object" /> パラメーター配列。 偶数個の要素が含まれている必要があります。 <see langword="Object" /> の変数または式をコンマで区切ったリストか、<see langword="Object" /> 要素の 1 次元配列を指定します。</param>
        <summary>式のリストを評価し、リスト内で最初に <see langword="Object" /> に評価された式に対応する <see langword="True" /> 値を返します。</summary>
        <returns>式のリストを評価し、リスト内で最初に <see langword="Object" /> に評価された式に対応する <see langword="True" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引数に指定される`VarExpr`ペアになっている式と値で構成されます。 `Switch`関数で最も大きいインデックスを小さい方から奇数式を評価して`VarExpr`とに評価される最初の式に関連付けられている偶数値を返します`True`します。 たとえば場合、`VarExpr(0)`は`True`、`Switch`を返します`VarExpr(1)`、場合に`VarExpr(0)`は`False`が`VarExpr(2)`は`True`、`Switch`を返します`VarExpr(3)`など。  
  
 指定しない場合、`VarExpr`引数、`Switch`返します`Nothing`します。  
  
> [!NOTE]
>  引数リスト内の式は、関数呼び出しを含めることができます。 呼び出しの引数リストを準備の一環として`Switch`、Visual Basic コンパイラがすべての式ですべての関数を呼び出します。 つまり、引数リストの前の式がある場合は、呼び出されていない特定の関数には使用できません`True`します。  
  
   
  
## Examples  
 次の例では、`Switch`市区町村の名前に一致する言語の名前を返す関数。 必要があります`Option Strict`する`Off`します。  
  
 [!code-vb[VbVbalrFunctions#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#48)]  
  
 <xref:System.Diagnostics>名前空間は、というクラスも含まれています。 <xref:System.Diagnostics.Switch>、への呼び出し、`Switch`で関数を修飾する必要があります、<xref:Microsoft.VisualBasic>名前空間。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">引数の数は奇数です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/select-case-statement.md">Select...Case ステートメント (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/parameter-arrays.md">パラメーター配列</related>
      </Docs>
    </Member>
  </Members>
</Type>