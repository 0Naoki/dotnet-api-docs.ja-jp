<Type Name="Interaction" FullName="Microsoft.VisualBasic.Interaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8a258707b4384ccfe3e2a8bf0034b9587d97a5b3" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39839875" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Interaction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Interaction extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Interaction" />
  <TypeSignature Language="VB.NET" Value="Public Module Interaction" />
  <TypeSignature Language="C++ CLI" Value="public ref class Interaction sealed" />
  <TypeSignature Language="F#" Value="type Interaction = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="46820-101">
        <see langword="Interaction" /> モジュールに含まれるプロシージャを使って、オブジェクト、アプリケーション、システムと対話します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="46820-101">The <see langword="Interaction" /> module contains procedures used to interact with objects, applications, and systems.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-102">このモジュールは、Visual Basic 言語のキーワードと他のプログラムを実行、メソッドまたはプロパティの呼び出し、コンピューターのビープ音、コマンドライン文字列の提供、COM オブジェクトの操作およびダイアログ ボックスの制御をランタイム ライブラリ メンバーをサポートします。</span><span class="sxs-lookup"><span data-stu-id="46820-102">This module supports the Visual Basic language keywords and run-time library members that run other programs, call a method or property, sound a beep from the computer, provide a command-line string, manipulate COM objects, and control dialog boxes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-103">次の例では、`Shell`ユーザーによって指定されたアプリケーションを実行する関数。</span><span class="sxs-lookup"><span data-stu-id="46820-103">The following example uses the `Shell` function to run an application specified by the user.</span></span> <span data-ttu-id="46820-104">指定する<xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType>引数として 2 番目の標準サイズで、アプリケーションを開き、フォーカスが与えられます。</span><span class="sxs-lookup"><span data-stu-id="46820-104">Specifying <xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType> as the second argument opens the application in normal size and gives it the focus.</span></span>  
  
```vb  
Dim procID As Integer  
' Run calculator.  
procID = Shell("C:\Windows\system32\calc.exe", AppWinStyle.NormalFocus)  
' The preceding path is for Windows XP.  
' The Windows 2000 path is C:\WINNT\system32\calc.exe.  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="AppActivate">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="46820-105">既に実行中のアプリケーションをアクティブにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-105">Activates an application that is already running.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (int ProcessId);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(int32 ProcessId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (ProcessId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(int ProcessId);" />
      <MemberSignature Language="F#" Value="static member AppActivate : int -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate ProcessId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProcessId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ProcessId">
          <span data-ttu-id="46820-106">このプロセスに割り当てられた Win32 プロセス ID 番号を指定する <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-106">
              <see langword="Integer" /> specifying the Win32 process ID number assigned to this process.</span>
          </span>
          <span data-ttu-id="46820-107">
            <see cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" /> によって返される ID がゼロでなければ、その ID を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-107">You can use the ID returned by the <see cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />, provided it is not zero.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-108">既に実行中のアプリケーションをアクティブにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-108">Activates an application that is already running.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-109">使用する`AppActivate`に焦点を当てるアプリケーションのアクティブなウィンドウを表示します。</span><span class="sxs-lookup"><span data-stu-id="46820-109">You use `AppActivate` to bring an application's active window into focus.</span></span> <span data-ttu-id="46820-110">ハンドルまたはアクティブなウィンドウへの参照があるしなかったり、特定の時点で、どのウィンドウがアクティブに気付いて可能性があります。</span><span class="sxs-lookup"><span data-stu-id="46820-110">You might not have a handle or a reference to the active window, or even know which window is active at a given moment.</span></span> <span data-ttu-id="46820-111">このような場合は、使用することはできません、<xref:System.Windows.Forms.Control.Focus%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="46820-111">In such a case, you cannot use the <xref:System.Windows.Forms.Control.Focus%2A> method.</span></span>  
  
 <span data-ttu-id="46820-112">`AppActivate`関数の名前付きアプリケーションまたはウィンドウにフォーカスしますが、最大化または最小化するかどうかには影響しません。</span><span class="sxs-lookup"><span data-stu-id="46820-112">The `AppActivate` function changes the focus to the named application or window but does not affect whether it is maximized or minimized.</span></span> <span data-ttu-id="46820-113">ユーザーがいくつかの操作にフォーカスを変更したり、ウィンドウを閉じるときにアクティブ化されたアプリケーション ウィンドウからフォーカスが移動します。</span><span class="sxs-lookup"><span data-stu-id="46820-113">Focus moves away from the activated application window when the user takes some action to change the focus or close the window.</span></span> <span data-ttu-id="46820-114">使用することができます、`Shell`アプリケーションを起動し、ウィンドウ スタイルを設定する関数。</span><span class="sxs-lookup"><span data-stu-id="46820-114">You can use the `Shell` function to start an application and set the window style.</span></span>  
  
 <span data-ttu-id="46820-115">使用する場合、`Title`パラメーター、`AppActivate`大文字と小文字を使用しますが、それ以外の場合、タイトル バーの内容を完全に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="46820-115">If you use the `Title` parameter, `AppActivate` uses a case-insensitive comparison but otherwise requires an exact match with the contents of the title bar.</span></span> <span data-ttu-id="46820-116">まず、最上位レベルの windows を使用し、子ウィンドウを検索します。</span><span class="sxs-lookup"><span data-stu-id="46820-116">It first looks through the top-level windows and then through the child windows.</span></span> <span data-ttu-id="46820-117">スローの一致が見つからない場合、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="46820-117">If it cannot find a match, it throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="46820-118">使用することができます`AppActivate`windows を所有するプロセスでのみです。</span><span class="sxs-lookup"><span data-stu-id="46820-118">You can use `AppActivate` only with processes that own windows.</span></span> <span data-ttu-id="46820-119">ほとんどのコンソール アプリケーションでは、プロセスの一覧にないことを意味している windows を所有していない`AppActivate`検索します。</span><span class="sxs-lookup"><span data-stu-id="46820-119">Most console applications do not own windows, which means that they do not appear in the list of processes that `AppActivate` searches.</span></span> <span data-ttu-id="46820-120">コンソール アプリケーションから実行すると、システムは、アプリケーションを実行する別のプロセスを作成し、出力コンソール プロセスを返します。</span><span class="sxs-lookup"><span data-stu-id="46820-120">When running from a console application, the system creates a separate process to run the application and returns the output to the console process.</span></span> <span data-ttu-id="46820-121">その結果、現在のプロセス ID を要求するときに取得するコンソール アプリケーションのプロセス ID ではなく、このプロセスのプロセス ID</span><span class="sxs-lookup"><span data-stu-id="46820-121">Consequently, when you request the current process ID, you get the process ID of this separate process, rather than the console application's process ID.</span></span>  
  
 <span data-ttu-id="46820-122">実行時に、`AppActivate`関数のタイトルが一致する任意の実行中のアプリケーションをアクティブに`Title`と一致するプロセス id または`ProcessId`します。</span><span class="sxs-lookup"><span data-stu-id="46820-122">At run time, the `AppActivate` function activates any running application with a title that matches `Title` or with a process ID that matches `ProcessId`.</span></span> <span data-ttu-id="46820-123">タイトルの文字列で終わるすべてのアプリケーションがアクティブ化と完全に一致がない場合は、`Title`します。</span><span class="sxs-lookup"><span data-stu-id="46820-123">If there is no exact match, it activates any application whose title string ends with `Title`.</span></span> <span data-ttu-id="46820-124">という名前の 1 つ以上のアプリケーションがあるかどうかは`Title`、`AppActivate`関数が任意にアクティブ化するいずれかを選択します。</span><span class="sxs-lookup"><span data-stu-id="46820-124">If there is more than one application named `Title`, the `AppActivate` function arbitrarily chooses one to activate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46820-125">`AppActivate`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>レベルで、部分的に信頼された状況では、その実行に影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="46820-125">The `AppActivate` function requires `UIPermission` at the <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> level, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="46820-126">詳細については、「<xref:System.Security.Permissions.UIPermission>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="46820-126">For more information, see <xref:System.Security.Permissions.UIPermission> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-127">この例でのさまざまな使用、`AppActivate`アプリケーション ウィンドウをアクティブ化する関数。</span><span class="sxs-lookup"><span data-stu-id="46820-127">This example illustrates various uses of the `AppActivate` function to activate an application window.</span></span> <span data-ttu-id="46820-128">例がスローされます、メモ帳プロセスが実行されていない場合、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="46820-128">If a Notepad process is not running, the example throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="46820-129">`Shell`プロシージャでは、アプリケーションは、指定されたパスに前提としています。</span><span class="sxs-lookup"><span data-stu-id="46820-129">The `Shell` procedure assumes the applications are in the paths specified.</span></span>  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AppActivate">
      <MemberSignature Language="C#" Value="public static void AppActivate (string Title);" />
      <MemberSignature Language="ILAsm" Value=".method public static void AppActivate(string Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.AppActivate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppActivate (Title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppActivate(System::String ^ Title);" />
      <MemberSignature Language="F#" Value="static member AppActivate : string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.AppActivate Title" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Title">
          <span data-ttu-id="46820-130">アクティブにするアプリケーションのタイトル バーに表示されているタイトルを指定する <see langword="String" /> 式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-130">
              <see langword="String" /> expression specifying the title in the title bar of the application you want to activate.</span>
          </span>
          <span data-ttu-id="46820-131">起動時にアプリケーションに割り当てられたタイトルを使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-131">You can use the title assigned to the application when it was launched.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-132">既に実行中のアプリケーションをアクティブにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-132">Activates an application that is already running.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-133">使用する`AppActivate`に焦点を当てるアプリケーションのアクティブなウィンドウを表示します。</span><span class="sxs-lookup"><span data-stu-id="46820-133">You use `AppActivate` to bring an application's active window into focus.</span></span> <span data-ttu-id="46820-134">ハンドルまたはアクティブなウィンドウへの参照があるしなかったり、特定の時点で、どのウィンドウがアクティブに気付いて可能性があります。</span><span class="sxs-lookup"><span data-stu-id="46820-134">You might not have a handle or a reference to the active window, or even know which window is active at a given moment.</span></span> <span data-ttu-id="46820-135">このような場合は、使用することはできません、<xref:System.Windows.Forms.Control.Focus%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="46820-135">In such a case, you cannot use the <xref:System.Windows.Forms.Control.Focus%2A> method.</span></span>  
  
 <span data-ttu-id="46820-136">`AppActivate`関数の名前付きアプリケーションまたはウィンドウにフォーカスしますが、最大化または最小化するかどうかには影響しません。</span><span class="sxs-lookup"><span data-stu-id="46820-136">The `AppActivate` function changes the focus to the named application or window but does not affect whether it is maximized or minimized.</span></span> <span data-ttu-id="46820-137">ユーザーがいくつかの操作にフォーカスを変更したり、ウィンドウを閉じるときにアクティブ化されたアプリケーション ウィンドウからフォーカスが移動します。</span><span class="sxs-lookup"><span data-stu-id="46820-137">Focus moves away from the activated application window when the user takes some action to change the focus or close the window.</span></span> <span data-ttu-id="46820-138">使用することができます、`Shell`アプリケーションを起動し、ウィンドウ スタイルを設定する関数。</span><span class="sxs-lookup"><span data-stu-id="46820-138">You can use the `Shell` function to start an application and set the window style.</span></span>  
  
 <span data-ttu-id="46820-139">使用する場合、`Title`パラメーター、`AppActivate`大文字と小文字を使用しますが、それ以外の場合、タイトル バーの内容を完全に一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="46820-139">If you use the `Title` parameter, `AppActivate` uses a case-insensitive comparison but otherwise requires an exact match with the contents of the title bar.</span></span> <span data-ttu-id="46820-140">まず、最上位レベルの windows を使用し、子ウィンドウを検索します。</span><span class="sxs-lookup"><span data-stu-id="46820-140">It first looks through the top-level windows and then through the child windows.</span></span> <span data-ttu-id="46820-141">スローの一致が見つからない場合、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="46820-141">If it cannot find a match, it throws an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="46820-142">使用することができます`AppActivate`windows を所有するプロセスでのみです。</span><span class="sxs-lookup"><span data-stu-id="46820-142">You can use `AppActivate` only with processes that own windows.</span></span> <span data-ttu-id="46820-143">ほとんどのコンソール アプリケーションでは、プロセスの一覧にないことを意味している windows を所有していない`AppActivate`検索します。</span><span class="sxs-lookup"><span data-stu-id="46820-143">Most console applications do not own windows, which means that they do not appear in the list of processes that `AppActivate` searches.</span></span> <span data-ttu-id="46820-144">コンソール アプリケーションから実行すると、システムは、アプリケーションを実行する別のプロセスを作成し、出力コンソール プロセスを返します。</span><span class="sxs-lookup"><span data-stu-id="46820-144">When running from a console application, the system creates a separate process to run the application and returns the output to the console process.</span></span> <span data-ttu-id="46820-145">その結果、現在のプロセス ID を要求するときに取得するコンソール アプリケーションのプロセス ID ではなく、このプロセスのプロセス ID</span><span class="sxs-lookup"><span data-stu-id="46820-145">Consequently, when you request the current process ID, you get the process ID of this separate process, rather than the console application's process ID.</span></span>  
  
 <span data-ttu-id="46820-146">実行時に、`AppActivate`関数のタイトルが一致する任意の実行中のアプリケーションをアクティブに`Title`と一致するプロセス id または`ProcessId`します。</span><span class="sxs-lookup"><span data-stu-id="46820-146">At run time, the `AppActivate` function activates any running application with a title that matches `Title` or with a process ID that matches `ProcessId`.</span></span> <span data-ttu-id="46820-147">タイトルの文字列で終わるすべてのアプリケーションがアクティブ化と完全に一致がない場合は、`Title`します。</span><span class="sxs-lookup"><span data-stu-id="46820-147">If there is no exact match, it activates any application whose title string ends with `Title`.</span></span> <span data-ttu-id="46820-148">という名前の 1 つ以上のアプリケーションがあるかどうかは`Title`、`AppActivate`関数が任意にアクティブ化するいずれかを選択します。</span><span class="sxs-lookup"><span data-stu-id="46820-148">If there is more than one application named `Title`, the `AppActivate` function arbitrarily chooses one to activate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46820-149">`AppActivate`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>レベルで、部分的に信頼された状況では、その実行に影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="46820-149">The `AppActivate` function requires `UIPermission` at the <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> level, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="46820-150">詳細については、「<xref:System.Security.Permissions.UIPermission>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="46820-150">For more information, see <xref:System.Security.Permissions.UIPermission> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-151">この例でのさまざまな使用、`AppActivate`アプリケーション ウィンドウをアクティブ化する関数。</span><span class="sxs-lookup"><span data-stu-id="46820-151">This example illustrates various uses of the `AppActivate` function to activate an application window.</span></span> <span data-ttu-id="46820-152">例がスローされます、メモ帳プロセスが実行されていない場合、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="46820-152">If a Notepad process is not running, the example throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="46820-153">`Shell`プロシージャでは、アプリケーションは、指定されたパスに前提としています。</span><span class="sxs-lookup"><span data-stu-id="46820-153">The `Shell` procedure assumes the applications are in the paths specified.</span></span>  
  
 [!code-vb[VbVbalrCatRef#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberSignature Language="F#" Value="static member Beep : unit -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.Beep " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="46820-154">コンピューターのスピーカーを鳴らします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-154">Sounds a tone through the computer's speaker.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-155">ピッチおよびビープ音の期間は、ハードウェアおよびシステム ソフトウェアに依存し、そのため、コンピューターによって異なります。</span><span class="sxs-lookup"><span data-stu-id="46820-155">The pitch and duration of the beep depend on your hardware and system software and therefore vary among computers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46820-156">`Beep`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>レベルで、部分的に信頼された状況では、その実行に影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="46820-156">The `Beep` function requires `UIPermission` at the <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> level, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="46820-157">詳細については、「<xref:System.Security.Permissions.UIPermission>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="46820-157">For more information, see <xref:System.Security.Permissions.UIPermission>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-158">この例では、`Beep`を通じてコンピューターのスピーカーの音を鳴らす関数。</span><span class="sxs-lookup"><span data-stu-id="46820-158">This example uses the `Beep` function to sound a tone through the computer's speaker.</span></span>  
  
 [!code-vb[VbVbalrCatRef#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallByName">
      <MemberSignature Language="C#" Value="public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, params object[] Args);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CallByName(object ObjectRef, string ProcName, valuetype Microsoft.VisualBasic.CallType UseCallType, object[] Args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CallByName (ObjectRef As Object, ProcName As String, UseCallType As CallType, ParamArray Args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CallByName(System::Object ^ ObjectRef, System::String ^ ProcName, Microsoft::VisualBasic::CallType UseCallType, ... cli::array &lt;System::Object ^&gt; ^ Args);" />
      <MemberSignature Language="F#" Value="static member CallByName : obj * string * Microsoft.VisualBasic.CallType * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CallByName (ObjectRef, ProcName, UseCallType, Args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ObjectRef" Type="System.Object" />
        <Parameter Name="ProcName" Type="System.String" />
        <Parameter Name="UseCallType" Type="Microsoft.VisualBasic.CallType" />
        <Parameter Name="Args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ObjectRef">
          <span data-ttu-id="46820-159">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-159">Required.</span>
          </span>
          <span data-ttu-id="46820-160">
            <see langword="Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-160">
              <see langword="Object" />.</span>
          </span>
          <span data-ttu-id="46820-161">プロパティまたはメソッドを公開しているオブジェクトへのポインターです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-161">A pointer to the object exposing the property or method.</span>
          </span>
        </param>
        <param name="ProcName">
          <span data-ttu-id="46820-162">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-162">Required.</span>
          </span>
          <span data-ttu-id="46820-163">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-163">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="46820-164">オブジェクトのプロパティまたはメソッドの名前を含む文字列式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-164">A string expression containing the name of the property or method on the object.</span>
          </span>
        </param>
        <param name="UseCallType">
          <span data-ttu-id="46820-165">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-165">Required.</span>
          </span>
          <span data-ttu-id="46820-166">呼び出されるプロシージャの型を表す、<see cref="T:Microsoft.VisualBasic.CallType" /> 型の列挙体のメンバーです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-166">An enumeration member of type <see cref="T:Microsoft.VisualBasic.CallType" /> representing the type of procedure being called.</span>
          </span>
          <span data-ttu-id="46820-167">
            <see langword="CallType" /> の値は、<see langword="Method" />、<see langword="Get" />、<see langword="Set" /> のいずれかになります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-167">The value of <see langword="CallType" /> can be <see langword="Method" />, <see langword="Get" />, or <see langword="Set" />.</span>
          </span>
        </param>
        <param name="Args">
          <span data-ttu-id="46820-168">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-168">Optional.</span>
          </span>
          <span data-ttu-id="46820-169">
            <see langword="ParamArray" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-169">
              <see langword="ParamArray" />.</span>
          </span>
          <span data-ttu-id="46820-170">呼び出されるプロパティまたはメソッドに渡される引数を格納するパラメーター配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-170">A parameter array containing the arguments to be passed to the property or method being called.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-171">オブジェクトに対してメソッドを実行するか、オブジェクトのプロパティを設定または取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-171">Executes a method on an object, or sets or returns a property on an object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-172">オブジェクトに対してメソッドを実行するか、オブジェクトのプロパティを設定または取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-172">Executes a method on an object, or sets or returns a property on an object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-173">`CallByName`にプロパティを取得するプロパティを設定し、メソッドの実行時に関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="46820-173">The `CallByName` function is used at runtime to get a property, set a property, or invoke a method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-174">次の例では、最初の行を使用して`CallByName`を設定する、`Text`テキスト ボックスのプロパティの値を取得する 2 番目の行、`Text`プロパティ、および 3 番目の行を呼び出す、`Move`テキスト ボックスを移動するメソッド。</span><span class="sxs-lookup"><span data-stu-id="46820-174">In the following example, the first line uses `CallByName` to set the `Text` property of a text box, the second line retrieves the value of the `Text` property, and the third line invokes the `Move` method to move the text box.</span></span>  
  
 [!code-vb[VbVbalrFunctions#99](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#99)]  
  
 [!code-vb[VbVbalrFunctions#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#20)]  
  
 <span data-ttu-id="46820-175">次の例では、`CallByName`関数を呼び出す、`Add`と`Item`コレクション オブジェクトのメソッド。</span><span class="sxs-lookup"><span data-stu-id="46820-175">The next example uses the `CallByName` function to invoke the `Add` and `Item` methods of a collection object.</span></span>  
  
 [!code-vb[VbVbalrFunctions#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46820-176">
            <paramref name="UseCallType" /> の値が無効です。<see langword="Method" />、<see langword="Get" />、または <see langword="Set" /> のいずれかを指定してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-176">Invalid <paramref name="UseCallType" /> value; must be <see langword="Method" />, <see langword="Get" />, or <see langword="Set" />.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.CallType" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public static object Choose (double Index, params object[] Choice);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Choose(float64 Index, object[] Choice) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Index As Double, ParamArray Choice As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Choose(double Index, ... cli::array &lt;System::Object ^&gt; ^ Choice);" />
      <MemberSignature Language="F#" Value="static member Choose : double * obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Choose (Index, Choice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Double" />
        <Parameter Name="Choice" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="46820-177">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-177">Required.</span>
          </span>
          <span data-ttu-id="46820-178">
            <see langword="Double" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-178">
              <see langword="Double" />.</span>
          </span>
          <span data-ttu-id="46820-179">1 から <c>Choice</c> 引数で渡された要素の数までの範囲の値を返す数式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-179">Numeric expression that results in a value between 1 and the number of elements passed in the <c>Choice</c> argument.</span>
          </span>
        </param>
        <param name="Choice">
          <span data-ttu-id="46820-180">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-180">Required.</span>
          </span>
          <span data-ttu-id="46820-181">
            <see langword="Object" /> パラメーター配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-181">
              <see langword="Object" /> parameter array.</span>
          </span>
          <span data-ttu-id="46820-182">
            <see langword="Object" /> データ型、<see langword="Object" /> 変数または式のコンマ区切りの一覧、あるいは <see langword="Object" /> 要素の 1 次元配列として評価される、単一の変数または式を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-182">You can supply either a single variable or an expression that evaluates to the <see langword="Object" /> data type, to a list of <see langword="Object" /> variables or expressions separated by commas, or to a single-dimensional array of <see langword="Object" /> elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-183">引数のリストから値を選択し、返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-183">Selects and returns a value from a list of arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-184">引数のリストから値を選択し、返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-184">Selects and returns a value from a list of arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-185">`Choose`関数に渡される一覧のメンバーを返します`Choice()`の値に基づいて、`Index`します。</span><span class="sxs-lookup"><span data-stu-id="46820-185">The `Choose` function returns a member of the list passed in `Choice()`, based on the value of `Index`.</span></span> <span data-ttu-id="46820-186">一覧の最初のメンバーが選択されているときに`Index`は 1 です。</span><span class="sxs-lookup"><span data-stu-id="46820-186">The first member of the list is selected when `Index` is 1.</span></span> <span data-ttu-id="46820-187">一覧の最後のメンバーが選択されているときに`Index`は`UBound`(`Choice()`)。</span><span class="sxs-lookup"><span data-stu-id="46820-187">The last member of the list is selected when `Index` is `UBound`(`Choice()`).</span></span> <span data-ttu-id="46820-188">場合`Index`が、これらの制限の範囲外です`Choose`返します`Nothing`します。</span><span class="sxs-lookup"><span data-stu-id="46820-188">If `Index` is outside these limits, `Choose` returns `Nothing`.</span></span>  
  
 <span data-ttu-id="46820-189">場合`Index`整数を指定のない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="46820-189">If `Index` is not a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
 <span data-ttu-id="46820-190">使用することができます`Choose`候補のリスト内の値を検索します。</span><span class="sxs-lookup"><span data-stu-id="46820-190">You can use `Choose` to look up a value in a list of possibilities.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46820-191">引数リスト内の式は、関数呼び出しを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="46820-191">The expressions in the argument list can include function calls.</span></span> <span data-ttu-id="46820-192">呼び出しの引数リストを準備の一環として`Choose`、Visual Basic コンパイラがすべての式ですべての関数を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="46820-192">As part of preparing the argument list for the call to `Choose`, the Visual Basic compiler calls every function in every expression.</span></span> <span data-ttu-id="46820-193">これでさまざまな式が選択されている場合は、呼び出されていない特定の関数に依存できないことを意味`Index`します。</span><span class="sxs-lookup"><span data-stu-id="46820-193">This means that you cannot rely on a particular function not being called if a different expression is selected by `Index`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-194">この例では、`Choose`関数内のプロシージャに渡されたインデックスへの応答に名前を表示する、`Ind`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="46820-194">This example uses the `Choose` function to display a name in response to an index passed into the procedure in the `Ind` parameter.</span></span>  
  
 [!code-vb[VbVbalrFunctions#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public static string Command ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Command() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Command" />
      <MemberSignature Language="VB.NET" Value="Public Function Command () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Command();" />
      <MemberSignature Language="F#" Value="static member Command : unit -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Command " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="46820-195">Visual Basic を起動するために使用されるコマンド ライン、または Visual Basic を使って開発した実行可能プログラムの引数の部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-195">Returns the argument portion of the command line used to start Visual Basic or an executable program developed with Visual Basic.</span>
          </span>
          <span data-ttu-id="46820-196">
            <see langword="My" /> 機能は、<see langword="Command" /> 関数よりも高い生産性とパフォーマンスを実現します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-196">The <see langword="My" /> feature provides greater productivity and performance than the <see langword="Command" /> function.</span>
          </span>
          <span data-ttu-id="46820-197">詳細については、「<see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-197">For more information, see <see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-198">Visual Basic を起動するために使用されるコマンド ライン、または Visual Basic を使って開発した実行可能プログラムの引数の部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-198">Returns the argument portion of the command line used to start Visual Basic or an executable program developed with Visual Basic.</span>
          </span>
          <span data-ttu-id="46820-199">
            <see langword="My" /> 機能は、<see langword="Command" /> 関数よりも高い生産性とパフォーマンスを実現します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-199">The <see langword="My" /> feature provides greater productivity and performance than the <see langword="Command" /> function.</span>
          </span>
          <span data-ttu-id="46820-200">詳細については、「<see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-200">For more information, see <see cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-201">引数が返された後は、スペース、前方または後方のスラッシュ、ハイフン、または引用符を分割または個別のパラメーターの文字列を検索するなどの一般的な区切り記号を検索することができます。</span><span class="sxs-lookup"><span data-stu-id="46820-201">After the arguments are returned, you can search for common delimiters, such as spaces, backward or forward slashes, hyphens, or quotation marks, to split or search the string for individual parameters.</span></span>  
  
 <span data-ttu-id="46820-202">Visual Basic を使用して開発および .exe ファイルにコンパイルされたアプリケーションの`Command`関数は、このフォームでのコマンド ラインで、アプリケーションの名前の後に表示される任意の引数を返します:`MyApp(cmdlineargs)`します。</span><span class="sxs-lookup"><span data-stu-id="46820-202">For applications developed with Visual Basic and compiled to an .exe file, the `Command` function returns any arguments that appear after the name of the application on the command line, in this form: `MyApp(cmdlineargs)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-203">この例では、`Command`配列を格納しているオブジェクトのコマンドライン引数を返す関数。</span><span class="sxs-lookup"><span data-stu-id="46820-203">This example uses the `Command` function to return the command-line arguments in an object that contains an array.</span></span>  
  
 [!code-vb[VbVbalrCatRef#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Environment.GetCommandLineArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public static object CreateObject (string ProgId, string ServerName = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CreateObject(string ProgId, string ServerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (ProgId As String, Optional ServerName As String = &quot;&quot;) As Object" />
      <MemberSignature Language="F#" Value="static member CreateObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.CreateObject (ProgId, ServerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="ServerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ProgId">
          <span data-ttu-id="46820-204">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-204">Required.</span>
          </span>
          <span data-ttu-id="46820-205">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-205">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="46820-206">作成するオブジェクトのプログラム ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-206">The program ID of the object to create.</span>
          </span>
        </param>
        <param name="ServerName">
          <span data-ttu-id="46820-207">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-207">Optional.</span>
          </span>
          <span data-ttu-id="46820-208">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-208">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="46820-209">オブジェクトが作成されるネットワーク サーバーの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-209">The name of the network server where the object will be created.</span>
          </span>
          <span data-ttu-id="46820-210">
            <c>ServerName</c> が空の文字列 ("") の場合、ローカル コンピューターが使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-210">If <c>ServerName</c> is an empty string (""), the local computer is used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-211">COM オブジェクトへの参照を作成して返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-211">Creates and returns a reference to a COM object.</span>
          </span>
          <span data-ttu-id="46820-212">Visual Basic では、クラスが COM コンポーネントとして明示的に公開されない限り、<see langword="CreateObject" /> を使用してそのクラスのインスタンスを作成することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-212">
              <see langword="CreateObject" /> cannot be used to create instances of classes in Visual Basic unless those classes are explicitly exposed as COM components.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-213">COM オブジェクトへの参照を作成して返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-213">Creates and returns a reference to a COM object.</span>
          </span>
          <span data-ttu-id="46820-214">Visual Basic では、クラスが COM コンポーネントとして明示的に公開されない限り、<see langword="CreateObject" /> を使用してそのクラスのインスタンスを作成することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-214">
              <see langword="CreateObject" /> cannot be used to create instances of classes in Visual Basic unless those classes are explicitly exposed as COM components.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-215">COM コンポーネントのインスタンスを作成するには、によって返されるオブジェクトを割り当てる`CreateObject`オブジェクト変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="46820-215">To create an instance of a COM component, assign the object returned by `CreateObject` to an object variable:</span></span>  
  
```vb  
Sub CreateADODB()  
   Dim adoApp As Object  
   adoApp = CreateObject("ADODB.Connection")  
End Sub  
```  
  
 <span data-ttu-id="46820-216">使用して、返されたオブジェクトを格納するオブジェクト変数の型、アプリケーションのパフォーマンスに影響を与えることができます。</span><span class="sxs-lookup"><span data-stu-id="46820-216">The type of object variable you use to store the returned object can affect your application's performance.</span></span> <span data-ttu-id="46820-217">オブジェクト変数を宣言する、`As Object`句がどの型のオブジェクトへの参照を含むことのできる変数を作成します。</span><span class="sxs-lookup"><span data-stu-id="46820-217">Declaring an object variable with the `As Object` clause creates a variable that can contain a reference to any type of object.</span></span> <span data-ttu-id="46820-218">ただし、その変数を使用してオブジェクトへのアクセスは*遅延バインディング*プログラムの実行時に、バインディングが発生します。</span><span class="sxs-lookup"><span data-stu-id="46820-218">However, access to the object through that variable is *late-bound*, that is, the binding occurs when your program runs.</span></span> <span data-ttu-id="46820-219">アプリケーションのパフォーマンスの低下など、遅延バインディングを避ける必要があります多くの理由があります。</span><span class="sxs-lookup"><span data-stu-id="46820-219">There are many reasons you should avoid late binding, including slower application performance.</span></span>  
  
 <span data-ttu-id="46820-220">事前バインディングをオブジェクト変数を作成することができます: つまり、バインド、プログラムのコンパイル時にします。</span><span class="sxs-lookup"><span data-stu-id="46820-220">You can create an object variable that results in early binding—that is, binding when the program is compiled.</span></span> <span data-ttu-id="46820-221">これを行うに、オブジェクトのタイプ ライブラリへの参照を追加、 **COM**のタブ、**参照の追加** ダイアログ ボックスで、**プロジェクト**メニュー。</span><span class="sxs-lookup"><span data-stu-id="46820-221">To do so, add a reference to the type library for your object from the **COM** tab of the **Add Reference** dialog box on the **Project** menu.</span></span> <span data-ttu-id="46820-222">オブジェクトの特定の型のオブジェクト変数を宣言します。</span><span class="sxs-lookup"><span data-stu-id="46820-222">Then declare the object variable of the specific type of your object.</span></span> <span data-ttu-id="46820-223">ほとんどの場合を使用する方が効率的、`Dim`ステートメントと使用するよりも、オブジェクトを作成する場合は、プライマリ相互運用機能アセンブリ、`CreateObject`関数。</span><span class="sxs-lookup"><span data-stu-id="46820-223">In most cases, it is more efficient to use the `Dim` statement and a primary interop assembly to create objects than it is to use the `CreateObject` function.</span></span>  
  
## <a name="interacting-with-unmanaged-code"></a><span data-ttu-id="46820-224">アンマネージ コードと対話します。</span><span class="sxs-lookup"><span data-stu-id="46820-224">Interacting with Unmanaged Code</span></span>  
 <span data-ttu-id="46820-225">別の問題は、COM オブジェクトがアンマネージ コードを使用する、共通言語ランタイムの利点もコード。</span><span class="sxs-lookup"><span data-stu-id="46820-225">Another issue is that COM objects use unmanaged code — code without the benefit of the common language runtime.</span></span> <span data-ttu-id="46820-226">複雑さの程度があるアンマネージ コードと Visual Basic のマネージ コードを組み合わせると、COM から</span><span class="sxs-lookup"><span data-stu-id="46820-226">There is a fair degree of complexity involved in mixing the managed code of Visual Basic with unmanaged code from COM.</span></span> <span data-ttu-id="46820-227">COM オブジェクトへの参照を追加するときに Visual Basic 検索; ライブラリのプライマリ相互運用機能アセンブリ (PIA)いずれかを検出した場合、それを使用します。</span><span class="sxs-lookup"><span data-stu-id="46820-227">When you add a reference to a COM object, Visual Basic searches for a primary interop assembly (PIA) for that library; if it finds one, then it uses it.</span></span> <span data-ttu-id="46820-228">PIA が見つからない場合は、ローカルの相互運用性クラスは、COM ライブラリの各クラスを含む相互運用アセンブリが作成されます。</span><span class="sxs-lookup"><span data-stu-id="46820-228">If it does not find a PIA, then it creates an interoperability assembly that contains local interoperability classes for each class in the COM library.</span></span> <span data-ttu-id="46820-229">詳細については、次を参照してください。 [.NET Framework アプリケーションにおける COM 相互運用性](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md)します。</span><span class="sxs-lookup"><span data-stu-id="46820-229">For more information, see [COM Interoperability in .NET Framework Applications](~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md).</span></span>  
  
 <span data-ttu-id="46820-230">一般に厳密にバインドされたオブジェクトと可能な限りのプライマリ相互運用機能アセンブリを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="46820-230">You should generally use strongly bound objects and primary interop assemblies whenever possible.</span></span> <span data-ttu-id="46820-231">使用して以下の例、`CreateObject`デモについては、Microsoft Office のオブジェクトを持つ関数が目的でのみ提供します。</span><span class="sxs-lookup"><span data-stu-id="46820-231">The examples below use the `CreateObject` function with Microsoft Office objects for demonstration purposes only.</span></span> <span data-ttu-id="46820-232">ただし、これらのオブジェクトは、使いやすい信頼性の高い適切なプライマリ相互運用機能アセンブリで使用する場合は。</span><span class="sxs-lookup"><span data-stu-id="46820-232">However, these objects are easier to use and more reliable when used with the appropriate primary interop assembly.</span></span>  
  
## <a name="creating-an-object-on-a-remote-computer"></a><span data-ttu-id="46820-233">リモート コンピューター上のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="46820-233">Creating an Object on a Remote Computer</span></span>  
 <span data-ttu-id="46820-234">リモート ネットワーク コンピューター上にオブジェクトを作成するには、コンピューターの名前を渡すことによって、`ServerName`の引数、`CreateObject`関数。</span><span class="sxs-lookup"><span data-stu-id="46820-234">You can create an object on a remote networked computer by passing the name of the computer to the `ServerName` argument of the `CreateObject` function.</span></span> <span data-ttu-id="46820-235">その名前は、共有名のコンピューター名の部分と同じ: という名前の共有の"\\\MyServer\Public、"`ServerName`は"myserver"の部分。</span><span class="sxs-lookup"><span data-stu-id="46820-235">That name is the same as the Machine Name portion of a share name: for a share named "\\\MyServer\Public," `ServerName` is "MyServer."</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46820-236">COM のマニュアルを参照してください (Microsoft Developer Network を参照してください)、アプリケーションにアクセスできるようにリモート ネットワークに接続されたコンピューター上の詳細についてはします。</span><span class="sxs-lookup"><span data-stu-id="46820-236">Refer to COM documentation (see Microsoft Developer Network) for additional information on making an application accessible on a remote networked computer.</span></span> <span data-ttu-id="46820-237">アプリケーションのレジストリ キーを追加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="46820-237">You may need to add a registry key for your application.</span></span>  
  
 <span data-ttu-id="46820-238">次のコードを返しますという名前のリモート コンピューターで実行されている Excel のインスタンスのバージョン番号`MyServer`:</span><span class="sxs-lookup"><span data-stu-id="46820-238">The following code returns the version number of an instance of Excel running on a remote computer named `MyServer`:</span></span>  
  
```vb  
Sub CreateRemoteExcelObj()  
    Dim xlApp As Object  
    ' Replace string "\\MyServer" with name of the remote computer.  
    xlApp = CreateObject("Excel.Application", "\\MyServer")  
    MsgBox(xlApp.Version)  
End Sub  
```  
  
 <span data-ttu-id="46820-239">リモート サーバー名が正しい場合、またはが利用できない場合は、実行時エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="46820-239">If the remote server name is incorrect, or if it is unavailable, a run-time error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46820-240">使用`CreateObject`オブジェクトの現在のインスタンスがない場合。</span><span class="sxs-lookup"><span data-stu-id="46820-240">Use `CreateObject` when there is no current instance of the object.</span></span> <span data-ttu-id="46820-241">オブジェクトのインスタンスが既に実行されている場合は、新しいインスタンスを開始すると、され、指定した型のオブジェクトが作成されます。</span><span class="sxs-lookup"><span data-stu-id="46820-241">If an instance of the object is already running, a new instance is started, and an object of the specified type is created.</span></span> <span data-ttu-id="46820-242">現在のインスタンスを使用したり、アプリケーションを起動し、ファイルを読み込むを使用して、`GetObject`関数。</span><span class="sxs-lookup"><span data-stu-id="46820-242">To use the current instance, or to start the application and have it load a file, use the `GetObject` function.</span></span> <span data-ttu-id="46820-243">単一インスタンスのオブジェクトとして登録されているオブジェクト場合、オブジェクトのインスタンスを 1 つだけ作成方法に関係なく何度も`CreateObject`を実行します。</span><span class="sxs-lookup"><span data-stu-id="46820-243">If an object has registered itself as a single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is executed.</span></span>  
  
## <a name="creating-framework-objects"></a><span data-ttu-id="46820-244">Framework のオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="46820-244">Creating Framework Objects</span></span>  
 <span data-ttu-id="46820-245">使用することができます、 `CreateObject` COM オブジェクトを作成するためのものです。</span><span class="sxs-lookup"><span data-stu-id="46820-245">You can use the `CreateObject` function only to create a COM object.</span></span> <span data-ttu-id="46820-246">.NET Framework オブジェクトを作成するため正確な同等のメカニズムはありません、<xref:System.Activator>で、<xref:System>名前空間には、ローカルまたはリモート オブジェクトを作成するメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="46820-246">While there is no exact equivalent mechanism for creating a .NET Framework object, the <xref:System.Activator> in the <xref:System> namespace contains methods to create local or remote objects.</span></span> <span data-ttu-id="46820-247">具体的には、<xref:System.Activator.CreateInstance%2A>メソッドまたは<xref:System.Activator.CreateInstanceFrom%2A>メソッドが役立つことがあります。</span><span class="sxs-lookup"><span data-stu-id="46820-247">In particular, the <xref:System.Activator.CreateInstance%2A> method or the <xref:System.Activator.CreateInstanceFrom%2A> method might be useful.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="46820-248">`CreateObject`関数が、アンマネージ コード アクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="46820-248">The `CreateObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations.</span></span> <span data-ttu-id="46820-249">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="46820-249">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-250">次の例では、 `CreateObject` Microsoft Excel ワークシートを作成する関数をファイルにワークシートを保存します。</span><span class="sxs-lookup"><span data-stu-id="46820-250">The following example uses the `CreateObject` function to create a Microsoft Excel worksheet and saves the worksheet to a file.</span></span> <span data-ttu-id="46820-251">この例を使用するには、このプログラムを実行するコンピューターに Excel をインストールする必要があります。</span><span class="sxs-lookup"><span data-stu-id="46820-251">To use this example, Excel must be installed on the computer where this program runs.</span></span> <span data-ttu-id="46820-252">またからタイプ ライブラリへの参照を追加する必要があります、 **COM**のタブ、**参照の追加** ダイアログ ボックスで、**プロジェクト**メニュー。</span><span class="sxs-lookup"><span data-stu-id="46820-252">Also, you must add a reference to the type library from the **COM** tab of the **Add Reference** dialog box on the **Project** menu.</span></span> <span data-ttu-id="46820-253">タイプ ライブラリの名前は、コンピューターにインストールされている Excel のバージョンによって異なります。</span><span class="sxs-lookup"><span data-stu-id="46820-253">The name of the type library varies depending on the version of Excel installed on your computer.</span></span> <span data-ttu-id="46820-254">たとえば、Microsoft Excel 2002 のタイプ ライブラリの名前は**Microsoft Excel 10.0 Object Library**します。</span><span class="sxs-lookup"><span data-stu-id="46820-254">For example, the type library for Microsoft Excel 2002 is named **Microsoft Excel 10.0 Object Library**.</span></span>  
  
 [!code-vb[VbVbalrExcelObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="46820-255">サーバーを利用できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-255">Server is unavailable</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="46820-256">指定された型のオブジェクトが存在していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-256">No object of the specified type exists</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.Activator" />
        <altmember cref="Overload:System.Activator.CreateInstance" />
        <altmember cref="Overload:System.Activator.CreateInstanceFrom" />
      </Docs>
    </Member>
    <Member MemberName="DeleteSetting">
      <MemberSignature Language="C#" Value="public static void DeleteSetting (string AppName, string Section = null, string Key = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteSetting(string AppName, string Section, string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteSetting (AppName As String, Optional Section As String = null, Optional Key As String = null)" />
      <MemberSignature Language="F#" Value="static member DeleteSetting : string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.DeleteSetting (AppName, Section, Key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">
          <span data-ttu-id="46820-257">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-257">Required.</span>
          </span>
          <span data-ttu-id="46820-258">セクションまたはキーの設定を適用するアプリケーションまたはプロジェクトの名前が含まれている <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-258">
              <see langword="String" /> expression containing the name of the application or project to which the section or key setting applies.</span>
          </span>
        </param>
        <param name="Section">
          <span data-ttu-id="46820-259">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-259">Required.</span>
          </span>
          <span data-ttu-id="46820-260">キーの設定を削除するセクションの名前を含む <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-260">
              <see langword="String" /> expression containing the name of the section from which the key setting is being deleted.</span>
          </span>
          <span data-ttu-id="46820-261">
            <c>AppName</c> と <c>Section</c> のみを指定した場合、指定したセクションとそれに関連するキー設定がすべて削除されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-261">If only <c>AppName</c> and <c>Section</c> are provided, the specified section is deleted along with all related key settings.</span>
          </span>
        </param>
        <param name="Key">
          <span data-ttu-id="46820-262">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-262">Optional.</span>
          </span>
          <span data-ttu-id="46820-263">削除するキー設定の名前を含む <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-263">
              <see langword="String" /> expression containing the name of the key setting being deleted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-264">Windows レジストリのアプリケーションのエントリから、セクションやキーの設定を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-264">Deletes a section or key setting from an application's entry in the Windows registry.</span>
          </span>
          <span data-ttu-id="46820-265">
            <see langword="My" /> 機能を使用すると、<see langword="DeleteSetting" /> 関数を使用した場合よりも生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-265">The <see langword="My" /> feature gives you greater productivity and performance in registry operations than the <see langword="DeleteSetting" /> function.</span>
          </span>
          <span data-ttu-id="46820-266">詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-266">For more information, see <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-267">すべての引数が指定されている場合は、指定された設定が削除されます。</span><span class="sxs-lookup"><span data-stu-id="46820-267">If all arguments are provided, the specified setting is deleted.</span></span> <span data-ttu-id="46820-268">使用しようとした場合、実行時エラーが発生した`DeleteSetting`存在しないセクションまたはキーの設定。</span><span class="sxs-lookup"><span data-stu-id="46820-268">A run-time error occurs if you attempt to use `DeleteSetting` on a nonexistent section or key setting.</span></span>  
  
 <span data-ttu-id="46820-269">`DeleteSetting` ユーザーは、下で動作するためログインする必要があります、`HKEY_LOCAL_USER`レジストリ キーは、ユーザーが対話的にログオンするまでアクティブではありません。</span><span class="sxs-lookup"><span data-stu-id="46820-269">`DeleteSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.</span></span>  
  
 <span data-ttu-id="46820-270">いずれかで (Mtx.exe) などの非対話型プロセスからアクセスされるレジストリ設定を格納する必要があります、`HKEY_LOCAL_MACHINE\Software\`または`HKEY_USER\DEFAULT\Software`レジストリ キー。</span><span class="sxs-lookup"><span data-stu-id="46820-270">Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\Software\` or the `HKEY_USER\DEFAULT\Software` registry keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-271">次の例を使用して、`SaveSetting`の Windows レジストリにエントリを作成する手順、`MyApp`アプリケーション、および、使用、`DeleteSetting`それらを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="46820-271">The following example first uses the `SaveSetting` procedure to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them.</span></span> <span data-ttu-id="46820-272">ありません`Key`引数を指定すると、全体`Startup`セクション名およびそのキーのすべてを含む、セクションが削除されます。</span><span class="sxs-lookup"><span data-stu-id="46820-272">Because no `Key` argument is specified, the whole `Startup` section is deleted, including the section name and all of its keys.</span></span>  
  
 [!code-vb[VbVbalrCatRef#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46820-273">ユーザーがログインしていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-273">User is not logged in.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Environ">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="46820-274">オペレーティング システム環境変数に関連付けられた文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-274">Returns the string associated with an operating-system environment variable.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(int Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="46820-275">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-275">Required.</span>
          </span>
          <span data-ttu-id="46820-276">環境変数の名前を含む文字列、または環境文字列テーブルにおける環境文字列の番号に対応する整数値を評価する式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-276">Expression that evaluates either a string containing the name of an environment variable, or an integer corresponding to the numeric order of an environment string in the environment-string table.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-277">オペレーティング システム環境変数に関連付けられた文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-277">Returns the string associated with an operating-system environment variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-278">オペレーティング システム環境変数に関連付けられた文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-278">Returns the string associated with an operating-system environment variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-279">場合`Expression`文字列を含む、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>関数は、指定された環境文字列に割り当てられているテキストを返します: 環境変数の環境文字列テーブルに等号 (=) の後のテキストは、します。</span><span class="sxs-lookup"><span data-stu-id="46820-279">If `Expression` contains a string, the <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function returns the text assigned to the specified environment string—that is, the text following the equal sign (=) in the environment-string table for that environment variable.</span></span> <span data-ttu-id="46820-280">場合、文字列で`Expression`環境文字列テーブル、長さ 0 の文字列内に見つかりません ("") が返されます。</span><span class="sxs-lookup"><span data-stu-id="46820-280">If the string in `Expression` cannot be found in the environment-string table, a zero-length string ("") is returned.</span></span>  
  
 <span data-ttu-id="46820-281">場合`Expression`環境文字列テーブル内の数値の位置が返されることを占有している文字列、整数が含まれています。</span><span class="sxs-lookup"><span data-stu-id="46820-281">If `Expression` contains an integer, the string occupying that numeric position in the environment-string table is returned.</span></span> <span data-ttu-id="46820-282">この場合、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>のすべての環境変数の名前を含む、テキストを返します。</span><span class="sxs-lookup"><span data-stu-id="46820-282">In this case, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> returns all of the text, including the name of the environment variable.</span></span> <span data-ttu-id="46820-283">指定された位置に文字列の環境がない場合<xref:Microsoft.VisualBasic.Interaction.Environ%2A>長さ 0 の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="46820-283">If there is no environment string in the specified position, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> returns a zero-length string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="46820-284"><xref:Microsoft.VisualBasic.Interaction.Environ%2A>関数が、環境アクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="46820-284">The <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function requires environment permission, which might affect its execution in partial-trust situations.</span></span> <span data-ttu-id="46820-285">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="46820-285">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-286">この例では、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>エントリ数と長さを指定する関数、`PATH`環境文字列テーブルからのステートメント。</span><span class="sxs-lookup"><span data-stu-id="46820-286">This example uses the <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function to supply the entry number and length of the `PATH` statement from the environment-string table.</span></span>  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46820-287">
            <paramref name="Expression" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-287">
              <paramref name="Expression" /> is missing.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Environ">
      <MemberSignature Language="C#" Value="public static string Environ (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Environ(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Environ(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Environ (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Environ(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Environ : string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Environ Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="46820-288">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-288">Required.</span>
          </span>
          <span data-ttu-id="46820-289">環境変数の名前を含む文字列、または環境文字列テーブルにおける環境文字列の番号に対応する整数値を評価する式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-289">Expression that evaluates either a string containing the name of an environment variable, or an integer corresponding to the numeric order of an environment string in the environment-string table.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-290">オペレーティング システム環境変数に関連付けられた文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-290">Returns the string associated with an operating-system environment variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-291">オペレーティング システム環境変数に関連付けられた文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-291">Returns the string associated with an operating-system environment variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-292">場合`Expression`文字列を含む、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>関数は、指定された環境文字列に割り当てられているテキストを返します: 環境変数の環境文字列テーブルに等号 (=) の後のテキストは、します。</span><span class="sxs-lookup"><span data-stu-id="46820-292">If `Expression` contains a string, the <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function returns the text assigned to the specified environment string—that is, the text following the equal sign (=) in the environment-string table for that environment variable.</span></span> <span data-ttu-id="46820-293">場合、文字列で`Expression`環境文字列テーブル、長さ 0 の文字列内に見つかりません ("") が返されます。</span><span class="sxs-lookup"><span data-stu-id="46820-293">If the string in `Expression` cannot be found in the environment-string table, a zero-length string ("") is returned.</span></span>  
  
 <span data-ttu-id="46820-294">場合`Expression`環境文字列テーブル内の数値の位置が返されることを占有している文字列、整数が含まれています。</span><span class="sxs-lookup"><span data-stu-id="46820-294">If `Expression` contains an integer, the string occupying that numeric position in the environment-string table is returned.</span></span> <span data-ttu-id="46820-295">この場合、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>のすべての環境変数の名前を含む、テキストを返します。</span><span class="sxs-lookup"><span data-stu-id="46820-295">In this case, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> returns all of the text, including the name of the environment variable.</span></span> <span data-ttu-id="46820-296">指定された位置に文字列の環境がない場合<xref:Microsoft.VisualBasic.Interaction.Environ%2A>長さ 0 の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="46820-296">If there is no environment string in the specified position, <xref:Microsoft.VisualBasic.Interaction.Environ%2A> returns a zero-length string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="46820-297"><xref:Microsoft.VisualBasic.Interaction.Environ%2A>関数が、環境アクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="46820-297">The <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function requires environment permission, which might affect its execution in partial-trust situations.</span></span> <span data-ttu-id="46820-298">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="46820-298">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-299">この例では、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>エントリ数と長さを指定する関数、`PATH`環境文字列テーブルからのステートメント。</span><span class="sxs-lookup"><span data-stu-id="46820-299">This example uses the <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function to supply the entry number and length of the `PATH` statement from the environment-string table.</span></span>  
  
 [!code-vb[VbVbalrCatRef#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46820-300">
            <paramref name="Expression" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-300">
              <paramref name="Expression" /> is missing.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="GetAllSettings">
      <MemberSignature Language="C#" Value="public static string[,] GetAllSettings (string AppName, string Section);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[,] GetAllSettings(string AppName, string Section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllSettings (AppName As String, Section As String) As String(,)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^, 2&gt; ^ GetAllSettings(System::String ^ AppName, System::String ^ Section);" />
      <MemberSignature Language="F#" Value="static member GetAllSettings : string * string -&gt; string[,]" Usage="Microsoft.VisualBasic.Interaction.GetAllSettings (AppName, Section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[,]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">
          <span data-ttu-id="46820-301">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-301">Required.</span>
          </span>
          <span data-ttu-id="46820-302">キー設定が必要となるアプリケーションまたはプロジェクトの名前を含む <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-302">
              <see langword="String" /> expression containing the name of the application or project whose key settings are requested.</span>
          </span>
        </param>
        <param name="Section">
          <span data-ttu-id="46820-303">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-303">Required.</span>
          </span>
          <span data-ttu-id="46820-304">キー設定が必要となるセクションの名前を含む <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-304">
              <see langword="String" /> expression containing the name of the section whose key settings are requested.</span>
          </span>
          <span data-ttu-id="46820-305">
            <see langword="GetAllSettings" /> は、文字列の 2 次元配列を含むオブジェクトを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-305">
              <see langword="GetAllSettings" /> returns an object that contains a two-dimensional array of strings.</span>
          </span>
          <span data-ttu-id="46820-306">文字列には、指定されたセクションにあるすべてのキー設定に加え、その設定に対応する値も含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-306">The strings contain all the key settings in the specified section, plus their corresponding values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-307">Windows レジストリのアプリケーションのエントリから、キー設定のリストと各キー設定の値 (以前に <see langword="SaveSetting" /> を使用して作成されたもの) を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-307">Returns a list of key settings and their respective values (originally created with <see langword="SaveSetting" />) from an application's entry in the Windows registry.</span>
          </span>
          <span data-ttu-id="46820-308">
            <see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-308">Using the <see langword="My" /> feature gives you greater productivity and performance in registry operations than <see langword="GetAllSettings" />.</span>
          </span>
          <span data-ttu-id="46820-309">詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-309">For more information, see <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-310">Windows レジストリのアプリケーションのエントリから、キー設定のリストと各キー設定の値 (以前に <see langword="SaveSetting" /> を使用して作成されたもの) を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-310">Returns a list of key settings and their respective values (originally created with <see langword="SaveSetting" />) from an application's entry in the Windows registry.</span>
          </span>
          <span data-ttu-id="46820-311">
            <see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-311">Using the <see langword="My" /> feature gives you greater productivity and performance in registry operations than <see langword="GetAllSettings" />.</span>
          </span>
          <span data-ttu-id="46820-312">詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-312">For more information, see <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-313">`GetAllSettings` 返します、初期化されていない`Object`場合`AppName`または`Section`存在しません。</span><span class="sxs-lookup"><span data-stu-id="46820-313">`GetAllSettings` returns an uninitialized `Object` if either `AppName` or `Section` does not exist.</span></span>  
  
 <span data-ttu-id="46820-314">下で動作するため、`HKEY_LOCAL_USER`がアクティブでないユーザーが対話的にログオンするまで、レジストリ キー`GetAllSettings`ユーザーがログオンすることが必要です。</span><span class="sxs-lookup"><span data-stu-id="46820-314">Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetAllSettings` requires that a user be logged on.</span></span>  
  
 <span data-ttu-id="46820-315">いずれかで (Mtx.exe) などの非対話型プロセスからアクセスされるレジストリ設定を格納する必要があります、`HKEY_LOCAL_MACHINE\Software\`または`HKEY_USER\DEFAULT\Software`レジストリ キー。</span><span class="sxs-lookup"><span data-stu-id="46820-315">Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\Software\` or the `HKEY_USER\DEFAULT\Software` registry keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-316">この例を使用して、`SaveSetting`関数として指定されたアプリケーションの Windows レジストリにエントリを作成する`AppName`を使用して、`GetAllSettings`関数設定を表示します。</span><span class="sxs-lookup"><span data-stu-id="46820-316">This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as `AppName`, then uses the `GetAllSettings` function to display the settings.</span></span> <span data-ttu-id="46820-317">そのアプリケーションに注意してください名および`Section`で名前を取得することはできません`GetAllSettings`します。</span><span class="sxs-lookup"><span data-stu-id="46820-317">Note that application names and `Section` names cannot be retrieved with `GetAllSettings`.</span></span> <span data-ttu-id="46820-318">最後に、`DeleteSetting`関数は、アプリケーションのエントリを削除します。</span><span class="sxs-lookup"><span data-stu-id="46820-318">Finally, the `DeleteSetting` function removes the application's entries.</span></span>  
  
 [!code-vb[VbVbalrCatRef#68](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46820-319">ユーザーがログインしていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-319">User is not logged in.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static object GetObject (string PathName = null, string Class = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static object GetObject(string PathName, string Class) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObject (Optional PathName As String = null, Optional Class As String = null) As Object" />
      <MemberSignature Language="F#" Value="static member GetObject : string * string -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.GetObject (PathName, Class)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Class" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="46820-320">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-320">Optional.</span>
          </span>
          <span data-ttu-id="46820-321">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-321">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="46820-322">取得するオブジェクトが含まれているファイルの完全パスと名前です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-322">The full path and name of the file containing the object to retrieve.</span>
          </span>
          <span data-ttu-id="46820-323">
            <c>PathName</c> を省略した場合は、<c>Class</c> が必須となります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-323">If <c>PathName</c> is omitted, <c>Class</c> is required.</span>
          </span>
        </param>
        <param name="Class">
          <span data-ttu-id="46820-324">
            <c>PathName</c> が指定されていない場合は必須です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-324">Required if <c>PathName</c> is not supplied.</span>
          </span>
          <span data-ttu-id="46820-325">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-325">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="46820-326">オブジェクトのクラスを表す文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-326">A string representing the class of the object.</span>
          </span>
          <span data-ttu-id="46820-327">
            <c>Class</c> 引数の構文と指定項目を次に示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-327">The <c>Class</c> argument has the following syntax and parts:</span>
          </span>
          <span data-ttu-id="46820-328">
            <c>appname</c>
            <c>.</c>
            <c>objecttype</c>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-328">
              <c>appname</c>
              <c>.</c>
              <c>objecttype</c>
            </span>
          </span>
          <span data-ttu-id="46820-329">[1|1] パラメーター</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-329">[1|1] Parameter</span>
          </span>
          <span data-ttu-id="46820-330">[1|2] 説明</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-330">[1|2] Description</span>
          </span>
          <span data-ttu-id="46820-331">[2|1] <c>appname</c></span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-331">[2|1] <c>appname</c></span>
          </span>
          <span data-ttu-id="46820-332">[2|2] 必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-332">[2|2] Required.</span>
          </span>
          <span data-ttu-id="46820-333">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-333">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="46820-334">オブジェクトを提供するアプリケーションの名前です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-334">The name of the application providing the object.</span>
          </span>
          <span data-ttu-id="46820-335">[3|1] <c>objecttype</c></span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-335">[3|1] <c>objecttype</c></span>
          </span>
          <span data-ttu-id="46820-336">[3|2] 必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-336">[3|2] Required.</span>
          </span>
          <span data-ttu-id="46820-337">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-337">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="46820-338">作成するオブジェクトの型またはクラスです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-338">The type or class of object to create.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-339">COM コンポーネントにより得られたオブジェクトへの参照を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-339">Returns a reference to an object provided by a COM component.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-340">COM コンポーネントにより得られたオブジェクトへの参照を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-340">Returns a reference to an object provided by a COM component.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-341">使用して、`GetObject`ファイルから COM コンポーネントのインスタンスを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="46820-341">Use the `GetObject` function to load an instance of a COM component from a file.</span></span> <span data-ttu-id="46820-342">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="46820-342">The following example illustrates this.</span></span>  
  
```vb  
Dim CADObject As Object  
CADObject = GetObject("C:\CAD\schema.cad")  
```  
  
 <span data-ttu-id="46820-343">このコードを実行すると、アプリケーションに関連付けられた、指定した`PathName`が開始し、指定したファイル内のオブジェクトがアクティブにします。</span><span class="sxs-lookup"><span data-stu-id="46820-343">When this code runs, the application associated with the specified `PathName` is started and the object in the specified file is activated.</span></span>  
  
## <a name="default-cases"></a><span data-ttu-id="46820-344">既定のケース</span><span class="sxs-lookup"><span data-stu-id="46820-344">Default Cases</span></span>  
 <span data-ttu-id="46820-345">場合`PathName`が長さ 0 の文字列 (`""`)、`GetObject`指定されたクラス型の新しいオブジェクト インスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="46820-345">If `PathName` is a zero-length string (`""`), `GetObject` returns a new object instance of the specified class type.</span></span> <span data-ttu-id="46820-346">場合、`PathName`引数を省略すると、`GetObject`で指定されたクラス型の現在アクティブなオブジェクトを返します`Class`します。</span><span class="sxs-lookup"><span data-stu-id="46820-346">If the `PathName` argument is omitted, `GetObject` returns a currently active object of the class type specified in `Class`.</span></span> <span data-ttu-id="46820-347">指定した型のオブジェクトが存在しない場合、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="46820-347">If no object of the specified type exists, an error occurs.</span></span>  
  
## <a name="accessing-a-subobject"></a><span data-ttu-id="46820-348">サブオブジェクトへのアクセス</span><span class="sxs-lookup"><span data-stu-id="46820-348">Accessing a Subobject</span></span>  
 <span data-ttu-id="46820-349">一部のアプリケーションでは、ファイルに関連付けられているサブオブジェクトをアクティブ化できます。</span><span class="sxs-lookup"><span data-stu-id="46820-349">Some applications allow you to activate a subobject associated with a file.</span></span> <span data-ttu-id="46820-350">これを行うには、感嘆符を追加します (`!`) に従って、ファイル名の末尾に、ファイルの一部を識別する文字列でアクティブ化します。</span><span class="sxs-lookup"><span data-stu-id="46820-350">To do this, add an exclamation point (`!`) to the end of the file name and follow it with a string that identifies the part of the file you want to activate.</span></span> <span data-ttu-id="46820-351">この文字列を作成する方法については、オブジェクトを作成したアプリケーションのマニュアルを参照してください。</span><span class="sxs-lookup"><span data-stu-id="46820-351">For information on how to create this string, see the documentation for the application that created the object.</span></span>  
  
 <span data-ttu-id="46820-352">たとえば、描画アプリケーション ファイルに格納されている図面に複数のレイヤーがあります。</span><span class="sxs-lookup"><span data-stu-id="46820-352">For example, in a drawing application you might have multiple layers to a drawing stored in a file.</span></span> <span data-ttu-id="46820-353">記述すると、レイヤーをアクティブ化する次のコードを使用する可能性があります`schema.cad`します。</span><span class="sxs-lookup"><span data-stu-id="46820-353">You could use the following code to activate a layer within a drawing called `schema.cad`.</span></span>  
  
```vb  
layerObject = GetObject("C:\CAD\schema.cad!Layer3")  
```  
  
## <a name="specifying-a-class"></a><span data-ttu-id="46820-354">クラスを指定します。</span><span class="sxs-lookup"><span data-stu-id="46820-354">Specifying a Class</span></span>  
 <span data-ttu-id="46820-355">オブジェクトの指定しない場合`Class`オートメーションは、指定するファイル名に基づくをアクティブ化するアプリケーションを開始し、オブジェクトを決定します。</span><span class="sxs-lookup"><span data-stu-id="46820-355">If you do not specify the object's `Class`, Automation determines the application to start and the object to activate, based on the file name you provide.</span></span> <span data-ttu-id="46820-356">ただし、いくつかのファイルは、オブジェクトの 1 つ以上のクラスをサポートできます。</span><span class="sxs-lookup"><span data-stu-id="46820-356">Some files, however, can support more than one class of object.</span></span> <span data-ttu-id="46820-357">たとえば、描画は 3 つの異なる型のオブジェクトをサポート可能性があります。`Application`オブジェクト、`Drawing`オブジェクトと`Toolbar`同じファイルの一部であるすべてのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="46820-357">For example, a drawing might support three different types of objects: an `Application` object, a `Drawing` object, and a `Toolbar` object, all of which are part of the same file.</span></span> <span data-ttu-id="46820-358">使用してアクティブ化するファイルのどのオブジェクトを指定する省略可能な`Class`引数。</span><span class="sxs-lookup"><span data-stu-id="46820-358">To specify which object in a file you want to activate, use the optional `Class` argument.</span></span> <span data-ttu-id="46820-359">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="46820-359">The following example illustrates this.</span></span>  
  
```vb  
Dim drawObj As Object  
drawObj = GetObject("C:\Drawings\sample.drw", "Figment.Drawing")  
```  
  
 <span data-ttu-id="46820-360">前の例では、`Figment`描画アプリケーションの名前を指定し、`Drawing`をサポートするオブジェクトの種類の 1 つです。</span><span class="sxs-lookup"><span data-stu-id="46820-360">In the preceding example, `Figment` is the name of a drawing application and `Drawing` is one of the object types it supports.</span></span>  
  
## <a name="using-the-object"></a><span data-ttu-id="46820-361">オブジェクトの使用</span><span class="sxs-lookup"><span data-stu-id="46820-361">Using the Object</span></span>  
 <span data-ttu-id="46820-362">オブジェクトがアクティブ化されるでを参照することを宣言して、オブジェクト変数を使用してコード。</span><span class="sxs-lookup"><span data-stu-id="46820-362">Once an object is activated, you refer to it in code using the object variable you declared.</span></span> <span data-ttu-id="46820-363">オブジェクト変数を使用して、新しいオブジェクトのプロパティとメソッドにアクセスする前の例では、`drawObj`します。</span><span class="sxs-lookup"><span data-stu-id="46820-363">In the preceding example, you access properties and methods of the new object using the object variable `drawObj`.</span></span> <span data-ttu-id="46820-364">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="46820-364">The following example illustrates this.</span></span>  
  
```vb  
drawObj.Line(9, 90)  
drawObj.InsertText(9, 100, "Hello, world.")  
drawObj.SaveAs("C:\Drawings\sample.drw")  
```  
  
> [!NOTE]
>  <span data-ttu-id="46820-365">使用して、`GetObject`オブジェクトの現在のインスタンスがある場合、または読み込まれたファイルでオブジェクトを作成する場合に機能します。</span><span class="sxs-lookup"><span data-stu-id="46820-365">Use the `GetObject` function when there is a current instance of the object or if you want to create the object with a file loaded.</span></span> <span data-ttu-id="46820-366">ファイルが読み込まれた現在のインスタンスがないと、オブジェクトの使用を開始したくない場合を使用して、<xref:Microsoft.VisualBasic.Interaction.CreateObject%2A>関数。</span><span class="sxs-lookup"><span data-stu-id="46820-366">If there is no current instance, and you do not want the object started with a file loaded, use the <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A> function.</span></span>  
>   
>  <span data-ttu-id="46820-367">ActiveX の単一インスタンス オブジェクトとして登録されているオブジェクト場合、オブジェクトのインスタンスを 1 つだけ作成方法に関係なく何度も`CreateObject`が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="46820-367">If an object has registered itself as an ActiveX single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is called.</span></span> <span data-ttu-id="46820-368">単一インスタンス オブジェクトは、`GetObject`長さ 0 の文字列で呼び出されたときに、同じインスタンスを常に返します (`""`) 構文、およびその場合エラーが発生、`PathName`引数を省略するとします。</span><span class="sxs-lookup"><span data-stu-id="46820-368">With a single-instance object, `GetObject` always returns the same instance when called with the zero-length string (`""`) syntax, and it causes an error if the `PathName` argument is omitted.</span></span> <span data-ttu-id="46820-369">使用することはできません`GetObject`Visual Basic で作成したクラスへの参照を取得します。</span><span class="sxs-lookup"><span data-stu-id="46820-369">You cannot use `GetObject` to obtain a reference to a class created with Visual Basic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="46820-370">`GetObject`関数が、アンマネージ コード アクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="46820-370">The `GetObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations.</span></span> <span data-ttu-id="46820-371">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="46820-371">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-372">次の例では、`GetObject`特定の Microsoft Excel ワークシートへの参照を取得します (`excelObj`)。</span><span class="sxs-lookup"><span data-stu-id="46820-372">The following example uses the `GetObject` function to obtain a reference to a specific Microsoft Excel worksheet (`excelObj`).</span></span> <span data-ttu-id="46820-373">使用して、ワークシートの`Application`Excel を閉じるには、およびその他の操作を表示するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="46820-373">It uses the worksheet's `Application` property to make Excel visible, to close it, and to perform other actions.</span></span> <span data-ttu-id="46820-374">2 つの API 呼び出しを使用して、`detectExcel`プロシージャは、Excel が検索されが実行されている場合は、オブジェクトを実行しているテーブルで入力します。</span><span class="sxs-lookup"><span data-stu-id="46820-374">Using two API calls, the `detectExcel` procedure looks for Excel, and if it is running, enters it in the Running Object table.</span></span> <span data-ttu-id="46820-375">最初の呼び出し`GetObject`Excel が既に実行されていない場合、この例で、エラーが発生原因、`excelWasNotRunning`フラグを設定する`True`します。</span><span class="sxs-lookup"><span data-stu-id="46820-375">The first call to `GetObject` causes an error if Excel is not already running, which in this example causes the `excelWasNotRunning` flag to be set to `True`.</span></span> <span data-ttu-id="46820-376">2 番目の呼び出し`GetObject`開くファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="46820-376">The second call to `GetObject` specifies a file to open.</span></span> <span data-ttu-id="46820-377">Excel が実行されていない場合、2 番目の呼び出しが起動され、指定されたファイルによって表されるワークシートへの参照を返します`test.xls`します。</span><span class="sxs-lookup"><span data-stu-id="46820-377">If Excel is not already running, the second call starts it and returns a reference to the worksheet represented by the specified file, `test.xls`.</span></span> <span data-ttu-id="46820-378">指定した場所にファイルが存在する必要があります。Visual Basic の場合は、スロー、<xref:System.IO.FileNotFoundException>します。</span><span class="sxs-lookup"><span data-stu-id="46820-378">The file must exist in the specified location; otherwise, Visual Basic throws a <xref:System.IO.FileNotFoundException>.</span></span> <span data-ttu-id="46820-379">次に、コード例は、Excel と表示されている指定のワークシートを含むウィンドウの両方です。</span><span class="sxs-lookup"><span data-stu-id="46820-379">Next, the example code makes both Excel and the window containing the specified worksheet visible.</span></span>  
  
 <span data-ttu-id="46820-380">この例は`Option Strict Off`遅延バインディングを使用しているため、オブジェクトに割り当てられている型の変数`Object`します。</span><span class="sxs-lookup"><span data-stu-id="46820-380">This example requires `Option Strict Off` because it uses late binding, where objects are assigned to variables of type `Object`.</span></span> <span data-ttu-id="46820-381">指定できます`Option Strict On`から Excel のタイプ ライブラリへの参照を追加する場合は、特定のオブジェクトの種類のオブジェクトを宣言し、 **COM**のタブ、**参照の追加**のダイアログ ボックス、 **プロジェクト**Visual Studio のメニュー。</span><span class="sxs-lookup"><span data-stu-id="46820-381">You can specify `Option Strict On` and declare objects of specific object types if you add a reference to the Excel type library from the **COM** tab of the **Add Reference** dialog box of the **Project** menu in Visual Studio.</span></span>  
  
 [!code-vb[VbVbalrExcelObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#2)]  
  
 [!code-vb[VbVbalrExcelObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#4)]  
  
 [!code-vb[VbVbalrExcelObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrExcelObject/VB/Class1.vb#5)]  
  
 <span data-ttu-id="46820-382">呼び出すと、`getExcel`関数の場合、チェックが Excel が既に実行されているかどうかに行われます。</span><span class="sxs-lookup"><span data-stu-id="46820-382">When you call the `getExcel` function, a check is made to see if Excel is already running.</span></span> <span data-ttu-id="46820-383">そうでない場合、インスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="46820-383">If it is not, then an instance is created.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="46820-384">前の例をわかりやすくするためは、任意のウィンドウと呼ばれること前提としています`XLMAIN`Microsoft Excel のインスタンスに属しています。</span><span class="sxs-lookup"><span data-stu-id="46820-384">For simplicity, the preceding example assumes that any window called `XLMAIN` belongs to an instance of Microsoft Excel.</span></span> <span data-ttu-id="46820-385">場合は、不正改ざんによって起動された別のオブジェクトは、その名前を持つウィンドウを作成、Excel の意図したすべてのメッセージを受け取る。</span><span class="sxs-lookup"><span data-stu-id="46820-385">If another object, possibly launched by illicit tampering, created a window with that name, it would receive all the messages you intended for Excel.</span></span> <span data-ttu-id="46820-386">運用環境で使用される、アプリケーションのことを確認するより厳密なテストを含める必要があります`XLMAIN`本当に Excel に属しています。</span><span class="sxs-lookup"><span data-stu-id="46820-386">In an application to be used for production, you should include some more rigorous testing to verify that `XLMAIN` really belongs to Excel.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="46820-387">指定されたクラス型のオブジェクトが存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-387">No object of the specified class type exists.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="46820-388">指定されたパスおよびファイル名を持つオブジェクトが存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-388">No object with the specified path and file name exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)" />
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="GetSetting">
      <MemberSignature Language="C#" Value="public static string GetSetting (string AppName, string Section, string Key, string Default = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetSetting(string AppName, string Section, string Key, string Default) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetting (AppName As String, Section As String, Key As String, Optional Default As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member GetSetting : string * string * string * string -&gt; string" Usage="Microsoft.VisualBasic.Interaction.GetSetting (AppName, Section, Key, Default)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Default" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">
          <span data-ttu-id="46820-389">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-389">Required.</span>
          </span>
          <span data-ttu-id="46820-390">キー設定が必要となるアプリケーションまたはプロジェクトの名前を含む <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-390">
              <see langword="String" /> expression containing the name of the application or project whose key setting is requested.</span>
          </span>
        </param>
        <param name="Section">
          <span data-ttu-id="46820-391">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-391">Required.</span>
          </span>
          <span data-ttu-id="46820-392">キーの設定が存在しているセクションの名前を含む <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-392">
              <see langword="String" /> expression containing the name of the section in which the key setting is found.</span>
          </span>
        </param>
        <param name="Key">
          <span data-ttu-id="46820-393">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-393">Required.</span>
          </span>
          <span data-ttu-id="46820-394">返されるキー設定の名前を含む <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-394">
              <see langword="String" /> expression containing the name of the key setting to return.</span>
          </span>
        </param>
        <param name="Default">
          <span data-ttu-id="46820-395">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-395">Optional.</span>
          </span>
          <span data-ttu-id="46820-396">
            <c>Key</c> 設定に値が設定されていない場合に返される値を含む式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-396">Expression containing the value to return if no value is set in the <c>Key</c> setting.</span>
          </span>
          <span data-ttu-id="46820-397">省略した場合、<c>Default</c> は長さ 0 の文字列 ("") と想定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-397">If omitted, <c>Default</c> is assumed to be a zero-length string ("").</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-398">Windows レジストリのアプリケーションのエントリから、キーの設定値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-398">Returns a key setting value from an application's entry in the Windows registry.</span>
          </span>
          <span data-ttu-id="46820-399">
            <see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-399">The <see langword="My" /> feature gives you greater productivity and performance in registry operations than <see langword="GetAllSettings" />.</span>
          </span>
          <span data-ttu-id="46820-400">詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-400">For more information, see <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-401">Windows レジストリのアプリケーションのエントリから、キーの設定値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-401">Returns a key setting value from an application's entry in the Windows registry.</span>
          </span>
          <span data-ttu-id="46820-402">
            <see langword="My" /> 機能を使用すると、<see langword="GetAllSettings" /> を使用した場合より生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-402">The <see langword="My" /> feature gives you greater productivity and performance in registry operations than <see langword="GetAllSettings" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-403">名前のアイテムの場合、`GetSetting`引数が存在しない場合は、`GetSetting`の値を返します`Default`します。</span><span class="sxs-lookup"><span data-stu-id="46820-403">If any of the items named in the `GetSetting` arguments do not exist, `GetSetting` returns a value of `Default`.</span></span>  
  
 <span data-ttu-id="46820-404">下で動作するため、`HKEY_LOCAL_USER`がアクティブでないユーザーが対話的にログオンするまで、レジストリ キー`GetSetting`ユーザーがログオンすることが必要です。</span><span class="sxs-lookup"><span data-stu-id="46820-404">Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetSetting` requires that a user be logged on.</span></span>  
  
 <span data-ttu-id="46820-405">いずれかで (Mtx.exe) などの非対話型プロセスからアクセスされるレジストリ設定を格納する必要があります、`HKEY_LOCAL_MACHINE\Software\`または`HKEY_USER\DEFAULT\Software`レジストリ キー。</span><span class="sxs-lookup"><span data-stu-id="46820-405">Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\Software\` or the `HKEY_USER\DEFAULT\Software` registry keys.</span></span>  
  
 <span data-ttu-id="46820-406">`GetSetting` 必要があります`Read`<xref:System.Security.Permissions.RegistryPermission>します。</span><span class="sxs-lookup"><span data-stu-id="46820-406">`GetSetting` requires `Read`<xref:System.Security.Permissions.RegistryPermission> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-407">この例を使用して、`SaveSetting`関数として指定されたアプリケーションの Windows レジストリにエントリを作成する`AppName`、しを使用して、`GetSetting`設定のいずれかを表示する関数。</span><span class="sxs-lookup"><span data-stu-id="46820-407">This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as `AppName`, and then uses the `GetSetting` function to display one of the settings.</span></span> <span data-ttu-id="46820-408">`Default`引数を指定すると、いくつかの値が返される保証されます。</span><span class="sxs-lookup"><span data-stu-id="46820-408">Because the `Default` argument is specified, some value is guaranteed to be returned.</span></span> <span data-ttu-id="46820-409">注意`Section`で名前を取得することはできません`GetSetting`します。</span><span class="sxs-lookup"><span data-stu-id="46820-409">Notice that `Section` names cannot be retrieved with `GetSetting`.</span></span> <span data-ttu-id="46820-410">最後に、`DeleteSetting`関数は、すべてのアプリケーションのエントリを削除します。</span><span class="sxs-lookup"><span data-stu-id="46820-410">Finally, the `DeleteSetting` function removes all the application's entries.</span></span>  
  
 [!code-vb[VbVbalrCatRef#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46820-411">文字列型 (<see langword="String" />) の式でない引数が含まれるか、ユーザーがログインしていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-411">One or more arguments are not <see langword="String" /> expressions, or user is not logged in.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
      </Docs>
    </Member>
    <Member MemberName="IIf">
      <MemberSignature Language="C#" Value="public static object IIf (bool Expression, object TruePart, object FalsePart);" />
      <MemberSignature Language="ILAsm" Value=".method public static object IIf(bool Expression, object TruePart, object FalsePart) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IIf (Expression As Boolean, TruePart As Object, FalsePart As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ IIf(bool Expression, System::Object ^ TruePart, System::Object ^ FalsePart);" />
      <MemberSignature Language="F#" Value="static member IIf : bool * obj * obj -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.IIf (Expression, TruePart, FalsePart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
        <Parameter Name="TruePart" Type="System.Object" />
        <Parameter Name="FalsePart" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="46820-412">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-412">Required.</span>
          </span>
          <span data-ttu-id="46820-413">
            <see langword="Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-413">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="46820-414">評価する式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-414">The expression you want to evaluate.</span>
          </span>
        </param>
        <param name="TruePart">
          <span data-ttu-id="46820-415">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-415">Required.</span>
          </span>
          <span data-ttu-id="46820-416">
            <see langword="Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-416">
              <see langword="Object" />.</span>
          </span>
          <span data-ttu-id="46820-417">
            <c>Expression</c> が <see langword="True" /> に評価された場合に返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-417">Returned if <c>Expression</c> evaluates to <see langword="True" />.</span>
          </span>
        </param>
        <param name="FalsePart">
          <span data-ttu-id="46820-418">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-418">Required.</span>
          </span>
          <span data-ttu-id="46820-419">
            <see langword="Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-419">
              <see langword="Object" />.</span>
          </span>
          <span data-ttu-id="46820-420">
            <c>Expression</c> が <see langword="False" /> に評価された場合に返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-420">Returned if <c>Expression</c> evaluates to <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-421">式の評価に応じて、2 つのオブジェクトのうち 1 つを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-421">Returns one of two objects, depending on the evaluation of an expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-422">式の評価に応じて、2 つのオブジェクトのうち 1 つを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-422">Returns one of two objects, depending on the evaluation of an expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-423">`IIf`関数は、3 項の対応を提供[条件演算子:?:](http://msdn.microsoft.com/library/88643ee8-7100-4f86-880a-705ec22b6271) Visual C でします。</span><span class="sxs-lookup"><span data-stu-id="46820-423">The `IIf` function provides a counterpart for the ternary [Conditional Operator: ? :](http://msdn.microsoft.com/library/88643ee8-7100-4f86-880a-705ec22b6271) in Visual C++.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-424">この例では、`IIf`を評価する関数、`testMe`のパラメーター、`checkIt`プロシージャを返すという単語を返します、それ以外の場合、"Small"word"Large"場合は、金額が 1,000 を超える;。</span><span class="sxs-lookup"><span data-stu-id="46820-424">This example uses the `IIf` function to evaluate the `testMe` parameter of the `checkIt` procedure and returns the word "Large" if the amount is greater than 1000; otherwise, it returns the word "Small".</span></span>  
  
 [!code-vb[VbVbalrFunctions#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#33)]  
  
 <span data-ttu-id="46820-425">場合`Option Strict`は`On`、使用する必要があります、`CStr`からの戻り値を明示的に変換するキーワード`Object`に`String`します。</span><span class="sxs-lookup"><span data-stu-id="46820-425">Note that if `Option Strict` is `On`, you must use the `CStr` keyword to explicitly convert the return from `Object` to `String`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputBox">
      <MemberSignature Language="C#" Value="public static string InputBox (string Prompt, string Title = &quot;&quot;, string DefaultResponse = &quot;&quot;, int XPos = -1, int YPos = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputBox(string Prompt, string Title, string DefaultResponse, int32 XPos, int32 YPos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputBox (Prompt As String, Optional Title As String = &quot;&quot;, Optional DefaultResponse As String = &quot;&quot;, Optional XPos As Integer = -1, Optional YPos As Integer = -1) As String" />
      <MemberSignature Language="F#" Value="static member InputBox : string * string * string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Interaction.InputBox (Prompt, Title, DefaultResponse, XPos, YPos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.String" />
        <Parameter Name="Title" Type="System.String" />
        <Parameter Name="DefaultResponse" Type="System.String" />
        <Parameter Name="XPos" Type="System.Int32" />
        <Parameter Name="YPos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Prompt">
          <span data-ttu-id="46820-426">必須。ダイアログ ボックスにメッセージとして表示する <see langword="String" /> 式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-426">Required <see langword="String" /> expression displayed as the message in the dialog box.</span>
          </span>
          <span data-ttu-id="46820-427">
            <c>Prompt</c> の最大長は、約 1024 文字です。使用される文字の幅によって変わります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-427">The maximum length of <c>Prompt</c> is approximately 1024 characters, depending on the width of the characters used.</span>
          </span>
          <span data-ttu-id="46820-428">
            <c>Prompt</c> が複数の行で構成される場合、復帰文字 (<see langword="Chr(" />13<see langword=")" />)、ライン フィード文字 (<see langword="Chr(" />10<see langword=")" />)、または復帰文字とライン フィード文字の組み合わせ (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) を各行の間で使用して、行を分割できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-428">If <c>Prompt</c> consists of more than one line, you can separate the lines using a carriage return character (<see langword="Chr(" />13<see langword=")" />), a line feed character (<see langword="Chr(" />10<see langword=")" />), or a carriage return/line feed combination (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) between each line.</span>
          </span>
        </param>
        <param name="Title">
          <span data-ttu-id="46820-429">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-429">Optional.</span>
          </span>
          <span data-ttu-id="46820-430">ダイアログ ボックスのタイトル バーに表示される <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-430">
              <see langword="String" /> expression displayed in the title bar of the dialog box.</span>
          </span>
          <span data-ttu-id="46820-431">
            <c>Title</c> を省略した場合、タイトル バーにはアプリケーションの名前が表示されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-431">If you omit <c>Title</c>, the application name is placed in the title bar.</span>
          </span>
        </param>
        <param name="DefaultResponse">
          <span data-ttu-id="46820-432">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-432">Optional.</span>
          </span>
          <span data-ttu-id="46820-433">他に入力がない場合に、テキスト ボックスに既定値として表示される <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-433">
              <see langword="String" /> expression displayed in the text box as the default response if no other input is provided.</span>
          </span>
          <span data-ttu-id="46820-434">
            <c>DefaultResponse</c> を省略すると、表示されるテキスト ボックスは空になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-434">If you omit <c>DefaultResponse</c>, the displayed text box is empty.</span>
          </span>
        </param>
        <param name="XPos">
          <span data-ttu-id="46820-435">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-435">Optional.</span>
          </span>
          <span data-ttu-id="46820-436">ダイアログ ボックスの左端から画面の左端までの距離を twip 単位で指定する数式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-436">Numeric expression that specifies, in twips, the distance of the left edge of the dialog box from the left edge of the screen.</span>
          </span>
          <span data-ttu-id="46820-437">
            <c>XPos</c> を省略すると、ダイアログ ボックスの水平位置が中央になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-437">If you omit <c>XPos</c>, the dialog box is centered horizontally.</span>
          </span>
        </param>
        <param name="YPos">
          <span data-ttu-id="46820-438">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-438">Optional.</span>
          </span>
          <span data-ttu-id="46820-439">ダイアログ ボックスの上端から画面の上端までの距離を twip 単位で指定する数式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-439">Numeric expression that specifies, in twips, the distance of the upper edge of the dialog box from the top of the screen.</span>
          </span>
          <span data-ttu-id="46820-440">
            <c>YPos</c> を省略すると、ダイアログ ボックスは垂直方向に対して画面の上端から約 1/3 の位置に配置されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-440">If you omit <c>YPos</c>, the dialog box is positioned vertically approximately one-third of the way down the screen.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-441">ダイアログ ボックスにプロンプトを表示して、ユーザーがテキストを入力するか、ボタンをクリックするのを待った後、テキスト ボックスの内容を含む文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-441">Displays a prompt in a dialog box, waits for the user to input text or click a button, and then returns a string containing the contents of the text box.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-442">ダイアログ ボックスにプロンプトを表示して、ユーザーがテキストを入力するか、ボタンをクリックするのを待った後、テキスト ボックスの内容を含む文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-442">Displays a prompt in a dialog box, waits for the user to input text or click a button, and then returns a string containing the contents of the text box.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-443">ユーザーがクリックした場合**キャンセル**長さ 0 の文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="46820-443">If the user clicks **Cancel**, a zero-length string is returned.</span></span>  
  
 <span data-ttu-id="46820-444">最初の引数よりも多くを指定するに使用する必要があります、`InputBox`関数の式。</span><span class="sxs-lookup"><span data-stu-id="46820-444">To specify more than the first argument, you must use the `InputBox` function in an expression.</span></span> <span data-ttu-id="46820-445">位置指定引数を省略する場合は、対応するコンマ区切り記号を保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="46820-445">If you omit any positional arguments, you must retain the corresponding comma delimiter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46820-446">`InputBox`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>レベルで、部分的に信頼された状況では、その実行に影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="46820-446">The `InputBox` function requires `UIPermission` at the <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> level, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="46820-447">詳細については、次を参照してください。 および<xref:System.Security.Permissions.UIPermission>します。</span><span class="sxs-lookup"><span data-stu-id="46820-447">For more information, see  and <xref:System.Security.Permissions.UIPermission> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-448">この例を使用するさまざまな方法を示しています、`InputBox`値を入力するユーザーを要求する関数。</span><span class="sxs-lookup"><span data-stu-id="46820-448">This example shows various ways to use the `InputBox` function to prompt the user to enter a value.</span></span> <span data-ttu-id="46820-449">場合、x と y の位置を省略すると、ダイアログ ボックスが自動的に各軸の中央に配置します。</span><span class="sxs-lookup"><span data-stu-id="46820-449">If the x and y positions are omitted, the dialog box is automatically centered for the respective axes.</span></span> <span data-ttu-id="46820-450">変数`MyValue`ユーザーが [ok] をクリックするか、ENTER キーを押した場合に、ユーザーが入力した値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="46820-450">The variable `MyValue` contains the value entered by the user if the user clicks OK or presses the ENTER key.</span></span>  
  
 [!code-vb[VbVbalrCatRef#67](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#67)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MsgBox">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.MsgBoxResult MsgBox(object Prompt, valuetype Microsoft.VisualBasic.MsgBoxStyle Buttons, object Title) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MsgBox (Prompt As Object, Optional Buttons As MsgBoxStyle = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, Optional Title As Object = null) As MsgBoxResult" />
      <MemberSignature Language="F#" Value="static member MsgBox : obj * Microsoft.VisualBasic.MsgBoxStyle * obj -&gt; Microsoft.VisualBasic.MsgBoxResult" Usage="Microsoft.VisualBasic.Interaction.MsgBox (Prompt, Buttons, Title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Prompt" Type="System.Object" />
        <Parameter Name="Buttons" Type="Microsoft.VisualBasic.MsgBoxStyle" />
        <Parameter Name="Title" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Prompt">
          <span data-ttu-id="46820-451">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-451">Required.</span>
          </span>
          <span data-ttu-id="46820-452">ダイアログ ボックスにメッセージとして表示される <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-452">
              <see langword="String" /> expression displayed as the message in the dialog box.</span>
          </span>
          <span data-ttu-id="46820-453">
            <c>Prompt</c> の最大長は、約 1024 文字です。使用される文字の幅によって変わります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-453">The maximum length of <c>Prompt</c> is approximately 1024 characters, depending on the width of the characters used.</span>
          </span>
          <span data-ttu-id="46820-454">
            <c>Prompt</c> が複数の行で構成される場合、復帰文字 (<see langword="Chr(" />13<see langword=")" />)、ライン フィード文字 (<see langword="Chr(" />10<see langword=")" />)、または復帰文字とライン フィード文字の組み合わせ (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) を各行の間で使用して、行を分割できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-454">If <c>Prompt</c> consists of more than one line, you can separate the lines using a carriage return character (<see langword="Chr(" />13<see langword=")" />), a line feed character (<see langword="Chr(" />10<see langword=")" />), or a carriage return/linefeed character combination (<see langword="Chr(" />13<see langword=")" /> &amp; <see langword="Chr(" />10<see langword=")" />) between each line.</span>
          </span>
        </param>
        <param name="Buttons">
          <span data-ttu-id="46820-455">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-455">Optional.</span>
          </span>
          <span data-ttu-id="46820-456">表示するボタンの種類と数、使用するアイコンのスタイル、既定のボタンの ID、メッセージ ボックスのモーダル性を指定する値の総計を表す数式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-456">Numeric expression that is the sum of values specifying the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box.</span>
          </span>
          <span data-ttu-id="46820-457">
            <c>Buttons</c> を省略した場合、既定値は 0 になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-457">If you omit <c>Buttons</c>, the default value is zero.</span>
          </span>
        </param>
        <param name="Title">
          <span data-ttu-id="46820-458">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-458">Optional.</span>
          </span>
          <span data-ttu-id="46820-459">ダイアログ ボックスのタイトル バーに表示される <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-459">
              <see langword="String" /> expression displayed in the title bar of the dialog box.</span>
          </span>
          <span data-ttu-id="46820-460">
            <c>Title</c> を省略した場合、タイトル バーにはアプリケーションの名前が表示されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-460">If you omit <c>Title</c>, the application name is placed in the title bar.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-461">ダイアログ ボックスにメッセージを表示し、ユーザーがボタンをクリックするのを待った後、ユーザーのクリックしたボタンを示す整数値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-461">Displays a message in a dialog box, waits for the user to click a button, and then returns an integer indicating which button the user clicked.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-462">
            <list type="table">
              <item>
                <term> 定数  </term>
                <description> 値  </description>
              </item>
              <item>
                <term>
                  <see langword="OK" />
                </term>
                <description> 1  </description>
              </item>
              <item>
                <term>
                  <see langword="Cancel" />
                </term>
                <description> 2  </description>
              </item>
              <item>
                <term>
                  <see langword="Abort" />
                </term>
                <description> 3  </description>
              </item>
              <item>
                <term>
                  <see langword="Retry" />
                </term>
                <description> 4  </description>
              </item>
              <item>
                <term>
                  <see langword="Ignore" />
                </term>
                <description> 5  </description>
              </item>
              <item>
                <term>
                  <see langword="Yes" />
                </term>
                <description> 6  </description>
              </item>
              <item>
                <term>
                  <see langword="No" />
                </term>
                <description> 7  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-462">
              <list type="table">
                <item>
                  <term> Constant  </term>
                  <description> Value  </description>
                </item>
                <item>
                  <term>
                    <see langword="OK" />
                  </term>
                  <description> 1  </description>
                </item>
                <item>
                  <term>
                    <see langword="Cancel" />
                  </term>
                  <description> 2  </description>
                </item>
                <item>
                  <term>
                    <see langword="Abort" />
                  </term>
                  <description> 3  </description>
                </item>
                <item>
                  <term>
                    <see langword="Retry" />
                  </term>
                  <description> 4  </description>
                </item>
                <item>
                  <term>
                    <see langword="Ignore" />
                  </term>
                  <description> 5  </description>
                </item>
                <item>
                  <term>
                    <see langword="Yes" />
                  </term>
                  <description> 6  </description>
                </item>
                <item>
                  <term>
                    <see langword="No" />
                  </term>
                  <description> 7  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-463">位置指定引数を省略する場合は、対応するコンマ区切り記号を保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="46820-463">If you omit any positional arguments, you must retain the corresponding comma delimiter.</span></span>  
  
 <span data-ttu-id="46820-464">ダイアログ ボックスが表示される場合、**キャンセル**ESC キーを押すボタンがクリックした場合と同じ効果**キャンセル**</span><span class="sxs-lookup"><span data-stu-id="46820-464">If the dialog box displays a **Cancel** button, pressing the ESC key has the same effect as clicking **Cancel**</span></span>  
  
 <span data-ttu-id="46820-465">ダイアログ ボックスが含まれている場合、**ヘルプ** ダイアログ ボックスで状況依存のヘルプが提供されているボタン。</span><span class="sxs-lookup"><span data-stu-id="46820-465">If the dialog box contains a **Help** button, context-sensitive Help is provided for the dialog box.</span></span> <span data-ttu-id="46820-466">ただし、他のボタンのいずれかを選択するまでの値は返されません。</span><span class="sxs-lookup"><span data-stu-id="46820-466">However, no value is returned until one of the other buttons is chosen.</span></span> <span data-ttu-id="46820-467">Windows フォーム アプリケーションを選択することで、**ヘルプ**ボタンが実行、<xref:System.Windows.Forms.Control.HelpRequested>フォームのイベント。</span><span class="sxs-lookup"><span data-stu-id="46820-467">In Windows Form applications, choosing the **Help** button executes the <xref:System.Windows.Forms.Control.HelpRequested> event for the form.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46820-468">`MsgBox`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows>レベルで、部分的に信頼された状況では、その実行に影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="46820-468">The `MsgBox` function requires `UIPermission` at the <xref:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows> level, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="46820-469">詳細については、「<xref:System.Security.Permissions.UIPermission>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="46820-469">For more information, see <xref:System.Security.Permissions.UIPermission>.</span></span>  
  
 <span data-ttu-id="46820-470">`MsgBoxStyle`列挙値は、次の表に記載されています。</span><span class="sxs-lookup"><span data-stu-id="46820-470">The `MsgBoxStyle` enumeration values are listed in the following table.</span></span>  
  
|<span data-ttu-id="46820-471">メンバー</span><span class="sxs-lookup"><span data-stu-id="46820-471">Member</span></span>|<span data-ttu-id="46820-472">[値]</span><span class="sxs-lookup"><span data-stu-id="46820-472">Value</span></span>|<span data-ttu-id="46820-473">説明</span><span class="sxs-lookup"><span data-stu-id="46820-473">Description</span></span>|  
|-|-|-|  
|<span data-ttu-id="46820-474">メンバー</span><span class="sxs-lookup"><span data-stu-id="46820-474">Member</span></span>|<span data-ttu-id="46820-475">[値]</span><span class="sxs-lookup"><span data-stu-id="46820-475">Value</span></span>|<span data-ttu-id="46820-476">説明</span><span class="sxs-lookup"><span data-stu-id="46820-476">Description</span></span>|  
|`OKOnly`|<span data-ttu-id="46820-477">0</span><span class="sxs-lookup"><span data-stu-id="46820-477">0</span></span>|<span data-ttu-id="46820-478">Ok を表示します ボタンの場合のみです。</span><span class="sxs-lookup"><span data-stu-id="46820-478">Displays OK button only.</span></span>|  
|`OKCancel`|<span data-ttu-id="46820-479">1</span><span class="sxs-lookup"><span data-stu-id="46820-479">1</span></span>|<span data-ttu-id="46820-480">[キャンセル] ボタンおよび [ok] を表示します。</span><span class="sxs-lookup"><span data-stu-id="46820-480">Displays OK and Cancel buttons.</span></span>|  
|`AbortRetryIgnore`|<span data-ttu-id="46820-481">2</span><span class="sxs-lookup"><span data-stu-id="46820-481">2</span></span>|<span data-ttu-id="46820-482">中止、再試行、および無視のボタンが表示されます。</span><span class="sxs-lookup"><span data-stu-id="46820-482">Displays Abort, Retry, and Ignore buttons.</span></span>|  
|`YesNoCancel`|<span data-ttu-id="46820-483">3</span><span class="sxs-lookup"><span data-stu-id="46820-483">3</span></span>|<span data-ttu-id="46820-484">[はい] が表示されます、No、およびキャンセル ボタン。</span><span class="sxs-lookup"><span data-stu-id="46820-484">Displays Yes, No, and Cancel buttons.</span></span>|  
|`YesNo`|<span data-ttu-id="46820-485">4</span><span class="sxs-lookup"><span data-stu-id="46820-485">4</span></span>|<span data-ttu-id="46820-486">[はい] と [いいえ] ボタンが表示されます。</span><span class="sxs-lookup"><span data-stu-id="46820-486">Displays Yes and No buttons.</span></span>|  
|`RetryCancel`|<span data-ttu-id="46820-487">5</span><span class="sxs-lookup"><span data-stu-id="46820-487">5</span></span>|<span data-ttu-id="46820-488">[再試行] および [キャンセル] ボタンが表示されます。</span><span class="sxs-lookup"><span data-stu-id="46820-488">Displays Retry and Cancel buttons.</span></span>|  
|`Critical`|<span data-ttu-id="46820-489">16</span><span class="sxs-lookup"><span data-stu-id="46820-489">16</span></span>|<span data-ttu-id="46820-490">メッセージの重要なアイコンを表示します。</span><span class="sxs-lookup"><span data-stu-id="46820-490">Displays Critical Message icon.</span></span>|  
|`Question`|<span data-ttu-id="46820-491">32</span><span class="sxs-lookup"><span data-stu-id="46820-491">32</span></span>|<span data-ttu-id="46820-492">警告クエリ アイコンを表示します。</span><span class="sxs-lookup"><span data-stu-id="46820-492">Displays Warning Query icon.</span></span>|  
|`Exclamation`|<span data-ttu-id="46820-493">48</span><span class="sxs-lookup"><span data-stu-id="46820-493">48</span></span>|<span data-ttu-id="46820-494">警告メッセージのアイコンを表示します。</span><span class="sxs-lookup"><span data-stu-id="46820-494">Displays Warning Message icon.</span></span>|  
|`Information`|<span data-ttu-id="46820-495">64</span><span class="sxs-lookup"><span data-stu-id="46820-495">64</span></span>|<span data-ttu-id="46820-496">情報メッセージのアイコンを表示します。</span><span class="sxs-lookup"><span data-stu-id="46820-496">Displays Information Message icon.</span></span>|  
|`DefaultButton1`|<span data-ttu-id="46820-497">0</span><span class="sxs-lookup"><span data-stu-id="46820-497">0</span></span>|<span data-ttu-id="46820-498">最初のボタンは既定値です。</span><span class="sxs-lookup"><span data-stu-id="46820-498">First button is default.</span></span>|  
|`DefaultButton2`|<span data-ttu-id="46820-499">256</span><span class="sxs-lookup"><span data-stu-id="46820-499">256</span></span>|<span data-ttu-id="46820-500">2 番目のボタンは既定値です。</span><span class="sxs-lookup"><span data-stu-id="46820-500">Second button is default.</span></span>|  
|`DefaultButton3`|<span data-ttu-id="46820-501">512</span><span class="sxs-lookup"><span data-stu-id="46820-501">512</span></span>|<span data-ttu-id="46820-502">3 番目のボタンは既定値です。</span><span class="sxs-lookup"><span data-stu-id="46820-502">Third button is default.</span></span>|  
|`ApplicationModal`|<span data-ttu-id="46820-503">0</span><span class="sxs-lookup"><span data-stu-id="46820-503">0</span></span>|<span data-ttu-id="46820-504">アプリケーションがモーダルでします。</span><span class="sxs-lookup"><span data-stu-id="46820-504">Application is modal.</span></span> <span data-ttu-id="46820-505">ユーザーは、現在のアプリケーションで作業を続行する前に、メッセージ ボックスに応答する必要があります。</span><span class="sxs-lookup"><span data-stu-id="46820-505">The user must respond to the message box before continuing work in the current application.</span></span>|  
|`SystemModal`|<span data-ttu-id="46820-506">4096</span><span class="sxs-lookup"><span data-stu-id="46820-506">4096</span></span>|<span data-ttu-id="46820-507">システムは、モーダルです。</span><span class="sxs-lookup"><span data-stu-id="46820-507">System is modal.</span></span> <span data-ttu-id="46820-508">すべてのアプリケーションがメッセージ ボックスに、ユーザーが応答するまで中断されます。</span><span class="sxs-lookup"><span data-stu-id="46820-508">All applications are suspended until the user responds to the message box.</span></span>|  
|`MsgBoxSetForeground`|<span data-ttu-id="46820-509">65536</span><span class="sxs-lookup"><span data-stu-id="46820-509">65536</span></span>|<span data-ttu-id="46820-510">前面のウィンドウとして、メッセージ ボックス ウィンドウを指定します。</span><span class="sxs-lookup"><span data-stu-id="46820-510">Specifies the message box window as the foreground window.</span></span>|  
|`MsgBoxRight`|<span data-ttu-id="46820-511">524288</span><span class="sxs-lookup"><span data-stu-id="46820-511">524288</span></span>|<span data-ttu-id="46820-512">テキストは、右揃えです。</span><span class="sxs-lookup"><span data-stu-id="46820-512">Text is right-aligned.</span></span>|  
|`MsgBoxRtlReading`|<span data-ttu-id="46820-513">1048576</span><span class="sxs-lookup"><span data-stu-id="46820-513">1048576</span></span>|<span data-ttu-id="46820-514">テキストが右から左のヘブライ語やアラビア語のシステムでの読み取りを表示する必要がありますを指定します。</span><span class="sxs-lookup"><span data-stu-id="46820-514">Specifies text should appear as right-to-left reading on Hebrew and Arabic systems.</span></span>|  
  
 <span data-ttu-id="46820-515">値 (0 ~ 5) の最初のグループには、ダイアログ ボックスに表示されるボタンの種類と数がについて説明します。</span><span class="sxs-lookup"><span data-stu-id="46820-515">The first group of values (0–5) describes the number and type of buttons displayed in the dialog box.</span></span> <span data-ttu-id="46820-516">(16、32、48、64) は、2 番目のグループには、アイコンのスタイルについて説明します。</span><span class="sxs-lookup"><span data-stu-id="46820-516">The second group (16, 32, 48, 64) describes the icon style.</span></span> <span data-ttu-id="46820-517">3 番目のグループ (0, 256, 512) は、どのボタンは、既定値を決定します。</span><span class="sxs-lookup"><span data-stu-id="46820-517">The third group (0, 256, 512) determines which button is the default.</span></span> <span data-ttu-id="46820-518">(0, 4096) の 4 番目のグループが、メッセージ ボックスのモーダルかどうかを決定し、5 番目のグループは、メッセージ ボックス ウィンドウが前面のウィンドウで、配置とテキストの方向でかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="46820-518">The fourth group (0, 4096) determines the modality of the message box, and the fifth group specifies whether or not the message box window is the foreground window, along with the alignment and direction of the text.</span></span> <span data-ttu-id="46820-519">最後の値を作成する番号を追加するときに、`Buttons`引数、各グループから 1 つの数値を使用します。</span><span class="sxs-lookup"><span data-stu-id="46820-519">When adding numbers to create a final value for the `Buttons` argument, use only one number from each group.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-520">この例では、 `MsgBox` [はい] と [いいえ] ボタンをダイアログ ボックスで、重大なエラー メッセージを表示する関数。</span><span class="sxs-lookup"><span data-stu-id="46820-520">This example uses the `MsgBox` function to display a critical-error message in a dialog box with Yes and No buttons.</span></span> <span data-ttu-id="46820-521">[いいえ] ボタンは、既定の応答として指定されます。</span><span class="sxs-lookup"><span data-stu-id="46820-521">The No button is specified as the default response.</span></span> <span data-ttu-id="46820-522">結合することでこれは、 `MsgBox` 1 つの数値式の定数値。</span><span class="sxs-lookup"><span data-stu-id="46820-522">This is done by combining the `MsgBox` constant values into one numeric expression.</span></span> <span data-ttu-id="46820-523">この例では、4 を追加 (、はい/いいえ ボタンの組み合わせ) と 16 (、**メッセージの重要な**ウィンドウ) で 276 の合計は 256 (既定のボタンとして 2 番目のボタン) とします。</span><span class="sxs-lookup"><span data-stu-id="46820-523">In this case, adding 4 (the Yes/No button combination) and 16 (the **Critical Message** window) and 256 (the second button as default button) gives a total of 276.</span></span> <span data-ttu-id="46820-524">によって返される値、`MsgBox`関数は、ユーザーが選択したボタンに依存します [はい] 6; の値を返します。7 の値を返しますがありません。</span><span class="sxs-lookup"><span data-stu-id="46820-524">The value returned by the `MsgBox` function depends on the button chosen by the user: Yes returns a value of 6; No returns a value of 7.</span></span>  
  
 [!code-vb[VbVbalrCatRef#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46820-525">
            <paramref name="Prompt" /> が文字列型 (<see langword="String" />) の式でないか、<paramref name="Title" /> が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-525">
              <paramref name="Prompt" /> is not a <see langword="String" /> expression, or <paramref name="Title" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="46820-526">プロセスがユーザー対話モードで動作していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-526">Process is not running in User Interactive mode.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="46820-527">
            <see langword="MsgBoxResult" /> 列挙型または <see langword="MsgBoxStyle" /> 列挙型のメンバーでないパラメーターが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-527">One or more parameters not a member of <see langword="MsgBoxResult" /> or <see langword="MsgBoxStyle" /> enumeration.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MessageBox.Show(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Partition">
      <MemberSignature Language="C#" Value="public static string Partition (long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Partition(int64 Number, int64 Start, int64 Stop, int64 Interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Partition (Number As Long, Start As Long, Stop As Long, Interval As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Partition(long Number, long Start, long Stop, long Interval);" />
      <MemberSignature Language="F#" Value="static member Partition : int64 * int64 * int64 * int64 -&gt; string" Usage="Microsoft.VisualBasic.Interaction.Partition (Number, Start, Stop, Interval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
        <Parameter Name="Start" Type="System.Int64" />
        <Parameter Name="Stop" Type="System.Int64" />
        <Parameter Name="Interval" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="46820-528">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-528">Required.</span>
          </span>
          <span data-ttu-id="46820-529">
            <see langword="Long" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-529">
              <see langword="Long" />.</span>
          </span>
          <span data-ttu-id="46820-530">計算済み範囲のいずれかに存在する整数値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-530">Whole number that you want to locate within one of the calculated ranges.</span>
          </span>
        </param>
        <param name="Start">
          <span data-ttu-id="46820-531">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-531">Required.</span>
          </span>
          <span data-ttu-id="46820-532">
            <see langword="Long" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-532">
              <see langword="Long" />.</span>
          </span>
          <span data-ttu-id="46820-533">計算済み範囲のセットの最小値を示す整数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-533">Whole number that indicates the start of the set of calculated ranges.</span>
          </span>
          <span data-ttu-id="46820-534">
            <c>Start</c> を 0 未満にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-534">
              <c>Start</c> cannot be less than 0.</span>
          </span>
        </param>
        <param name="Stop">
          <span data-ttu-id="46820-535">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-535">Required.</span>
          </span>
          <span data-ttu-id="46820-536">
            <see langword="Long" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-536">
              <see langword="Long" />.</span>
          </span>
          <span data-ttu-id="46820-537">計算済み範囲のセットの最大値を示す整数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-537">Whole number that indicates the end of the set of calculated ranges.</span>
          </span>
          <span data-ttu-id="46820-538">
            <c>Stop</c> には <c>Start</c> 以下の値を指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-538">
              <c>Stop</c> cannot be less than or equal to <c>Start</c>.</span>
          </span>
        </param>
        <param name="Interval">
          <span data-ttu-id="46820-539">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-539">Required.</span>
          </span>
          <span data-ttu-id="46820-540">
            <see langword="Long" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-540">
              <see langword="Long" />.</span>
          </span>
          <span data-ttu-id="46820-541">
            <c>Start</c> と <c>Stop</c> の間で計算される、各範囲のサイズを示す整数値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-541">Whole number that indicates the size of each range calculated between <c>Start</c> and <c>Stop</c>.</span>
          </span>
          <span data-ttu-id="46820-542">
            <c>Interval</c> を 1 未満にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-542">
              <c>Interval</c> cannot be less than 1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-543">ある数値が含まれる計算済み範囲を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-543">Returns a string representing the calculated range that contains a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-544">ある数値が含まれる計算済み範囲を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-544">Returns a string representing the calculated range that contains a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-545">`Partition`関数計算一連の数値の範囲で指定された値の数を格納している各`Interval`します。</span><span class="sxs-lookup"><span data-stu-id="46820-545">The `Partition` function calculates a set of numeric ranges, each containing the number of values specified by `Interval`.</span></span> <span data-ttu-id="46820-546">最初の範囲から始まります`Start`、最後の範囲の終わりと`Stop`します。</span><span class="sxs-lookup"><span data-stu-id="46820-546">The first range begins at `Start`, and the last range ends at `Stop`.</span></span> <span data-ttu-id="46820-547">`Partition`関数を識別しますどの範囲が含まれる`Number`し、その範囲を説明する文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="46820-547">The `Partition` function then identifies which range contains `Number` and returns a string describing that range.</span></span> <span data-ttu-id="46820-548">として文字列で表される範囲"*最大*:*最小*"ここで、範囲の下限 (*最大*) は、ハイ エンドから分離 (*最小*)、コロン (:)。</span><span class="sxs-lookup"><span data-stu-id="46820-548">The range is represented in the string as "*lowervalue*:*uppervalue*", where the low end of the range (*lowervalue*) is separated from the high end (*uppervalue*) by a colon (:).</span></span>  
  
 <span data-ttu-id="46820-549">必要に応じて、`Partition`関数は、前に先頭のスペースを挿入します*最大*と*最小*値 (文字列の形式と同じ文字数ができるように。`Stop` + 1)。</span><span class="sxs-lookup"><span data-stu-id="46820-549">If necessary, the `Partition` function inserts leading spaces before *lowervalue* and *uppervalue* so that they both have the same number of characters as the string representation of the value (`Stop` + 1).</span></span> <span data-ttu-id="46820-550">出力を使用する場合は、これにより、`Partition`のいくつかの値を持つ関数`Number`、以後の並べ替え操作中に、生成されるテキストを正しく処理されます。</span><span class="sxs-lookup"><span data-stu-id="46820-550">This ensures that if you use the output of the `Partition` function with several values of `Number`, the resulting text will be handled properly during any subsequent sort operation.</span></span>  
  
 <span data-ttu-id="46820-551">次の表に、3 つのセットを使用して計算範囲の一部のサンプル文字列`Start`、 `Stop`、および`Interval`します。</span><span class="sxs-lookup"><span data-stu-id="46820-551">The following table shows some sample strings for ranges calculated using three sets of `Start`, `Stop`, and `Interval`.</span></span> <span data-ttu-id="46820-552">「最初の範囲」と「最後の範囲」列は、最低と最高可能な指定した範囲の値を表示する`Start`と`Stop`します。</span><span class="sxs-lookup"><span data-stu-id="46820-552">The "First range" and "Last range" columns show the lowest and highest ranges possible given the values of `Start` and `Stop`.</span></span> <span data-ttu-id="46820-553">列の値に対して返される文字列の表示"Before"の最初の範囲"と"後の最後の範囲"`Number`未満`Start`以上および`Stop`、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="46820-553">The "Before first range" and "After last range" columns show the strings returned for values of `Number` less than `Start` and greater than `Stop`, respectively.</span></span>  
  
|`Start`|`Stop`|`Interval`|<span data-ttu-id="46820-554">最初の範囲の前に</span><span class="sxs-lookup"><span data-stu-id="46820-554">Before first range</span></span>|<span data-ttu-id="46820-555">最初の範囲</span><span class="sxs-lookup"><span data-stu-id="46820-555">First range</span></span>|<span data-ttu-id="46820-556">最後の範囲</span><span class="sxs-lookup"><span data-stu-id="46820-556">Last range</span></span>|<span data-ttu-id="46820-557">最後の範囲の後</span><span class="sxs-lookup"><span data-stu-id="46820-557">After last range</span></span>|  
|-|-|-|-|-|-|-|  
|<span data-ttu-id="46820-558">0</span><span class="sxs-lookup"><span data-stu-id="46820-558">0</span></span>|<span data-ttu-id="46820-559">99</span><span class="sxs-lookup"><span data-stu-id="46820-559">99</span></span>|<span data-ttu-id="46820-560">5</span><span class="sxs-lookup"><span data-stu-id="46820-560">5</span></span>|<span data-ttu-id="46820-561">":-1"</span><span class="sxs-lookup"><span data-stu-id="46820-561">"   : -1"</span></span>|<span data-ttu-id="46820-562">"0: 4"</span><span class="sxs-lookup"><span data-stu-id="46820-562">"  0:  4"</span></span>|<span data-ttu-id="46820-563">「95: 99」</span><span class="sxs-lookup"><span data-stu-id="46820-563">" 95: 99"</span></span>|<span data-ttu-id="46820-564">"100:   "</span><span class="sxs-lookup"><span data-stu-id="46820-564">"100:   "</span></span>|  
|<span data-ttu-id="46820-565">20</span><span class="sxs-lookup"><span data-stu-id="46820-565">20</span></span>|<span data-ttu-id="46820-566">199</span><span class="sxs-lookup"><span data-stu-id="46820-566">199</span></span>|<span data-ttu-id="46820-567">10</span><span class="sxs-lookup"><span data-stu-id="46820-567">10</span></span>|<span data-ttu-id="46820-568">": 19"</span><span class="sxs-lookup"><span data-stu-id="46820-568">"   : 19"</span></span>|<span data-ttu-id="46820-569">「20: 29」</span><span class="sxs-lookup"><span data-stu-id="46820-569">" 20: 29"</span></span>|<span data-ttu-id="46820-570">"190:199"</span><span class="sxs-lookup"><span data-stu-id="46820-570">"190:199"</span></span>|<span data-ttu-id="46820-571">"200:"</span><span class="sxs-lookup"><span data-stu-id="46820-571">"200:   "</span></span>|  
|<span data-ttu-id="46820-572">100</span><span class="sxs-lookup"><span data-stu-id="46820-572">100</span></span>|<span data-ttu-id="46820-573">1010</span><span class="sxs-lookup"><span data-stu-id="46820-573">1010</span></span>|<span data-ttu-id="46820-574">20</span><span class="sxs-lookup"><span data-stu-id="46820-574">20</span></span>|<span data-ttu-id="46820-575">": 99"</span><span class="sxs-lookup"><span data-stu-id="46820-575">"    : 99"</span></span>|<span data-ttu-id="46820-576">「100: 119」</span><span class="sxs-lookup"><span data-stu-id="46820-576">" 100: 119"</span></span>|<span data-ttu-id="46820-577">"1000:1010"</span><span class="sxs-lookup"><span data-stu-id="46820-577">"1000:1010"</span></span>|<span data-ttu-id="46820-578">"1011:    "</span><span class="sxs-lookup"><span data-stu-id="46820-578">"1011:    "</span></span>|  
  
 <span data-ttu-id="46820-579">前の表では、3 番目の行が結果を示しています。 ときに`Start`と`Stop`で均等に割ることはできませんの数値のセットを定義`Interval`します。</span><span class="sxs-lookup"><span data-stu-id="46820-579">In the preceding table, the third line shows the result when `Start` and `Stop` define a set of numbers that cannot be evenly divided by `Interval`.</span></span> <span data-ttu-id="46820-580">最後の範囲の終わり`Stop`、ようには 11 文字も`Interval`は 20 です。</span><span class="sxs-lookup"><span data-stu-id="46820-580">The last range ends at `Stop`, making it only 11 numbers long, even though `Interval` is 20.</span></span>  
  
 <span data-ttu-id="46820-581">場合`Interval`は 1 です。 範囲は、"`Number`:`Number`"に関係なく、、`Start`と`Stop`引数。</span><span class="sxs-lookup"><span data-stu-id="46820-581">If `Interval` is 1, the range is "`Number`:`Number`", regardless of the `Start` and `Stop` arguments.</span></span> <span data-ttu-id="46820-582">たとえば場合、 `Number` 267 は、 `Stop` 1000 と`Interval`は 1 です。 `Partition` "267: 267"を返します。</span><span class="sxs-lookup"><span data-stu-id="46820-582">For example, if `Number` is 267, `Stop` is 1000, and `Interval` is 1, `Partition` returns " 267: 267".</span></span>  
  
 <span data-ttu-id="46820-583">`Partition` データベース クエリを構築するときに役に立ちます。</span><span class="sxs-lookup"><span data-stu-id="46820-583">`Partition` can be useful when constructing database queries.</span></span> <span data-ttu-id="46820-584">1001 に 2000 を請求書の値は 1、1000 などのさまざまな値の範囲内で発生する注文の数を示す選択クエリを作成することができます。</span><span class="sxs-lookup"><span data-stu-id="46820-584">You can create a SELECT query that shows how many orders occur within various value ranges, for example with invoice values from 1 to 1000, 1001 to 2000, and so on.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-585">次の例では、1950 2049 から数十年の範囲を設定します。</span><span class="sxs-lookup"><span data-stu-id="46820-585">The following example sets up a series of ranges for decades from 1950 through 2049.</span></span> <span data-ttu-id="46820-586">値を見つけ、`year`内で適切な範囲を返します、`String`範囲を示す値。</span><span class="sxs-lookup"><span data-stu-id="46820-586">It locates the value of `year` within the appropriate range and returns a `String` value showing the range.</span></span> <span data-ttu-id="46820-587">場合`year`など、1984 年の値を持つ`Partition`「1980:1989」を返します。</span><span class="sxs-lookup"><span data-stu-id="46820-587">If `year` has a value of 1984, for example, `Partition` returns "1980:1989".</span></span>  
  
 [!code-vb[VbVbalrFunctions#45](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46820-588">
            <paramref name="Start" /> &lt; 0、<paramref name="Stop" /> &lt;= <paramref name="Start" />、または <paramref name="Interval" /> &lt; 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-588">
              <paramref name="Start" /> &lt; 0, <paramref name="Stop" /> &lt;= <paramref name="Start" />, or <paramref name="Interval" /> &lt; 1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SaveSetting">
      <MemberSignature Language="C#" Value="public static void SaveSetting (string AppName, string Section, string Key, string Setting);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SaveSetting(string AppName, string Section, string Key, string Setting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveSetting (AppName As String, Section As String, Key As String, Setting As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SaveSetting(System::String ^ AppName, System::String ^ Section, System::String ^ Key, System::String ^ Setting);" />
      <MemberSignature Language="F#" Value="static member SaveSetting : string * string * string * string -&gt; unit" Usage="Microsoft.VisualBasic.Interaction.SaveSetting (AppName, Section, Key, Setting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AppName" Type="System.String" />
        <Parameter Name="Section" Type="System.String" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Setting" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AppName">
          <span data-ttu-id="46820-589">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-589">Required.</span>
          </span>
          <span data-ttu-id="46820-590">設定を適用するアプリケーションまたはプロジェクトの名前が含まれている <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-590">
              <see langword="String" /> expression containing the name of the application or project to which the setting applies.</span>
          </span>
        </param>
        <param name="Section">
          <span data-ttu-id="46820-591">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-591">Required.</span>
          </span>
          <span data-ttu-id="46820-592">キーの設定を保存するセクションの名前を含む <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-592">
              <see langword="String" /> expression containing the name of the section in which the key setting is being saved.</span>
          </span>
        </param>
        <param name="Key">
          <span data-ttu-id="46820-593">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-593">Required.</span>
          </span>
          <span data-ttu-id="46820-594">保存するキー設定の名前を含む <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-594">
              <see langword="String" /> expression containing the name of the key setting being saved.</span>
          </span>
        </param>
        <param name="Setting">
          <span data-ttu-id="46820-595">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-595">Required.</span>
          </span>
          <span data-ttu-id="46820-596">
            <c>Key</c> に設定する値を含む式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-596">Expression containing the value to which <c>Key</c> is being set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-597">Windows レジストリにアプリケーションのエントリを保存または作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-597">Saves or creates an application entry in the Windows registry.</span>
          </span>
          <span data-ttu-id="46820-598">
            <see langword="My" /> 機能を使用すると、<see langword="SaveSetting" /> を使用した場合より生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-598">The <see langword="My" /> feature gives you greater productivity and performance in registry operations than <see langword="SaveSetting" />.</span>
          </span>
          <span data-ttu-id="46820-599">詳細については、「<see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-599">For more information, see <see cref="P:Microsoft.VisualBasic.Devices.ServerComputer.Registry" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-600">`SaveSetting`関数では、キーを追加します。`HKEY_CURRENT_USER\Software\VB and VBA Program Settings`します。</span><span class="sxs-lookup"><span data-stu-id="46820-600">The `SaveSetting` function adds the key to `HKEY_CURRENT_USER\Software\VB and VBA Program Settings`.</span></span>  
  
 <span data-ttu-id="46820-601">何らかの理由は、キーの設定を保存できません、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="46820-601">If the key setting cannot be saved for any reason, an error occurs.</span></span>  
  
 <span data-ttu-id="46820-602">`SaveSetting` ユーザーは、下で動作するためログインする必要があります、`HKEY_LOCAL_USER`レジストリ キーは、ユーザーが対話的にログオンするまでアクティブではありません。</span><span class="sxs-lookup"><span data-stu-id="46820-602">`SaveSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.</span></span>  
  
 <span data-ttu-id="46820-603">いずれかで (Mtx.exe) などの非対話型プロセスからアクセスされるレジストリ設定を格納する必要があります、`HKEY_LOCAL_MACHINE\Software\`または`HKEY_USER\DEFAULT\Software`レジストリ キー。</span><span class="sxs-lookup"><span data-stu-id="46820-603">Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\Software\` or the `HKEY_USER\DEFAULT\Software` registry keys.</span></span>  
  
 <span data-ttu-id="46820-604">`SaveSetting` 必要があります`Write`と`Create`<xref:System.Security.Permissions.RegistryPermission>します。</span><span class="sxs-lookup"><span data-stu-id="46820-604">`SaveSetting` requires `Write` and `Create`<xref:System.Security.Permissions.RegistryPermission> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-605">次の例を使用して、`SaveSetting`の Windows レジストリにエントリを作成する関数、`MyApp`アプリケーション、および、使用、`DeleteSetting`それらを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="46820-605">The following example first uses the `SaveSetting` function to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them.</span></span>  
  
 [!code-vb[VbVbalrCatRef#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46820-606">キーのレジストリを作成できませんでした。または、ユーザーがログインしていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-606">Key registry could not be created, or user is not logged in.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)" />
        <altmember cref="T:System.Security.Permissions.RegistryPermission" />
      </Docs>
    </Member>
    <Member MemberName="Shell">
      <MemberSignature Language="C#" Value="public static int Shell (string Pathname, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string Pathname, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (Pathname As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (Pathname, Style, Wait, Timeout)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="C#" Value="public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Shell(string PathName, valuetype Microsoft.VisualBasic.AppWinStyle Style, bool Wait, int32 Timeout) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Function Shell (PathName As String, Optional Style As AppWinStyle = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, Optional Wait As Boolean = false, Optional Timeout As Integer = -1) As Integer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="F#" Value="static member Shell : string * Microsoft.VisualBasic.AppWinStyle * bool * int -&gt; int" Usage="Microsoft.VisualBasic.Interaction.Shell (PathName, Style, Wait, Timeout)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="Style" Type="Microsoft.VisualBasic.AppWinStyle" Index="1" />
        <Parameter Name="Wait" Type="System.Boolean" Index="2" />
        <Parameter Name="Timeout" Type="System.Int32" Index="3" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="46820-607">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-607">Required.</span>
          </span>
          <span data-ttu-id="46820-608">
            <see langword="String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-608">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="46820-609">実行するプログラムの名前に、必要な引数とコマンド ライン スイッチを加えたものです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-609">Name of the program to execute, together with any required arguments and command-line switches.</span>
          </span>
          <span data-ttu-id="46820-610">
            <c>PathName</c> には、ドライブ名とディレクトリ パスまたはフォルダー名も指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-610">
              <c>PathName</c> can also include the drive and the directory path or folder.</span>
          </span>
          <span data-ttu-id="46820-611">プログラムのパスがわからない場合には、<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />を使用するとパスを調べることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-611">If you do not know the path to the program, you can use the <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" /> to locate it.</span>
          </span>
          <span data-ttu-id="46820-612">たとえば <c>My.Computer.FileSystem.GetFiles("C:\", True, "testFile.txt")</c> を呼び出すと、ドライブ C:\\\ 内で名前が <c>testFile.txt</c> であるすべてのファイルの完全パスが返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-612">For example, you can call <c>My.Computer.FileSystem.GetFiles("C:\", True, "testFile.txt")</c>, which returns the full path of every file named <c>testFile.txt</c> anywhere on drive C:\\.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Style">
          <span data-ttu-id="46820-613">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-613">Optional.</span>
          </span>
          <span data-ttu-id="46820-614">
            <see langword="AppWinStyle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-614">
              <see langword="AppWinStyle" />.</span>
          </span>
          <span data-ttu-id="46820-615">プログラムが実行されるウィンドウのスタイルを指定する、<see cref="T:Microsoft.VisualBasic.AppWinStyle" /> から選択した値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-615">A value chosen from the <see cref="T:Microsoft.VisualBasic.AppWinStyle" /> specifying the style of the window in which the program is to run.</span>
          </span>
          <span data-ttu-id="46820-616">
            <c>Style</c> を省略すると、<see langword="Shell" /> では <see langword="AppWinStyle.MinimizedFocus" /> が使用されます。この場合、プログラムは最小化し、フォーカスのある状態で起動します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-616">If <c>Style</c> is omitted, <see langword="Shell" /> uses <see langword="AppWinStyle.MinimizedFocus" />, which starts the program minimized and with focus.</span>
          </span>
        </param>
        <param name="Wait">
          <span data-ttu-id="46820-617">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-617">Optional.</span>
          </span>
          <span data-ttu-id="46820-618">
            <see langword="Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-618">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="46820-619">
            <see langword="Shell" /> 関数で、プログラムが完了するまで待つかどうかを示す値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-619">A value indicating whether the <see langword="Shell" /> function should wait for completion of the program.</span>
          </span>
          <span data-ttu-id="46820-620">
            <c>Wait</c> を省略した場合、<see langword="Shell" /> では <see langword="False" /> が使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-620">If <c>Wait</c> is omitted, <see langword="Shell" /> uses <see langword="False" />.</span>
          </span>
        </param>
        <param name="Timeout">
          <span data-ttu-id="46820-621">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-621">Optional.</span>
          </span>
          <span data-ttu-id="46820-622">
            <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-622">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="46820-623">
            <c>Wait</c> が <see langword="True" /> の場合に、プログラムの完了を待つ時間をミリ秒単位で指定する数値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-623">The number of milliseconds to wait for completion if <c>Wait</c> is <see langword="True" />.</span>
          </span>
          <span data-ttu-id="46820-624">
            <c>Timeout</c> を省略すると、<see langword="Shell" /> では -1 が使用されます。この場合、タイムアウトは発生せず、<see langword="Shell" /> はプログラムが終了するまで値を返しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-624">If <c>Timeout</c> is omitted, <see langword="Shell" /> uses -1, which means there is no timeout and <see langword="Shell" /> does not return until the program finishes.</span>
          </span>
          <span data-ttu-id="46820-625">したがって、<c>Timeout</c> を省略するか -1 に設定した場合、<see langword="Shell" /> からプログラムに制御が返されなくなる可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-625">Therefore, if you omit <c>Timeout</c> or set it to -1, it is possible that <see langword="Shell" /> might never return control to your program.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-626">実行可能プログラムを実行します。プログラムがまだ実行中の場合には、プログラムのプロセス ID を含む整数値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-626">Runs an executable program and returns an integer containing the program's process ID if it is still running.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-627">実行可能プログラムを実行します。プログラムがまだ実行中の場合には、プログラムのプロセス ID を含む整数値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-627">Runs an executable program and returns an integer containing the program's process ID if it is still running.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-628">戻り値、`Shell`関数は、プログラムがで指定するかどうかに依存`PathName`タイミングがまだ実行中`Shell`を返します。</span><span class="sxs-lookup"><span data-stu-id="46820-628">The return value of the `Shell` function depends on whether the program named in `PathName` is still executing when `Shell` returns.</span></span> <span data-ttu-id="46820-629">設定した場合`Wait`に`True`タイムアウトになると、前に、プログラムが終了して`Shell`は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="46820-629">If you set `Wait` to `True` and the program finishes before the timeout expires, `Shell` returns zero.</span></span> <span data-ttu-id="46820-630">省略した場合、またはタイムアウトになると、`Wait`かに設定して`False`、`Shell`プログラムのプロセス ID を返します。</span><span class="sxs-lookup"><span data-stu-id="46820-630">If the timeout expires, or if you omit `Wait` or set it to `False`, `Shell` returns the process ID of the program.</span></span> <span data-ttu-id="46820-631">プロセス ID は、実行中のプログラムを識別する一意の番号です。</span><span class="sxs-lookup"><span data-stu-id="46820-631">The process ID is a unique number that identifies the running program.</span></span>  
  
## <a name="failure-to-start"></a><span data-ttu-id="46820-632">起動の失敗</span><span class="sxs-lookup"><span data-stu-id="46820-632">Failure to Start</span></span>  
 <span data-ttu-id="46820-633">場合、`Shell`関数は、名前付きのプログラムを起動できません、<xref:System.IO.FileNotFoundException>エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="46820-633">If the `Shell` function cannot start the named program, a <xref:System.IO.FileNotFoundException> error occurs.</span></span> <span data-ttu-id="46820-634">これに、たとえば、16 ビット プログラムを実行しようとしたときに`command.com`を使用して、アプリケーションから<xref:System.Windows.Forms?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="46820-634">This can happen, for example, when you attempt to run a 16-bit program, such as `command.com`, from an application using <xref:System.Windows.Forms?displayProperty=nameWithType>.</span></span> <span data-ttu-id="46820-635">この問題を回避するには、目的の 16 ビット プログラムを呼び出すの 32 ビット プログラムを実行できます。</span><span class="sxs-lookup"><span data-stu-id="46820-635">For a workaround, you can run a 32-bit program that calls the desired 16-bit program.</span></span> <span data-ttu-id="46820-636">場合に`command.com`、行うことができます`cmd.exe`代わりにします。</span><span class="sxs-lookup"><span data-stu-id="46820-636">In the case of `command.com`, you can run `cmd.exe` as an alternative.</span></span>  
  
## <a name="waiting-for-completion"></a><span data-ttu-id="46820-637">完了を待機しています</span><span class="sxs-lookup"><span data-stu-id="46820-637">Waiting for Completion</span></span>  
 <span data-ttu-id="46820-638">既定で、`Shell`関数は、プログラムを非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="46820-638">By default, the `Shell` function runs the program asynchronously.</span></span> <span data-ttu-id="46820-639">つまり、プログラムを開始、`Shell`関数のステートメントの次の前に実行が完了しない可能性があります、`Shell`関数が実行されます。</span><span class="sxs-lookup"><span data-stu-id="46820-639">This means that a program started with the `Shell` function might not finish executing before the statements following the `Shell` function are executed.</span></span> <span data-ttu-id="46820-640">続行する前に終了するプログラムを待機する場合は、設定`Wait`に`True`します。</span><span class="sxs-lookup"><span data-stu-id="46820-640">If you want to wait for the program to finish before you continue, set `Wait` to `True`.</span></span>  
  
## <a name="determining-the-exit-code"></a><span data-ttu-id="46820-641">終了コードを決定します。</span><span class="sxs-lookup"><span data-stu-id="46820-641">Determining the Exit Code</span></span>  
 <span data-ttu-id="46820-642">プロセスを返すことができます、*終了コード*が終了したとき。</span><span class="sxs-lookup"><span data-stu-id="46820-642">A process can return an *exit code* when it terminates.</span></span> <span data-ttu-id="46820-643">ただし、使用することはできません`Shell`ためこの終了コードを取得する`Shell`の終了を待機している場合は 0 を返しますとも別のオブジェクトで、プロセスが実行されるため`Shell`します。</span><span class="sxs-lookup"><span data-stu-id="46820-643">However, you cannot use `Shell` to retrieve this exit code, because `Shell` returns zero if it waits for termination, and also because the process runs in a different object from `Shell`.</span></span>  
  
 <span data-ttu-id="46820-644">プロセスから終了コードを取得するには、プロセスを開始し、終了まで待機するコードを記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="46820-644">To retrieve the exit code from a process, you must write your own code to initiate the process and wait for termination.</span></span> <span data-ttu-id="46820-645">次の例では、プロセスを開始を終了するまで待機し、その終了コードを取得する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="46820-645">The following example shows how to initiate a process, wait for it to terminate, and retrieve its exit code.</span></span>  
  
```vb  
Dim procID As Integer  
Dim newProc As Diagnostics.Process  
newProc = Diagnostics.Process.Start("C:\WINDOWS\NOTEPAD.EXE")  
procID = newProc.Id  
newProc.WaitForExit()  
Dim procEC As Integer = -1  
If newProc.HasExited Then  
    procEC = newProc.ExitCode  
End If  
MsgBox("Process with ID " & CStr(ProcID) & _  
    " terminated with exit code " & CStr(procEC))  
```  
  
## <a name="protecting-the-file-specification"></a><span data-ttu-id="46820-646">ファイルの仕様を保護します。</span><span class="sxs-lookup"><span data-stu-id="46820-646">Protecting the File Specification</span></span>  
 <span data-ttu-id="46820-647">全体のパスとファイルの仕様は、次の例のように、引用符で常に囲む必要があります。</span><span class="sxs-lookup"><span data-stu-id="46820-647">You should always enclose the entire path and file specification in quotation marks, as the following example shows.</span></span>  
  
```vb  
ID = Shell("""C:\Program Files\display.exe"" -a -q", , True, 100000)  
```  
  
 <span data-ttu-id="46820-648">隣接する二重引用符の各ペア (`" "`)、文字列内では、リテラルは、文字列内の 1 つの二重引用符文字として解釈されます。</span><span class="sxs-lookup"><span data-stu-id="46820-648">Each pair of adjacent double quotation marks (`" "`) within the string literal is interpreted as one double quotation character in the string.</span></span> <span data-ttu-id="46820-649">そのため、前の例は、次の文字列を表示します。、`Shell`関数。</span><span class="sxs-lookup"><span data-stu-id="46820-649">Therefore, the preceding example presents the following string to the `Shell` function:</span></span>  
  
```console  
"C:\Program Files\display.exe" -a -q  
```  
  
 <span data-ttu-id="46820-650">Windows という名前のファイルを検索パスを引用符で囲まれていなかった場合`Program.exe`、C:\ ディレクトリ内の代わりに`display.exe`C:\Program Files ディレクトリにします。</span><span class="sxs-lookup"><span data-stu-id="46820-650">If you did not have the path enclosed in quotation marks, Windows would look for a file called `Program.exe` in the C:\ directory, instead of `display.exe` in the C:\Program Files directory.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="46820-651">場合は、パスとファイルの仕様は、引用符では囲まないで、ファイル名またはパスのノードにスペースが含まれている場合にセキュリティ リスクが存在します。</span><span class="sxs-lookup"><span data-stu-id="46820-651">If you do not enclose the path and file specification in quotation marks, there is a security risk if the file name or a path node contains spaces.</span></span> <span data-ttu-id="46820-652">前の例では、パス ノードで`\Program Files`スペースが含まれています。</span><span class="sxs-lookup"><span data-stu-id="46820-652">In the preceding example, the path node `\Program Files` includes a space.</span></span> <span data-ttu-id="46820-653">仕様引用符とという名前のプログラム内でなかったかどうか`Program.exe`c: インストールされていた\\、たとえば、不正改ざんによって Windows に実行されるのではなく`display.exe`します。</span><span class="sxs-lookup"><span data-stu-id="46820-653">If the specification were not inside quotation marks and a program named `Program.exe` had been installed in C:\\, for example by illicit tampering, Windows would execute it instead of `display.exe`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="46820-654">`Shell`関数が、アンマネージ コード アクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="46820-654">The `Shell` function requires unmanaged code permission, which might affect its execution in partial-trust situations.</span></span> <span data-ttu-id="46820-655">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="46820-655">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-656">次の例では、`Shell`ユーザーによって指定されたアプリケーションを実行する関数。</span><span class="sxs-lookup"><span data-stu-id="46820-656">The following example uses the `Shell` function to run an application specified by the user.</span></span> <span data-ttu-id="46820-657">指定する<xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType>引数として 2 番目の標準サイズで、アプリケーションを開き、フォーカスが与えられます。</span><span class="sxs-lookup"><span data-stu-id="46820-657">Specifying <xref:Microsoft.VisualBasic.AppWinStyle.NormalFocus?displayProperty=nameWithType> as the second argument opens the application in normal size and gives it the focus.</span></span>  
  
 [!code-vb[VbVbalrFunctions#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46820-658">
            <paramref name="Style" /> が 0 ～ 9 (両端を含む) の範囲内の値ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-658">
              <paramref name="Style" /> is not within range 0 through 9, inclusive.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="46820-659">
            <see langword="Shell" /> が <paramref name="PathName" /> ファイルを見つけられません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-659">
              <see langword="Shell" /> cannot find the <paramref name="PathName" /> file.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="46820-660">
            <paramref name="PathName" /> は <see langword="Nothing" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-660">
              <paramref name="PathName" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.NullReferenceException" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles" />
        <altmember cref="Overload:Microsoft.VisualBasic.Interaction.AppActivate" />
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static object Switch (params object[] VarExpr);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Switch(object[] VarExpr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Switch (ParamArray VarExpr As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Switch(... cli::array &lt;System::Object ^&gt; ^ VarExpr);" />
      <MemberSignature Language="F#" Value="static member Switch : obj[] -&gt; obj" Usage="Microsoft.VisualBasic.Interaction.Switch VarExpr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarExpr" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="VarExpr">
          <span data-ttu-id="46820-661">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-661">Required.</span>
          </span>
          <span data-ttu-id="46820-662">
            <see langword="Object" /> パラメーター配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-662">
              <see langword="Object" /> parameter array.</span>
          </span>
          <span data-ttu-id="46820-663">偶数個の要素が含まれている必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-663">Must have an even number of elements.</span>
          </span>
          <span data-ttu-id="46820-664">
            <see langword="Object" /> の変数または式をコンマで区切ったリストか、<see langword="Object" /> 要素の 1 次元配列を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-664">You can supply a list of <see langword="Object" /> variables or expressions separated by commas, or a single-dimensional array of <see langword="Object" /> elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="46820-665">式のリストを評価し、リスト内で最初に <see langword="Object" /> に評価された式に対応する <see langword="True" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-665">Evaluates a list of expressions and returns an <see langword="Object" /> value corresponding to the first expression in the list that is <see langword="True" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="46820-666">式のリストを評価し、リスト内で最初に <see langword="Object" /> に評価された式に対応する <see langword="True" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-666">Evaluates a list of expressions and returns an <see langword="Object" /> value corresponding to the first expression in the list that is <see langword="True" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46820-667">引数に指定される`VarExpr`ペアになっている式と値で構成されます。</span><span class="sxs-lookup"><span data-stu-id="46820-667">The argument supplied to `VarExpr` consists of paired expressions and values.</span></span> <span data-ttu-id="46820-668">`Switch`関数で最も大きいインデックスを小さい方から奇数式を評価して`VarExpr`とに評価される最初の式に関連付けられている偶数値を返します`True`します。</span><span class="sxs-lookup"><span data-stu-id="46820-668">The `Switch` function evaluates the odd-numbered expressions from lowest to highest index in `VarExpr`, and returns the even-numbered value associated with the first expression that evaluates to `True`.</span></span> <span data-ttu-id="46820-669">たとえば場合、`VarExpr(0)`は`True`、`Switch`を返します`VarExpr(1)`、場合に`VarExpr(0)`は`False`が`VarExpr(2)`は`True`、`Switch`を返します`VarExpr(3)`など。</span><span class="sxs-lookup"><span data-stu-id="46820-669">For example, if `VarExpr(0)` is `True`, `Switch` returns `VarExpr(1)`, and if `VarExpr(0)` is `False` but `VarExpr(2)` is `True`, `Switch` returns `VarExpr(3)`, and so on.</span></span>  
  
 <span data-ttu-id="46820-670">指定しない場合、`VarExpr`引数、`Switch`返します`Nothing`します。</span><span class="sxs-lookup"><span data-stu-id="46820-670">If you do not supply the `VarExpr` argument, `Switch` returns `Nothing`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46820-671">引数リスト内の式は、関数呼び出しを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="46820-671">The expressions in the argument list can include function calls.</span></span> <span data-ttu-id="46820-672">呼び出しの引数リストを準備の一環として`Switch`、Visual Basic コンパイラがすべての式ですべての関数を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="46820-672">As part of preparing the argument list for the call to `Switch`, the Visual Basic compiler calls every function in every expression.</span></span> <span data-ttu-id="46820-673">つまり、引数リストの前の式がある場合は、呼び出されていない特定の関数には使用できません`True`します。</span><span class="sxs-lookup"><span data-stu-id="46820-673">This means that you cannot rely on a particular function not being called if an expression earlier in the argument list is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46820-674">次の例では、`Switch`市区町村の名前に一致する言語の名前を返す関数。</span><span class="sxs-lookup"><span data-stu-id="46820-674">The following example uses the `Switch` function to return the name of a language that matches the name of a city.</span></span> <span data-ttu-id="46820-675">必要があります`Option Strict`する`Off`します。</span><span class="sxs-lookup"><span data-stu-id="46820-675">It requires that `Option Strict` be `Off`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#48)]  
  
 <span data-ttu-id="46820-676"><xref:System.Diagnostics>名前空間は、というクラスも含まれています。 <xref:System.Diagnostics.Switch>、への呼び出し、`Switch`で関数を修飾する必要があります、<xref:Microsoft.VisualBasic>名前空間。</span><span class="sxs-lookup"><span data-stu-id="46820-676">Because the <xref:System.Diagnostics> namespace also contains a class called <xref:System.Diagnostics.Switch>, a call to the `Switch` function must be qualified with the <xref:Microsoft.VisualBasic> namespace.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46820-677">引数の数は奇数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="46820-677">Number of arguments is odd.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>