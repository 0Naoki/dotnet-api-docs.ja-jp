<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8ae76229b66a7a71d521a64a406df63f7e7cf230" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69317495" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Information" /> モジュールに含まれるプロシージャを使って、情報の取得、テスト、検証を行います。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このモジュールは、エラー情報の提供、データの検証、配列の境界の決定、およびデータ型と色情報の取得を行う、Visual Basic 言語キーワードとランタイムライブラリメンバーをサポートしています。  
  
   
  
## Examples  
 次の例では`VbTypeName` 、関数を使用して、複数の変数のデータ型名を返します。  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">情報と対話の概要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md">Data Types Summary</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md">宣言と定数の概要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">キーワード (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">ランタイムライブラリのメンバーの Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>最後に実行されたステートメントの行番号を示す整数値を返します。 読み取り専用。</summary>
        <returns>最後に実行されたステートメントの行番号を示す整数値を返します。 読み取り専用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic で行番号が検出されなかった場合は、0を返します。  
  
   
  
## Examples  
 この例では`Erl` 、プロパティを使用して行番号を示しています。  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ランタイム エラーに関する情報を格納します。</summary>
        <returns>ランタイム エラーに関する情報を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Err`オブジェクトのプロパティは、エラー Visual Basic、オブジェクト、またはプログラマのジェネレーターによって設定されます。  
  
 実行時エラーが発生すると、 `Err`オブジェクトのプロパティに、エラーを一意に識別し、エラーを処理するために使用できる情報が格納されます。 コードで実行時エラーを生成するには、 `Raise`メソッドを使用します。  
  
 `Exit Sub` `Exit Function` `Exit Property`オブジェクトのプロパティは、エラー処理ルーチン内の、、、または`Resume Next`ステートメントの後に、0個または長さ0の文字列 ("") にリセットされます。 `Err` エラー処理ルーチンの外部`Resume`で任意の形式のステートメントを使用しても、 `Err`オブジェクトのプロパティはリセットされません。 メソッドを使用し`Clear`て明示的に`Err`リセットできます。  
  
 システムエラーおよびクラスモジュールの`Error`実行時エラーを生成するには、ステートメントではなくメソッドを使用します。`Raise` 他のコードで`Raise`メソッドを使用するかどうかは、取得する情報の豊富さによって決まります。  
  
 オブジェクト`Err`は、グローバルスコープの組み込みオブジェクトです。 したがって、コード内にそのインスタンスを作成する必要はありません。  
  
   
  
## Examples  
 この例では、 `Err`オブジェクトのプロパティを使用して、エラーメッセージダイアログボックスを構築します。 メソッドを最初に使用`Clear`する場合、 `Raise`メソッドで Visual Basic エラーを生成すると、Visual Basic の既定値が`Err`オブジェクトのプロパティになります。  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error ステートメント</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error ステートメント (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md">Exit ステートメント (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md">Resume ステートメント</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md">エラー メッセージ (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Try...Catch...Finally ステートメント (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">必須です。 <see langword="Object" /> 変数。</param>
        <summary>変数が配列を参照しているかどうかを示す <see langword="Boolean" /> 値を返します。</summary>
        <returns>変数が配列を参照しているかどうかを示す <see langword="Boolean" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsArray`変数`True`が配列を指している場合はを返します。 `False`それ以外の場合はを返します。 `IsArray`は、配列を含む可能性のあるオブジェクトで特に便利です。  
  
   
  
## Examples  
 この例では`IsArray` 、関数を使用して、複数の変数が配列を参照しているかどうかを確認します。  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md">Visual Basic における配列</related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 整数型 (<see langword="Object" />) の式を指定します。</param>
        <summary>式が有効な <see langword="Boolean" /> 値を表しているかどうかを示す <see langword="Date" /> 値を返します。</summary>
        <returns>式が有効な <see langword="Boolean" /> 値を表しているかどうかを示す <see langword="Date" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDate`が`True` データ<xref:System.DateTime>型の場合、または変換できる場合はを返します。それ以外`False`の場合`Expression`はを返します。  
  
 データ<xref:System.DateTime>型には、日付値と時刻値の両方が格納されます。 `IsDate`が`True`有効`Expression`な日付、有効な時刻、または有効な日付と時刻を表す場合は、を返します。  
  
   
  
## Examples  
 次の例では`IsDate` 、関数を使用して、複数<xref:System.DateTime>の変数が有効な値を表しているかどうかを判断します。  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 前の例では`IsDate` 、 `True`は、最初の4回`False`の呼び出しと最後の呼び出しに対してを返します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 整数型 (<see langword="Object" />) の式を指定します。</param>
        <summary>式が <see cref="T:System.DBNull" /> クラスに評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</summary>
        <returns>式が <see cref="T:System.DBNull" /> クラスに評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDBNull`の`True` <xref:System.DBNull> `IsDBNull`データ型が型に評価される場合はを返します`False`。それ以外の場合はを返します。 `Expression`  
  
 値は、が`Object`存在しないデータまたは存在しないデータを表すことを示します。 <xref:System.DBNull?displayProperty=nameWithType> `DBNull`はと`Nothing`同じではありません。これは、変数がまだ初期化されていないことを示します。 `DBNull`は、長さが0の文字列 (`""`) とも同じではありません。これは、null 文字列と呼ばれることもあります。  
  
   
  
## Examples  
 この例では`IsDBNull` 、関数を使用して、変数`DBNull`がに評価されるかどうかを判断します。  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 整数型 (<see langword="Object" />) の式を指定します。</param>
        <summary>式が例外の種類かどうかを示す <see langword="Boolean" /> 値を返します。</summary>
        <returns>式が例外の種類かどうかを示す <see langword="Boolean" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsError`式`True`が、 <xref:System>名前空間の`Object` <xref:System.Exception>クラスから派生した変数を表す場合は、を返します。  
  
 から<xref:System.Exception?displayProperty=nameWithType>派生した例外は、 `Try...Catch...Finally`ステートメントでキャッチできます。  
  
   
  
## Examples  
 次の例では`IsError` 、関数を使用して、式がシステム例外を表しているかどうかを確認します。  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 整数型 (<see langword="Object" />) の式を指定します。</param>
        <summary>式にオブジェクトが割り当てられていないかどうかを示す <see langword="Boolean" /> 値を返します。</summary>
        <returns>式にオブジェクトが割り当てられていないかどうかを示す <see langword="Boolean" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNothing`式`True`が、現在オブジェクトが割り当てられていないオブジェクト変数を表している場合はを`False`返します。それ以外の場合はを返します。  
  
 `IsNothing`は、参照型を使用することを目的としています。 値型は、値を保持する[](~/docs/visual-basic/language-reference/nothing.md)ことはできません。値型に割り当てる`Nothing`と、値は既定値に戻ります。 で`Expression`値型を指定した場合`IsNothing` 、は`False`常にを返します。  
  
   
  
## Examples  
 次の例では`IsNothing` 、関数を使用して、オブジェクト変数がオブジェクトインスタンスに関連付けられているかどうかを確認します。  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">値型と参照型</related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 整数型 (<see langword="Object" />) の式を指定します。</param>
        <summary>式が数値として評価できるかどうかを示す <see langword="Boolean" /> 値を返します。</summary>
        <returns>式が数値として評価できるかどうかを示す <see langword="Boolean" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNumeric`の`True`データ型`Expression` `Boolean`が`Single`、 、、`Double`、、 、`Short`、、 、`UInteger`およびの場合はを返します。 `SByte` `Integer` `Long` `Decimal` `Byte`、 `ULong`、また`UShort`は。 また、が`True` `Expression` 、`Char` 、また`Object`はを数値に変換できる場合にもを返します。 `String` `Expression`数値以外の文字を含めることができます。 `IsNumeric`が`True`有効`Expression`な16進数または8進数を含む文字列である場合は、を返します。 `IsNumeric`にが`True`含ま`Expression`れている有効な数値式が + または-文字で始まるか、またはコンマを含んでいる場合は、もを返します。  
  
 `IsNumeric`が`False`データ`Expression` 型`Date`の場合は、を返します。 `False` `Expression`が、`String`、または`Object`を数値に正常に変換できない場合は、を返します。 `Char`  
  
   
  
## Examples  
 次の例では`IsNumeric` 、関数を使用して、変数の内容を数値として評価できるかどうかを判断します。  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 整数型 (<see langword="Object" />) の式を指定します。</param>
        <summary>式が参照型に評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</summary>
        <returns>式が参照型に評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsReference`が`True`参照`Expression`型 (クラスインスタンス、 `String`型、または任意の型の配列など) を表す場合はを返します。それ`False`以外の場合はを返します。  
  
 参照型には、メモリ内の他の場所に格納されているデータへのポインターが含まれています。 値型には、独自のデータが含まれます。  
  
   
  
## Examples  
 この例では`IsReference` 、関数を使用して、複数の変数が参照型を参照しているかどうかを確認します。  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 前の例では、最初の3つ`IsReference`の`True`呼び出しでが返されます。 が参照型で`False`はなく`Integer`値型であるため、最後の呼び出しはを返します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">値型と参照型</related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">必須です。 任意のデータ型の配列です。 ある次元で最も小さいインデックスを探す対象となる配列です。</param>
        <param name="Rank">任意。 <see langword="Integer" />。 最も小さいインデックスが返される次元です。 1 番目の次元の場合は 1、2 番目の次元の場合は 2 という形で指定します。 <paramref name="Rank" /> を省略した場合、1 が使用されます。</param>
        <summary>配列内の指定された次元における最も小さいインデックスを返します。</summary>
        <returns><see langword="Integer" />。 指定した次元に設定できるインデックスの最小値です。 <paramref name="Array" /> が初期化されていれば、たとえばそれが長さ 0 の文字列のときなど要素を含んでいない場合でも、<see langword="LBound" /> は常に 0 を返します。 <paramref name="Array" /> が <see langword="Nothing" /> の場合、<see langword="LBound" /> は <see cref="T:System.ArgumentNullException" /> をスローします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列の添字は 0 から始まるため、各次元で使用できる添字の最小値は常に 0 です。  
  
 次の次元の配列の場合、 `LBound`は次の表の値を返します。  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|LBound への呼び出し|戻り値|  
|--------------------|------------------|  
|`LBound(a, 1)`|0|  
|`LBound(a, 2)`|0|  
|`LBound(a, 3)`|0|  
  
   
  
## Examples  
 次の例では`LBound` 、関数を使用して、配列の指定した次元で使用可能な最小の添字を決定します。  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" /> が <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" /> が 1 未満か、<paramref name="Rank" /> が <paramref name="Array" /> のランクを超えています。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim ステートメント (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">ReDim ステートメント (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">必須です。 0 から 15 の範囲の整数値。</param>
        <summary>指定したカラー番号に対応する RGB カラー コードを表す <see langword="Integer" /> 値を返します。</summary>
        <returns>指定したカラー番号に対応する RGB カラー コードを表す <see langword="Integer" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最下位バイト以降では、返される値は、Visual Basic 言語で使用される RGB システムの適切な色を設定するために使用される赤、緑、および青の値を指定します。  
  
 引数`Color`にはこれらの設定があります。  
  
|数値|色|数値|色|  
|------------|-----------|------------|-----------|  
|0|黒|8|灰色|  
|1|青|9|薄い青|  
|2|緑|10|明るい緑|  
|3|シアン|11|水色|  
|4|赤|12|薄い赤|  
|5|マゼンタ|13|淡いマゼンタ|  
|6|黄|14|薄い黄色|  
|7|白|15|明るい白|  
  
   
  
## Examples  
 この例では`QBColor` 、関数を使用して、で`colorInteger`示される色に変更します。 `QBColor`0から15までの整数値を許容します。  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Color" /> が 0 ～ 15 (両端を含む) の範囲内の値ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">必須です。 赤の色要素の輝度を表す、0 から 255 の範囲の <see langword="Integer" /> 値です。</param>
        <param name="Green">必須です。 緑の色要素の輝度を表す、0 から 255 の範囲の <see langword="Integer" /> 値です。</param>
        <param name="Blue">必須です。 青の色要素の輝度を表す、0 から 255 の範囲の <see langword="Integer" /> 値です。</param>
        <summary>赤、緑、青の色要素のセットを受け取り、RGB カラー値を表す <see langword="Integer" /> 値を返します。</summary>
        <returns>赤、緑、青の色要素のセットを受け取り、RGB カラー値を表す <see langword="Integer" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 色の指定を受け入れるアプリケーションのメソッドとプロパティは、その仕様が RGB 色の値を表す数値であることを想定しています。 RGB 色の値は、赤、緑、および青の相対的な輝度を指定して、特定の色が表示されるようにします。  
  
 のいずれかの引数`RGB`の値が255より大きい場合は、255が使用されます。  
  
 次の表に、標準色と、その中に含まれる赤、緑、および青の値を示します。  
  
|色|赤の値|緑の値|青の値|  
|-----------|---------------|-----------------|----------------|  
|黒|0|0|0|  
|青|0|0|255|  
|緑|0|255|0|  
|シアン|0|255|255|  
|赤|255|0|0|  
|マゼンタ|255|0|255|  
|黄|255|255|0|  
|白|255|255|255|  
  
   
  
## Examples  
 この例では、 `RGB`関数を使用して、 `RGB`色の値を表す整数を返す方法を示します。  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Green" />、<paramref name="Blue" /> または <paramref name="Red" /> が 0 ～ 255 (両端を含む) の範囲内の値ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">必須です。 Visual Basic の型名を含む <see langword="String" /> 変数です。</param>
        <summary>変数のシステム データ型名を含む <see langword="String" /> 値を返します。</summary>
        <returns>変数のシステム データ型名を含む <see langword="String" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SystemTypeName`Visual Basic 型名に対応する完全修飾共通言語ランタイム (CLR) 型名を返します。 たとえば、に " `VbName` Date `SystemTypeName` " が含まれている場合、は "system.string" を返します。 が`SystemTypeName`の`VbName`値を認識しない場合は、 `Nothing` (文字列 "Nothing" ではなく) を返します。  
  
   
  
## Examples  
 次の例では`SystemTypeName` 、関数を使用して、複数の変数のデータ型名を返します。  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">必須です。 <see langword="Object" /> 変数。 <see langword="Option Strict" /> が <see langword="Off" /> の場合、構造体以外の任意のデータ型の変数を渡すことができます。</param>
        <summary>変数に関するデータ型情報を含む <see langword="String" /> 値を返します。</summary>
        <returns>変数に関するデータ型情報を含む <see langword="String" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表は、 `String`の`VarName`さまざまな`TypeName`コンテンツに対してによって返される値を示しています。  
  
|`VarName`内容|返される文字列|  
|------------------------|---------------------|  
|16ビット`True`または`False`値の型|演算|  
|8ビットのバイナリ値型|バイト|  
|16ビット文字値型|Char|  
|64ビットの日付と時刻の値の型|予定|  
|欠損データまたは存在しないデータを示す参照型|"DBNull"|  
|128ビット固定小数点数値型|位|  
|64ビット浮動小数点数値型|小数|  
|32ビット整数値型|以外|  
|非特殊オブジェクトを指す参照型|素材|  
|クラス*objectclass*から作成された特殊なオブジェクトを指す参照型|"*objectclass*"|  
|64ビット整数値型|長い|  
|現在割り当てられているオブジェクトがない参照型|影響|  
|8ビット符号付き整数値型|"SByte"|  
|16ビット整数値型|短い|  
|32ビット浮動小数点数値型|1|  
|16ビット文字の文字列を指す参照型|文字列|  
|32ビット符号なし整数値型|UInteger|  
|64ビット符号なし整数値型|ULong|  
|16ビット符号なし整数値型|UShort|  
  
 が`VarName`配列の場合、返される文字列には、前の表に示す空のかっこが追加された文字列のいずれかを指定できます。 たとえば、が`TypeName`整数`VarName`の配列を指している場合、は "Integer ()" を返します。  
  
 は`TypeName` 、クラスなどの参照型の名前を返すと、修飾名ではなく、名前だけを返します。 たとえば、が`VarName` <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>クラスのオブジェクトを指している場合、は "pagesource"を返します。`TypeName` 変数が特定のクラス型として宣言されていても、オブジェクトが割り当てられてい`TypeName`ない場合、は "Nothing" を返します。  
  
   
  
## Examples  
 次の例では`TypeName` 、関数を使用して、複数の変数に関するデータ型情報を返します。  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">必須です。 任意のデータ型の配列です。 ある次元で最も大きいインデックスを探す対象となる配列です。</param>
        <param name="Rank">任意。 <see langword="Integer" />。 最も大きいインデックスが返される次元です。 1 番目の次元の場合は 1、2 番目の次元の場合は 2 という形で指定します。 <paramref name="Rank" /> を省略した場合、1 が使用されます。</param>
        <summary>配列内の指定された次元における最も大きいインデックスを返します。</summary>
        <returns><see langword="Integer" />。 指定した次元に設定できるインデックスの最大値です。 <paramref name="Array" /> に要素が 1 つしかない場合、<see langword="UBound" /> は 0 を返します。 <paramref name="Array" /> に要素が存在しない場合 (長さ 0 の文字列の場合など)、<see langword="UBound" /> は -1 を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列の添字は0から始まるため、次元の長さは、その次元で使用可能な最大のインデックスよりも大きくなります。  
  
 次の次元の配列の場合、 `UBound`は次の表の値を返します。  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|UBound への呼び出し|戻り値|  
|--------------------|------------------|  
|`UBound(a, 1)`|100|  
|`UBound(a, 2)`|5|  
|`UBound(a, 3)`|4|  
  
 を使用`UBound`すると、配列内の要素の合計数を確認できますが、添字が0から始まるという事実を考慮して、返される値を調整する必要があります。 次の例では、前の例の`a`配列の合計サイズを計算します。  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 に対して`total`計算される値は3030で、101 * 6 * 5 です。  
  
   
  
## Examples  
 次の例では`UBound` 、関数を使用して、配列の指定した次元で使用できる最大の添字を決定します。  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" /> が <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" /> が 1 未満か、<paramref name="Rank" /> が <paramref name="Array" /> のランクを超えています。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim ステートメント (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">ReDim ステートメント (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">必須です。 <see langword="Object" /> 変数。 <see langword="Option Strict" /> が <see langword="Off" /> の場合、構造体以外の任意のデータ型の変数を渡すことができます。</param>
        <summary>変数のデータ型の分類を含む <see langword="Integer" /> 値を返します。</summary>
        <returns>変数のデータ型の分類を含む <see langword="Integer" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって`VarType`返される整数値は、 <xref:Microsoft.VisualBasic.VariantType>のメンバーです。  
  
 次の表は、の`VarType` `VarName`特殊なケースでによって返される値を示しています。  
  
|によって表されるデータ型`VarName`|返される値`VarType`|  
|----------------------------------------|---------------------------------|  
|[Nothing](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|列挙|基`SByte` `Byte` `Integer`になる`UShort`データ型 (、、 、`UInteger` 、、`ULong`、、または) `Long` `Short`|  
|配列|配列要素型のビットごとの OR`VariantType.Array`|  
|配列の配列|And のビット`VariantType.Object`ごとの or`VariantType.Array`|  
|Structure (<xref:System.ValueType?displayProperty=nameWithType>)|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|不明|`VariantType.Object`|  
  
   
  
## Examples  
 次の例では`VarType` 、関数を使用して、複数の変数に関するデータ型の分類情報を返します。  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">必須です。 共通言語ランタイムにより使用される型名を含む <see langword="String" /> 変数。</param>
        <summary>変数の Visual Basic データ型名を含む <see langword="String" /> 値を返します。</summary>
        <returns>変数の Visual Basic データ型名を含む <see langword="String" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `VbTypeName`共通言語ランタイムの型名に対応する Visual Basic 型名を返します。 たとえば、に " `UrtName` int32" または "system.string `VbTypeName` " が含まれている場合、は "Integer" を返します。 が`VbTypeName`の`UrtName`値を認識しない場合は、 `Nothing` (文字列 "Nothing" ではなく) を返します。  
  
 の型名`UrtName`は、 <xref:System.Type>クラスの<xref:System.Reflection.MemberInfo>配列の<xref:System.Reflection.MemberInfo.Name%2A>プロパティなど、さまざまなソースから取得できます。  
  
   
  
## Examples  
 次の例では`VbTypeName` 、関数を使用して、複数の変数のデータ型名を返します。  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">データ型の概要 (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
