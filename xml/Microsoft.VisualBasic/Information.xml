<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2eb7b4c550a11b5654a23c73a2f51fb4d5c2526a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36726778" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a0bd3-101">
        <see langword="Information" /> モジュールに含まれるプロシージャを使って、情報の取得、テスト、検証を行います。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a0bd3-101">The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-102">このモジュールは、Visual Basic 言語のキーワードとエラー情報を提供し、データを検証して、配列の範囲を決定し、データの種類と色の情報を取得、ランタイム ライブラリ メンバーをサポートします。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-102">This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-103">次の例では、`VbTypeName`をいくつかの変数のデータ型の名前を返す関数。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-103">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a0bd3-104">最後に実行されたステートメントの行番号を示す整数値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-104">Returns an integer indicating the line number of the last executed statement.</span>
          </span>
          <span data-ttu-id="a0bd3-105">読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-105">Read-only.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-106">最後に実行されたステートメントの行番号を示す整数値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-106">Returns an integer indicating the line number of the last executed statement.</span>
          </span>
          <span data-ttu-id="a0bd3-107">読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-107">Read-only.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-108">Visual Basic に行番号がない場合は、0 を返します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-108">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-109">この例では、`Erl`行番号を指定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-109">This example uses the `Erl` property to indicate the line number.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a0bd3-110">ランタイム エラーに関する情報を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-110">Contains information about run-time errors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-111">ランタイム エラーに関する情報を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-111">Contains information about run-time errors.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-112">プロパティ、`Err`オブジェクトがエラーのジェネレーターによって設定されます: Visual Basic、オブジェクト、またはプログラマです。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-112">The properties of the `Err` object are set by the generator of an error—Visual Basic, an object, or the programmer.</span></span>  
  
 <span data-ttu-id="a0bd3-113">実行時エラーが発生すると、プロパティの`Err`オブジェクトは、エラーを一意に識別する情報が格納し、エラー処理に使用することができます。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-113">When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error.</span></span> <span data-ttu-id="a0bd3-114">コードの実行時エラーを生成するには、使用、`Raise`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-114">To generate a run-time error in your code, use the `Raise` method.</span></span>  
  
 <span data-ttu-id="a0bd3-115">`Err`オブジェクトのプロパティがゼロまたは長さ 0 の文字列にリセットされます ("") した後、 `Exit Sub`、 `Exit Function`、 `Exit Property`、または`Resume Next`エラー処理ルーチン内のステートメント。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-115">The `Err` object's properties are reset to zero or zero-length strings ("") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine.</span></span> <span data-ttu-id="a0bd3-116">任意の形式を使用して、`Resume`エラー処理ルーチンの外部でのステートメントはリセットされません、`Err`オブジェクトのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-116">Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties.</span></span> <span data-ttu-id="a0bd3-117">使用することができます、`Clear`メソッドを明示的にリセット`Err`です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-117">You can use the `Clear` method to explicitly reset `Err`.</span></span>  
  
 <span data-ttu-id="a0bd3-118">使用して、`Raise`メソッドではなく、`Error`およびモジュールをクラスにシステム エラーの実行時エラーを生成するステートメント。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-118">Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules.</span></span> <span data-ttu-id="a0bd3-119">使用するかどうかについての決定、`Raise`他のコードでメソッドを取得する情報の量によって異なります。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-119">Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.</span></span>  
  
 <span data-ttu-id="a0bd3-120">`Err`オブジェクトは、グローバル スコープを持つ組み込みオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-120">The `Err` object is an intrinsic object with global scope.</span></span> <span data-ttu-id="a0bd3-121">したがって、コードで、そのインスタンスを作成する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-121">Therefore, you do not need to create an instance of it in your code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-122">この例のプロパティを使用して、`Err`エラー メッセージ ダイアログ ボックスを作成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-122">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="a0bd3-123">使用する場合に注意して、`Clear`メソッドと Visual Basic エラーを生成するときに、最初、`Raise`メソッド、Visual Basic の既定値のプロパティになる、`Err`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-123">Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="a0bd3-124">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-124">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-125">
            <see langword="Object" /> 変数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-125">
              <see langword="Object" /> variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-126">変数が配列を参照しているかどうかを示す <see langword="Boolean" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-126">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-127">変数が配列を参照しているかどうかを示す <see langword="Boolean" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-127">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-128">`IsArray` 返します`True`変数が配列であるを指している場合、返します`False`です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-128">`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`.</span></span> <span data-ttu-id="a0bd3-129">`IsArray` オブジェクトの配列を含めることができると便利です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-129">`IsArray` is especially useful with objects that might contain arrays.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-130">この例では、`IsArray`関数を配列にいくつかの変数が参照していることを確認します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-130">This example uses the `IsArray` function to check if several variables refer to an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="a0bd3-131">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-131">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-132">整数型 (<see langword="Object" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-132">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-133">式が有効な <see langword="Boolean" /> 値を表しているかどうかを示す <see langword="Date" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-133">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-134">式が有効な <see langword="Boolean" /> 値を表しているかどうかを示す <see langword="Date" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-134">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-135">`IsDate` 返します`True`場合`Expression`は、<xref:System.DateTime>データを入力することもできますを変換後、それ以外を返します`False`です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-135">`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="a0bd3-136"><xref:System.DateTime>データ型は、日付の値と時刻の値の両方を保持します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-136">The <xref:System.DateTime> data type holds both a date value and a time value.</span></span> <span data-ttu-id="a0bd3-137">`IsDate` 返します`True`場合`Expression`は有効な日付、有効な時刻や有効な日付と時刻を表します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-137">`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-138">次の例では、`IsDate`いくつかの変数を表す有効なかどうかを判断する関数<xref:System.DateTime>値。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-138">The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.</span></span>  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 <span data-ttu-id="a0bd3-139">前の例で`IsDate`返します`True`の最初の 4 つの呼び出しと`False`最後の呼び出しです。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-139">In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="a0bd3-140">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-140">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-141">整数型 (<see langword="Object" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-141">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-142">式が <see cref="T:System.DBNull" /> クラスに評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-142">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-143">式が <see cref="T:System.DBNull" /> クラスに評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-143">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-144">`IsDBNull` 返します`True`データ型の場合`Expression`に評価される、<xref:System.DBNull>入力です。 それ以外の場合、`IsDBNull`を返します`False`です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-144">`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.</span></span>  
  
 <span data-ttu-id="a0bd3-145"><xref:System.DBNull?displayProperty=nameWithType>値が示す、`Object`または存在しないデータを表します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-145">The <xref:System.DBNull?displayProperty=nameWithType> value indicates that the `Object` represents missing or nonexistent data.</span></span> <span data-ttu-id="a0bd3-146">`DBNull` 同じではない`Nothing`変数がまだ初期化されてことを示します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-146">`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized.</span></span> <span data-ttu-id="a0bd3-147">`DBNull` またと同じ長さ 0 の文字列 (`""`)、null 文字列と呼ばします。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-147">`DBNull` is also not the same as a zero-length string (`""`), which is sometimes referred to as a null string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-148">この例では、`IsDBNull`に変数が評価されるかどうかを判断する関数`DBNull`です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-148">This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="a0bd3-149">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-149">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-150">整数型 (<see langword="Object" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-150">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-151">式が例外の種類かどうかを示す <see langword="Boolean" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-151">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-152">式が例外の種類かどうかを示す <see langword="Boolean" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-152">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-153">`IsError` 返します`True`式を表す場合、`Object`から派生した変数、<xref:System.Exception>クラス内で、<xref:System>名前空間。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-153">`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.</span></span>  
  
 <span data-ttu-id="a0bd3-154">派生した例外<xref:System.Exception?displayProperty=nameWithType>でキャッチできます、`Try...Catch...Finally`ステートメントです。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-154">An exception that derives from <xref:System.Exception?displayProperty=nameWithType> can be caught with the `Try...Catch...Finally` statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-155">次の例では、`IsError`かどうかシステムの例外を表す式を確認します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-155">The following example uses the `IsError` function to check if an expression represents a system exception.</span></span>  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="a0bd3-156">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-156">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-157">整数型 (<see langword="Object" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-157">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-158">式にオブジェクトが割り当てられていないかどうかを示す <see langword="Boolean" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-158">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-159">式にオブジェクトが割り当てられていないかどうかを示す <see langword="Boolean" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-159">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-160">`IsNothing` 返します`True`返すかどうか、式を現在持たないオブジェクトに割り当てられた; それ以外の場合、オブジェクト変数を表す、`False`です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-160">`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="a0bd3-161">`IsNothing` 参照型で動作するものです。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-161">`IsNothing` is intended to work on reference types.</span></span> <span data-ttu-id="a0bd3-162">値型の値を保持することはできず、割り当てる場合は、既定値に戻ります`Nothing`にします。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-162">A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it.</span></span> <span data-ttu-id="a0bd3-163">値の型を指定する場合`Expression`、`IsNothing`は常に返します`False`です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-163">If you supply a value type in `Expression`, `IsNothing` always returns `False`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-164">次の例では、`IsNothing`関数オブジェクト変数がオブジェクト インスタンスに関連付けられているかを判断します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-164">The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.</span></span>  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="a0bd3-165">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-165">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-166">整数型 (<see langword="Object" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-166">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-167">式が数値として評価できるかどうかを示す <see langword="Boolean" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-167">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-168">式が数値として評価できるかどうかを示す <see langword="Boolean" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-168">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-169">`IsNumeric` 返します`True`データ型の場合`Expression`は`Boolean`、 `Byte`、 `Decimal`、 `Double`、 `Integer`、 `Long`、 `SByte`、 `Short`、 `Single`、 `UInteger`、`ULong`、または`UShort`です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-169">`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`.</span></span> <span data-ttu-id="a0bd3-170">返します`True`場合`Expression`は、 `Char`、 `String`、または`Object`数値に正常に変換します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-170">It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number.</span></span> <span data-ttu-id="a0bd3-171">`Expression` 数字以外の文字を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-171">`Expression` can contain non-numeric characters.</span></span> <span data-ttu-id="a0bd3-172">`IsNumeric` 返します`True`場合`Expression`は有効な 16 進数または 8 進数の数値を表す文字列。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-172">`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number.</span></span> <span data-ttu-id="a0bd3-173">`IsNumeric` 返されます`True`場合`Expression`で始まる有効な数値式が含まれています、+ または - の文字します。 またはコンマが含まれています。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-173">`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.</span></span>  
  
 <span data-ttu-id="a0bd3-174">`IsNumeric` 返します`False`場合`Expression`のデータ型は`Date`します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-174">`IsNumeric` returns `False` if `Expression` is of data type `Date`.</span></span> <span data-ttu-id="a0bd3-175">返します`False`場合`Expression`は、 `Char`、 `String`、または`Object`番号に正常に変換できません。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-175">It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-176">次の例では、`IsNumeric`か変数の内容が数値として評価できるかを調べます。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-176">The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.</span></span>  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="a0bd3-177">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-177">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-178">整数型 (<see langword="Object" />) の式を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-178">
              <see langword="Object" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-179">式が参照型に評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-179">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-180">式が参照型に評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-180">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-181">`IsReference` 返します`True`場合`Expression`クラスのインスタンスなどの参照型を表す、`String`型、または任意の型の配列を返しますそれ以外の場合、`False`です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-181">`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="a0bd3-182">参照型には、メモリ内で他の場所に格納されているデータへのポインターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-182">A reference type contains a pointer to data stored elsewhere in memory.</span></span> <span data-ttu-id="a0bd3-183">値の型には、独自のデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-183">A value type contains its own data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-184">この例では、`IsReference`関数で複数の変数が参照型を参照してくださいかどうかをチェックします。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-184">This example uses the `IsReference` function to check if several variables refer to reference types.</span></span>  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 <span data-ttu-id="a0bd3-185">上記の例では、最初の 3 つの呼び出しに`IsReference`返す`True`です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-185">In the preceding example, the first three calls to `IsReference` return `True`.</span></span> <span data-ttu-id="a0bd3-186">最後の呼び出し`False`ので、`Integer`が値型、参照型ではありません。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-186">The last call returns `False`, because `Integer` is a value type, not a reference type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">
          <span data-ttu-id="a0bd3-187">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-187">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-188">任意のデータ型の配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-188">Array of any data type.</span>
          </span>
          <span data-ttu-id="a0bd3-189">ある次元で最も小さいインデックスを探す対象となる配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-189">The array in which you want to find the lowest possible subscript of a dimension.</span>
          </span>
        </param>
        <param name="Rank">
          <span data-ttu-id="a0bd3-190">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-190">Optional.</span>
          </span>
          <span data-ttu-id="a0bd3-191">
            <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-191">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="a0bd3-192">最も小さいインデックスが返される次元です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-192">The dimension for which the lowest possible subscript is to be returned.</span>
          </span>
          <span data-ttu-id="a0bd3-193">1 番目の次元の場合は 1、2 番目の次元の場合は 2 という形で指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-193">Use 1 for the first dimension, 2 for the second, and so on.</span>
          </span>
          <span data-ttu-id="a0bd3-194">
            <c>Rank</c> を省略した場合、1 が使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-194">If <c>Rank</c> is omitted, 1 is assumed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-195">配列内の指定された次元における最も小さいインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-195">Returns the lowest available subscript for the indicated dimension of an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-196">
            <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-196">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="a0bd3-197">指定した次元に設定できるインデックスの最小値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-197">The lowest value the subscript for the specified dimension can contain.</span>
          </span>
          <span data-ttu-id="a0bd3-198">
            <paramref name="Array" /> が初期化されていれば、たとえばそれが長さ 0 の文字列のときなど要素を含んでいない場合でも、<see langword="LBound" /> は常に 0 を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-198">
              <see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string.</span>
          </span>
          <span data-ttu-id="a0bd3-199">
            <paramref name="Array" /> が <see langword="Nothing" /> の場合、<see langword="LBound" /> は <see cref="T:System.ArgumentNullException" /> をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-199">If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-200">配列の添字は 0 から始まるため、各次元で使用できる添字の最小値は常に 0 です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-200">Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</span></span>  
  
 <span data-ttu-id="a0bd3-201">次の次元の配列の`LBound`次の表に、値を返します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-201">For an array with the following dimensions, `LBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="a0bd3-202">LBound への呼び出し</span><span class="sxs-lookup"><span data-stu-id="a0bd3-202">Call to LBound</span></span>|<span data-ttu-id="a0bd3-203">戻り値</span><span class="sxs-lookup"><span data-stu-id="a0bd3-203">Return value</span></span>|  
|--------------------|------------------|  
|`LBound(a, 1)`|<span data-ttu-id="a0bd3-204">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-204">0</span></span>|  
|`LBound(a, 2)`|<span data-ttu-id="a0bd3-205">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-205">0</span></span>|  
|`LBound(a, 3)`|<span data-ttu-id="a0bd3-206">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-206">0</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-207">次の例では、`LBound`関数を配列の指定されたディメンションに対して使用できる添字の最小値を決定します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-207">The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0bd3-208">
            <paramref name="Array" /> は <see langword="Nothing" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-208">
              <paramref name="Array" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="a0bd3-209">
            <paramref name="Rank" /> が 1 未満か、<paramref name="Rank" /> が <paramref name="Array" /> のランクを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-209">
              <paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">
          <span data-ttu-id="a0bd3-210">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-210">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-211">0 ～ 15 の範囲の整数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-211">A whole number in the range 0–15.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-212">指定したカラー番号に対応する RGB カラー コードを表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-212">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-213">指定したカラー番号に対応する RGB カラー コードを表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-213">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-214">以降、最下位バイトでは、返される値は、Visual Basic 言語で使用する RGB システムで適切な色を設定するために使用する赤、緑、および青の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-214">Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</span></span>  
  
 <span data-ttu-id="a0bd3-215">`Color`引数がこれらの設定。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-215">The `Color` argument has these settings.</span></span>  
  
|<span data-ttu-id="a0bd3-216">数値</span><span class="sxs-lookup"><span data-stu-id="a0bd3-216">Number</span></span>|<span data-ttu-id="a0bd3-217">色</span><span class="sxs-lookup"><span data-stu-id="a0bd3-217">Color</span></span>|<span data-ttu-id="a0bd3-218">数値</span><span class="sxs-lookup"><span data-stu-id="a0bd3-218">Number</span></span>|<span data-ttu-id="a0bd3-219">色</span><span class="sxs-lookup"><span data-stu-id="a0bd3-219">Color</span></span>|  
|------------|-----------|------------|-----------|  
|<span data-ttu-id="a0bd3-220">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-220">0</span></span>|<span data-ttu-id="a0bd3-221">黒</span><span class="sxs-lookup"><span data-stu-id="a0bd3-221">Black</span></span>|<span data-ttu-id="a0bd3-222">8</span><span class="sxs-lookup"><span data-stu-id="a0bd3-222">8</span></span>|<span data-ttu-id="a0bd3-223">灰色</span><span class="sxs-lookup"><span data-stu-id="a0bd3-223">Gray</span></span>|  
|<span data-ttu-id="a0bd3-224">1</span><span class="sxs-lookup"><span data-stu-id="a0bd3-224">1</span></span>|<span data-ttu-id="a0bd3-225">青</span><span class="sxs-lookup"><span data-stu-id="a0bd3-225">Blue</span></span>|<span data-ttu-id="a0bd3-226">9</span><span class="sxs-lookup"><span data-stu-id="a0bd3-226">9</span></span>|<span data-ttu-id="a0bd3-227">明るい青色</span><span class="sxs-lookup"><span data-stu-id="a0bd3-227">Light blue</span></span>|  
|<span data-ttu-id="a0bd3-228">2</span><span class="sxs-lookup"><span data-stu-id="a0bd3-228">2</span></span>|<span data-ttu-id="a0bd3-229">緑</span><span class="sxs-lookup"><span data-stu-id="a0bd3-229">Green</span></span>|<span data-ttu-id="a0bd3-230">10</span><span class="sxs-lookup"><span data-stu-id="a0bd3-230">10</span></span>|<span data-ttu-id="a0bd3-231">明るい緑</span><span class="sxs-lookup"><span data-stu-id="a0bd3-231">Light green</span></span>|  
|<span data-ttu-id="a0bd3-232">3</span><span class="sxs-lookup"><span data-stu-id="a0bd3-232">3</span></span>|<span data-ttu-id="a0bd3-233">シアン</span><span class="sxs-lookup"><span data-stu-id="a0bd3-233">Cyan</span></span>|<span data-ttu-id="a0bd3-234">11</span><span class="sxs-lookup"><span data-stu-id="a0bd3-234">11</span></span>|<span data-ttu-id="a0bd3-235">明るいシアン</span><span class="sxs-lookup"><span data-stu-id="a0bd3-235">Light cyan</span></span>|  
|<span data-ttu-id="a0bd3-236">4</span><span class="sxs-lookup"><span data-stu-id="a0bd3-236">4</span></span>|<span data-ttu-id="a0bd3-237">赤</span><span class="sxs-lookup"><span data-stu-id="a0bd3-237">Red</span></span>|<span data-ttu-id="a0bd3-238">12</span><span class="sxs-lookup"><span data-stu-id="a0bd3-238">12</span></span>|<span data-ttu-id="a0bd3-239">明るい赤</span><span class="sxs-lookup"><span data-stu-id="a0bd3-239">Light red</span></span>|  
|<span data-ttu-id="a0bd3-240">5</span><span class="sxs-lookup"><span data-stu-id="a0bd3-240">5</span></span>|<span data-ttu-id="a0bd3-241">マゼンタ</span><span class="sxs-lookup"><span data-stu-id="a0bd3-241">Magenta</span></span>|<span data-ttu-id="a0bd3-242">13</span><span class="sxs-lookup"><span data-stu-id="a0bd3-242">13</span></span>|<span data-ttu-id="a0bd3-243">明るい赤紫</span><span class="sxs-lookup"><span data-stu-id="a0bd3-243">Light magenta</span></span>|  
|<span data-ttu-id="a0bd3-244">6</span><span class="sxs-lookup"><span data-stu-id="a0bd3-244">6</span></span>|<span data-ttu-id="a0bd3-245">黄</span><span class="sxs-lookup"><span data-stu-id="a0bd3-245">Yellow</span></span>|<span data-ttu-id="a0bd3-246">14</span><span class="sxs-lookup"><span data-stu-id="a0bd3-246">14</span></span>|<span data-ttu-id="a0bd3-247">明るい黄色</span><span class="sxs-lookup"><span data-stu-id="a0bd3-247">Light yellow</span></span>|  
|<span data-ttu-id="a0bd3-248">7</span><span class="sxs-lookup"><span data-stu-id="a0bd3-248">7</span></span>|<span data-ttu-id="a0bd3-249">白</span><span class="sxs-lookup"><span data-stu-id="a0bd3-249">White</span></span>|<span data-ttu-id="a0bd3-250">16</span><span class="sxs-lookup"><span data-stu-id="a0bd3-250">15</span></span>|<span data-ttu-id="a0bd3-251">明るいホワイト</span><span class="sxs-lookup"><span data-stu-id="a0bd3-251">Bright white</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-252">この例では、`QBColor`で色を変更する関数が示される`colorInteger`です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-252">This example uses the `QBColor` function to change to the color indicated by `colorInteger`.</span></span> <span data-ttu-id="a0bd3-253">`QBColor` 0 ~ 15 の範囲の整数値を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-253">`QBColor` accepts integer values between 0 and 15.</span></span>  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a0bd3-254">
            <paramref name="Color" /> が 0 ～ 15 (両端を含む) の範囲内の値ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-254">
              <paramref name="Color" /> is outside of range 0 to 15, inclusive.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">
          <span data-ttu-id="a0bd3-255">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-255">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-256">赤の色要素の輝度を表す、0 ～ 255 の範囲の <see langword="Integer" /> 値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-256">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the red component of the color.</span>
          </span>
        </param>
        <param name="Green">
          <span data-ttu-id="a0bd3-257">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-257">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-258">緑の色要素の輝度を表す、0 ～ 255 の範囲の <see langword="Integer" /> 値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-258">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the green component of the color.</span>
          </span>
        </param>
        <param name="Blue">
          <span data-ttu-id="a0bd3-259">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-259">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-260">青の色要素の輝度を表す、0 ～ 255 の範囲の <see langword="Integer" /> 値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-260">
              <see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the blue component of the color.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-261">赤、緑、青の色要素のセットを受け取り、RGB カラー値を表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-261">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-262">赤、緑、青の色要素のセットを受け取り、RGB カラー値を表す <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-262">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-263">色の指定をそのまま使用するアプリケーションのメソッドとプロパティは、RGB を表す数値を指定してカラー値を期待します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-263">Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</span></span> <span data-ttu-id="a0bd3-264">色の RGB 値は、赤、緑、および表示される具体的な色が青の相対強度を指定します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-264">An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</span></span>  
  
 <span data-ttu-id="a0bd3-265">場合に渡す引数の値`RGB`255 より大きい 255 を使用します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-265">If the value for any argument to `RGB` is greater than 255, 255 is used.</span></span>  
  
 <span data-ttu-id="a0bd3-266">次の表には、一部の標準的な色と含まれる赤、緑、および青の値が一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-266">The following table lists some standard colors and the red, green, and blue values they include.</span></span>  
  
|<span data-ttu-id="a0bd3-267">色</span><span class="sxs-lookup"><span data-stu-id="a0bd3-267">Color</span></span>|<span data-ttu-id="a0bd3-268">赤の値</span><span class="sxs-lookup"><span data-stu-id="a0bd3-268">Red value</span></span>|<span data-ttu-id="a0bd3-269">緑の値</span><span class="sxs-lookup"><span data-stu-id="a0bd3-269">Green value</span></span>|<span data-ttu-id="a0bd3-270">青の値</span><span class="sxs-lookup"><span data-stu-id="a0bd3-270">Blue value</span></span>|  
|-----------|---------------|-----------------|----------------|  
|<span data-ttu-id="a0bd3-271">黒</span><span class="sxs-lookup"><span data-stu-id="a0bd3-271">Black</span></span>|<span data-ttu-id="a0bd3-272">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-272">0</span></span>|<span data-ttu-id="a0bd3-273">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-273">0</span></span>|<span data-ttu-id="a0bd3-274">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-274">0</span></span>|  
|<span data-ttu-id="a0bd3-275">青</span><span class="sxs-lookup"><span data-stu-id="a0bd3-275">Blue</span></span>|<span data-ttu-id="a0bd3-276">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-276">0</span></span>|<span data-ttu-id="a0bd3-277">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-277">0</span></span>|<span data-ttu-id="a0bd3-278">255</span><span class="sxs-lookup"><span data-stu-id="a0bd3-278">255</span></span>|  
|<span data-ttu-id="a0bd3-279">緑</span><span class="sxs-lookup"><span data-stu-id="a0bd3-279">Green</span></span>|<span data-ttu-id="a0bd3-280">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-280">0</span></span>|<span data-ttu-id="a0bd3-281">255</span><span class="sxs-lookup"><span data-stu-id="a0bd3-281">255</span></span>|<span data-ttu-id="a0bd3-282">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-282">0</span></span>|  
|<span data-ttu-id="a0bd3-283">シアン</span><span class="sxs-lookup"><span data-stu-id="a0bd3-283">Cyan</span></span>|<span data-ttu-id="a0bd3-284">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-284">0</span></span>|<span data-ttu-id="a0bd3-285">255</span><span class="sxs-lookup"><span data-stu-id="a0bd3-285">255</span></span>|<span data-ttu-id="a0bd3-286">255</span><span class="sxs-lookup"><span data-stu-id="a0bd3-286">255</span></span>|  
|<span data-ttu-id="a0bd3-287">赤</span><span class="sxs-lookup"><span data-stu-id="a0bd3-287">Red</span></span>|<span data-ttu-id="a0bd3-288">255</span><span class="sxs-lookup"><span data-stu-id="a0bd3-288">255</span></span>|<span data-ttu-id="a0bd3-289">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-289">0</span></span>|<span data-ttu-id="a0bd3-290">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-290">0</span></span>|  
|<span data-ttu-id="a0bd3-291">マゼンタ</span><span class="sxs-lookup"><span data-stu-id="a0bd3-291">Magenta</span></span>|<span data-ttu-id="a0bd3-292">255</span><span class="sxs-lookup"><span data-stu-id="a0bd3-292">255</span></span>|<span data-ttu-id="a0bd3-293">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-293">0</span></span>|<span data-ttu-id="a0bd3-294">255</span><span class="sxs-lookup"><span data-stu-id="a0bd3-294">255</span></span>|  
|<span data-ttu-id="a0bd3-295">黄</span><span class="sxs-lookup"><span data-stu-id="a0bd3-295">Yellow</span></span>|<span data-ttu-id="a0bd3-296">255</span><span class="sxs-lookup"><span data-stu-id="a0bd3-296">255</span></span>|<span data-ttu-id="a0bd3-297">255</span><span class="sxs-lookup"><span data-stu-id="a0bd3-297">255</span></span>|<span data-ttu-id="a0bd3-298">0</span><span class="sxs-lookup"><span data-stu-id="a0bd3-298">0</span></span>|  
|<span data-ttu-id="a0bd3-299">白</span><span class="sxs-lookup"><span data-stu-id="a0bd3-299">White</span></span>|<span data-ttu-id="a0bd3-300">255</span><span class="sxs-lookup"><span data-stu-id="a0bd3-300">255</span></span>|<span data-ttu-id="a0bd3-301">255</span><span class="sxs-lookup"><span data-stu-id="a0bd3-301">255</span></span>|<span data-ttu-id="a0bd3-302">255</span><span class="sxs-lookup"><span data-stu-id="a0bd3-302">255</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-303">この例では、どのように`RGB`を表す整数を返す関数を使用、`RGB`カラー値。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-303">This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.</span></span>  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a0bd3-304">
            <paramref name="Green" />、<paramref name="Blue" /> または <paramref name="Red" /> が 0 ～ 255 (両端を含む) の範囲内の値ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-304">
              <paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">
          <span data-ttu-id="a0bd3-305">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-305">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-306">Visual Basic の型名を含む <see langword="String" /> 変数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-306">A <see langword="String" /> variable containing a Visual Basic type name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-307">変数のシステム データ型名を含む <see langword="String" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-307">Returns a <see langword="String" /> value containing the system data type name of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-308">変数のシステム データ型名を含む <see langword="String" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-308">Returns a <see langword="String" /> value containing the system data type name of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-309">`SystemTypeName` 完全修飾共通言語ランタイム (CLR) 型に対応する名前、Visual Basic の型名を返します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-309">`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</span></span> <span data-ttu-id="a0bd3-310">たとえば場合、 `VbName` 「日」を含む`SystemTypeName`"System.DateTime"を返します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-310">For example, if `VbName` contains "Date", `SystemTypeName` returns "System.DateTime".</span></span> <span data-ttu-id="a0bd3-311">場合`SystemTypeName`の値を認識しない`VbName`、返します`Nothing`(文字列ではなく"Nothing") です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-311">If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-312">次の例では、`SystemTypeName`をいくつかの変数のデータ型の名前を返す関数。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-312">The following example uses the `SystemTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="a0bd3-313">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-313">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-314">
            <see langword="Object" /> 変数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-314">
              <see langword="Object" /> variable.</span>
          </span>
          <span data-ttu-id="a0bd3-315">
            <see langword="Option Strict" /> が <see langword="Off" /> の場合、構造体以外の任意のデータ型の変数を渡すことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-315">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-316">変数に関するデータ型情報を含む <see langword="String" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-316">Returns a <see langword="String" /> value containing data-type information about a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-317">変数に関するデータ型情報を含む <see langword="String" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-317">Returns a <see langword="String" /> value containing data-type information about a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-318">次の表に、`String`によって返される値`TypeName`のさまざまな内容`VarName`です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-318">The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.</span></span>  
  
|<span data-ttu-id="a0bd3-319">`VarName` 内容</span><span class="sxs-lookup"><span data-stu-id="a0bd3-319">`VarName` contents</span></span>|<span data-ttu-id="a0bd3-320">返される文字列</span><span class="sxs-lookup"><span data-stu-id="a0bd3-320">String returned</span></span>|  
|------------------------|---------------------|  
|<span data-ttu-id="a0bd3-321">16 ビット`True`または`False`値の型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-321">16-bit `True` or `False` value type</span></span>|<span data-ttu-id="a0bd3-322">"Boolean"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-322">"Boolean"</span></span>|  
|<span data-ttu-id="a0bd3-323">8 ビットのバイナリ値の型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-323">8-bit binary value type</span></span>|<span data-ttu-id="a0bd3-324">「バイト」</span><span class="sxs-lookup"><span data-stu-id="a0bd3-324">"Byte"</span></span>|  
|<span data-ttu-id="a0bd3-325">16 ビット文字値の型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-325">16-bit character value type</span></span>|<span data-ttu-id="a0bd3-326">"Char"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-326">"Char"</span></span>|  
|<span data-ttu-id="a0bd3-327">64 ビットの日付と時刻の値を入力します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-327">64-bit date and time value type</span></span>|<span data-ttu-id="a0bd3-328">"Date"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-328">"Date"</span></span>|  
|<span data-ttu-id="a0bd3-329">参照型のデータが存在しないか、存在しないことを示します</span><span class="sxs-lookup"><span data-stu-id="a0bd3-329">Reference type indicating missing or nonexistent data</span></span>|<span data-ttu-id="a0bd3-330">"DBNull"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-330">"DBNull"</span></span>|  
|<span data-ttu-id="a0bd3-331">128 ビットの固定小数点数値型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-331">128-bit fixed-point numeric value type</span></span>|<span data-ttu-id="a0bd3-332">"Decimal"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-332">"Decimal"</span></span>|  
|<span data-ttu-id="a0bd3-333">64 ビット浮動小数点数値型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-333">64-bit floating-point numeric value type</span></span>|<span data-ttu-id="a0bd3-334">"Double"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-334">"Double"</span></span>|  
|<span data-ttu-id="a0bd3-335">32 ビット整数値の型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-335">32-bit integer value type</span></span>|<span data-ttu-id="a0bd3-336">「整数」</span><span class="sxs-lookup"><span data-stu-id="a0bd3-336">"Integer"</span></span>|  
|<span data-ttu-id="a0bd3-337">特殊化されていないオブジェクトを指す参照型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-337">Reference type pointing to an unspecialized object</span></span>|<span data-ttu-id="a0bd3-338">「オブジェクト」</span><span class="sxs-lookup"><span data-stu-id="a0bd3-338">"Object"</span></span>|  
|<span data-ttu-id="a0bd3-339">クラスから作成された特殊なオブジェクトを指す参照型*objectclass*</span><span class="sxs-lookup"><span data-stu-id="a0bd3-339">Reference type pointing to a specialized object created from class *objectclass*</span></span>|<span data-ttu-id="a0bd3-340">"*objectclass*"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-340">"*objectclass*"</span></span>|  
|<span data-ttu-id="a0bd3-341">64 ビット整数値の型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-341">64-bit integer value type</span></span>|<span data-ttu-id="a0bd3-342">"Long"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-342">"Long"</span></span>|  
|<span data-ttu-id="a0bd3-343">オブジェクトが現在割り当てられていない参照型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-343">Reference type with no object currently assigned to it</span></span>|<span data-ttu-id="a0bd3-344">"Nothing"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-344">"Nothing"</span></span>|  
|<span data-ttu-id="a0bd3-345">8 ビット符号付き整数値の型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-345">8-bit signed integer value type</span></span>|<span data-ttu-id="a0bd3-346">"SByte"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-346">"SByte"</span></span>|  
|<span data-ttu-id="a0bd3-347">16 ビット整数値の型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-347">16-bit integer value type</span></span>|<span data-ttu-id="a0bd3-348">"Short"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-348">"Short"</span></span>|  
|<span data-ttu-id="a0bd3-349">32 ビット浮動小数点数値型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-349">32-bit floating-point numeric value type</span></span>|<span data-ttu-id="a0bd3-350">「単一」</span><span class="sxs-lookup"><span data-stu-id="a0bd3-350">"Single"</span></span>|  
|<span data-ttu-id="a0bd3-351">16 ビット文字の文字列を指す参照型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-351">Reference type pointing to a string of 16-bit characters</span></span>|<span data-ttu-id="a0bd3-352">「文字列」</span><span class="sxs-lookup"><span data-stu-id="a0bd3-352">"String"</span></span>|  
|<span data-ttu-id="a0bd3-353">32 ビット符号なし整数値の型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-353">32-bit unsigned integer value type</span></span>|<span data-ttu-id="a0bd3-354">"UInteger"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-354">"UInteger"</span></span>|  
|<span data-ttu-id="a0bd3-355">64 ビット符号なし整数値の型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-355">64-bit unsigned integer value type</span></span>|<span data-ttu-id="a0bd3-356">"ULong"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-356">"ULong"</span></span>|  
|<span data-ttu-id="a0bd3-357">16 ビット符号なし整数値の型</span><span class="sxs-lookup"><span data-stu-id="a0bd3-357">16-bit unsigned integer value type</span></span>|<span data-ttu-id="a0bd3-358">"UShort"</span><span class="sxs-lookup"><span data-stu-id="a0bd3-358">"UShort"</span></span>|  
  
 <span data-ttu-id="a0bd3-359">場合`VarName`配列は、返される文字列は空のかっこの前の表に、文字列のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-359">If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</span></span> <span data-ttu-id="a0bd3-360">たとえば場合、 `VarName` 、整数の配列を指す`TypeName`"Integer()"を返します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-360">For example, if `VarName` points to an array of integers, `TypeName` returns "Integer()".</span></span>  
  
 <span data-ttu-id="a0bd3-361">ときに`TypeName`参照型の名前を返します、クラスなどのみ名前自体は、修飾名ではなくを返します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-361">When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</span></span> <span data-ttu-id="a0bd3-362">たとえば場合、`VarName`クラスのオブジェクトを指す<xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>、 `TypeName` "PaperSource"を返します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-362">For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` returns "PaperSource".</span></span> <span data-ttu-id="a0bd3-363">場合は、変数が特定のクラス型に宣言されている必要はありませんに割り当てられたオブジェクト`TypeName`"Nothing"を返します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-363">Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns "Nothing".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-364">次の例では、`TypeName`をいくつかの変数に関するデータ型情報を返す関数。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-364">The following example uses the `TypeName` function to return data type information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">
          <span data-ttu-id="a0bd3-365">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-365">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-366">任意のデータ型の配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-366">Array of any data type.</span>
          </span>
          <span data-ttu-id="a0bd3-367">ある次元で最も大きいインデックスを探す対象となる配列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-367">The array in which you want to find the highest possible subscript of a dimension.</span>
          </span>
        </param>
        <param name="Rank">
          <span data-ttu-id="a0bd3-368">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-368">Optional.</span>
          </span>
          <span data-ttu-id="a0bd3-369">
            <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-369">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="a0bd3-370">最も大きいインデックスが返される次元です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-370">The dimension for which the highest possible subscript is to be returned.</span>
          </span>
          <span data-ttu-id="a0bd3-371">1 番目の次元の場合は 1、2 番目の次元の場合は 2 という形で指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-371">Use 1 for the first dimension, 2 for the second, and so on.</span>
          </span>
          <span data-ttu-id="a0bd3-372">
            <c>Rank</c> を省略した場合、1 が使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-372">If <c>Rank</c> is omitted, 1 is assumed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-373">配列内の指定された次元における最も大きいインデックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-373">Returns the highest available subscript for the indicated dimension of an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-374">
            <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-374">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="a0bd3-375">指定した次元に設定できるインデックスの最大値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-375">The highest value the subscript for the specified dimension can contain.</span>
          </span>
          <span data-ttu-id="a0bd3-376">
            <paramref name="Array" /> に要素が 1 つしかない場合、<see langword="UBound" /> は 0 を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-376">If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0.</span>
          </span>
          <span data-ttu-id="a0bd3-377">
            <paramref name="Array" /> に要素が存在しない場合 (長さ 0 の文字列の場合など)、<see langword="UBound" /> は -1 を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-377">If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-378">配列の添字は 0 から始まる、ため、次元の長さはそのディメンションの最も大きいインデックスより 1 だけ大きい数値です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-378">Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</span></span>  
  
 <span data-ttu-id="a0bd3-379">次の次元の配列の`UBound`次の表に、値を返します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-379">For an array with the following dimensions, `UBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="a0bd3-380">UBound への呼び出し</span><span class="sxs-lookup"><span data-stu-id="a0bd3-380">Call to UBound</span></span>|<span data-ttu-id="a0bd3-381">戻り値</span><span class="sxs-lookup"><span data-stu-id="a0bd3-381">Return value</span></span>|  
|--------------------|------------------|  
|`UBound(a, 1)`|<span data-ttu-id="a0bd3-382">100</span><span class="sxs-lookup"><span data-stu-id="a0bd3-382">100</span></span>|  
|`UBound(a, 2)`|<span data-ttu-id="a0bd3-383">5</span><span class="sxs-lookup"><span data-stu-id="a0bd3-383">5</span></span>|  
|`UBound(a, 3)`|<span data-ttu-id="a0bd3-384">4</span><span class="sxs-lookup"><span data-stu-id="a0bd3-384">4</span></span>|  
  
 <span data-ttu-id="a0bd3-385">使用することができます`UBound`合計を計算しますが、配列の要素の数が添字は 0 から始まることをアカウントに返す値を調整する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-385">You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</span></span> <span data-ttu-id="a0bd3-386">次の例は、配列の合計サイズを計算`a`前の例。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-386">The following example calculates the total size of the array `a` in the preceding example:</span></span>  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 <span data-ttu-id="a0bd3-387">値が計算`total`は 3030、101 * 6 * 5 です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-387">The value calculated for `total` is 3030, which is 101 * 6 * 5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-388">次の例では、`UBound`関数を配列の指定された次元の最も大きいインデックスを決定します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-388">The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a0bd3-389">
            <paramref name="Array" /> は <see langword="Nothing" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-389">
              <paramref name="Array" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="a0bd3-390">
            <paramref name="Rank" /> が 1 未満か、<paramref name="Rank" /> が <paramref name="Array" /> のランクを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-390">
              <paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">
          <span data-ttu-id="a0bd3-391">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-391">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-392">
            <see langword="Object" /> 変数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-392">
              <see langword="Object" /> variable.</span>
          </span>
          <span data-ttu-id="a0bd3-393">
            <see langword="Option Strict" /> が <see langword="Off" /> の場合、構造体以外の任意のデータ型の変数を渡すことができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-393">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-394">変数のデータ型の分類を含む <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-394">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-395">変数のデータ型の分類を含む <see langword="Integer" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-395">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-396">によって返された整数値`VarType`のメンバーである、<xref:Microsoft.VisualBasic.VariantType>です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-396">The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.</span></span>  
  
 <span data-ttu-id="a0bd3-397">によって返される値を次の表に示します`VarType`の特殊なケースの`VarName`します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-397">The following table shows the values returned by `VarType` for special cases of `VarName`.</span></span>  
  
|<span data-ttu-id="a0bd3-398">によって表されるデータ型 `VarName`</span><span class="sxs-lookup"><span data-stu-id="a0bd3-398">Data type represented by `VarName`</span></span>|<span data-ttu-id="a0bd3-399">によって返される値 `VarType`</span><span class="sxs-lookup"><span data-stu-id="a0bd3-399">Value returned by `VarType`</span></span>|  
|----------------------------------------|---------------------------------|  
|[<span data-ttu-id="a0bd3-400">Nothing</span><span class="sxs-lookup"><span data-stu-id="a0bd3-400">Nothing</span></span>](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|<span data-ttu-id="a0bd3-401">列挙</span><span class="sxs-lookup"><span data-stu-id="a0bd3-401">Enumeration</span></span>|<span data-ttu-id="a0bd3-402">基になるデータ型 (`SByte`、 `Byte`、 `Short`、 `UShort`、 `Integer`、 `UInteger`、 `Long`、または`ULong`)</span><span class="sxs-lookup"><span data-stu-id="a0bd3-402">Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)</span></span>|  
|<span data-ttu-id="a0bd3-403">配列</span><span class="sxs-lookup"><span data-stu-id="a0bd3-403">Array</span></span>|<span data-ttu-id="a0bd3-404">配列要素の型のビットごとの OR と `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="a0bd3-404">Bitwise OR of array element type and `VariantType.Array`</span></span>|  
|<span data-ttu-id="a0bd3-405">配列の配列</span><span class="sxs-lookup"><span data-stu-id="a0bd3-405">Array of arrays</span></span>|<span data-ttu-id="a0bd3-406">ビットごとの OR`VariantType.Object`と `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="a0bd3-406">Bitwise OR of `VariantType.Object` and `VariantType.Array`</span></span>|  
|<span data-ttu-id="a0bd3-407">構造体 (<xref:System.ValueType?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="a0bd3-407">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span></span>|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|<span data-ttu-id="a0bd3-408">不明</span><span class="sxs-lookup"><span data-stu-id="a0bd3-408">Unknown</span></span>|`VariantType.Object`|  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-409">次の例では、`VarType`をいくつかの変数に関するデータ型の分類の情報を返す関数。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-409">The following example uses the `VarType` function to return data type classification information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">
          <span data-ttu-id="a0bd3-410">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-410">Required.</span>
          </span>
          <span data-ttu-id="a0bd3-411">共通言語ランタイムにより使用される型名を含む <see langword="String" /> 変数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-411">
              <see langword="String" /> variable containing a type name used by the common language runtime.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a0bd3-412">変数の Visual Basic データ型名を含む <see langword="String" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-412">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a0bd3-413">変数の Visual Basic データ型名を含む <see langword="String" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a0bd3-413">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0bd3-414">`VbTypeName` 共通言語ランタイムの型名に対応する Visual Basic の型名を返します。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-414">`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name.</span></span> <span data-ttu-id="a0bd3-415">たとえば場合、 `UrtName` "Int32"または"System.Int32"を含む`VbTypeName`「整数」が返されます。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-415">For example, if `UrtName` contains "Int32" or "System.Int32", `VbTypeName` returns "Integer".</span></span> <span data-ttu-id="a0bd3-416">場合`VbTypeName`の値を認識しない`UrtName`、返します`Nothing`(文字列ではなく"Nothing") です。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-416">If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
 <span data-ttu-id="a0bd3-417">内の型名`UrtName`からなど、さまざまなソースから取得できます、<xref:System.Reflection.MemberInfo.Name%2A>プロパティに、<xref:System.Reflection.MemberInfo>の配列、<xref:System.Type>クラスです。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-417">The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0bd3-418">次の例では、`VbTypeName`をいくつかの変数のデータ型の名前を返す関数。</span><span class="sxs-lookup"><span data-stu-id="a0bd3-418">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>