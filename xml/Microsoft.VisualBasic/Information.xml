<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f280df7fce7d3af1d90454f62e8521d1bb390eb" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53524254" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b1af4-101"><see langword="Information" /> モジュールに含まれるプロシージャを使って、情報の取得、テスト、検証を行います。</span><span class="sxs-lookup"><span data-stu-id="b1af4-101">The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-102">このモジュールは、Visual Basic 言語のキーワードとエラー情報の提供、データを検証する、配列の範囲の決定、およびデータの種類と色の情報を取得するランタイム ライブラリ メンバーをサポートします。</span><span class="sxs-lookup"><span data-stu-id="b1af4-102">This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-103">次の例では、`VbTypeName`関数をいくつかの変数のデータ型の名前を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-103">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md"><span data-ttu-id="b1af4-104">情報と対話の概要</span><span class="sxs-lookup"><span data-stu-id="b1af4-104">Information and Interaction Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md"><span data-ttu-id="b1af4-105">Data Types Summary</span><span class="sxs-lookup"><span data-stu-id="b1af4-105">Data Types Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md"><span data-ttu-id="b1af4-106">宣言と定数の概要</span><span class="sxs-lookup"><span data-stu-id="b1af4-106">Declarations and Constants Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="b1af4-107">キーワード (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b1af4-107">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="b1af4-108">Visual Basic ランタイム ライブラリ メンバー</span><span class="sxs-lookup"><span data-stu-id="b1af4-108">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1af4-109">最後に実行されたステートメントの行番号を示す整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-109">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="b1af4-110">読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="b1af4-110">Read-only.</span></span></summary>
        <returns><span data-ttu-id="b1af4-111">最後に実行されたステートメントの行番号を示す整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-111">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="b1af4-112">読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="b1af4-112">Read-only.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-113">Visual Basic に行番号がない場合は、0 を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-113">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-114">この例では、`Erl`プロパティを行番号を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-114">This example uses the `Erl` property to indicate the line number.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1af4-115">ランタイム エラーに関する情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-115">Contains information about run-time errors.</span></span></summary>
        <returns><span data-ttu-id="b1af4-116">ランタイム エラーに関する情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-116">Contains information about run-time errors.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-117">プロパティ、`Err`エラー - Visual Basic、オブジェクト、または、プログラマのジェネレーターによってオブジェクトが設定されます。</span><span class="sxs-lookup"><span data-stu-id="b1af4-117">The properties of the `Err` object are set by the generator of an error - Visual Basic, an object, or the programmer.</span></span>  
  
 <span data-ttu-id="b1af4-118">ときに実行時エラーが発生するのプロパティ、`Err`オブジェクトは、エラーを一意に識別する情報が格納、およびエラーを処理するために使用することができます。</span><span class="sxs-lookup"><span data-stu-id="b1af4-118">When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error.</span></span> <span data-ttu-id="b1af4-119">コードでは、実行時エラーを生成するには、使用、`Raise`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b1af4-119">To generate a run-time error in your code, use the `Raise` method.</span></span>  
  
 <span data-ttu-id="b1af4-120">`Err`オブジェクトのプロパティが 0 個または長さ 0 の文字列にリセットされます ("") した後、 `Exit Sub`、 `Exit Function`、 `Exit Property`、または`Resume Next`エラー処理ルーチン内のステートメント。</span><span class="sxs-lookup"><span data-stu-id="b1af4-120">The `Err` object's properties are reset to zero or zero-length strings ("") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine.</span></span> <span data-ttu-id="b1af4-121">任意の形式を使用して、`Resume`ステートメントの外に、エラー処理ルーチンはリセットされません、`Err`オブジェクトのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="b1af4-121">Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties.</span></span> <span data-ttu-id="b1af4-122">使用することができます、`Clear`メソッドを明示的にリセット`Err`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-122">You can use the `Clear` method to explicitly reset `Err`.</span></span>  
  
 <span data-ttu-id="b1af4-123">使用して、`Raise`メソッドではなく、`Error`およびモジュールをクラスにシステム エラーの実行時エラーを生成するステートメント。</span><span class="sxs-lookup"><span data-stu-id="b1af4-123">Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules.</span></span> <span data-ttu-id="b1af4-124">使用するかどうかの決定、`Raise`他のコードでメソッドを取得する情報の量によって異なります。</span><span class="sxs-lookup"><span data-stu-id="b1af4-124">Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.</span></span>  
  
 <span data-ttu-id="b1af4-125">`Err`オブジェクトはグローバル スコープを持つ組み込みのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1af4-125">The `Err` object is an intrinsic object with global scope.</span></span> <span data-ttu-id="b1af4-126">そのため、コードで、そのインスタンスを作成する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b1af4-126">Therefore, you do not need to create an instance of it in your code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-127">この例のプロパティを使用して、`Err`エラー メッセージ ダイアログ ボックスを作成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1af4-127">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="b1af4-128">使用する場合、`Clear`メソッドと Visual Basic エラーを生成するとき、最初に、`Raise`メソッドでは、Visual Basic の既定値のプロパティになります、`Err`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b1af4-128">Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md"><span data-ttu-id="b1af4-129">Error ステートメント</span><span class="sxs-lookup"><span data-stu-id="b1af4-129">Error Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md"><span data-ttu-id="b1af4-130">On Error ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b1af4-130">On Error Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md"><span data-ttu-id="b1af4-131">Exit ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b1af4-131">Exit Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md"><span data-ttu-id="b1af4-132">Resume ステートメント</span><span class="sxs-lookup"><span data-stu-id="b1af4-132">Resume Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md"><span data-ttu-id="b1af4-133">エラー メッセージ (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b1af4-133">Error Messages (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md"><span data-ttu-id="b1af4-134">Try...Catch...Finally ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b1af4-134">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="b1af4-135">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-135">Required.</span></span> <span data-ttu-id="b1af4-136"><see langword="Object" /> 変数。</span><span class="sxs-lookup"><span data-stu-id="b1af4-136"><see langword="Object" /> variable.</span></span></param>
        <summary><span data-ttu-id="b1af4-137">変数が配列を参照しているかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-137">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></summary>
        <returns><span data-ttu-id="b1af4-138">変数が配列を参照しているかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-138">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-139">`IsArray` 返します`True`変数が配列を指している場合、それを返します`False`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-139">`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`.</span></span> <span data-ttu-id="b1af4-140">`IsArray` オブジェクトの配列を含む可能性があると便利です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-140">`IsArray` is especially useful with objects that might contain arrays.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-141">この例では、`IsArray`関数を配列にいくつかの変数が参照しているかを確認します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-141">This example uses the `IsArray` function to check if several variables refer to an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md"><span data-ttu-id="b1af4-142">Visual Basic における配列</span><span class="sxs-lookup"><span data-stu-id="b1af4-142">Arrays in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="b1af4-143">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-143">Required.</span></span> <span data-ttu-id="b1af4-144">整数型 (<see langword="Object" />) の式を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-144"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="b1af4-145">式が有効な <see langword="Boolean" /> 値を表しているかどうかを示す <see langword="Date" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-145">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></summary>
        <returns><span data-ttu-id="b1af4-146">式が有効な <see langword="Boolean" /> 値を表しているかどうかを示す <see langword="Date" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-146">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-147">`IsDate` 返します`True`場合`Expression`は、<xref:System.DateTime>データを入力するかを返します。 それ以外に変換することができます`False`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-147">`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="b1af4-148"><xref:System.DateTime>データ型には、日付の値と時刻の値の両方が保持されます。</span><span class="sxs-lookup"><span data-stu-id="b1af4-148">The <xref:System.DateTime> data type holds both a date value and a time value.</span></span> <span data-ttu-id="b1af4-149">`IsDate` 返します`True`場合`Expression`有効な日付、有効な時刻または有効な日付と時刻を表します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-149">`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-150">次の例では、`IsDate`いくつかの変数を表す有効なかどうかを判断する関数<xref:System.DateTime>値。</span><span class="sxs-lookup"><span data-stu-id="b1af4-150">The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.</span></span>  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 <span data-ttu-id="b1af4-151">前の例では、`IsDate`返します`True`の最初の 4 つの呼び出しと`False`最後の呼び出し。</span><span class="sxs-lookup"><span data-stu-id="b1af4-151">In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="b1af4-152">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-152">Required.</span></span> <span data-ttu-id="b1af4-153">整数型 (<see langword="Object" />) の式を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-153"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="b1af4-154">式が <see cref="T:System.DBNull" /> クラスに評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-154">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></summary>
        <returns><span data-ttu-id="b1af4-155">式が <see cref="T:System.DBNull" /> クラスに評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-155">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-156">`IsDBNull` 返します`True`データ型の場合`Expression`に評価される、<xref:System.DBNull>種類です。 それ以外の場合、`IsDBNull`返します`False`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-156">`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.</span></span>  
  
 <span data-ttu-id="b1af4-157"><xref:System.DBNull?displayProperty=nameWithType>値が示す、`Object`または存在しないデータを表します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-157">The <xref:System.DBNull?displayProperty=nameWithType> value indicates that the `Object` represents missing or nonexistent data.</span></span> <span data-ttu-id="b1af4-158">`DBNull` 同じ`Nothing`変数がまだ初期化されてことを示します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-158">`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized.</span></span> <span data-ttu-id="b1af4-159">`DBNull` 同じではありません、長さ 0 の文字列として (`""`)、null 文字列として呼ばします。</span><span class="sxs-lookup"><span data-stu-id="b1af4-159">`DBNull` is also not the same as a zero-length string (`""`), which is sometimes referred to as a null string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-160">この例では、`IsDBNull`に変数が評価されるかどうかを判断する関数`DBNull`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-160">This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="b1af4-161">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-161">Required.</span></span> <span data-ttu-id="b1af4-162">整数型 (<see langword="Object" />) の式を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-162"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="b1af4-163">式が例外の種類かどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-163">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></summary>
        <returns><span data-ttu-id="b1af4-164">式が例外の種類かどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-164">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-165">`IsError` 返します`True`式を表す場合、`Object`変数から派生した、<xref:System.Exception>クラス、<xref:System>名前空間。</span><span class="sxs-lookup"><span data-stu-id="b1af4-165">`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.</span></span>  
  
 <span data-ttu-id="b1af4-166">派生した例外<xref:System.Exception?displayProperty=nameWithType>でキャッチできます、`Try...Catch...Finally`ステートメント。</span><span class="sxs-lookup"><span data-stu-id="b1af4-166">An exception that derives from <xref:System.Exception?displayProperty=nameWithType> can be caught with the `Try...Catch...Finally` statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-167">次の例では、`IsError`関数でチェックのかどうか、式は、システム例外を表します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-167">The following example uses the `IsError` function to check if an expression represents a system exception.</span></span>  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="b1af4-168">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-168">Required.</span></span> <span data-ttu-id="b1af4-169">整数型 (<see langword="Object" />) の式を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-169"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="b1af4-170">式にオブジェクトが割り当てられていないかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-170">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></summary>
        <returns><span data-ttu-id="b1af4-171">式にオブジェクトが割り当てられていないかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-171">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-172">`IsNothing` 返します`True`返すかどうか、式は、現在がオブジェクトに割り当てられている、それ以外のないオブジェクト変数を表す、`False`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-172">`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="b1af4-173">`IsNothing` 参照型で動作するものです。</span><span class="sxs-lookup"><span data-stu-id="b1af4-173">`IsNothing` is intended to work on reference types.</span></span> <span data-ttu-id="b1af4-174">値型の値を保持することはできず、割り当てた場合、既定値に戻ります`Nothing`にします。</span><span class="sxs-lookup"><span data-stu-id="b1af4-174">A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it.</span></span> <span data-ttu-id="b1af4-175">値の型を指定する場合`Expression`、`IsNothing`は常に返します`False`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-175">If you supply a value type in `Expression`, `IsNothing` always returns `False`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-176">次の例では、`IsNothing`オブジェクト変数がオブジェクト インスタンスに関連付けられているかを判断する関数。</span><span class="sxs-lookup"><span data-stu-id="b1af4-176">The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.</span></span>  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="b1af4-177">値型と参照型</span><span class="sxs-lookup"><span data-stu-id="b1af4-177">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="b1af4-178">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-178">Required.</span></span> <span data-ttu-id="b1af4-179">整数型 (<see langword="Object" />) の式を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-179"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="b1af4-180">式が数値として評価できるかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-180">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></summary>
        <returns><span data-ttu-id="b1af4-181">式が数値として評価できるかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-181">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-182">`IsNumeric` 返します`True`データ型の場合`Expression`は`Boolean`、 `Byte`、 `Decimal`、 `Double`、 `Integer`、 `Long`、 `SByte`、 `Short`、 `Single`、 `UInteger`、`ULong`、または`UShort`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-182">`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`.</span></span> <span data-ttu-id="b1af4-183">返します`True`場合`Expression`は、 `Char`、 `String`、または`Object`数値に正常に変換します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-183">It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number.</span></span> <span data-ttu-id="b1af4-184">`Expression` 数字以外の文字を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="b1af4-184">`Expression` can contain non-numeric characters.</span></span> <span data-ttu-id="b1af4-185">`IsNumeric` 返します`True`場合`Expression`は有効な 16 進数または 8 進数の数値を含む文字列です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-185">`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number.</span></span> <span data-ttu-id="b1af4-186">`IsNumeric` 返します`True`場合`Expression`で始まる有効な数値式が含まれています、+ または - 文字またはコンマを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="b1af4-186">`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.</span></span>  
  
 <span data-ttu-id="b1af4-187">`IsNumeric` 返します`False`場合`Expression`のデータ型は`Date`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-187">`IsNumeric` returns `False` if `Expression` is of data type `Date`.</span></span> <span data-ttu-id="b1af4-188">返します`False`場合`Expression`は、 `Char`、 `String`、または`Object`を数値に正常に変換することはできません。</span><span class="sxs-lookup"><span data-stu-id="b1af4-188">It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-189">次の例では、`IsNumeric`変数の内容が数値として評価できるかを判断する関数。</span><span class="sxs-lookup"><span data-stu-id="b1af4-189">The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.</span></span>  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="b1af4-190">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-190">Required.</span></span> <span data-ttu-id="b1af4-191">整数型 (<see langword="Object" />) の式を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-191"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="b1af4-192">式が参照型に評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-192">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></summary>
        <returns><span data-ttu-id="b1af4-193">式が参照型に評価されるかどうかを示す <see langword="Boolean" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-193">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-194">`IsReference` 返します`True`場合`Expression`クラスのインスタンスなどの参照型を表す、`String`型、または任意の型の配列を返しますそれ以外の場合、`False`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-194">`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="b1af4-195">参照型には、メモリ内で別の場所に格納されているデータへのポインターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="b1af4-195">A reference type contains a pointer to data stored elsewhere in memory.</span></span> <span data-ttu-id="b1af4-196">値の型には、独自のデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="b1af4-196">A value type contains its own data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-197">この例では、`IsReference`かどうかと、いくつかの変数が参照型を参照して確認する関数。</span><span class="sxs-lookup"><span data-stu-id="b1af4-197">This example uses the `IsReference` function to check if several variables refer to reference types.</span></span>  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 <span data-ttu-id="b1af4-198">前の例では、最初の 3 つの呼び出しを`IsReference`返す`True`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-198">In the preceding example, the first three calls to `IsReference` return `True`.</span></span> <span data-ttu-id="b1af4-199">最後の呼び出し`False`ため、`Integer`は参照型ではなく、値型です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-199">The last call returns `False`, because `Integer` is a value type, not a reference type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="b1af4-200">値型と参照型</span><span class="sxs-lookup"><span data-stu-id="b1af4-200">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="b1af4-201">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-201">Required.</span></span> <span data-ttu-id="b1af4-202">任意のデータ型の配列です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-202">Array of any data type.</span></span> <span data-ttu-id="b1af4-203">ある次元で最も小さいインデックスを探す対象となる配列です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-203">The array in which you want to find the lowest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="b1af4-204">任意。</span><span class="sxs-lookup"><span data-stu-id="b1af4-204">Optional.</span></span> <span data-ttu-id="b1af4-205"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="b1af4-205"><see langword="Integer" />.</span></span> <span data-ttu-id="b1af4-206">最も小さいインデックスが返される次元です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-206">The dimension for which the lowest possible subscript is to be returned.</span></span> <span data-ttu-id="b1af4-207">1 番目の次元の場合は 1、2 番目の次元の場合は 2 という形で指定します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-207">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="b1af4-208"><paramref name="Rank" /> を省略した場合、1 が使用されます。</span><span class="sxs-lookup"><span data-stu-id="b1af4-208">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="b1af4-209">配列内の指定された次元における最も小さいインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-209">Returns the lowest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="b1af4-210"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="b1af4-210"><see langword="Integer" />.</span></span> <span data-ttu-id="b1af4-211">指定した次元に設定できるインデックスの最小値です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-211">The lowest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="b1af4-212"><paramref name="Array" /> が初期化されていれば、たとえばそれが長さ 0 の文字列のときなど要素を含んでいない場合でも、<see langword="LBound" /> は常に 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-212"><see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string.</span></span> <span data-ttu-id="b1af4-213"><paramref name="Array" /> が <see langword="Nothing" /> の場合、<see langword="LBound" /> は <see cref="T:System.ArgumentNullException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="b1af4-213">If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-214">配列の添字は 0 から始まるため、各次元で使用できる添字の最小値は常に 0 です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-214">Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</span></span>  
  
 <span data-ttu-id="b1af4-215">次の次元の配列の`LBound`次の表に、値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-215">For an array with the following dimensions, `LBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="b1af4-216">LBound への呼び出し</span><span class="sxs-lookup"><span data-stu-id="b1af4-216">Call to LBound</span></span>|<span data-ttu-id="b1af4-217">戻り値</span><span class="sxs-lookup"><span data-stu-id="b1af4-217">Return value</span></span>|  
|--------------------|------------------|  
|`LBound(a, 1)`|<span data-ttu-id="b1af4-218">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-218">0</span></span>|  
|`LBound(a, 2)`|<span data-ttu-id="b1af4-219">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-219">0</span></span>|  
|`LBound(a, 3)`|<span data-ttu-id="b1af4-220">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-220">0</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-221">次の例では、`LBound`配列の指定された次元の最も小さいインデックスを決定する関数。</span><span class="sxs-lookup"><span data-stu-id="b1af4-221">The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b1af4-222"><paramref name="Array" /> は <see langword="Nothing" /> です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-222"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="b1af4-223"><paramref name="Rank" /> が 1 未満か、<paramref name="Rank" /> が <paramref name="Array" /> のランクを超えています。</span><span class="sxs-lookup"><span data-stu-id="b1af4-223"><paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="b1af4-224">Dim ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b1af4-224">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="b1af4-225">ReDim ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b1af4-225">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color"><span data-ttu-id="b1af4-226">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-226">Required.</span></span> <span data-ttu-id="b1af4-227">0 から 15 の範囲の整数値。</span><span class="sxs-lookup"><span data-stu-id="b1af4-227">A whole number in the range 0-15.</span></span></param>
        <summary><span data-ttu-id="b1af4-228">指定したカラー番号に対応する RGB カラー コードを表す <see langword="Integer" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-228">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></summary>
        <returns><span data-ttu-id="b1af4-229">指定したカラー番号に対応する RGB カラー コードを表す <see langword="Integer" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-229">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-230">以降、最下位バイトでは、返される値は、Visual Basic 言語で使用される RGB システムの適切な色を設定するため、赤、緑、および青の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-230">Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</span></span>  
  
 <span data-ttu-id="b1af4-231">`Color`引数がこれらの設定。</span><span class="sxs-lookup"><span data-stu-id="b1af4-231">The `Color` argument has these settings.</span></span>  
  
|<span data-ttu-id="b1af4-232">数値</span><span class="sxs-lookup"><span data-stu-id="b1af4-232">Number</span></span>|<span data-ttu-id="b1af4-233">色</span><span class="sxs-lookup"><span data-stu-id="b1af4-233">Color</span></span>|<span data-ttu-id="b1af4-234">数値</span><span class="sxs-lookup"><span data-stu-id="b1af4-234">Number</span></span>|<span data-ttu-id="b1af4-235">色</span><span class="sxs-lookup"><span data-stu-id="b1af4-235">Color</span></span>|  
|------------|-----------|------------|-----------|  
|<span data-ttu-id="b1af4-236">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-236">0</span></span>|<span data-ttu-id="b1af4-237">黒</span><span class="sxs-lookup"><span data-stu-id="b1af4-237">Black</span></span>|<span data-ttu-id="b1af4-238">8</span><span class="sxs-lookup"><span data-stu-id="b1af4-238">8</span></span>|<span data-ttu-id="b1af4-239">灰色</span><span class="sxs-lookup"><span data-stu-id="b1af4-239">Gray</span></span>|  
|<span data-ttu-id="b1af4-240">1</span><span class="sxs-lookup"><span data-stu-id="b1af4-240">1</span></span>|<span data-ttu-id="b1af4-241">青</span><span class="sxs-lookup"><span data-stu-id="b1af4-241">Blue</span></span>|<span data-ttu-id="b1af4-242">9</span><span class="sxs-lookup"><span data-stu-id="b1af4-242">9</span></span>|<span data-ttu-id="b1af4-243">薄い青</span><span class="sxs-lookup"><span data-stu-id="b1af4-243">Light blue</span></span>|  
|<span data-ttu-id="b1af4-244">2</span><span class="sxs-lookup"><span data-stu-id="b1af4-244">2</span></span>|<span data-ttu-id="b1af4-245">緑</span><span class="sxs-lookup"><span data-stu-id="b1af4-245">Green</span></span>|<span data-ttu-id="b1af4-246">10</span><span class="sxs-lookup"><span data-stu-id="b1af4-246">10</span></span>|<span data-ttu-id="b1af4-247">明るい緑</span><span class="sxs-lookup"><span data-stu-id="b1af4-247">Light green</span></span>|  
|<span data-ttu-id="b1af4-248">3</span><span class="sxs-lookup"><span data-stu-id="b1af4-248">3</span></span>|<span data-ttu-id="b1af4-249">シアン</span><span class="sxs-lookup"><span data-stu-id="b1af4-249">Cyan</span></span>|<span data-ttu-id="b1af4-250">11</span><span class="sxs-lookup"><span data-stu-id="b1af4-250">11</span></span>|<span data-ttu-id="b1af4-251">薄いシアン</span><span class="sxs-lookup"><span data-stu-id="b1af4-251">Light cyan</span></span>|  
|<span data-ttu-id="b1af4-252">4</span><span class="sxs-lookup"><span data-stu-id="b1af4-252">4</span></span>|<span data-ttu-id="b1af4-253">赤</span><span class="sxs-lookup"><span data-stu-id="b1af4-253">Red</span></span>|<span data-ttu-id="b1af4-254">12</span><span class="sxs-lookup"><span data-stu-id="b1af4-254">12</span></span>|<span data-ttu-id="b1af4-255">淡い赤</span><span class="sxs-lookup"><span data-stu-id="b1af4-255">Light red</span></span>|  
|<span data-ttu-id="b1af4-256">5</span><span class="sxs-lookup"><span data-stu-id="b1af4-256">5</span></span>|<span data-ttu-id="b1af4-257">マゼンタ</span><span class="sxs-lookup"><span data-stu-id="b1af4-257">Magenta</span></span>|<span data-ttu-id="b1af4-258">13</span><span class="sxs-lookup"><span data-stu-id="b1af4-258">13</span></span>|<span data-ttu-id="b1af4-259">明るい赤紫</span><span class="sxs-lookup"><span data-stu-id="b1af4-259">Light magenta</span></span>|  
|<span data-ttu-id="b1af4-260">6</span><span class="sxs-lookup"><span data-stu-id="b1af4-260">6</span></span>|<span data-ttu-id="b1af4-261">黄</span><span class="sxs-lookup"><span data-stu-id="b1af4-261">Yellow</span></span>|<span data-ttu-id="b1af4-262">14</span><span class="sxs-lookup"><span data-stu-id="b1af4-262">14</span></span>|<span data-ttu-id="b1af4-263">淡い黄色</span><span class="sxs-lookup"><span data-stu-id="b1af4-263">Light yellow</span></span>|  
|<span data-ttu-id="b1af4-264">7</span><span class="sxs-lookup"><span data-stu-id="b1af4-264">7</span></span>|<span data-ttu-id="b1af4-265">白</span><span class="sxs-lookup"><span data-stu-id="b1af4-265">White</span></span>|<span data-ttu-id="b1af4-266">16</span><span class="sxs-lookup"><span data-stu-id="b1af4-266">15</span></span>|<span data-ttu-id="b1af4-267">明るいホワイト</span><span class="sxs-lookup"><span data-stu-id="b1af4-267">Bright white</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-268">この例では、`QBColor`で色を変更する関数が示される`colorInteger`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-268">This example uses the `QBColor` function to change to the color indicated by `colorInteger`.</span></span> <span data-ttu-id="b1af4-269">`QBColor` 0 ~ 15 の範囲の整数値を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="b1af4-269">`QBColor` accepts integer values between 0 and 15.</span></span>  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1af4-270"><paramref name="Color" /> が 0 ～ 15 (両端を含む) の範囲内の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="b1af4-270"><paramref name="Color" /> is outside of range 0 to 15, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red"><span data-ttu-id="b1af4-271">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-271">Required.</span></span> <span data-ttu-id="b1af4-272">赤の色要素の輝度を表す、0 から 255 の範囲の <see langword="Integer" /> 値です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-272"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the red component of the color.</span></span></param>
        <param name="Green"><span data-ttu-id="b1af4-273">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-273">Required.</span></span> <span data-ttu-id="b1af4-274">緑の色要素の輝度を表す、0 から 255 の範囲の <see langword="Integer" /> 値です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-274"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the green component of the color.</span></span></param>
        <param name="Blue"><span data-ttu-id="b1af4-275">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-275">Required.</span></span> <span data-ttu-id="b1af4-276">青の色要素の輝度を表す、0 から 255 の範囲の <see langword="Integer" /> 値です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-276"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the blue component of the color.</span></span></param>
        <summary><span data-ttu-id="b1af4-277">赤、緑、青の色要素のセットを受け取り、RGB カラー値を表す <see langword="Integer" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-277">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></summary>
        <returns><span data-ttu-id="b1af4-278">赤、緑、青の色要素のセットを受け取り、RGB カラー値を表す <see langword="Integer" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-278">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-279">色の指定をそのまま使用するアプリケーション メソッドとプロパティは、カラー値を表す RGB の数値にする仕様を期待しています。</span><span class="sxs-lookup"><span data-stu-id="b1af4-279">Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</span></span> <span data-ttu-id="b1af4-280">色の RGB 値では、赤、緑、および表示する特定の色を青の相対強度を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-280">An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</span></span>  
  
 <span data-ttu-id="b1af4-281">場合、引数の値`RGB`、255 より大きい値が 255 を使用します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-281">If the value for any argument to `RGB` is greater than 255, 255 is used.</span></span>  
  
 <span data-ttu-id="b1af4-282">次の表は、いくつかの標準色とが含まれている赤、緑、および青の値を示します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-282">The following table lists some standard colors and the red, green, and blue values they include.</span></span>  
  
|<span data-ttu-id="b1af4-283">色</span><span class="sxs-lookup"><span data-stu-id="b1af4-283">Color</span></span>|<span data-ttu-id="b1af4-284">赤の値</span><span class="sxs-lookup"><span data-stu-id="b1af4-284">Red value</span></span>|<span data-ttu-id="b1af4-285">緑の値</span><span class="sxs-lookup"><span data-stu-id="b1af4-285">Green value</span></span>|<span data-ttu-id="b1af4-286">青の値</span><span class="sxs-lookup"><span data-stu-id="b1af4-286">Blue value</span></span>|  
|-----------|---------------|-----------------|----------------|  
|<span data-ttu-id="b1af4-287">黒</span><span class="sxs-lookup"><span data-stu-id="b1af4-287">Black</span></span>|<span data-ttu-id="b1af4-288">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-288">0</span></span>|<span data-ttu-id="b1af4-289">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-289">0</span></span>|<span data-ttu-id="b1af4-290">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-290">0</span></span>|  
|<span data-ttu-id="b1af4-291">青</span><span class="sxs-lookup"><span data-stu-id="b1af4-291">Blue</span></span>|<span data-ttu-id="b1af4-292">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-292">0</span></span>|<span data-ttu-id="b1af4-293">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-293">0</span></span>|<span data-ttu-id="b1af4-294">255</span><span class="sxs-lookup"><span data-stu-id="b1af4-294">255</span></span>|  
|<span data-ttu-id="b1af4-295">緑</span><span class="sxs-lookup"><span data-stu-id="b1af4-295">Green</span></span>|<span data-ttu-id="b1af4-296">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-296">0</span></span>|<span data-ttu-id="b1af4-297">255</span><span class="sxs-lookup"><span data-stu-id="b1af4-297">255</span></span>|<span data-ttu-id="b1af4-298">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-298">0</span></span>|  
|<span data-ttu-id="b1af4-299">シアン</span><span class="sxs-lookup"><span data-stu-id="b1af4-299">Cyan</span></span>|<span data-ttu-id="b1af4-300">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-300">0</span></span>|<span data-ttu-id="b1af4-301">255</span><span class="sxs-lookup"><span data-stu-id="b1af4-301">255</span></span>|<span data-ttu-id="b1af4-302">255</span><span class="sxs-lookup"><span data-stu-id="b1af4-302">255</span></span>|  
|<span data-ttu-id="b1af4-303">赤</span><span class="sxs-lookup"><span data-stu-id="b1af4-303">Red</span></span>|<span data-ttu-id="b1af4-304">255</span><span class="sxs-lookup"><span data-stu-id="b1af4-304">255</span></span>|<span data-ttu-id="b1af4-305">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-305">0</span></span>|<span data-ttu-id="b1af4-306">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-306">0</span></span>|  
|<span data-ttu-id="b1af4-307">マゼンタ</span><span class="sxs-lookup"><span data-stu-id="b1af4-307">Magenta</span></span>|<span data-ttu-id="b1af4-308">255</span><span class="sxs-lookup"><span data-stu-id="b1af4-308">255</span></span>|<span data-ttu-id="b1af4-309">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-309">0</span></span>|<span data-ttu-id="b1af4-310">255</span><span class="sxs-lookup"><span data-stu-id="b1af4-310">255</span></span>|  
|<span data-ttu-id="b1af4-311">黄</span><span class="sxs-lookup"><span data-stu-id="b1af4-311">Yellow</span></span>|<span data-ttu-id="b1af4-312">255</span><span class="sxs-lookup"><span data-stu-id="b1af4-312">255</span></span>|<span data-ttu-id="b1af4-313">255</span><span class="sxs-lookup"><span data-stu-id="b1af4-313">255</span></span>|<span data-ttu-id="b1af4-314">0</span><span class="sxs-lookup"><span data-stu-id="b1af4-314">0</span></span>|  
|<span data-ttu-id="b1af4-315">白</span><span class="sxs-lookup"><span data-stu-id="b1af4-315">White</span></span>|<span data-ttu-id="b1af4-316">255</span><span class="sxs-lookup"><span data-stu-id="b1af4-316">255</span></span>|<span data-ttu-id="b1af4-317">255</span><span class="sxs-lookup"><span data-stu-id="b1af4-317">255</span></span>|<span data-ttu-id="b1af4-318">255</span><span class="sxs-lookup"><span data-stu-id="b1af4-318">255</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-319">この例では、どのように`RGB`を表す整数を返す関数を使用、`RGB`カラー値。</span><span class="sxs-lookup"><span data-stu-id="b1af4-319">This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.</span></span>  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b1af4-320"><paramref name="Green" />、<paramref name="Blue" /> または <paramref name="Red" /> が 0 ～ 255 (両端を含む) の範囲内の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="b1af4-320"><paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName"><span data-ttu-id="b1af4-321">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-321">Required.</span></span> <span data-ttu-id="b1af4-322">Visual Basic の型名を含む <see langword="String" /> 変数です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-322">A <see langword="String" /> variable containing a Visual Basic type name.</span></span></param>
        <summary><span data-ttu-id="b1af4-323">変数のシステム データ型名を含む <see langword="String" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-323">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="b1af4-324">変数のシステム データ型名を含む <see langword="String" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-324">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-325">`SystemTypeName` 完全修飾共通言語ランタイム (CLR) 型に対応する名前 Visual Basic の型名を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-325">`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</span></span> <span data-ttu-id="b1af4-326">たとえば場合、 `VbName` 「日付」が含まれる`SystemTypeName`"System.DateTime"を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-326">For example, if `VbName` contains "Date", `SystemTypeName` returns "System.DateTime".</span></span> <span data-ttu-id="b1af4-327">場合`SystemTypeName`の値を認識しない`VbName`、返します`Nothing`(文字列ではなく"Nothing")。</span><span class="sxs-lookup"><span data-stu-id="b1af4-327">If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-328">次の例では、`SystemTypeName`関数をいくつかの変数のデータ型の名前を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-328">The following example uses the `SystemTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b1af4-329">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b1af4-329">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="b1af4-330">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-330">Required.</span></span> <span data-ttu-id="b1af4-331"><see langword="Object" /> 変数。</span><span class="sxs-lookup"><span data-stu-id="b1af4-331"><see langword="Object" /> variable.</span></span> <span data-ttu-id="b1af4-332"><see langword="Option Strict" /> が <see langword="Off" /> の場合、構造体以外の任意のデータ型の変数を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="b1af4-332">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="b1af4-333">変数に関するデータ型情報を含む <see langword="String" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-333">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></summary>
        <returns><span data-ttu-id="b1af4-334">変数に関するデータ型情報を含む <see langword="String" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-334">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-335">次の表は、`String`によって返される値`TypeName`のさまざまな内容`VarName`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-335">The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.</span></span>  
  
|<span data-ttu-id="b1af4-336">`VarName` 内容</span><span class="sxs-lookup"><span data-stu-id="b1af4-336">`VarName` contents</span></span>|<span data-ttu-id="b1af4-337">返される文字列</span><span class="sxs-lookup"><span data-stu-id="b1af4-337">String returned</span></span>|  
|------------------------|---------------------|  
|<span data-ttu-id="b1af4-338">16 ビット`True`または`False`値の型</span><span class="sxs-lookup"><span data-stu-id="b1af4-338">16-bit `True` or `False` value type</span></span>|<span data-ttu-id="b1af4-339">"Boolean"</span><span class="sxs-lookup"><span data-stu-id="b1af4-339">"Boolean"</span></span>|  
|<span data-ttu-id="b1af4-340">8 ビットのバイナリ値の型</span><span class="sxs-lookup"><span data-stu-id="b1af4-340">8-bit binary value type</span></span>|<span data-ttu-id="b1af4-341">"Byte"</span><span class="sxs-lookup"><span data-stu-id="b1af4-341">"Byte"</span></span>|  
|<span data-ttu-id="b1af4-342">16 ビット文字値の型</span><span class="sxs-lookup"><span data-stu-id="b1af4-342">16-bit character value type</span></span>|<span data-ttu-id="b1af4-343">"Char"</span><span class="sxs-lookup"><span data-stu-id="b1af4-343">"Char"</span></span>|  
|<span data-ttu-id="b1af4-344">64 ビットの日付と時刻の値を入力します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-344">64-bit date and time value type</span></span>|<span data-ttu-id="b1af4-345">"Date"</span><span class="sxs-lookup"><span data-stu-id="b1af4-345">"Date"</span></span>|  
|<span data-ttu-id="b1af4-346">参照型のデータが見つからないか存在しないことを示します</span><span class="sxs-lookup"><span data-stu-id="b1af4-346">Reference type indicating missing or nonexistent data</span></span>|<span data-ttu-id="b1af4-347">"DBNull"</span><span class="sxs-lookup"><span data-stu-id="b1af4-347">"DBNull"</span></span>|  
|<span data-ttu-id="b1af4-348">128 ビットの固定小数点数値型</span><span class="sxs-lookup"><span data-stu-id="b1af4-348">128-bit fixed-point numeric value type</span></span>|<span data-ttu-id="b1af4-349">"Decimal"</span><span class="sxs-lookup"><span data-stu-id="b1af4-349">"Decimal"</span></span>|  
|<span data-ttu-id="b1af4-350">64 ビットの浮動小数点数値型</span><span class="sxs-lookup"><span data-stu-id="b1af4-350">64-bit floating-point numeric value type</span></span>|<span data-ttu-id="b1af4-351">"Double"</span><span class="sxs-lookup"><span data-stu-id="b1af4-351">"Double"</span></span>|  
|<span data-ttu-id="b1af4-352">32 ビット整数値の型</span><span class="sxs-lookup"><span data-stu-id="b1af4-352">32-bit integer value type</span></span>|<span data-ttu-id="b1af4-353">"Integer"</span><span class="sxs-lookup"><span data-stu-id="b1af4-353">"Integer"</span></span>|  
|<span data-ttu-id="b1af4-354">特化されていないオブジェクトを指す参照型</span><span class="sxs-lookup"><span data-stu-id="b1af4-354">Reference type pointing to an unspecialized object</span></span>|<span data-ttu-id="b1af4-355">「オブジェクト」</span><span class="sxs-lookup"><span data-stu-id="b1af4-355">"Object"</span></span>|  
|<span data-ttu-id="b1af4-356">クラスから作成された特殊なオブジェクトを指す参照型*objectclass*</span><span class="sxs-lookup"><span data-stu-id="b1af4-356">Reference type pointing to a specialized object created from class *objectclass*</span></span>|<span data-ttu-id="b1af4-357">"*objectclass*"</span><span class="sxs-lookup"><span data-stu-id="b1af4-357">"*objectclass*"</span></span>|  
|<span data-ttu-id="b1af4-358">64 ビット整数値の型</span><span class="sxs-lookup"><span data-stu-id="b1af4-358">64-bit integer value type</span></span>|<span data-ttu-id="b1af4-359">"Long"</span><span class="sxs-lookup"><span data-stu-id="b1af4-359">"Long"</span></span>|  
|<span data-ttu-id="b1af4-360">オブジェクトが現在割り当てられていない参照型</span><span class="sxs-lookup"><span data-stu-id="b1af4-360">Reference type with no object currently assigned to it</span></span>|<span data-ttu-id="b1af4-361">"Nothing"</span><span class="sxs-lookup"><span data-stu-id="b1af4-361">"Nothing"</span></span>|  
|<span data-ttu-id="b1af4-362">8 ビット符号付き整数値の型</span><span class="sxs-lookup"><span data-stu-id="b1af4-362">8-bit signed integer value type</span></span>|<span data-ttu-id="b1af4-363">"SByte"</span><span class="sxs-lookup"><span data-stu-id="b1af4-363">"SByte"</span></span>|  
|<span data-ttu-id="b1af4-364">16 ビット整数値の型</span><span class="sxs-lookup"><span data-stu-id="b1af4-364">16-bit integer value type</span></span>|<span data-ttu-id="b1af4-365">"Short"</span><span class="sxs-lookup"><span data-stu-id="b1af4-365">"Short"</span></span>|  
|<span data-ttu-id="b1af4-366">32 ビット浮動小数点数値型</span><span class="sxs-lookup"><span data-stu-id="b1af4-366">32-bit floating-point numeric value type</span></span>|<span data-ttu-id="b1af4-367">"Single"</span><span class="sxs-lookup"><span data-stu-id="b1af4-367">"Single"</span></span>|  
|<span data-ttu-id="b1af4-368">16 ビット文字の文字列を指す参照型</span><span class="sxs-lookup"><span data-stu-id="b1af4-368">Reference type pointing to a string of 16-bit characters</span></span>|<span data-ttu-id="b1af4-369">"String"</span><span class="sxs-lookup"><span data-stu-id="b1af4-369">"String"</span></span>|  
|<span data-ttu-id="b1af4-370">32 ビット符号なし整数値の型</span><span class="sxs-lookup"><span data-stu-id="b1af4-370">32-bit unsigned integer value type</span></span>|<span data-ttu-id="b1af4-371">"UInteger"</span><span class="sxs-lookup"><span data-stu-id="b1af4-371">"UInteger"</span></span>|  
|<span data-ttu-id="b1af4-372">64 ビット符号なし整数値の型</span><span class="sxs-lookup"><span data-stu-id="b1af4-372">64-bit unsigned integer value type</span></span>|<span data-ttu-id="b1af4-373">"ULong"</span><span class="sxs-lookup"><span data-stu-id="b1af4-373">"ULong"</span></span>|  
|<span data-ttu-id="b1af4-374">16 ビット符号なし整数値の型</span><span class="sxs-lookup"><span data-stu-id="b1af4-374">16-bit unsigned integer value type</span></span>|<span data-ttu-id="b1af4-375">"UShort"</span><span class="sxs-lookup"><span data-stu-id="b1af4-375">"UShort"</span></span>|  
  
 <span data-ttu-id="b1af4-376">場合`VarName`配列が返される文字列が空のかっこの前の表に、文字列のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="b1af4-376">If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</span></span> <span data-ttu-id="b1af4-377">たとえば場合、 `VarName` 、整数の配列を指す`TypeName`"Integer()"を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-377">For example, if `VarName` points to an array of integers, `TypeName` returns "Integer()".</span></span>  
  
 <span data-ttu-id="b1af4-378">ときに`TypeName`参照型の名前を返します、クラスなどのみ名前自体は、修飾名ではなくを返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-378">When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</span></span> <span data-ttu-id="b1af4-379">たとえば場合、`VarName`クラスのオブジェクトを指す<xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>、 `TypeName` "PaperSource"を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-379">For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` returns "PaperSource".</span></span> <span data-ttu-id="b1af4-380">変数は、特定のクラス型として宣言されますが、それに割り当てられているオブジェクトはない場合`TypeName`"Nothing"を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-380">Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns "Nothing".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-381">次の例では、`TypeName`をいくつかの変数に関するデータ型情報を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b1af4-381">The following example uses the `TypeName` function to return data type information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b1af4-382">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b1af4-382">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="b1af4-383">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-383">Required.</span></span> <span data-ttu-id="b1af4-384">任意のデータ型の配列です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-384">Array of any data type.</span></span> <span data-ttu-id="b1af4-385">ある次元で最も大きいインデックスを探す対象となる配列です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-385">The array in which you want to find the highest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="b1af4-386">任意。</span><span class="sxs-lookup"><span data-stu-id="b1af4-386">Optional.</span></span> <span data-ttu-id="b1af4-387"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="b1af4-387"><see langword="Integer" />.</span></span> <span data-ttu-id="b1af4-388">最も大きいインデックスが返される次元です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-388">The dimension for which the highest possible subscript is to be returned.</span></span> <span data-ttu-id="b1af4-389">1 番目の次元の場合は 1、2 番目の次元の場合は 2 という形で指定します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-389">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="b1af4-390"><paramref name="Rank" /> を省略した場合、1 が使用されます。</span><span class="sxs-lookup"><span data-stu-id="b1af4-390">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="b1af4-391">配列内の指定された次元における最も大きいインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-391">Returns the highest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="b1af4-392"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="b1af4-392"><see langword="Integer" />.</span></span> <span data-ttu-id="b1af4-393">指定した次元に設定できるインデックスの最大値です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-393">The highest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="b1af4-394"><paramref name="Array" /> に要素が 1 つしかない場合、<see langword="UBound" /> は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-394">If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0.</span></span> <span data-ttu-id="b1af4-395"><paramref name="Array" /> に要素が存在しない場合 (長さ 0 の文字列の場合など)、<see langword="UBound" /> は -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-395">If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-396">配列の添字は 0 から始まるため、次元の長さはそのディメンションの最も大きいインデックスより 1 だけ大きい。</span><span class="sxs-lookup"><span data-stu-id="b1af4-396">Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</span></span>  
  
 <span data-ttu-id="b1af4-397">次の次元の配列の`UBound`次の表に、値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-397">For an array with the following dimensions, `UBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="b1af4-398">Ubound 関数を呼び出す</span><span class="sxs-lookup"><span data-stu-id="b1af4-398">Call to UBound</span></span>|<span data-ttu-id="b1af4-399">戻り値</span><span class="sxs-lookup"><span data-stu-id="b1af4-399">Return value</span></span>|  
|--------------------|------------------|  
|`UBound(a, 1)`|<span data-ttu-id="b1af4-400">100</span><span class="sxs-lookup"><span data-stu-id="b1af4-400">100</span></span>|  
|`UBound(a, 2)`|<span data-ttu-id="b1af4-401">5</span><span class="sxs-lookup"><span data-stu-id="b1af4-401">5</span></span>|  
|`UBound(a, 3)`|<span data-ttu-id="b1af4-402">4</span><span class="sxs-lookup"><span data-stu-id="b1af4-402">4</span></span>|  
  
 <span data-ttu-id="b1af4-403">使用することができます`UBound`合計を計算が、配列の要素の数が、添字は 0 から始まるという事実のアカウントに返す値を調整する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1af4-403">You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</span></span> <span data-ttu-id="b1af4-404">次の例では、配列の合計サイズを計算する`a`前の例。</span><span class="sxs-lookup"><span data-stu-id="b1af4-404">The following example calculates the total size of the array `a` in the preceding example:</span></span>  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 <span data-ttu-id="b1af4-405">値が計算`total`3030 は、101 \* 6 \* 5 です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-405">The value calculated for `total` is 3030, which is 101 \* 6 \* 5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-406">次の例では、`UBound`配列の指定された次元の最も大きいインデックスを決定する関数。</span><span class="sxs-lookup"><span data-stu-id="b1af4-406">The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b1af4-407"><paramref name="Array" /> は <see langword="Nothing" /> です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-407"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="b1af4-408"><paramref name="Rank" /> が 1 未満か、<paramref name="Rank" /> が <paramref name="Array" /> のランクを超えています。</span><span class="sxs-lookup"><span data-stu-id="b1af4-408"><paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="b1af4-409">Dim ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b1af4-409">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="b1af4-410">ReDim ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b1af4-410">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="b1af4-411">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-411">Required.</span></span> <span data-ttu-id="b1af4-412"><see langword="Object" /> 変数。</span><span class="sxs-lookup"><span data-stu-id="b1af4-412"><see langword="Object" /> variable.</span></span> <span data-ttu-id="b1af4-413"><see langword="Option Strict" /> が <see langword="Off" /> の場合、構造体以外の任意のデータ型の変数を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="b1af4-413">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="b1af4-414">変数のデータ型の分類を含む <see langword="Integer" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-414">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></summary>
        <returns><span data-ttu-id="b1af4-415">変数のデータ型の分類を含む <see langword="Integer" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-415">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-416">によって返される整数値`VarType`のメンバーである、<xref:Microsoft.VisualBasic.VariantType>します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-416">The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.</span></span>  
  
 <span data-ttu-id="b1af4-417">次の表に、によって返される値`VarType`の特殊なケースについて`VarName`します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-417">The following table shows the values returned by `VarType` for special cases of `VarName`.</span></span>  
  
|<span data-ttu-id="b1af4-418">によって表されるデータ型 `VarName`</span><span class="sxs-lookup"><span data-stu-id="b1af4-418">Data type represented by `VarName`</span></span>|<span data-ttu-id="b1af4-419">によって返される値 `VarType`</span><span class="sxs-lookup"><span data-stu-id="b1af4-419">Value returned by `VarType`</span></span>|  
|----------------------------------------|---------------------------------|  
|[<span data-ttu-id="b1af4-420">Nothing</span><span class="sxs-lookup"><span data-stu-id="b1af4-420">Nothing</span></span>](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|<span data-ttu-id="b1af4-421">列挙</span><span class="sxs-lookup"><span data-stu-id="b1af4-421">Enumeration</span></span>|<span data-ttu-id="b1af4-422">基になるデータ型 (`SByte`、 `Byte`、 `Short`、 `UShort`、 `Integer`、 `UInteger`、 `Long`、または`ULong`)</span><span class="sxs-lookup"><span data-stu-id="b1af4-422">Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)</span></span>|  
|<span data-ttu-id="b1af4-423">配列</span><span class="sxs-lookup"><span data-stu-id="b1af4-423">Array</span></span>|<span data-ttu-id="b1af4-424">配列要素の型のビットごとの OR と `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="b1af4-424">Bitwise OR of array element type and `VariantType.Array`</span></span>|  
|<span data-ttu-id="b1af4-425">配列の配列</span><span class="sxs-lookup"><span data-stu-id="b1af4-425">Array of arrays</span></span>|<span data-ttu-id="b1af4-426">ビットごとの OR`VariantType.Object`と `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="b1af4-426">Bitwise OR of `VariantType.Object` and `VariantType.Array`</span></span>|  
|<span data-ttu-id="b1af4-427">構造体 (<xref:System.ValueType?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="b1af4-427">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span></span>|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|<span data-ttu-id="b1af4-428">不明</span><span class="sxs-lookup"><span data-stu-id="b1af4-428">Unknown</span></span>|`VariantType.Object`|  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-429">次の例では、`VarType`をいくつかの変数に関するデータ型の分類の情報を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b1af4-429">The following example uses the `VarType` function to return data type classification information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b1af4-430">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b1af4-430">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName"><span data-ttu-id="b1af4-431">必須です。</span><span class="sxs-lookup"><span data-stu-id="b1af4-431">Required.</span></span> <span data-ttu-id="b1af4-432">共通言語ランタイムにより使用される型名を含む <see langword="String" /> 変数。</span><span class="sxs-lookup"><span data-stu-id="b1af4-432"><see langword="String" /> variable containing a type name used by the common language runtime.</span></span></param>
        <summary><span data-ttu-id="b1af4-433">変数の Visual Basic データ型名を含む <see langword="String" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-433">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="b1af4-434">変数の Visual Basic データ型名を含む <see langword="String" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-434">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1af4-435">`VbTypeName` 共通言語ランタイムの型名に対応する Visual Basic の型名を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-435">`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name.</span></span> <span data-ttu-id="b1af4-436">たとえば場合、 `UrtName` "Int32"または"System.Int32"を含む`VbTypeName`"Integer"を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-436">For example, if `UrtName` contains "Int32" or "System.Int32", `VbTypeName` returns "Integer".</span></span> <span data-ttu-id="b1af4-437">場合`VbTypeName`の値を認識しない`UrtName`、返します`Nothing`(文字列ではなく"Nothing")。</span><span class="sxs-lookup"><span data-stu-id="b1af4-437">If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
 <span data-ttu-id="b1af4-438">型名を`UrtName`からなど、さまざまなソースから取得できます、<xref:System.Reflection.MemberInfo.Name%2A>プロパティ、<xref:System.Reflection.MemberInfo>の配列、<xref:System.Type>クラス。</span><span class="sxs-lookup"><span data-stu-id="b1af4-438">The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1af4-439">次の例では、`VbTypeName`関数をいくつかの変数のデータ型の名前を返します。</span><span class="sxs-lookup"><span data-stu-id="b1af4-439">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b1af4-440">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b1af4-440">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>