<Type Name="Collection" FullName="Microsoft.VisualBasic.Collection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="db858d535030f701aac72d90bb3cdd8de3417d03" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34174029" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IList, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Collection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Collection&#xA;Implements IDeserializationCallback, IList, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Collection sealed : System::Collections::IList, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a2b23-101">Visual Basic の <see langword="Collection" /> は、単位として参照できる項目の順序付けされたセットです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2b23-101">A Visual Basic <see langword="Collection" /> is an ordered set of items that can be referred to as a unit.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a2b23-102">ジェネリック コレクションを使用する必要があります、可能な限り、<xref:System.Collections.Generic?displayProperty=nameWithType>名前空間または<xref:System.Collections.Concurrent>Visual Basic ではなく名前空間`Collection`です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-102">Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of a Visual Basic `Collection`.</span></span> <span data-ttu-id="a2b23-103">詳細については、次を参照してください。[コレクション](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-103">For more information, see [Collections](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span></span>  
  
 <span data-ttu-id="a2b23-104">Visual Basic`Collection`オブジェクトは、単一のオブジェクトとしてアイテムの関連するグループを参照する便利な手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-104">The Visual Basic `Collection` object provides a convenient way to refer to a related group of items as a single object.</span></span> <span data-ttu-id="a2b23-105">項目、または*要素*で、コレクション内に存在しているという事実によって、コレクションを関連のみ必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2b23-105">The items, or *elements*, in a collection need only be related by the fact that they exist in the collection.</span></span> <span data-ttu-id="a2b23-106">コレクションの要素を同じデータ型を共有する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-106">Elements of a collection do not have to share the same data type.</span></span>  
  
 <span data-ttu-id="a2b23-107">次の例に示すようには、コレクションの他のオブジェクトの作成と同じ方法を作成することができます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-107">You can create a collection the same way you create other objects, as the following example illustrates.</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="a2b23-108">コレクションを作成した後は、次のいずれかの操作を行います。</span><span class="sxs-lookup"><span data-stu-id="a2b23-108">Once you have created a collection, you can do any of the following:</span></span>  
  
-   <span data-ttu-id="a2b23-109">持つ要素を追加、<xref:Microsoft.VisualBasic.Collection.Add%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-109">Add an element with the <xref:Microsoft.VisualBasic.Collection.Add%2A> method.</span></span>  
  
-   <span data-ttu-id="a2b23-110">持つ要素を削除、<xref:Microsoft.VisualBasic.Collection.Remove%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-110">Remove an element with the <xref:Microsoft.VisualBasic.Collection.Remove%2A> method.</span></span>  
  
-   <span data-ttu-id="a2b23-111">すべての要素を削除、<xref:Microsoft.VisualBasic.Collection.Clear%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-111">Remove all elements with the <xref:Microsoft.VisualBasic.Collection.Clear%2A> method.</span></span>  
  
-   <span data-ttu-id="a2b23-112">持つコレクションに要素の数を検索、<xref:Microsoft.VisualBasic.Collection.Count%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-112">Find out how many elements the collection contains with the <xref:Microsoft.VisualBasic.Collection.Count%2A> property.</span></span>  
  
-   <span data-ttu-id="a2b23-113">特定の要素が存在するかどうかを確認して、<xref:Microsoft.VisualBasic.Collection.Contains%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-113">Check whether a specific element is present with the <xref:Microsoft.VisualBasic.Collection.Contains%2A> method.</span></span>  
  
-   <span data-ttu-id="a2b23-114">使用して、コレクションから特定の要素を返す、<xref:Microsoft.VisualBasic.Collection.Item%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-114">Return a specific element from the collection with the <xref:Microsoft.VisualBasic.Collection.Item%2A> property.</span></span>  
  
-   <span data-ttu-id="a2b23-115">使用して、全体のコレクションを反復処理する、[ごとにしています.次のステートメントの](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-115">Iterate through the entire collection with the [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="a2b23-116">Visual Basic`Collection`オブジェクトと同じ機能を持つ、 `Collection` Visual Basic 6.0 でオブジェクトの 2 つが COM 環境で相互運用することはできません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-116">Although the Visual Basic `Collection` object has functionality identical to the `Collection` object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="a2b23-117">Visual Basic の反復`Collection`はスレッド セーフなプロシージャはありません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-117">Iterating through a Visual Basic `Collection` is not a thread-safe procedure.</span></span> <span data-ttu-id="a2b23-118">コレクションが同期されている場合でも他のスレッドが例外をスローする列挙子の原因と、コレクションを変更できます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-118">Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</span></span> <span data-ttu-id="a2b23-119">列挙中にスレッド セーフを確保する、コレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。</span><span class="sxs-lookup"><span data-stu-id="a2b23-119">To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</span></span> <span data-ttu-id="a2b23-120">プログラミング要素のロックの詳細については、次を参照してください。 [SyncLock ステートメント](~/docs/visual-basic/language-reference/statements/synclock-statement.md)です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-120">For more information on locking a programming element, see [SyncLock Statement](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2b23-121">次の例を作成、`Collection`オブジェクト`names`と、ダイアログ ボックスを使用するユーザーは、コレクションにオブジェクト (名前) を追加できます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-121">The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection.</span></span> <span data-ttu-id="a2b23-122">コレクション内の名前を表示し、最後にコレクションを空には破棄せず、`Collection`オブジェクト自体です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-122">It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.</span></span>  
  
 <span data-ttu-id="a2b23-123">表示するこの動作方法を選択、**クラスの追加**コマンドを**プロジェクト**メニューと呼ばれる、パブリック変数を宣言および`instanceName`、モジュール レベルの`nameClass`(型`Public instanceName`) を保持するには各インスタンスの名前。</span><span class="sxs-lookup"><span data-stu-id="a2b23-123">To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance.</span></span> <span data-ttu-id="a2b23-124">既定の名前として`nameClass`です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-124">Leave the default name as `nameClass`.</span></span> <span data-ttu-id="a2b23-125">コピーして貼り付けるには、次のコード、**全般**別のモジュールのセクションで、ステートメントを使用して起動`classNamer`別のプロシージャでします。</span><span class="sxs-lookup"><span data-stu-id="a2b23-125">Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure.</span></span> <span data-ttu-id="a2b23-126">(この例は、クラスをサポートするホスト アプリケーションでのみ動作)。</span><span class="sxs-lookup"><span data-stu-id="a2b23-126">(This example works only with host applications that support classes.)</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2b23-127">Visual Basic の新しい <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトを作成して返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-127">Creates and returns a new Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-128">このコンス トラクターによって返される Visual Basic のコレクションは、空に割り当てられているすべての初期容量がありません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-128">The Visual Basic collection returned by this constructor is empty and does not have any initial capacity allocated.</span></span>  
  
 <span data-ttu-id="a2b23-129">Visual Basic のコレクションと互換性がない、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]コレクションで使用できる、 <xref:System.Collections?displayProperty=nameWithType>、 <xref:System.Collections.Generic?displayProperty=nameWithType>、および<xref:System.Collections.Specialized?displayProperty=nameWithType>名前空間。</span><span class="sxs-lookup"><span data-stu-id="a2b23-129">Visual Basic collections are not compatible with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] collections available in the <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, and <xref:System.Collections.Specialized?displayProperty=nameWithType> namespaces.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2b23-130">次の例は、新しい Visual Basic のコレクションを作成し、変数に代入`coll`:</span><span class="sxs-lookup"><span data-stu-id="a2b23-130">The following example creates a new Visual Basic collection and assigns it to the variable `coll`:</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="a2b23-131">これは、`Collection`オブジェクトは 1 から始まる、つまり 1 の値からの要素範囲のインデックス値、`Count`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-131">This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span> <span data-ttu-id="a2b23-132">Visual Basic のコレクション型の要素を保持する<xref:System.Object>です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-132">Visual Basic collections hold elements of type <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object Item, string Key = null, object Before = null, object After = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Add(object Item, string Key, object Before, object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (Item As Object, Optional Key As String = null, Optional Before As Object = null, Optional After As Object = null)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Item" Type="System.Object" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Before" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Item">
          <span data-ttu-id="a2b23-133">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-133">Required.</span>
          </span>
          <span data-ttu-id="a2b23-134">コレクションに追加する要素を指定する任意の型のオブジェクトです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-134">An object of any type that specifies the element to add to the collection.</span>
          </span>
        </param>
        <param name="Key">
          <span data-ttu-id="a2b23-135">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-135">Optional.</span>
          </span>
          <span data-ttu-id="a2b23-136">コレクション内の新しい要素にアクセスするときに位置インデックスの代わりに使用できるキー文字列を指定する、一意の <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-136">A unique <see langword="String" /> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</span>
          </span>
        </param>
        <param name="Before">
          <span data-ttu-id="a2b23-137">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-137">Optional.</span>
          </span>
          <span data-ttu-id="a2b23-138">コレクション内の位置を相対的に示す式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-138">An expression that specifies a relative position in the collection.</span>
          </span>
          <span data-ttu-id="a2b23-139">追加される要素は、コレクション内で <c>Before</c> 引数によって識別された要素の前に配置されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-139">The element to be added is placed in the collection before the element identified by the <c>Before</c> argument.</span>
          </span>
          <span data-ttu-id="a2b23-140">
            <c>Before</c> が数式である場合、値の範囲は 1 以上でコレクションの <see cref="P:Microsoft.VisualBasic.Collection.Count" /> プロパティ値以下である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-140">If <c>Before</c> is a numeric expression, it must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
          <span data-ttu-id="a2b23-141">
            <c>Before</c> が <see langword="String" /> 型の式である場合は、参照される要素がコレクションに追加されたときに指定されたキー文字列に対応する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-141">If <c>Before</c> is a <see langword="String" /> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</span>
          </span>
          <span data-ttu-id="a2b23-142">
            <c>Before</c> と <c>After</c> の両方を指定することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-142">You cannot specify both <c>Before</c> and <c>After</c>.</span>
          </span>
        </param>
        <param name="After">
          <span data-ttu-id="a2b23-143">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-143">Optional.</span>
          </span>
          <span data-ttu-id="a2b23-144">コレクション内の位置を相対的に示す式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-144">An expression that specifies a relative position in the collection.</span>
          </span>
          <span data-ttu-id="a2b23-145">追加される要素は、コレクション内で <c>After</c> 引数によって識別された要素の後に配置されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-145">The element to be added is placed in the collection after the element identified by the <c>After</c> argument.</span>
          </span>
          <span data-ttu-id="a2b23-146">
            <c>After</c> が数式である場合、値の範囲は 1 以上でコレクションの <see langword="Count" /> プロパティ値以下である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-146">If <c>After</c> is a numeric expression, it must be a number from 1 through the value of the collection's <see langword="Count" /> property.</span>
          </span>
          <span data-ttu-id="a2b23-147">
            <c>After</c> が <see langword="String" /> 型の式である場合は、参照される要素がコレクションに追加されたときに指定されたキー文字列に対応する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-147">If <c>After</c> is a <see langword="String" /> expression, it must correspond to the key string specified when the element referred to was added to the collection.</span>
          </span>
          <span data-ttu-id="a2b23-148">
            <c>Before</c> と <c>After</c> の両方を指定することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-148">You cannot specify both <c>Before</c> and <c>After</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-149">要素を <see langword="Collection" /> オブジェクトに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-149">Adds an element to a <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-150">`Before`または`After`引数は、コレクションの既存の要素を参照する必要があります。 それ以外の場合、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-150">The `Before` or `After` argument must refer to an existing element of the collection; otherwise, an error occurs.</span></span>  
  
 <span data-ttu-id="a2b23-151">両方の`Before`と`After`引数を省略した、新しいオブジェクトがコレクションの末尾に追加します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-151">If both the `Before` and `After` arguments are omitted, the new object is added to the end of the collection.</span></span>  
  
 <span data-ttu-id="a2b23-152">指定した場合にも、エラーが発生`Key`値に一致するコレクションの既存の要素のキー。</span><span class="sxs-lookup"><span data-stu-id="a2b23-152">An error also occurs if a specified `Key` value matches the key for an existing element of the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2b23-153">次の例では、`Add`メソッドを追加する`child`オブジェクト — クラスのインスタンスと呼ばれます`child`を含む、`Public`プロパティ`name`: と呼ばれるコレクションに`family`です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-153">The following example uses the `Add` method to add `child` objects — instances of a class called `child` containing a `Public` property `name` — to a collection called `family`.</span></span> <span data-ttu-id="a2b23-154">このしくみを表示するには、作成、 <xref:System.Windows.Forms.Form> 、2 つ<xref:System.Windows.Forms.Button>コントロールとセット、<xref:System.Windows.Forms.Control.Text%2A>プロパティを`Add`と`List`です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-154">To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`.</span></span> <span data-ttu-id="a2b23-155">追加、`child`クラス定義と`family`フォームのコードを宣言します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-155">Add the `child` class definition and the `family` declaration to the form code.</span></span> <span data-ttu-id="a2b23-156">変更、`_Click`のイベント ハンドラー、**追加**と**リスト**ようにのボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="a2b23-156">Modify the `_Click` event handlers for the **Add** and **List** buttons as shown.</span></span> <span data-ttu-id="a2b23-157">**追加**ボタンをクリックすると、子を追加することができます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-157">The **Add** button allows you to add children.</span></span> <span data-ttu-id="a2b23-158">**リスト**ボタンには、すべての子の名前が表示されます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-158">The **List** button displays the names of all the children.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2b23-159">Visual Basic の <see langword="Collection" /> オブジェクトの要素をすべて削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-159">Deletes all elements of a Visual Basic <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-160">`Clear`メソッドは、コレクションを空にして、リセット、<xref:Microsoft.VisualBasic.Collection.Count%2A>プロパティを 0 にします。</span><span class="sxs-lookup"><span data-stu-id="a2b23-160">The `Clear` method empties the collection and resets its <xref:Microsoft.VisualBasic.Collection.Count%2A> property to 0.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Contains(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (Key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ Key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">
          <span data-ttu-id="a2b23-161">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-161">Required.</span>
          </span>
          <span data-ttu-id="a2b23-162">コレクションの要素を検索するキーを指定する <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-162">A <see langword="String" /> expression that specifies the key for which to search the elements of the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-163">Visual Basic の <see langword="Boolean" /> オブジェクトに特定のキーを持つ要素が含まれているかどうかを示す <see langword="Collection" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-163">Returns a <see langword="Boolean" /> value indicating whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2b23-164">Visual Basic の <see langword="Boolean" /> オブジェクトに特定のキーを持つ要素が含まれているかどうかを示す <see langword="Collection" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-164">Returns a <see langword="Boolean" /> value indicating whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-165">`Contains` 返します`True`正確に一致するキーを持つ要素がコレクションに含まれている場合`Key`です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-165">`Contains` returns `True` if the collection contains an element with a key exactly matching `Key`.</span></span> <span data-ttu-id="a2b23-166">それ以外の場合、`Contains`返します`False`です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-166">Otherwise, `Contains` returns `False`.</span></span> <span data-ttu-id="a2b23-167">一致するキー値の場合は無視されます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-167">Case is ignored when matching key values.</span></span>  
  
 <span data-ttu-id="a2b23-168">Visual Basic`Collection`キーがあるいくつかの要素およびキーを持たない他の要素を保持できます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-168">A Visual Basic `Collection` can hold some elements that have keys and other elements without keys.</span></span> <span data-ttu-id="a2b23-169">これは異なるかどうかを呼び出す、<xref:Microsoft.VisualBasic.Collection.Add%2A>メソッドには、オプションの引数が指定されて`Key`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="a2b23-169">This depends on whether the call to the <xref:Microsoft.VisualBasic.Collection.Add%2A> method supplies an argument to the optional `Key` parameter.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#4)]  
  
 <span data-ttu-id="a2b23-170">指定するコレクションのキーを使用して要素を検索する場合は、保存、`Key`引数を呼び出すたびに、`Add`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-170">If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2b23-171">コレクションの要素数を含む <see langword="Integer" /> 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-171">Returns an <see langword="Integer" /> containing the number of elements in a collection.</span>
          </span>
          <span data-ttu-id="a2b23-172">読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-172">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2b23-173">コレクションの要素数を含む <see langword="Integer" /> 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-173">Returns an <see langword="Integer" /> containing the number of elements in a collection.</span>
          </span>
          <span data-ttu-id="a2b23-174">読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-174">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-175">使用して、`Count`内の要素の数を決定するプロパティ、`Collection`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2b23-175">Use the `Count` property to determine the number of elements in a `Collection` object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2b23-176">この例での使用、`Count`内の要素の数を表示するプロパティを<xref:Microsoft.VisualBasic.Collection>変数内のオブジェクト`birthdays`です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-176">This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#6)]  
  
 <span data-ttu-id="a2b23-177">`Collection`オブジェクトは 1 から始まる、つまり 1 の値からの要素範囲のインデックス値、`Count`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-177">The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2b23-178">
            <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトに対する反復処理に使用する、列挙子オブジェクトへの参照を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-178">Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2b23-179">
            <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトに対する反復処理に使用する、列挙子オブジェクトへの参照を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-179">Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-180">[ごとにしています.次のステートメントの](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)呼び出し`GetEnumerator`コレクションの要素に対する反復処理をサポートする列挙子オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-180">The [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) calls `GetEnumerator` to obtain an enumerator object to support iteration over a collection's elements.</span></span> <span data-ttu-id="a2b23-181">通常は、使用、`For Each`しています.`Next`コレクションまたは配列を走査するループしを呼び出す必要はありません`GetEnumerator`明示的にします。</span><span class="sxs-lookup"><span data-stu-id="a2b23-181">Normally, you use a `For Each`...`Next` loop to traverse a collection or array, and you do not need to call `GetEnumerator` explicitly.</span></span>  
  
 <span data-ttu-id="a2b23-182">イテレーションに近い制御必要がある場合、`For Each`しています.`Next`ステートメントの提供、使用することができます、`GetEnumerator`カスタマイズの検査を実行するメソッド。</span><span class="sxs-lookup"><span data-stu-id="a2b23-182">If you need closer control over the iteration than the `For Each`...`Next` statements provide, you can use the `GetEnumerator` method to perform a customized traversal.</span></span> <span data-ttu-id="a2b23-183">次に、場合によってはするがこれを行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2b23-183">The following are some cases in which you might need to do this.</span></span>  
  
-   <span data-ttu-id="a2b23-184">コレクションの先頭に戻るしが終わる前に、もう一度イテレーションを開始する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a2b23-184">You might want to return to the beginning of the collection and start the iteration again before it is finished.</span></span>  
  
-   <span data-ttu-id="a2b23-185">さまざまな理由の 1 つまたは複数の要素をスキップする場合があります。</span><span class="sxs-lookup"><span data-stu-id="a2b23-185">You might want to skip over one or more elements for a variety of reasons.</span></span>  
  
-   <span data-ttu-id="a2b23-186">走査中にコレクションの要素を変更する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2b23-186">You might need to change the elements of the collection in the middle of a traversal.</span></span> <span data-ttu-id="a2b23-187">ここでは前の 1 つが無効になっているために、新しい列挙子オブジェクトを取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2b23-187">In this case you must obtain a new enumerator object because the previous one is invalidated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2b23-188">次の例は、使用する方法を示しています。`GetEnumerator`のすべての要素を取得する、`Collection`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2b23-188">The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#7)]  
  
 <span data-ttu-id="a2b23-189">`GetEnumerator` 構築してを実装する列挙子オブジェクトを返す、<xref:System.Collections.IEnumerator>のインターフェイス、<xref:System.Collections>名前空間。</span><span class="sxs-lookup"><span data-stu-id="a2b23-189">`GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace.</span></span> <span data-ttu-id="a2b23-190">列挙子オブジェクトは、公開、<xref:System.Collections.IEnumerator.Current%2A>プロパティおよび<xref:System.Collections.IEnumerator.MoveNext%2A>と<xref:System.Collections.IEnumerator.Reset%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-190">The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods.</span></span> <span data-ttu-id="a2b23-191">詳細については、次を参照してください[ごとにしています...次のステートメントの](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-191">For more information, see [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a2b23-192">
            <see langword="Collection" /> オブジェクトの特定の要素を、位置またはキーに基づいて返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-192">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="a2b23-193">読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-193">Read-only.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="a2b23-194">(A) コレクションの要素の位置を指定する数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-194">(A) A numeric expression that specifies the position of an element of the collection.</span>
          </span>
          <span data-ttu-id="a2b23-195">
            <c>Index</c> は 1 からコレクションの <see cref="P:Microsoft.VisualBasic.Collection.Count" /> プロパティの値までの数字であることが必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-195">
              <c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
          <span data-ttu-id="a2b23-196">または、(B) コレクションの要素の位置またはキー文字列を指定する <see langword="Object" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-196">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-197">
            <see langword="Collection" /> オブジェクトの特定の要素を、位置またはキーに基づいて返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-197">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="a2b23-198">読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-198">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2b23-199">
            <see langword="Collection" /> オブジェクトの特定の要素を、位置またはキーに基づいて返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-199">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="a2b23-200">読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-200">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-201">場合`Index`の種類は`Object`、`Item`として処理しようとしているプロパティ、 `String`、 `Char`、`Char`配列、または整数値。</span><span class="sxs-lookup"><span data-stu-id="a2b23-201">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="a2b23-202">場合`Item`に変換できません`Index`に`String`または`Integer`、スロー、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="a2b23-202">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="a2b23-203">`Item`プロパティは、コレクションの既定のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-203">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="a2b23-204">したがって、次のコード行は等価です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-204">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="a2b23-205">次の例では、`Item`コレクション内のオブジェクトへの参照を取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-205">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="a2b23-206">作成`birthdays`として、`Collection`オブジェクトし、キーを使用して、課金内容の生年月日を表すオブジェクトを取得し、`"Bill"`として、`Index`引数。</span><span class="sxs-lookup"><span data-stu-id="a2b23-206">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="a2b23-207">ノートの最初の呼び出しを明示的に指定する、`Item`プロパティが 2 つ目はありません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-207">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="a2b23-208">呼び出しは両方ともために、機能、`Item`プロパティは既定のプロパティを`Collection`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2b23-208">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="a2b23-209">(A) コレクションの要素の位置を指定する数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-209">(A) A numeric expression that specifies the position of an element of the collection.</span>
          </span>
          <span data-ttu-id="a2b23-210">
            <c>Index</c> は 1 からコレクションの <see cref="P:Microsoft.VisualBasic.Collection.Count" /> プロパティの値までの数字であることが必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-210">
              <c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
          <span data-ttu-id="a2b23-211">または、(B) コレクションの要素の位置またはキー文字列を指定する <see langword="Object" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-211">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-212">
            <see langword="Collection" /> オブジェクトの特定の要素を、位置またはキーに基づいて返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-212">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="a2b23-213">読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-213">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2b23-214">
            <see langword="Collection" /> オブジェクトの特定の要素を、位置またはキーに基づいて返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-214">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="a2b23-215">読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-215">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-216">場合`Index`の種類は`Object`、`Item`として処理しようとしているプロパティ、 `String`、 `Char`、`Char`配列、または整数値。</span><span class="sxs-lookup"><span data-stu-id="a2b23-216">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="a2b23-217">場合`Item`に変換できません`Index`に`String`または`Integer`、スロー、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="a2b23-217">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="a2b23-218">`Item`プロパティは、コレクションの既定のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-218">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="a2b23-219">したがって、次のコード行は等価です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-219">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="a2b23-220">次の例では、`Item`コレクション内のオブジェクトへの参照を取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-220">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="a2b23-221">作成`birthdays`として、`Collection`オブジェクトし、キーを使用して、課金内容の生年月日を表すオブジェクトを取得し、`"Bill"`として、`Index`引数。</span><span class="sxs-lookup"><span data-stu-id="a2b23-221">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="a2b23-222">ノートの最初の呼び出しを明示的に指定する、`Item`プロパティが 2 つ目はありません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-222">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="a2b23-223">呼び出しは両方ともために、機能、`Item`プロパティは既定のプロパティを`Collection`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2b23-223">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string Key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ Key); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">
          <span data-ttu-id="a2b23-224">コレクションの要素にアクセスするときに位置インデックスの代わりに使用できるキー文字列を指定する、一意の <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-224">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span>
          </span>
          <span data-ttu-id="a2b23-225">
            <c>Key</c> は、要素がコレクションに追加されたときに指定された <c>Key</c> 引数に対応します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-225">
              <c>Key</c> must correspond to the <c>Key</c> argument specified when the element was added to the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-226">
            <see langword="Collection" /> オブジェクトの特定の要素を、位置またはキーに基づいて返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-226">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="a2b23-227">読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-227">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2b23-228">
            <see langword="Collection" /> オブジェクトの特定の要素を、位置またはキーに基づいて返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-228">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="a2b23-229">読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-229">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-230">場合`Index`の種類は`Object`、`Item`として処理しようとしているプロパティ、 `String`、 `Char`、`Char`配列、または整数値。</span><span class="sxs-lookup"><span data-stu-id="a2b23-230">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="a2b23-231">場合`Item`に変換できません`Index`に`String`または`Integer`、スロー、<xref:System.ArgumentException>例外。</span><span class="sxs-lookup"><span data-stu-id="a2b23-231">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="a2b23-232">`Item`プロパティは、コレクションの既定のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-232">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="a2b23-233">したがって、次のコード行は等価です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-233">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="a2b23-234">次の例では、`Item`コレクション内のオブジェクトへの参照を取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-234">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="a2b23-235">作成`birthdays`として、`Collection`オブジェクトし、キーを使用して、課金内容の生年月日を表すオブジェクトを取得し、`"Bill"`として、`Index`引数。</span><span class="sxs-lookup"><span data-stu-id="a2b23-235">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="a2b23-236">ノートの最初の呼び出しを明示的に指定する、`Item`プロパティが 2 つ目はありません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-236">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="a2b23-237">呼び出しは両方ともために、機能、`Item`プロパティは既定のプロパティを`Collection`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2b23-237">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a2b23-238">
            <see langword="Collection" /> オブジェクトから要素を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-238">Removes an element from a <see langword="Collection" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(int Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="a2b23-239">コレクションの要素の位置を指定する数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-239">A numeric expression that specifies the position of an element of the collection.</span>
          </span>
          <span data-ttu-id="a2b23-240">
            <c>Index</c> は 1 からコレクションの <see cref="P:Microsoft.VisualBasic.Collection.Count" /> プロパティの値までの数字であることが必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-240">
              <c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-241">
            <see langword="Collection" /> オブジェクトから要素を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-241">Removes an element from a <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-242">ときに`Remove`、コレクションから要素を削除、デクリメント、コレクションの<xref:Microsoft.VisualBasic.Collection.Count%2A>によって 1 つのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-242">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="a2b23-243">これもデクリメント、`Index`コレクション内で削除された要素の後に続くすべての要素の値。</span><span class="sxs-lookup"><span data-stu-id="a2b23-243">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="a2b23-244">要素がなく、コレクションに追加した場合、 `Key`、使用する必要があります、`Index`を削除します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-244">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2b23-245">この例での使用、`Remove`からオブジェクトを削除する方法、<xref:Microsoft.VisualBasic.Collection>変数内のオブジェクト`birthdays`です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-245">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="a2b23-246">呼び出しを次の 4 つ、`Add`メソッド、`Count`プロパティには、4 が含まれています。 要素`"Bill"`インデックス値 1、および要素を持つ`"Pete"`4 インデックス値を持ちます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-246">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="a2b23-247">次の最初の呼び出し`Remove`、`Count`は、3、要素`"Bill"`削除されると、要素と`"Pete"`インデックス値 3 を持ちます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-247">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="a2b23-248">次の 2 番目の呼び出し`Remove`、 `Count` 2 では、要素`"Mike"`削除されると、要素と`"Pete"`2 のインデックス値を持ちます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-248">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ Key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">
          <span data-ttu-id="a2b23-249">コレクションの要素にアクセスするときに位置インデックスの代わりに使用できるキー文字列を指定する、一意の <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-249">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span>
          </span>
          <span data-ttu-id="a2b23-250">
            <c>Key</c> は、要素がコレクションに追加されたときに指定された <c>Key</c> 引数に対応します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-250">
              <c>Key</c> must correspond to the <c>Key</c> argument specified when the element was added to the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-251">
            <see langword="Collection" /> オブジェクトから要素を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-251">Removes an element from a <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-252">ときに`Remove`、コレクションから要素を削除、デクリメント、コレクションの<xref:Microsoft.VisualBasic.Collection.Count%2A>によって 1 つのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="a2b23-252">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="a2b23-253">これもデクリメント、`Index`コレクション内で削除された要素の後に続くすべての要素の値。</span><span class="sxs-lookup"><span data-stu-id="a2b23-253">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="a2b23-254">要素がなく、コレクションに追加した場合、 `Key`、使用する必要があります、`Index`を削除します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-254">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2b23-255">この例での使用、`Remove`からオブジェクトを削除する方法、<xref:Microsoft.VisualBasic.Collection>変数内のオブジェクト`birthdays`です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-255">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="a2b23-256">呼び出しを次の 4 つ、`Add`メソッド、`Count`プロパティには、4 が含まれています。 要素`"Bill"`インデックス値 1、および要素を持つ`"Pete"`4 インデックス値を持ちます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-256">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="a2b23-257">次の最初の呼び出し`Remove`、`Count`は、3、要素`"Bill"`削除されると、要素と`"Pete"`インデックス値 3 を持ちます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-257">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="a2b23-258">次の 2 番目の呼び出し`Remove`、 `Count` 2 では、要素`"Mike"`削除されると、要素と`"Pete"`2 のインデックス値を持ちます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-258">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void ICollectionCopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void ICollectionCopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="a2b23-259">
            <see cref="T:System.Array" /> オブジェクトから要素をコピーする 1 次元の <see cref="T:Microsoft.VisualBasic.Collection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-259">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="a2b23-260">
            <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-260">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="a2b23-261">コピーの開始位置となる、<c>array</c> の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-261">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-262">
            <see cref="T:Microsoft.VisualBasic.Collection" /> の要素を <see cref="T:System.Array" /> にコピーします。コピーは特定の <see cref="T:System.Array" /> のインデックスから開始されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-262">Copies the elements of the <see cref="T:Microsoft.VisualBasic.Collection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
          <span data-ttu-id="a2b23-263">
            <see cref="T:System.Collections.ICollection" /> インターフェイスを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-263">Implements the <see cref="T:System.Collections.ICollection" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-264">要素のコピー先は、<xref:System.Array>を列挙子が反復処理する順序と同じ順序で、<xref:Microsoft.VisualBasic.Collection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2b23-264">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 <span data-ttu-id="a2b23-265">このメソッドは、O (`n`) 操作では、ここで`n`から取得した、<xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-265">This method is an O(`n`) operation, where `n` is obtained from the <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2b23-266">
            <paramref name="array" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-266">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2b23-267">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-267">
              <paramref name="index" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a2b23-268">
            <paramref name="array" /> が多次元です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-268">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="a2b23-269">または、コピー元の <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトの要素数が、<paramref name="index" /> からコピー先の <paramref name="array" /> の末尾までに格納できる数を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-269">-or-  The number of elements in the source <see cref="T:Microsoft.VisualBasic.Collection" /> object is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="a2b23-270">コピー元の <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトの型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-270">The type of the source <see cref="T:Microsoft.VisualBasic.Collection" /> object cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionCount">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.ICollectionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ICollectionCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionCount As Integer Implements ICollection.ICollectionCount" />
      <MemberSignature Language="C++ CLI" Value="property int System.Collections.ICollection.ICollectionCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionIsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.ICollectionIsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ICollectionIsSynchronized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionIsSynchronized As Boolean Implements ICollection.ICollectionIsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.ICollectionIsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionSyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.ICollectionSyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ICollectionSyncRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionSyncRoot As Object Implements ICollection.ICollectionSyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.ICollectionSyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance class System.Collections.IEnumerator ICollectionGetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function ICollectionGetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ ICollectionGetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2b23-271">コレクションを反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-271">Returns an enumerator that iterates through the collection.</span>
          </span>
          <span data-ttu-id="a2b23-272">
            <see cref="T:System.Collections.ICollection" /> インターフェイスを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-272">Implements the <see cref="T:System.Collections.ICollection" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2b23-273">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-273">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-274">[Visual Basic、C# の場合]</span><span class="sxs-lookup"><span data-stu-id="a2b23-274">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="a2b23-275">C# 言語の `foreach` ステートメント (Visual Basic の場合は `for each`) を使用することで列挙子の複雑さを回避できます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-275">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="a2b23-276">したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a2b23-276">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="a2b23-277">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-277">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="a2b23-278">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-278">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="a2b23-279"><xref:System.Collections.IEnumerator.Reset%2A>メソッドがこの位置に戻さも、列挙子を表示します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-279">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span> <span data-ttu-id="a2b23-280">この位置にある、<xref:System.Collections.IEnumerator.Current%2A>プロパティが定義されていません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-280">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="a2b23-281">そのため、呼び出す必要があります、<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<xref:System.Collections.IEnumerator.Current%2A>です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-281">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="a2b23-282"><xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-282"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="a2b23-283"><xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-283"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="a2b23-284">場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-284">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="a2b23-285">列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-285">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="a2b23-286">場合は、最後の呼び出し<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-286">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="a2b23-287"><xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a2b23-287">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="a2b23-288">コレクションが変更されない限り、列挙子は有効です。</span><span class="sxs-lookup"><span data-stu-id="a2b23-288">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a2b23-289">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</span><span class="sxs-lookup"><span data-stu-id="a2b23-289">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="a2b23-290">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-290">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a2b23-291">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-291">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="a2b23-292">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a2b23-292">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListAdd(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListAdd (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListAdd(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="a2b23-293">
            <see cref="T:System.Object" /> オブジェクトに追加する <see cref="T:Microsoft.VisualBasic.Collection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-293">The <see cref="T:System.Object" /> to add to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-294">
            <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトに項目を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-294">Adds an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="a2b23-295">
            <see cref="T:System.Collections.IList" /> インターフェイスを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-295">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2b23-296">新しい要素が挿入された位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-296">The position into which the new element was inserted.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-297">使用することも、<xref:Microsoft.VisualBasic.Collection.Item%2A>にキーの値を設定して、新しい要素を追加するプロパティが存在しません、<xref:Microsoft.VisualBasic.Collection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2b23-297">You can also use the <xref:Microsoft.VisualBasic.Collection.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="a2b23-298">
            <see cref="T:Microsoft.VisualBasic.Collection" /> が読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-298">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="a2b23-299">または、<see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトが固定サイズです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-299">-or-  The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Add(System.Object)" />
        <altmember cref="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListClear" />
      <MemberSignature Language="VB.NET" Value="Sub IListClear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListClear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2b23-300">
            <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトからすべての項目を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-300">Removes all items from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="a2b23-301">
            <see cref="T:System.Collections.IList" /> インターフェイスを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-301">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-302">このメソッドからすべての項目を削除する、<xref:Microsoft.VisualBasic.Collection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2b23-302">This method removes all items from the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="a2b23-303">
            <see cref="T:System.Collections.IList" /> は読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-303">The <see cref="T:System.Collections.IList" /> is read-only.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.Hashtable.Clear" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance bool IListContains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListContains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool IListContains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="a2b23-304">
            <see cref="T:System.Object" /> オブジェクト内で検索される <see cref="T:Microsoft.VisualBasic.Collection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-304">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-305">
            <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトに特定の値が格納されているかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-305">Determines whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object contains a specific value.</span>
          </span>
          <span data-ttu-id="a2b23-306">
            <see cref="T:System.Collections.IList" /> インターフェイスを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-306">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2b23-307">
            <see cref="T:System.Object" /> が <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクト内に見つかった場合に <see langword="True" /> を返します。それ以外の場合は <see langword="False" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-307">Returns <see langword="True" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:Microsoft.VisualBasic.Collection" /> object; otherwise, <see langword="False" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-308">このメソッドを判断するかどうか、<xref:Microsoft.VisualBasic.Collection>オブジェクトには、特定の値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="a2b23-308">This method determines whether the <xref:Microsoft.VisualBasic.Collection> object contains a specific value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsFixedSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsFixedSize As Boolean Implements IList.IListIsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsReadOnly As Boolean Implements IList.IListIsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListItem">
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object IListItem(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(index As Integer) As Object Implements IList.IListItem" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListIndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListIndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListIndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="a2b23-309">
            <see cref="T:System.Object" /> オブジェクト内で検索される <see cref="T:Microsoft.VisualBasic.Collection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-309">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-310">
            <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクト内での指定した項目のインデックスを調べます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-310">Determines the index of a specific item in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="a2b23-311">
            <see cref="T:System.Collections.IList" /> インターフェイスを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-311">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2b23-312">コレクションに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-312">The index of <paramref name="value" /> if found in the collection; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-313">このメソッド内の特定の項目のインデックスを決定する、<xref:Microsoft.VisualBasic.Collection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2b23-313">This method determines the index of a specific item in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListInsert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListInsert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="a2b23-314">
            <c>value</c> を挿入する位置を示す、0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-314">The zero-based index at which <c>value</c> should be inserted.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a2b23-315">
            <see cref="T:System.Object" /> オブジェクトに挿入する <see cref="T:Microsoft.VisualBasic.Collection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-315">The <see cref="T:System.Object" /> to insert into the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-316">
            <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクト内の指定されたインデックス位置に項目を挿入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-316">Inserts an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object at the specified index.</span>
          </span>
          <span data-ttu-id="a2b23-317">
            <see cref="T:System.Collections.IList" /> インターフェイスを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-317">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-318">場合`index`内の項目数に等しければ、<xref:Microsoft.VisualBasic.Collection>オブジェクト、`value`が末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-318">If `index` equals the number of items in the <xref:Microsoft.VisualBasic.Collection> object, then `value` is appended to the end.</span></span>  
  
 <span data-ttu-id="a2b23-319">リストなどの連続する要素のコレクションでは、新しい要素を挿入するために、挿入位置より後にある要素の位置が繰り下げられます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-319">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="a2b23-320">コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-320">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="a2b23-321">この動作は、要素が概念的にバケットにグループ化されているハッシュ テーブルなどのコレクションには適用されません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-321">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2b23-322">
            <paramref name="index" /> は、<see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトで有効なインデックスではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-322">
              <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="a2b23-323">
            <see cref="T:Microsoft.VisualBasic.Collection" /> が読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-323">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="a2b23-324">または、<see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトが固定サイズです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-324">-or-  The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="a2b23-325">
            <paramref name="value" /> は、<see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクト内の null 参照です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-325">
              <paramref name="value" /> is null reference in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="a2b23-326">
            <see cref="T:System.Object" /> オブジェクトから削除する <see cref="T:Microsoft.VisualBasic.Collection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-326">The <see cref="T:System.Object" /> to remove from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-327">指定したオブジェクトが <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクト内にあるときに、最初に出現したものを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-327">Removes the first occurrence of a specific object from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="a2b23-328">
            <see cref="T:System.Collections.IList" /> インターフェイスを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-328">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-329">リストなどの連続する要素のコレクションでは、空白になった位置を埋めるために、削除された要素の後にある要素の位置が繰り上げられます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-329">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="a2b23-330">コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-330">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="a2b23-331">この動作は、要素が概念的にバケットにグループ化されているハッシュ テーブルなどのコレクションには適用されません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-331">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span> <span data-ttu-id="a2b23-332">場合`value`に載っていない、<xref:Microsoft.VisualBasic.Collection>オブジェクト、<xref:Microsoft.VisualBasic.Collection>オブジェクトが変更されないと、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-332">If `value` is not found in the <xref:Microsoft.VisualBasic.Collection> object, the <xref:Microsoft.VisualBasic.Collection> object remains unchanged and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="a2b23-333">
            <see cref="T:Microsoft.VisualBasic.Collection" /> が読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-333">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="a2b23-334">または、<see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトが固定サイズです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-334">-or-  The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="a2b23-335">削除する項目の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-335">The zero-based index of the item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-336">指定されたインデックスの <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクト項目を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-336">Removes the <see cref="T:Microsoft.VisualBasic.Collection" /> object item at the specified index.</span>
          </span>
          <span data-ttu-id="a2b23-337">
            <see cref="T:System.Collections.IList" /> インターフェイスを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-337">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-338">リストなどの連続する要素のコレクションでは、空白になった位置を埋めるために、削除された要素の後にある要素の位置が繰り上げられます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-338">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="a2b23-339">コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。</span><span class="sxs-lookup"><span data-stu-id="a2b23-339">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="a2b23-340">この動作は、要素が概念的にバケットにグループ化されているハッシュ テーブルなどのコレクションには適用されません。</span><span class="sxs-lookup"><span data-stu-id="a2b23-340">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2b23-341">
            <paramref name="index" /> は、<see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトで有効なインデックスではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-341">
              <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="a2b23-342">
            <see cref="T:Microsoft.VisualBasic.Collection" /> が読み取り専用です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-342">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="a2b23-343">または、<see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトが固定サイズです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-343">-or-  The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="a2b23-344">コールバックを開始したオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-344">The object that initiated the callback.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-345">
            <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクト グラフの逆シリアル化が完了した後で実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-345">Runs after the entire <see cref="T:Microsoft.VisualBasic.Collection" /> object graph has been deserialized.</span>
          </span>
          <span data-ttu-id="a2b23-346">
            <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> インターフェイスを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-346">Implements the <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-347">このメソッドは、全体の後に呼び出されます<xref:Microsoft.VisualBasic.Collection>オブジェクト グラフが逆シリアル化されました。</span><span class="sxs-lookup"><span data-stu-id="a2b23-347">This method is called after the entire <xref:Microsoft.VisualBasic.Collection> object graph has been deserialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
        <altmember cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="a2b23-348">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトをシリアル化するために必要な情報を格納している <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-348">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="a2b23-349">
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトに関連付けられているシリアル化ストリームの転送元および転送先を格納している <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-349">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2b23-350">
            <see cref="T:Microsoft.VisualBasic.Collection" /> オブジェクトをシリアル化するために必要なデータを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-350">Returns the data needed to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="a2b23-351">
            <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2b23-351">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2b23-352">このメソッドは、シリアル化に必要なデータを返します、<xref:Microsoft.VisualBasic.Collection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a2b23-352">This method returns the data needed to serialize the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>