<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f9aad-101"><see langword="FileSystem" /> モジュールに含まれるプロシージャを使って、ファイル、ディレクトリ、またはフォルダー、およびシステムの操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="f9aad-102"><see langword="My" /> 機能を使用すると、<see langword="FileSystem" /> モジュールを使用した場合よりファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="f9aad-103">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-104">このモジュールは、Visual Basic 言語キーワードおよびファイルとフォルダーにアクセスするランタイム ライブラリ メンバーをサポートします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-105">この例では、`GetAttr`ファイルとディレクトリまたはフォルダーの属性を判断する関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="f9aad-106">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-106">Required.</span></span> <span data-ttu-id="f9aad-107">新しい既定ディレクトリまたはフォルダーになるディレクトリまたはフォルダーを識別する <see langword="String" /> 式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="f9aad-108"><c>Path</c> にはドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-108"><c>Path</c> may include the drive.</span></span> <span data-ttu-id="f9aad-109">ドライブを指定しない場合、<see langword="ChDir" /> は現在のドライブの既定ディレクトリまたは既定フォルダーを変更します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="f9aad-110">現在のディレクトリまたはフォルダーを変更します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-110">Changes the current directory or folder.</span></span> <span data-ttu-id="f9aad-111"><see langword="My" /> 機能を使用すると、<see langword="ChDir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="f9aad-112">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-113">`ChDir`関数は、既定のディレクトリが既定のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="f9aad-114">たとえば、既定のドライブが C の場合は、次のステートメントは変更 D ドライブの既定のディレクトリが C は、既定のドライブ。</span><span class="sxs-lookup"><span data-stu-id="f9aad-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="f9aad-115">相対にすることができますディレクトリの変更は、次のように 2 つのピリオドを入力します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-116">`ChDir`関数には、部分的に信頼された状況での実行に影響を与えるアンマネージ コードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f9aad-117">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>とします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-118">この例では、`ChDir`を現在のディレクトリまたはフォルダーを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-119"><paramref name="Path" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-119"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f9aad-120">指定されたドライブが無効です。または利用できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-120">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f9aad-121">現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-121">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="f9aad-122">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-122">Required.</span></span> <span data-ttu-id="f9aad-123">既存のドライブを指定する文字列式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-123">String expression that specifies an existing drive.</span></span> <span data-ttu-id="f9aad-124">長さ 0 の文字列 ("") を指定した場合、現在のドライブは変更されません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-124">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="f9aad-125"><c>Drive</c> 引数が複数の文字で構成される文字列の場合、<see langword="ChDrive" /> は先頭の文字だけを使用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="f9aad-126">現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-126">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-127">`ChDrive`関数には、部分的に信頼された状況での実行に影響する可能性があります、アンマネージ コード権限が必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f9aad-128">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-129">この例では、`ChDrive`を現在のドライブを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="f9aad-130">関数は、ドライブが存在しない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-131">指定されたドライブが無効です。または利用できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-131">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="f9aad-132">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-132">Required.</span></span> <span data-ttu-id="f9aad-133">既存のドライブを指定する文字列式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-133">String expression that specifies an existing drive.</span></span> <span data-ttu-id="f9aad-134">長さ 0 の文字列 ("") を指定した場合、現在のドライブは変更されません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-134">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="f9aad-135"><c>Drive</c> 引数が複数の文字で構成される文字列の場合、<see langword="ChDrive" /> は先頭の文字だけを使用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="f9aad-136">現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-136">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-137">`ChDrive`関数には、部分的に信頼された状況での実行に影響する可能性があります、アンマネージ コード権限が必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f9aad-138">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-139">この例では、`ChDrive`を現在のドライブを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="f9aad-140">関数は、ドライブが存在しない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-141">指定されたドライブが無効です。または利用できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-141">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f9aad-142">現在のパスを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-142">Returns a string representing the current path.</span></span> <span data-ttu-id="f9aad-143"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="f9aad-144">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f9aad-145">現在のパスを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-145">Returns a string representing the current path.</span></span> <span data-ttu-id="f9aad-146"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="f9aad-147">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="f9aad-148">現在のパスを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-148">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f9aad-149">この例では、`CurDir`関数を現在のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="f9aad-150">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-150">Optional.</span></span> <span data-ttu-id="f9aad-151">既存のドライブを指定する <see langword="Char" /> 式です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-151"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="f9aad-152">ドライブが指定されていない場合、または <c>Drive</c> が長さ 0 の文字列 ("") である場合は、<see langword="CurDir" /> により現在のドライブのパスが返されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="f9aad-153">現在のパスを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-153">Returns a string representing the current path.</span></span> <span data-ttu-id="f9aad-154"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="f9aad-155">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="f9aad-156">現在のパスを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f9aad-157">この例では、`CurDir`関数を現在のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f9aad-158">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="f9aad-159"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="f9aad-160">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f9aad-161">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="f9aad-162"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="f9aad-163">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="f9aad-164">指定されたパターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-165">`Dir`関数は、複数の文字の使用をサポートしています (`*`) と単一文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f9aad-166">`VbVolume` 特定のファイル名の代わりに、ドライブのボリューム ラベルを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="f9aad-167">指定する必要があります、`PathName`初めて呼び出すこと、`Dir`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="f9aad-168">次の項目を取得するには、後続の呼び出しを行うことができます、`Dir`パラメーターのない関数です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-169">正常に実行する、`Dir`関数に必要な<xref:System.Security.Permissions.FileIOPermissionAccess.Read>と<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f9aad-170">詳細については、次を参照してください。 <xref:System.Security.Permissions.FileIOPermission>、 <xref:System.Security.SecurityException>、および[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="f9aad-171">`Attributes`引数列挙の値が次のようには。</span><span class="sxs-lookup"><span data-stu-id="f9aad-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f9aad-172">[値]</span><span class="sxs-lookup"><span data-stu-id="f9aad-172">Value</span></span>|<span data-ttu-id="f9aad-173">定数</span><span class="sxs-lookup"><span data-stu-id="f9aad-173">Constant</span></span>|<span data-ttu-id="f9aad-174">説明</span><span class="sxs-lookup"><span data-stu-id="f9aad-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="f9aad-175">既定モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-175">Default.</span></span> <span data-ttu-id="f9aad-176">属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f9aad-177">属性のないファイルや読み取り専用ファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f9aad-178">属性のないファイルや隠しファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f9aad-179">システム ファイル、および属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f9aad-180">ボリューム ラベルを指定しますその他の属性が指定されている場合`vbVolume`は無視されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f9aad-181">ディレクトリまたはフォルダー、およびも属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f9aad-182">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f9aad-183">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-184">これらの列挙は、Visual Basic 言語によって指定され、実際の値ではなく、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-185">この例では、`Dir`関数で特定のファイルおよびディレクトリの存在をチェックします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f9aad-186">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-186">Optional.</span></span> <span data-ttu-id="f9aad-187">ファイル名、ディレクトリまたはフォルダー名、あるいはドライブ ボリューム ラベルを指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-187"><see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="f9aad-188"><c>PathName</c> が見つからない場合は、長さ 0 の文字列 (<see langword="&quot;&quot;" />) が返されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="f9aad-189">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-189">Optional.</span></span> <span data-ttu-id="f9aad-190">値がファイル属性を指定する列挙式または数式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-190">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="f9aad-191">省略した場合、<see langword="Dir" /> は、<c>PathName</c> に一致する、属性のないファイルを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="f9aad-192">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="f9aad-193"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="f9aad-194">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="f9aad-195">指定されたパターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-196">`Dir`関数は、複数の文字の使用をサポートしています (`*`) と単一文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f9aad-197">`VbVolume` 特定のファイル名の代わりに、ドライブのボリューム ラベルを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="f9aad-198">指定する必要があります、`PathName`初めて呼び出すこと、`Dir`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="f9aad-199">次の項目を取得するには、後続の呼び出しを行うことができます、`Dir`パラメーターなしで機能します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-200">正常に実行する、`Dir`関数に必要な<xref:System.Security.Permissions.FileIOPermissionAccess.Read>と<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f9aad-201">詳細については、次を参照してください。 <xref:System.Security.Permissions.FileIOPermission>、 <xref:System.Security.SecurityException>、および[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="f9aad-202">`Attributes`引数列挙の値が次のようには。</span><span class="sxs-lookup"><span data-stu-id="f9aad-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f9aad-203">[値]</span><span class="sxs-lookup"><span data-stu-id="f9aad-203">Value</span></span>|<span data-ttu-id="f9aad-204">定数</span><span class="sxs-lookup"><span data-stu-id="f9aad-204">Constant</span></span>|<span data-ttu-id="f9aad-205">説明</span><span class="sxs-lookup"><span data-stu-id="f9aad-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="f9aad-206">既定モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-206">Default.</span></span> <span data-ttu-id="f9aad-207">属性を持たないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f9aad-208">属性を持たないファイルに加えて、読み取り専用のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f9aad-209">属性を持たないファイルに加えて、隠しファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f9aad-210">属性を持たないファイルに加え、システム ファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f9aad-211">ボリューム ラベルを指定しますその他の属性が指定されている場合`vbVolume`は無視されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f9aad-212">ディレクトリまたはファイルの属性がないほかのフォルダーを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f9aad-213">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f9aad-214">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-215">これらの列挙は、Visual Basic 言語によって指定され、実際の値の代わりに、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-216">この例では、`Dir`関数で特定のファイルおよびディレクトリの存在をチェックします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-217">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-217">Required.</span></span> <span data-ttu-id="f9aad-218">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="f9aad-218">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="f9aad-219"><see langword="True" /> モードまたはシーケンシャル <see langword="Random" /> モードで開いたファイルの現在位置がファイルの末尾に達している場合、ブール値 <see langword="Input" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="f9aad-220"><see langword="True" /> モードまたはシーケンシャル <see langword="Random" /> モードで開いたファイルの現在位置がファイルの末尾に達している場合、ブール値 <see langword="Input" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-221">使用して`EOF`ファイルの末尾の入力を取得しようとして生成されたエラーを回避します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="f9aad-222">`EOF`関数が返される`False`まで、ファイルの末尾に達しています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="f9aad-223">開いたファイル`Random`または`Binary`アクセス、`EOF`返します`False`最後に実行されるまで`FileGet`関数は、全体のレコードを読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="f9aad-224">開かれたファイルで`Binary`にアクセスするを使用してファイルを読み込もうとすると、`Input`まで関数`EOF`を返します`True`でエラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="f9aad-225">使用して、`LOF`と`Loc`関数の代わりに`EOF`と共にバイナリ ファイルを読み取るとき`Input`、使用または`Get`を使用する場合、`EOF`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="f9aad-226">開いたファイル`Output`、`EOF`は常に返します`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-227">この例では、`EOF`関数、ファイルの終わりを検出します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="f9aad-228">この例では、`Testfile`数行のテキストを含むテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-229">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-229">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-230">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-230">Required.</span></span> <span data-ttu-id="f9aad-231"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="f9aad-231"><see langword="Integer" />.</span></span> <span data-ttu-id="f9aad-232">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-232">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="f9aad-233"><see langword="FileOpen" /> 関数を使用して開いたファイルのファイル モードを表す列挙体を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f9aad-234"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="FileAttr" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="f9aad-235">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="f9aad-236">次の列挙型値は、ファイルのアクセス モードを示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-236">The following enumeration values indicate the file access mode:</span></span>  
  
 <span data-ttu-id="f9aad-237"><list type="table"><item><term> 値</span><span class="sxs-lookup"><span data-stu-id="f9aad-237"><list type="table"><item><term> Value</span></span>  
  
 <span data-ttu-id="f9aad-238"></term><description> モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-238"></term><description> Mode</span></span>  
  
 <span data-ttu-id="f9aad-239"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="f9aad-239"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="f9aad-240"></term><description><see langword="OpenMode.Input" /></description></item><item><term> 2</span><span class="sxs-lookup"><span data-stu-id="f9aad-240"></term><description><see langword="OpenMode.Input" /></description></item><item><term> 2</span></span>  
  
 <span data-ttu-id="f9aad-241"></term><description><see langword="OpenMode.Output" /></description></item><item><term> 4</span><span class="sxs-lookup"><span data-stu-id="f9aad-241"></term><description><see langword="OpenMode.Output" /></description></item><item><term> 4</span></span>  
  
 <span data-ttu-id="f9aad-242"></term><description><see langword="OpenMode.Random" /></description></item><item><term> 8</span><span class="sxs-lookup"><span data-stu-id="f9aad-242"></term><description><see langword="OpenMode.Random" /></description></item><item><term> 8</span></span>  
  
 <span data-ttu-id="f9aad-243"></term><description><see langword="OpenMode.Append" /></description></item><item><term> 32</span><span class="sxs-lookup"><span data-stu-id="f9aad-243"></term><description><see langword="OpenMode.Append" /></description></item><item><term> 32</span></span>  
  
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-244">この関数は、ファイルのモードを使用して開かれたファイルを表す列挙体を返します、`FileOpen`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-244">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-245">この例では、`FileAttr`関数を開いているファイルのファイル モードを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-245">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="f9aad-246">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-246">Optional.</span></span> <span data-ttu-id="f9aad-247">閉じる対象となる、0 以上のチャネルで構成されるパラメーター配列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-247">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="f9aad-248"><see langword="FileOpen" /> 関数で開いたファイルへの入出力を終了して、ファイルを閉じます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-248">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f9aad-249"><see langword="My" /> を使用すると、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-249"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="f9aad-250">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-250">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-251">`FileClose`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-251">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-252">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-252">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-253">詳細については、次を参照してください。[する方法: StreamReader を持つファイルをテキストの読み取り](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)、[する方法: StreamWriter を持つファイルに書き込むテキスト](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)、および[チュートリアル: Visual Basic での操作のファイルおよびディレクトリ](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-253">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="f9aad-254">省略した場合`FileNumbers`、すべてのアクティブなファイルを開く、`FileOpen`関数が終了します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-254">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="f9aad-255">開かれているファイルを閉じるときに`Output`または`Append`出力の最終的なバッファーがそのファイルのオペレーティング システムのバッファーに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-255">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="f9aad-256">すべてのバッファー領域が閉じたに関連付けられているファイルを解放します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-256">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="f9aad-257">ときに、`FileClose`関数が実行され、ファイルをそのファイルの関連付け番号が終了します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-257">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-258">この例では、`FileClose`用に開く、ファイルを閉じる関数`Input`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-258">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f9aad-259"><paramref name="FileNumber" /> は存在しません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-259"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="f9aad-260">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-260">Required.</span></span> <span data-ttu-id="f9aad-261">コピーするファイルの名前を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-261"><see langword="String" /> expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="f9aad-262"><c>Source</c> には、コピー先ファイルのディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-262"><c>Source</c> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="f9aad-263">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-263">Required.</span></span> <span data-ttu-id="f9aad-264">コピー先のファイルの名前を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-264"><see langword="String" /> expression that specifies the destination file name.</span></span> <span data-ttu-id="f9aad-265"><c>Destination</c> には、コピー先ファイルのディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-265"><c>Destination</c> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="f9aad-266">ファイルをコピーします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-266">Copies a file.</span></span> <span data-ttu-id="f9aad-267"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="FileCopy" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-267">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="f9aad-268">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-268">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-269">使用しようとする場合、`FileCopy`現在開いているファイルの関数のエラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-269">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="f9aad-270">`FileCopy` ローカル ドライブで動作する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-270">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-271">この例では、`FileCopy`別に 1 つのファイルをコピーする関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-271">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="f9aad-272">この例の目的であると想定`SrcFile`データを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-272">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-273"><paramref name="Source" /> または <paramref name="Destination" /> が無効であるか、指定されていません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-273"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-274">ファイルは既に開いています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-274">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f9aad-275">ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-275">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f9aad-276">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-276">Required.</span></span> <span data-ttu-id="f9aad-277">ファイル名を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-277"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="f9aad-278"><c>PathName</c> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-278"><c>PathName</c> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="f9aad-279">ファイルへの書き込み日時を示す <see langword="Date" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-279">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="f9aad-280"><see langword="My" /> 機能を使用すると、<see langword="FileDateTime" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-280">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="f9aad-281">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-281">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns>
          <span data-ttu-id="f9aad-282">ファイルの作成日時または最終変更日時を示す <see langword="Date" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-282"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f9aad-283">この例では、`FileDateTime`関数を日付し、時刻のファイルが作成または最後に変更されました。</span><span class="sxs-lookup"><span data-stu-id="f9aad-283">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="f9aad-284">表示される日時の形式は、システムのロケール設定に基づきます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-284">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-285"><paramref name="PathName" /> が無効です。またはワイルドカードを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-285"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f9aad-286">対象のファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-286">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f9aad-287">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-287">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-288"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-288">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-289">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-289">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-290">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-290">Required.</span></span> <span data-ttu-id="f9aad-291">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-291">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-292">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-292">Required.</span></span> <span data-ttu-id="f9aad-293">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-293">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-294">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-294">Optional.</span></span> <span data-ttu-id="f9aad-295">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-295">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-296">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-296">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-297"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-297">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-298">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-298">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-299">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-299">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-300">データを使用して読み取る`FileGet`は通常のファイルに書き込まれ`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-300">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f9aad-301">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-301">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-302">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-302">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-303">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-303">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-304">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-304">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-305">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-305">Random Mode</span></span>  
 <span data-ttu-id="f9aad-306">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-306">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-307">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-307">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-308">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-308">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-309">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-309">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-310">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-310">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-311">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-311">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-312">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-312">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-313">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-313">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-314">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-314">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f9aad-315">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-315">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-316">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-316">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f9aad-317">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-317">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f9aad-318">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-318">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f9aad-319">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-319">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-320">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-320">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-321">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-321">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-322">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-322">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f9aad-323">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-323">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f9aad-324">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f9aad-324">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f9aad-325">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-325">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f9aad-326">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-326">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f9aad-327">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-327">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-328">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-328">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-329">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-329">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-330">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-330">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f9aad-331">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-331">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-332">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-332">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-333">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-333">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-334">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-334">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-335">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-335">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-336">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-336">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-337">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f9aad-337">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-338">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-338">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f9aad-339">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-339">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f9aad-340">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-340">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-341">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-341">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f9aad-342">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-342">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-343"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-343"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-344">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-344">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-345">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-345">Required.</span></span> <span data-ttu-id="f9aad-346">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-346">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-347">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-347">Required.</span></span> <span data-ttu-id="f9aad-348">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-348">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-349">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-349">Optional.</span></span> <span data-ttu-id="f9aad-350">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-350">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-351">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-351">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-352"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-352">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-353">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-353">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-354">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-354">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-355">データを使用して読み取る`FileGet`は通常のファイルに書き込まれ`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-355">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f9aad-356">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-356">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-357">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-357">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-358">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-358">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-359">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-359">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-360">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-360">Random Mode</span></span>  
 <span data-ttu-id="f9aad-361">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-361">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-362">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-362">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-363">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-363">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-364">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-364">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-365">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-365">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-366">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-366">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-367">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-367">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-368">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-368">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-369">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-369">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f9aad-370">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-370">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-371">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-371">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f9aad-372">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-372">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f9aad-373">場合は、記述子は使用されません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-373">If the descriptor is not used.</span></span> <span data-ttu-id="f9aad-374">渡され、配列の境界とサイズ、`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-374">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f9aad-375">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-375">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-376">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-376">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-377">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-378">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-378">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f9aad-379">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-379">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f9aad-380">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f9aad-380">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f9aad-381">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-381">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f9aad-382">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-382">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f9aad-383">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-383">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-384">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-384">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-385">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-385">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-386">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-386">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f9aad-387">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-387">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-388">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-388">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-389">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-389">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-390">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-390">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-391">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-391">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-392">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-392">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-393">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f9aad-393">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-394">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-394">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f9aad-395">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-395">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f9aad-396">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-396">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-397">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-397">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f9aad-398">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-398">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-399"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-399"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-400">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-400">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-401">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-401">Required.</span></span> <span data-ttu-id="f9aad-402">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-402">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-403">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-403">Required.</span></span> <span data-ttu-id="f9aad-404">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-404">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-405">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-405">Optional.</span></span> <span data-ttu-id="f9aad-406">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-406">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-407">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-407">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-408"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-408">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-409">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-409">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-410">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-410">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-411">データを使用して読み取る`FileGet`は通常のファイルに書き込まれ`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-411">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f9aad-412">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-412">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-413">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-413">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-414">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-414">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-415">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-415">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-416">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-416">Random Mode</span></span>  
 <span data-ttu-id="f9aad-417">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-417">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-418">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-418">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-419">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-419">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-420">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-420">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-421">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-421">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-422">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-422">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-423">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-423">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-424">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-424">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-425">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-425">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f9aad-426">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-426">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-427">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-427">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f9aad-428">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-428">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f9aad-429">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-429">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f9aad-430">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-430">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-431">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-431">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-432">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-432">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-433">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-433">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f9aad-434">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-434">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f9aad-435">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f9aad-435">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f9aad-436">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-436">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f9aad-437">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-437">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f9aad-438">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-438">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-439">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-439">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-440">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-440">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-441">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-441">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f9aad-442">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-442">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-443">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-443">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-444">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-444">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-445">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-445">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-446">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-446">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-447">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-447">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-448">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f9aad-448">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-449">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-449">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f9aad-450">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-450">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f9aad-451">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-451">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-452">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-452">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f9aad-453">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-453">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-454"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-454"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-455">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-455">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-456">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-456">Required.</span></span> <span data-ttu-id="f9aad-457">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-457">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-458">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-458">Required.</span></span> <span data-ttu-id="f9aad-459">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-459">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-460">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-460">Optional.</span></span> <span data-ttu-id="f9aad-461">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-461">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-462">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-462">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-463"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-463">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-464">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-464">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-465">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-465">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-466">データを使用して読み取る`FileGet`は通常のファイルに書き込まれ`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-466">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f9aad-467">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-467">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-468">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-468">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-469">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-469">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-470">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-470">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-471">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-471">Random Mode</span></span>  
 <span data-ttu-id="f9aad-472">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-472">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-473">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-473">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-474">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-474">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-475">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-475">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-476">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-476">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-477">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-477">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-478">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-478">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-479">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-479">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-480">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-480">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f9aad-481">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-481">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-482">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-482">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f9aad-483">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-483">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f9aad-484">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-484">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f9aad-485">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-485">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-486">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-486">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-487">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-487">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-488">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-488">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f9aad-489">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-489">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f9aad-490">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f9aad-490">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f9aad-491">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-491">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f9aad-492">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-492">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f9aad-493">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-493">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-494">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-494">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-495">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-495">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-496">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-496">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f9aad-497">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-497">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-498">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-498">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-499">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-499">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-500">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-500">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-501">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-501">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-502">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-502">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-503">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f9aad-503">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-504">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-504">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f9aad-505">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-505">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f9aad-506">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-506">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-507">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-507">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f9aad-508">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-508">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-509"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-509"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-510">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-510">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-511">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-511">Required.</span></span> <span data-ttu-id="f9aad-512">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-512">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-513">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-513">Required.</span></span> <span data-ttu-id="f9aad-514">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-514">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-515">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-515">Optional.</span></span> <span data-ttu-id="f9aad-516">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-516">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-517">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-517">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-518"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-519">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-520">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-520">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-521">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-521">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f9aad-522">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-522">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-523">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-523">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-524">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-524">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-525">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-525">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-526">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-526">Random Mode</span></span>  
 <span data-ttu-id="f9aad-527">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-527">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-528">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-528">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-529">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-529">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-530">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-530">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-531">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-531">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-532">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-532">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-533">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-533">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-534">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-534">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-535">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-535">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f9aad-536">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-536">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-537">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-537">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f9aad-538">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-538">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f9aad-539">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-539">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f9aad-540">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-540">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-541">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-541">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-542">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-542">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-543">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-543">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f9aad-544">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-544">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f9aad-545">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f9aad-545">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f9aad-546">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-546">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f9aad-547">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-547">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f9aad-548">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-548">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-549">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-549">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-550">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-550">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-551">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-551">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f9aad-552">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-552">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-553">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-553">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-554">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-554">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-555">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-555">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-556">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-556">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-557">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-557">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-558">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f9aad-558">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-559">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-559">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f9aad-560">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-560">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f9aad-561">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-561">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-562">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-562">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f9aad-563">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-563">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-564"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-564"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-565">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-565">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-566">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-566">Required.</span></span> <span data-ttu-id="f9aad-567">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-567">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-568">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-568">Required.</span></span> <span data-ttu-id="f9aad-569">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-569">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-570">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-570">Optional.</span></span> <span data-ttu-id="f9aad-571">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-571">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-572">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-572">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-573"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-573">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-574">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-574">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-575">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-575">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-576">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-576">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f9aad-577">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-577">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-578">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-578">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-579">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-579">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-580">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-580">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-581">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-581">Random Mode</span></span>  
 <span data-ttu-id="f9aad-582">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-582">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-583">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-583">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-584">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-584">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-585">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-585">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-586">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-586">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-587">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-587">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-588">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-588">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-589">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-589">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-590">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-590">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f9aad-591">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-591">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-592">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-592">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f9aad-593">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-593">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f9aad-594">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-594">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f9aad-595">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-595">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-596">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-596">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-597">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-597">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-598">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-598">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f9aad-599">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-599">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f9aad-600">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f9aad-600">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f9aad-601">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-601">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f9aad-602">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-602">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f9aad-603">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-603">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-604">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-604">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-605">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-605">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-606">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-606">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f9aad-607">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-607">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-608">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-608">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-609">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-609">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-610">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-610">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-611">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-611">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-612">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-612">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-613">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f9aad-613">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-614">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-614">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f9aad-615">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-615">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f9aad-616">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-616">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-617">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-617">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f9aad-618">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-618">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-619"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-619"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-620">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-620">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-621">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-621">Required.</span></span> <span data-ttu-id="f9aad-622">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-622">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-623">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-623">Required.</span></span> <span data-ttu-id="f9aad-624">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-624">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-625">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-625">Optional.</span></span> <span data-ttu-id="f9aad-626">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-626">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-627">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-627">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-628"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-628">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-629">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-629">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-630">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-630">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-631">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-631">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f9aad-632">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-632">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-633">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-633">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-634">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-634">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-635">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-635">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-636">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-636">Random Mode</span></span>  
 <span data-ttu-id="f9aad-637">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-637">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-638">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-638">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-639">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-639">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-640">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-640">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-641">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-641">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-642">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-642">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-643">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-643">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-644">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-644">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-645">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-645">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f9aad-646">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-646">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-647">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-647">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f9aad-648">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-648">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f9aad-649">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-649">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f9aad-650">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-650">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-651">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-651">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-652">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-652">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-653">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-653">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f9aad-654">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-654">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f9aad-655">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f9aad-655">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f9aad-656">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-656">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f9aad-657">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-657">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f9aad-658">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-658">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-659">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-659">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-660">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-660">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-661">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-661">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f9aad-662">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-662">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-663">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-663">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-664">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-664">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-665">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-665">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-666">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-666">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-667">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-667">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-668">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f9aad-668">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-669">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-669">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f9aad-670">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-670">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f9aad-671">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-671">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-672">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-672">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f9aad-673">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-673">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-674"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-674"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-675">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-675">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-676">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-676">Required.</span></span> <span data-ttu-id="f9aad-677">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-677">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-678">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-678">Required.</span></span> <span data-ttu-id="f9aad-679">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-679">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-680">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-680">Optional.</span></span> <span data-ttu-id="f9aad-681">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-681">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-682">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-682">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-683"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-683">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-684">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-684">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-685">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-685">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-686">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-686">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f9aad-687">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-687">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-688">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-688">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-689">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-689">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-690">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-690">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-691">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-691">Random Mode</span></span>  
 <span data-ttu-id="f9aad-692">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-692">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-693">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-693">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-694">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-694">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-695">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-695">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-696">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-696">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-697">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-697">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-698">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-698">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-699">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-699">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-700">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-700">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f9aad-701">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-701">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-702">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-702">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f9aad-703">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-703">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f9aad-704">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-704">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f9aad-705">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-705">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-706">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-706">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-707">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-707">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-708">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-708">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f9aad-709">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-709">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f9aad-710">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f9aad-710">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f9aad-711">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-711">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f9aad-712">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-712">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f9aad-713">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-713">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-714">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-714">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-715">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-715">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-716">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-716">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f9aad-717">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-717">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-718">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-718">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-719">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-719">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-720">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-720">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-721">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-721">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-722">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-722">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-723">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f9aad-723">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-724">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-724">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f9aad-725">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-725">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f9aad-726">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-726">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-727">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-727">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f9aad-728">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-728">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-729"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-729"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-730">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-730">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-731">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-731">Required.</span></span> <span data-ttu-id="f9aad-732">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-732">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-733">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-733">Required.</span></span> <span data-ttu-id="f9aad-734">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-734">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-735">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-735">Optional.</span></span> <span data-ttu-id="f9aad-736">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-736">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-737">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-737">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-738"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-738">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-739">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-739">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-740">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-740">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-741">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-741">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f9aad-742">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-742">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-743">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-743">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-744">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-744">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-745">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-745">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-746">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-746">Random Mode</span></span>  
 <span data-ttu-id="f9aad-747">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-747">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-748">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-748">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-749">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-749">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-750">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-750">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-751">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-751">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-752">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-752">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-753">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-753">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-754">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-754">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-755">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-755">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f9aad-756">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-756">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-757">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-757">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f9aad-758">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-758">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f9aad-759">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-759">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f9aad-760">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-760">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-761">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-761">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-762">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-762">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-763">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-763">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f9aad-764">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-764">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f9aad-765">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f9aad-765">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f9aad-766">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-766">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f9aad-767">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-767">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f9aad-768">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-768">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-769">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-769">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-770">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-770">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-771">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-771">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f9aad-772">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-772">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-773">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-773">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-774">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-774">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-775">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-775">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-776">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-776">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-777">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-777">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-778">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f9aad-778">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-779">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-779">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f9aad-780">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-780">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f9aad-781">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-781">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-782">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-782">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f9aad-783">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-783">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-784"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-784"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-785">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-785">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-786">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-786">Required.</span></span> <span data-ttu-id="f9aad-787">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-787">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-788">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-788">Required.</span></span> <span data-ttu-id="f9aad-789">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-789">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-790">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-790">Optional.</span></span> <span data-ttu-id="f9aad-791">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-791">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-792">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-792">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-793"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-793">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-794">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-794">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-795">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-795">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-796">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-796">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f9aad-797">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-797">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-798">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-798">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-799">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-799">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-800">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-800">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-801">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-801">Random Mode</span></span>  
 <span data-ttu-id="f9aad-802">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-802">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-803">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-803">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-804">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-804">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-805">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-805">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-806">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-806">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-807">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-807">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-808">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-808">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-809">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-809">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-810">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-810">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f9aad-811">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-811">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-812">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-812">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f9aad-813">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-813">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f9aad-814">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-814">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f9aad-815">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-815">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-816">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-816">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-817">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-817">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-818">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-818">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f9aad-819">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-819">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f9aad-820">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f9aad-820">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f9aad-821">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-821">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f9aad-822">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-822">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f9aad-823">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-823">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-824">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-824">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-825">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-825">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-826">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-826">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f9aad-827">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-827">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-828">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-828">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-829">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-829">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-830">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-830">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-831">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-831">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-832">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-832">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-833">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f9aad-833">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-834">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-834">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f9aad-835">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-835">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f9aad-836">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-836">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-837">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-837">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f9aad-838">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-838">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-839"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-839"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-840">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-840">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-841">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-841">Required.</span></span> <span data-ttu-id="f9aad-842">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-842">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-843">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-843">Required.</span></span> <span data-ttu-id="f9aad-844">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-844">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-845">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-845">Optional.</span></span> <span data-ttu-id="f9aad-846">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-846">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-847">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-847">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-848"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-848">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-849">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-849">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-850">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-850">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-851">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-851">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f9aad-852">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-852">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-853">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-853">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-854">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-854">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-855">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-855">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-856">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-856">Random Mode</span></span>  
 <span data-ttu-id="f9aad-857">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-857">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-858">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-858">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-859">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-859">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-860">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-860">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-861">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-861">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-862">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-862">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-863">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-863">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-864">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-864">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-865">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-865">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f9aad-866">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-866">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-867">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-867">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f9aad-868">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-868">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f9aad-869">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-869">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f9aad-870">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-870">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-871">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-871">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-872">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-872">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-873">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-873">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f9aad-874">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-874">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f9aad-875">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f9aad-875">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f9aad-876">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-876">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f9aad-877">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-877">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f9aad-878">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-878">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-879">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-879">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-880">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-880">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-881">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-881">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f9aad-882">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-882">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-883">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-883">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-884">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-884">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-885">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-885">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-886">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-886">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-887">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-887">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-888">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f9aad-888">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-889">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-889">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f9aad-890">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-890">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f9aad-891">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-891">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-892">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-892">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f9aad-893">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-893">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-894"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-894"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-895">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-895">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-896">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-896">Required.</span></span> <span data-ttu-id="f9aad-897">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-897">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-898">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-898">Required.</span></span> <span data-ttu-id="f9aad-899">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-899">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-900">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-900">Optional.</span></span> <span data-ttu-id="f9aad-901">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-901">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="f9aad-902">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-902">Optional.</span></span> <span data-ttu-id="f9aad-903">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-903">Applies only when writing a string.</span></span> <span data-ttu-id="f9aad-904">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-904">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="f9aad-905">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-905">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="f9aad-906">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-906">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-907"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-907">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-908">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-908">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-909">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-909">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-910">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-910">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f9aad-911">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-911">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-912">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-912">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-913">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-913">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-914">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-914">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-915">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-915">Random Mode</span></span>  
 <span data-ttu-id="f9aad-916">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-916">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-917">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-917">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-918">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-918">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-919">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-919">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-920">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-920">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-921">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-921">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-922">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-922">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-923">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-923">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-924">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-924">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f9aad-925">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-925">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-926">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-926">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f9aad-927">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-927">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f9aad-928">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-928">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f9aad-929">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-929">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-930">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-930">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-931">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-931">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-932">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-932">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f9aad-933">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-933">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f9aad-934">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f9aad-934">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f9aad-935">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-935">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f9aad-936">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-936">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f9aad-937">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-937">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-938">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-938">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-939">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-939">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-940">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-940">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f9aad-941">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-941">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-942">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-942">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-943">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-943">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-944">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-944">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-945">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-945">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-946">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-946">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-947">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f9aad-947">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-948">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-948">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f9aad-949">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-949">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f9aad-950">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-950">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-951">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-951">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f9aad-952">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-952">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-953"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-954">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-954">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-955">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-955">Required.</span></span> <span data-ttu-id="f9aad-956">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-956">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-957">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-957">Required.</span></span> <span data-ttu-id="f9aad-958">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-958">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-959">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-959">Optional.</span></span> <span data-ttu-id="f9aad-960">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-960">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="f9aad-961">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-961">Optional.</span></span> <span data-ttu-id="f9aad-962">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-962">Applies only when writing an array.</span></span> <span data-ttu-id="f9aad-963">配列を動的として扱うかどうか、およびサイズと境界を表す配列記述子が必要かどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-963">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="f9aad-964">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-964">Optional.</span></span> <span data-ttu-id="f9aad-965">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-965">Applies only when writing a string.</span></span> <span data-ttu-id="f9aad-966">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-966">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="f9aad-967">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-967">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="f9aad-968">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-968">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f9aad-969"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-969">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f9aad-970">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-970">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-971">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-971">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-972">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-972">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f9aad-973">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-973">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-974">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-974">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-975">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-975">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-976">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-976">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-977">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-977">Random Mode</span></span>  
 <span data-ttu-id="f9aad-978">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-978">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-979">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-979">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-980">次のレコードの開始する 1 つのレコードの末尾までには、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-980">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-981">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-981">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-982">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-982">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-983">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-983">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-984">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-984">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-985">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-985">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-986">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-986">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f9aad-987">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-987">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-988">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-988">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f9aad-989">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-989">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f9aad-990">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-990">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f9aad-991">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-991">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-992">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-992">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-993">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-993">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-994">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-994">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f9aad-995">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-995">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f9aad-996">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f9aad-996">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f9aad-997">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-997">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f9aad-998">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-998">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f9aad-999">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-999">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-1000">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1000">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1001">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1001">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1002">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1002">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f9aad-1003">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1003">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-1004">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1004">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1005">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1005">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1006">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1006">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1007">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1007">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1008">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1008">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1009">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1009">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1010">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1010">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f9aad-1011">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1011">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f9aad-1012">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1012">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1013">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1013">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f9aad-1014">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1014">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1015"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1015"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1016">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1016">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1017">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1017">Required.</span></span> <span data-ttu-id="f9aad-1018">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1018">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1019">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1019">Required.</span></span> <span data-ttu-id="f9aad-1020">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1020">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1021">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1021">Optional.</span></span> <span data-ttu-id="f9aad-1022">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1022">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1023">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1023">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="f9aad-1024"><see langword="My" /> 機能を使用すると、<see langword="FileGetObject" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1024">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="f9aad-1025">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1025">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1026">`FileGetObject`の代わりに関数を使用`FileGet`場合は、コンパイル時にあいまいさを避けるために型`Object`など、他の型の代わりに返される`Integer`、 `Long`、`Short`などのようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1026">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="f9aad-1027">記述する場合、`Variant`型、`FileGetObject`が必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1027">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="f9aad-1028">あれば、2 番目のパラメーター オブジェクトを使用している場合、これが常に提案を使用すること`FilePutObject`と`FileGetObject`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1028">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f9aad-1029">`FileGetObject` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1029">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1030">データを使用して読み取る`FileGetObject`に通常書き込まれ、`FilePutObject`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1030">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="f9aad-1031">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1031">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1032">省略した場合`RecordNumber`、 `FileGetObject` 、最後の後に、レコードまたはバイトを読み取ります`FileGetObject`または`FilePutObject`関数 (最後によって示されるまたは`Seek`関数)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1032">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1033">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1033">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1034">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1034">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1035">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGetObject`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1035">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1036">1 つのレコードの終了と次のレコードの先頭の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1036">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1037">埋め込みデータの量を正確に判断できないためには、レコード長が読み取られるデータの長さと一致することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1037">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f9aad-1038">読み取られる変数は既定では、文字列`FileGetObject`文字列の長さを表す 2 バイトの記述子を読み取り、変数にデータを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1038">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1039">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1039">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1040">Visual Basic 6.0 とそれ以前のバージョンは、固定長文字列とファイルを読み取るときに、長さ記述子は書き込まれませんをサポートします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1040">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f9aad-1041">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1041">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1042">読み取られる変数が、配列で指定されたレコード長の場合、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1042">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1043">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1043">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1044">長さが 2 + 8 時間ディメンションの数: 2 + 8 \* 含まです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1044">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="f9aad-1045">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1045">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="f9aad-1046">218 バイトが次のように分散: 記述子 (2 + 8 \* 2)、18 バイトとデータ (5 \* 10 \* 4) の 100 バイトです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1046">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f9aad-1047">`FileGetObject` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1047">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1048">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePutObject`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: 2 + 8 \* 含まです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1048">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="f9aad-1049">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、配列とその記述子を含む個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1049">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="f9aad-1050"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>クラスは、書き込まれたときに、文字列のサイズを示すために構造体で文字列フィールドに適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1050">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1051">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1051">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1052">ファイルを開くの`Binary`モードでは、すべての`Random`これらの例外を除き、規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1052">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="f9aad-1053">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1053">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1054">`FileGetObject` 読み取りますディスクからのすべての変数データを連続的、つまり、レコード間の埋め込みはなしで。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1054">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1055">すべての配列の配列、構造体で以外の`FileGetObject`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1055">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="f9aad-1056">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1056">No descriptor is read.</span></span>  
  
 <span data-ttu-id="f9aad-1057">`FileGetObject` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1057">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1058">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1058">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-1059">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1059">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-1060">たとえば、Form1.vb という名前のファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1060">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1061">次の例では、テスト ファイルにレコードを読み取り、それを取得します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1061">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f9aad-1062">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1062">Required.</span></span> <span data-ttu-id="f9aad-1063">ファイルを指定する <see langword="String" /> 式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1063"><see langword="String" /> expression that specifies a file.</span></span> <span data-ttu-id="f9aad-1064"><c>PathName</c> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1064"><c>PathName</c> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="f9aad-1065">ファイルの長さをバイト数で指定する <see langword="Long" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1065">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="f9aad-1066"><see langword="My" /> 機能を使用すると、<see langword="FileLen" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1066">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="f9aad-1067">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1067">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns>
          <span data-ttu-id="f9aad-1068">ファイルの長さをバイト数で指定する <see langword="Long" /> 値。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1068"><see langword="Long" /> value that specifies the length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1069">場合は、指定したファイルが開いているときに、`FileLen`関数が呼び出されると、返された値は、開かれた時点で、ファイルのサイズを表します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1069">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-1070">開いているファイルの現在の長さを取得するを使用して、`LOF`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1070">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1071">この例では、`FileLen`ファイルの長さをバイト単位で取得する関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1071">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="f9aad-1072">この例の目的であると想定`TestFile`をいくつかのデータを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1072">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f9aad-1073">ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1073">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1074">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1074">Required.</span></span> <span data-ttu-id="f9aad-1075">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1075">Any valid file number.</span></span> <span data-ttu-id="f9aad-1076"><see langword="FreeFile" /> 関数を使用して、次に使用できるファイル番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1076">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="f9aad-1077">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1077">Required.</span></span> <span data-ttu-id="f9aad-1078">ファイル名を指定する <see langword="String" /> 型の式。ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1078"><see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="f9aad-1079">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1079">Required.</span></span> <span data-ttu-id="f9aad-1080">ファイル モード (<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" />、または <see langword="Random" />) を指定する列挙体。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1080">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="f9aad-1081">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenMode" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1081">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="f9aad-1082">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1082">Optional.</span></span> <span data-ttu-id="f9aad-1083">開いているファイルで許可されている操作 (<see langword="Read" />、<see langword="Write" />、または <see langword="ReadWrite" />) を示す列挙体。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1083">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="f9aad-1084">既定値は <see langword="ReadWrite" /> です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1084">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="f9aad-1085">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenAccess" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1085">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="f9aad-1086">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1086">Optional.</span></span> <span data-ttu-id="f9aad-1087">他のプロセスによって開かれたファイルで許可されていない操作 (<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" />、および <see langword="Lock Read Write" />) を指定する列挙体。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1087">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="f9aad-1088">既定値は <see langword="Lock Read Write" /> です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1088">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="f9aad-1089">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenShare" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1089">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="f9aad-1090">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1090">Optional.</span></span> <span data-ttu-id="f9aad-1091">32,767 以下の値 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1091">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="f9aad-1092">ランダム アクセス ファイルの場合は、レコード長を表します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1092">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="f9aad-1093">シーケンシャル ファイルの場合は、バッファー内の文字数を表します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1093">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="f9aad-1094">ファイルを開いて入出力を行います。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1094">Opens a file for input or output.</span></span> <span data-ttu-id="f9aad-1095"><see langword="My" /> 機能を使用すると、<see langword="FileOpen" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1095">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="f9aad-1096">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1096">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1097">`FileOpen`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1097">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-1098">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1098">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-1099">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1099">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-1100">すべての I/O 操作を実行する前にファイルを開く必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1100">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="f9aad-1101">`FileOpen` ファイルへの I/O バッファーを割り当てます、バッファーへのアクセス モードを決定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1101">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-1102">ファイルに書き込む場合、アプリケーションを記述しようとするファイルが存在しない場合、ファイルを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1102">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="f9aad-1103">これを行うには、ファイルが作成されるディレクトリのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1103">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="f9aad-1104">ただし、によってファイルが指定されている場合`FileName`が存在するアプリケーションのニーズ`Write`ファイル自体にのみアクセスを許可します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1104">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="f9aad-1105">セキュリティを強化する、可能なが展開および許可中にファイルを作成する任意の場所`Write`そのファイルへのアクセス許可のみの代わりに、全体のディレクトリにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1105">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="f9aad-1106">セキュリティを強化するには、ルート ディレクトリまたは Program Files ディレクトリへの代わりにユーザーのディレクトリにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1106">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="f9aad-1107">開くには、チャネルを使用して検索することができます、`FreeFile()`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1107">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-1108">`FileOpen`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体は、部分的な信頼されている状況での実行に影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1108">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="f9aad-1109">詳細については、次を参照してください。<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1109">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1110">この例のさまざまな使用を示しています、`FileOpen`入力と、ファイルに出力を有効にする関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1110">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="f9aad-1111">次のコードは、ファイルを開く`TestFile`で`Input`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1111">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="f9aad-1112">この例で、ファイルが開きます`Binary`書き込み専用モードです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1112">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="f9aad-1113">次の例で、ファイルを開きます`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1113">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="f9aad-1114">ファイルには、構造体のレコードが含まれています。`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1114">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="f9aad-1115">このコード例でファイルを開きます`Output`モード以外の任意のプロセスはファイルに対する読み取りまたは書き込み。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1115">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="f9aad-1116">このコード例でファイルを開きます`Binary`モード、読み取り用の他のプロセスがファイルを読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1116">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f9aad-1117">レコード長が、-1 ではない負の値です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1117">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f9aad-1118"><paramref name="FileName" /> が既に開かれています。または <paramref name="FileName" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1118"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f9aad-1119">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1119">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1120"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1120">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1121">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1121">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1122">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1122">Required.</span></span> <span data-ttu-id="f9aad-1123">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1123">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1124">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1124">Required.</span></span> <span data-ttu-id="f9aad-1125">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1125">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1126">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1126">Optional.</span></span> <span data-ttu-id="f9aad-1127">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1127">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1128">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1128">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1129"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1129">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1130">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1130">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1131">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1131">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1132">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1132">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1133">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1133">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1134">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1134">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1135">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1135">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1136">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1136">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1137">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1137">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1138">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1138">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1139">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1139">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1140">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1140">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1141">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1141">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1142">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1142">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1143">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1143">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1144">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1144">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1145">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1145">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1146">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1146">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1147">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1147">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1148">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1148">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1149">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1149">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1150">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1150">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1151">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1151">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1152">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1152">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1153">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1153">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1154">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1154">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1155">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1155">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1156">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1156">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1157">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1157">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1158">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1158">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1159">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1159">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1160">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1160">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1161">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1161">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1162">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1162">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1163">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1163">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1164">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1164">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1165">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1165">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1166">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1166">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1167">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1167">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1168">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1168">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1169">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1169">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1170">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1170">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1171">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1171">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1172">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1172">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1173">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1173">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1174">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1174">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1175">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1175">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1176">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1176">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1177">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1177">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1178">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1178">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1179"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1179"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1180">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1180">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1181">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1181">Required.</span></span> <span data-ttu-id="f9aad-1182">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1182">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1183">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1183">Required.</span></span> <span data-ttu-id="f9aad-1184">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1184">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1185">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1185">Optional.</span></span> <span data-ttu-id="f9aad-1186">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1186">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1187">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1187">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1188"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1188">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1189">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1189">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1190">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1190">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1191">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1191">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1192">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1192">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1193">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1193">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1194">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1194">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1195">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1195">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1196">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1196">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1197">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1197">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1198">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1198">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1199">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1199">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1200">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1200">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1201">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1201">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1202">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1202">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1203">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1203">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1204">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1204">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1205">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1205">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1206">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1206">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1207">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1207">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1208">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1208">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1209">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1209">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1210">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1210">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1211">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1211">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1212">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1212">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1213">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1213">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1214">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1214">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1215">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1215">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1216">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1216">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1217">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1217">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1218">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1218">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1219">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1219">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1220">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1220">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1221">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1221">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1222">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1222">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1223">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1223">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1224">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1224">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1225">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1225">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1226">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1226">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1227">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1227">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1228">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1228">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1229">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1229">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1230">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1230">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1231">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1231">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1232">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1232">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1233">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1233">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1234">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1234">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1235">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1235">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1236">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1236">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1237">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1237">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1238"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1238"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1239">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1239">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1240">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1240">Required.</span></span> <span data-ttu-id="f9aad-1241">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1241">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1242">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1242">Required.</span></span> <span data-ttu-id="f9aad-1243">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1243">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1244">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1244">Optional.</span></span> <span data-ttu-id="f9aad-1245">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1245">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1246">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1246">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1247"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1247">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1248">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1248">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1249">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1249">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1250">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1250">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1251">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1251">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1252">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1252">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1253">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1253">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1254">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1254">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1255">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1255">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1256">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1256">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1257">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1257">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1258">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1258">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1259">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1259">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1260">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1260">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1261">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1261">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1262">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1262">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1263">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1263">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1264">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1264">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1265">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1265">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1266">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1266">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1267">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1267">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1268">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1268">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1269">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1269">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1270">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1270">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1271">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1271">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1272">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1272">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1273">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1273">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1274">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1274">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1275">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1275">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1276">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1276">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1277">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1277">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1278">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1278">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1279">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1279">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1280">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1280">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1281">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1281">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1282">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1282">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1283">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1283">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1284">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1284">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1285">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1285">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1286">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1286">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1287">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1287">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1288">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1288">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1289">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1289">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1290">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1290">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1291">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1291">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1292">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1292">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1293">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1293">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1294">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1294">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1295">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1295">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1296">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1296">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1297"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1297"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1298">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1298">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1299">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1299">Required.</span></span> <span data-ttu-id="f9aad-1300">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1300">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1301">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1301">Required.</span></span> <span data-ttu-id="f9aad-1302">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1302">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1303">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1303">Optional.</span></span> <span data-ttu-id="f9aad-1304">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1304">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1305">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1305">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1306"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1306">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1307">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1307">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1308">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1308">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1309">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1309">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1310">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1310">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1311">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1311">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1312">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1312">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1313">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1313">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1314">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1314">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1315">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1315">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1316">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1316">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1317">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1317">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1318">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1318">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1319">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1319">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1320">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1320">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1321">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1321">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1322">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1322">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1323">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1323">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1324">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1324">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1325">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1325">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1326">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1326">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1327">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1327">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1328">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1328">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1329">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1329">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1330">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1330">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1331">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1331">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1332">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1332">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1333">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1333">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1334">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1334">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1335">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1335">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1336">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1336">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1337">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1337">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1338">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1338">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1339">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1339">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1340">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1340">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1341">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1341">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1342">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1342">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1343">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1343">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1344">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1344">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1345">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1345">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1346">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1346">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1347">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1347">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1348">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1348">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1349">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1349">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1350">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1350">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1351">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1351">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1352">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1352">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1353">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1353">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1354">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1354">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1355">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1355">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1356"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1356"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1357">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1357">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1358">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1358">Required.</span></span> <span data-ttu-id="f9aad-1359">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1359">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1360">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1360">Required.</span></span> <span data-ttu-id="f9aad-1361">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1361">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1362">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1362">Optional.</span></span> <span data-ttu-id="f9aad-1363">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1363">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1364">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1364">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1365"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1365">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1366">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1366">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1367">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1367">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1368">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1368">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1369">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1369">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1370">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1370">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1371">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1371">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1372">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1372">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1373">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1373">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1374">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1374">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1375">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1375">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1376">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1376">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1377">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1377">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1378">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1378">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1379">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1379">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1380">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1380">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1381">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1381">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1382">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1382">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1383">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1383">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1384">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1384">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1385">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1385">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1386">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1386">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1387">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1387">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1388">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1388">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1389">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1389">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1390">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1390">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1391">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1392">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1392">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1393">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1393">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1394">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1394">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1395">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1395">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1396">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1396">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1397">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1397">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1398">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1398">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1399">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1399">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1400">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1400">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1401">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1401">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1402">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1402">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1403">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1403">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1404">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1404">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1405">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1405">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1406">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1406">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1407">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1407">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1408">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1408">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1409">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1409">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1410">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1410">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1411">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1411">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1412">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1412">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1413">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1413">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1414">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1414">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1415"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1415"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1416">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1416">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1417">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1417">Required.</span></span> <span data-ttu-id="f9aad-1418">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1418">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1419">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1419">Required.</span></span> <span data-ttu-id="f9aad-1420">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1420">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1421">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1421">Optional.</span></span> <span data-ttu-id="f9aad-1422">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1422">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1423">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1423">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1424"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1424">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1425">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1425">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1426">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1426">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1427">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1427">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1428">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1428">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1429">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1429">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1430">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1430">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1431">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1431">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1432">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1432">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1433">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1433">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1434">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1434">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1435">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1435">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1436">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1436">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1437">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1437">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1438">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1438">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1439">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1439">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1440">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1440">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1441">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1441">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1442">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1442">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1443">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1443">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1444">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1444">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1445">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1445">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1446">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1446">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1447">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1447">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1448">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1448">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1449">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1449">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1450">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1450">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1451">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1451">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1452">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1452">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1453">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1453">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1454">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1454">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1455">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1455">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1456">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1456">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1457">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1457">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1458">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1458">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1459">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1459">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1460">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1460">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1461">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1461">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1462">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1462">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1463">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1463">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1464">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1464">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1465">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1465">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1466">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1466">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1467">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1467">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1468">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1468">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1469">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1469">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1470">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1470">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1471">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1471">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1472">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1472">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1473">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1473">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1474"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1474"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1475">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1475">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1476">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1476">Required.</span></span> <span data-ttu-id="f9aad-1477">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1477">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1478">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1478">Required.</span></span> <span data-ttu-id="f9aad-1479">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1479">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1480">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1480">Optional.</span></span> <span data-ttu-id="f9aad-1481">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1481">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1482">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1482">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1483"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1483">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1484">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1484">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1485">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1485">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1486">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1486">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1487">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1487">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1488">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1488">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1489">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1489">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1490">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1490">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1491">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1491">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1492">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1492">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1493">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1493">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1494">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1494">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1495">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1495">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1496">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1496">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1497">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1497">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1498">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1498">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1499">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1499">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1500">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1500">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1501">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1501">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1502">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1502">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1503">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1503">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1504">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1504">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1505">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1505">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1506">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1506">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1507">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1507">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1508">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1508">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1509">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1509">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1510">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1510">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1511">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1511">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1512">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1512">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1513">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1513">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1514">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1514">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1515">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1515">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1516">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1516">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1517">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1517">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1518">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1518">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1519">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1519">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1520">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1520">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1521">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1521">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1522">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1522">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1523">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1523">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1524">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1524">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1525">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1525">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1526">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1526">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1527">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1527">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1528">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1528">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1529">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1529">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1530">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1530">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1531">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1531">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1532">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1532">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1533"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1533"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1534">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1534">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1535">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1535">Required.</span></span> <span data-ttu-id="f9aad-1536">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1536">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1537">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1537">Required.</span></span> <span data-ttu-id="f9aad-1538">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1538">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1539">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1539">Optional.</span></span> <span data-ttu-id="f9aad-1540">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1540">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1541">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1541">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1542"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1542">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1543">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1543">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1544">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1544">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1545">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1545">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1546">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1546">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1547">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1547">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1548">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1548">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1549">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1549">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1550">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1550">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1551">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1551">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1552">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1552">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1553">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1553">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1554">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1554">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1555">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1555">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1556">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1556">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1557">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1557">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1558">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1558">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1559">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1559">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1560">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1560">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1561">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1561">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1562">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1562">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1563">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1563">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1564">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1564">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1565">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1565">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1566">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1566">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1567">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1567">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1568">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1568">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1569">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1569">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1570">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1570">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1571">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1571">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1572">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1573">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1573">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1574">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1574">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1575">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1576">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1576">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1577">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1577">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1578">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1578">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1579">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1579">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1580">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1580">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1581">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1581">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1582">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1582">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1583">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1583">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1584">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1584">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1585">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1585">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1586">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1586">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1587">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1587">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1588">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1588">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1589">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1589">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1590">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1590">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1591">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1591">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1592"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1592"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1593">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1593">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1594">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1594">Required.</span></span> <span data-ttu-id="f9aad-1595">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1595">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1596">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1596">Required.</span></span> <span data-ttu-id="f9aad-1597">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1597">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1598">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1598">Optional.</span></span> <span data-ttu-id="f9aad-1599">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1599">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1600">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1600">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1601"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1601">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1602">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1602">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1603">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1603">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1604">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1604">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1605">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1605">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1606">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1606">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1607">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1607">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1608">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1608">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1609">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1609">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1610">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1610">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1611">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1612">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1612">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1613">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1614">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1615">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1615">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1616">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1616">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1617">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1617">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1618">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1618">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1619">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1619">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1620">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1621">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1621">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1622">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1622">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1623">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1623">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1624">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1624">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1625">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1625">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1626">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1626">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1627">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1627">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1628">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1628">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1629">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1629">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1630">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1630">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1631">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1631">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1632">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1632">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1633">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1633">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1634">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1634">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1635">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1635">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1636">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1636">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1637">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1637">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1638">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1638">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1639">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1640">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1641">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1642">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1642">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1643">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1643">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1644">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1644">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1645">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1645">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1646">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1646">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1647">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1647">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1648">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1648">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1649">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1649">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1650">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1650">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1651"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1651"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1652">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1652">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1653">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1653">Required.</span></span> <span data-ttu-id="f9aad-1654">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1654">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1655">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1655">Required.</span></span> <span data-ttu-id="f9aad-1656">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1656">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1657">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1657">Optional.</span></span> <span data-ttu-id="f9aad-1658">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1658">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1659">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1659">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1660"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1660">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1661">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1661">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1662">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1662">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1663">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1663">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1664">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1664">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1665">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1665">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1666">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1666">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1667">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1667">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1668">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1668">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1669">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1669">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1670">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1670">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1671">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1671">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1672">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1672">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1673">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1673">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1674">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1674">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1675">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1675">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1676">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1676">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1677">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1677">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1678">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1678">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1679">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1679">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1680">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1680">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1681">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1681">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1682">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1682">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1683">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1683">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1684">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1684">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1685">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1685">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1686">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1686">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1687">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1687">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1688">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1688">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1689">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1689">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1690">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1690">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1691">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1691">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1692">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1692">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1693">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1693">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1694">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1694">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1695">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1695">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1696">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1696">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1697">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1697">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1698">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1698">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1699">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1699">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1700">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1700">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1701">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1701">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1702">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1702">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1703">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1703">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1704">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1704">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1705">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1705">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1706">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1706">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1707">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1707">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1708">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1708">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1709">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1709">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1710"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1710"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1711">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1711">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1712">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1712">Required.</span></span> <span data-ttu-id="f9aad-1713">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1714">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1714">Required.</span></span> <span data-ttu-id="f9aad-1715">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1716">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1716">Optional.</span></span> <span data-ttu-id="f9aad-1717">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1718">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1719"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1720">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1721">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1722">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1723">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1724">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1725">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1726">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1727">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1728">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1728">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1729">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1730">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1730">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1731">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1732">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1733">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1734">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1735">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1736">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1737">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1738">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1739">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1740">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1741">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1742">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1743">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1744">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1745">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1746">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1747">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1748">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1749">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1750">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1751">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1752">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1753">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1754">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1755">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1756">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1756">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1757">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1758">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1759">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1760">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1761">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1762">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1763">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1764">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1765">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1766">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1767">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1768">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1769"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1770">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1771">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1771">Required.</span></span> <span data-ttu-id="f9aad-1772">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1772">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1773">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1773">Required.</span></span> <span data-ttu-id="f9aad-1774">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1774">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1775">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1775">Optional.</span></span> <span data-ttu-id="f9aad-1776">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1776">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1777">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1777">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1778"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1778">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1779">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1779">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1780">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1780">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1781">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1781">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1782">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1782">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1783">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1783">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1784">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1784">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1785">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1785">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1786">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1786">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1787">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1787">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1788">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1788">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1789">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1789">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1790">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1790">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1791">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1791">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1792">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1792">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1793">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1793">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1794">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1794">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1795">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1795">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1796">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1796">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1797">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1798">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1798">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1799">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1799">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1800">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1800">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1801">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1801">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1802">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1802">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1803">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1803">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1804">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1804">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1805">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1805">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1806">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1806">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1807">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1807">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1808">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1808">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1809">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1809">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1810">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1810">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1811">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1811">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1812">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1812">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1813">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1813">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1814">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1814">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1815">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1815">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1816">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1816">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1817">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1817">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1818">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1818">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1819">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1819">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1820">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1820">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1821">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1821">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1822">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1822">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1823">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1823">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1824">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1824">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1825">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1825">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1826">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1826">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1827">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1827">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1828"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1828"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1829">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1829">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1830">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1830">Required.</span></span> <span data-ttu-id="f9aad-1831">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1831">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1832">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1832">Required.</span></span> <span data-ttu-id="f9aad-1833">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1833">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1834">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1834">Optional.</span></span> <span data-ttu-id="f9aad-1835">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1835">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="f9aad-1836">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1836">Optional.</span></span> <span data-ttu-id="f9aad-1837">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1837">Applies only when writing a string.</span></span> <span data-ttu-id="f9aad-1838">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1838">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="f9aad-1839">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1839">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="f9aad-1840">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1840">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1841"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1842">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1843">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1843">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1844">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1844">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1845">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1845">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1846">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1846">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1847">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1847">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1848">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1848">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1849">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1849">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1850">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1850">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1851">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1851">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1852">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1852">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1853">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1853">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1854">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1854">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1855">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1855">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1856">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1856">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1857">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1857">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1858">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1858">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1859">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1859">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1860">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1861">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1861">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1862">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1862">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1863">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1863">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1864">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1864">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1865">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1865">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1866">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1866">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1867">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1867">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1868">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1868">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1869">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1869">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1870">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1870">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1871">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1871">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1872">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1872">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1873">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1873">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1874">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1874">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1875">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1875">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1876">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1876">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1877">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1877">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1878">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1878">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1879">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1879">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1880">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1880">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1881">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1881">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1882">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1882">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1883">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1883">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1884">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1884">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1885">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1885">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1886">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1886">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1887">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1887">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1888">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1888">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1889">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1889">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1890">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1890">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1891"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1891"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1892">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1892">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1893">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1893">Required.</span></span> <span data-ttu-id="f9aad-1894">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1894">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1895">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1895">Required.</span></span> <span data-ttu-id="f9aad-1896">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1896">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1897">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1897">Optional.</span></span> <span data-ttu-id="f9aad-1898">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1898">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="f9aad-1899">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1899">Optional.</span></span> <span data-ttu-id="f9aad-1900">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1900">Applies only when writing an array.</span></span> <span data-ttu-id="f9aad-1901">配列を動的として扱うかどうか、および長さを表す文字列の配列記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1901">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="f9aad-1902">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1902">Optional.</span></span> <span data-ttu-id="f9aad-1903">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1903">Applies only when writing a string.</span></span> <span data-ttu-id="f9aad-1904">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1904">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="f9aad-1905">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1905">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="f9aad-1906">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1906">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f9aad-1907"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1907">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f9aad-1908">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1908">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1909">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1909">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1910">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1910">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f9aad-1911">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1911">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1912">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1912">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f9aad-1913">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1913">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1914">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1914">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1915">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1915">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1916">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1916">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1917">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1917">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1918">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1918">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1919">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1919">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1920">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1920">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1921">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1921">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1922">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1922">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f9aad-1923">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1923">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f9aad-1924">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1924">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1925">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1925">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1926">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1926">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1927">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1927">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1928">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1928">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1929">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1929">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1930">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1930">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f9aad-1931">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1931">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f9aad-1932">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1932">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f9aad-1933">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1933">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f9aad-1934">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1934">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f9aad-1935">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1935">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1936">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1936">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f9aad-1937">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1937">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1938">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1938">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f9aad-1939">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1939">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f9aad-1940">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1940">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f9aad-1941">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1941">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f9aad-1942">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1942">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f9aad-1943">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f9aad-1943">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1944">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1944">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1945">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1945">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f9aad-1946">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1946">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f9aad-1947">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1947">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1948">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1948">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f9aad-1949">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1949">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f9aad-1950">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1950">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f9aad-1951">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1951">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f9aad-1952">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1952">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f9aad-1953">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1953">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f9aad-1954">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1954">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1955">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1955">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f9aad-1956">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1956">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-1957"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1957"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-1958">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1958">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1959">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1959">Required.</span></span> <span data-ttu-id="f9aad-1960">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1960">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-1961">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1961">Required.</span></span> <span data-ttu-id="f9aad-1962">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1962">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f9aad-1963">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1963">Optional.</span></span> <span data-ttu-id="f9aad-1964">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1964">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f9aad-1965">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1965">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="f9aad-1966"><see langword="My" /> 機能を使用すると、<see langword="FilePutObject" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1966">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="f9aad-1967">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1967">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-1968">`FilePutObject`関数がの代わりに使用される`FilePut`場合は、コンパイル時にあいまいさを避けるために型`Object`など、他の型ではなく渡された`Integer`、 `Long`、`Short`などのようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1968">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="f9aad-1969">`FilePutObject` 書き込みをオブジェクトを記述する記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1969">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="f9aad-1970">記述する場合、`Variant`型、`FilePutObject`が必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1970">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="f9aad-1971">必ず使用することお勧めに迷う場合、2 番目のパラメーター オブジェクトを使用している場合、`FilePutObject`と`FileGetObject`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1971">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f9aad-1972">`FilePutObject` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1972">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-1973">`FilePutObject` を使用して書き込まれたデータは通常、`FileGetObject` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1973">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f9aad-1974">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f9aad-1975">省略した場合`RecordNumber`、 `FilePutObject` 、最後の後に次のレコードまたはバイトを書き込みます`FileGetObject`または`FilePutObject`関数 (レコードまたはバイトを指す最後または`Seek`関数)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1975">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="f9aad-1976">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f9aad-1977">`FilePutObject` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1977">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f9aad-1978">使用する場合`StringIsFixedLength`  =  `True`で`FilePutObject`と同じ操作を実行する必要がある`FileGetObject`長さが予期する文字列が初期化されていることを確認することも必要とします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1978">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f9aad-1979">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1979">Random Mode</span></span>  
 <span data-ttu-id="f9aad-1980">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f9aad-1981">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePutObject`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f9aad-1982">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f9aad-1983">埋め込みデータの量を正確に判断できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1983">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f9aad-1984">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="f9aad-1985">書き込まれている変数は、数値型を含むオブジェクト`FilePutObject`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1985">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f9aad-1986">などのオブジェクトを記述する場合を含む、整数、 `FilePutObject` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1986">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f9aad-1987">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1987">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f9aad-1988">書き込まれる変数は、文字列を含むオブジェクト`FilePutObject`2 バイトの記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1988">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f9aad-1989">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f9aad-1990">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1990">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f9aad-1991">書き込まれている変数が、配列で指定されたレコード長の場合、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1991">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f9aad-1992">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1992">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f9aad-1993">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1993">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f9aad-1994">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-1994">Binary Mode</span></span>  
 <span data-ttu-id="f9aad-1995">ファイルを開くの`Binary`モードでは、すべて、`Random`モードの規則を適用するを除く。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1995">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="f9aad-1996">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1996">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f9aad-1997">`FilePutObject` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1997">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-1998">この例では、`FilePutObject`関数に文字列をファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1998">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-1999">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-1999">Required.</span></span> <span data-ttu-id="f9aad-2000">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2000">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="f9aad-2001">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2001">Required.</span></span> <span data-ttu-id="f9aad-2002">改行される前に 1 行に表示できる文字数を表す 0 ～ 255 の範囲の数式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2002">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="f9aad-2003"><c>RecordWidth</c> が 0 の場合は、行の長さに制限がないことを示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2003">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="f9aad-2004"><c>RecordWidth</c> の既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2004">The default value for <c>RecordWidth</c> is 0.</span></span></param>
        <summary><span data-ttu-id="f9aad-2005"><see langword="FileOpen" /> 関数を使用して開いたファイルに出力行の桁数を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2005">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f9aad-2006">この例では、`FileWidth`ファイルの出力行の幅を設定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2006">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2007">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2007">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f9aad-2008"><see langword="Integer" /> 関数で使用できる次のファイル番号を表す <see langword="FileOpen" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2008">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="f9aad-2009"><see langword="Integer" /> 関数で使用できる次のファイル番号を表す <see langword="FileOpen" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2009">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2010">使用して`FreeFile`が既に使用されていないファイルの番号を指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2010">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2011">この例では、 `FreeFile` [次へ] の使用可能なファイル数を返す関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2011">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="f9aad-2012">5 つのファイルは、ループ内で出力で開かれていて、それぞれにサンプル データが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2012">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2013">使用中のファイルが 255 個を超えています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2013">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f9aad-2014">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2014">Required.</span></span> <span data-ttu-id="f9aad-2015">ファイル、ディレクトリ、またはフォルダーの名前を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2015"><see langword="String" /> expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="f9aad-2016"><c>PathName</c> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2016"><c>PathName</c> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="f9aad-2017">ファイル、ディレクトリ、またはフォルダーの属性を表す <see langword="FileAttribute" /> 型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2017">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="f9aad-2018"><see langword="My" /> 機能を使用すると、<see langword="FileAttribute" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2018">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="f9aad-2019">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2019">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="f9aad-2020"><see langword="GetAttr" /> によって返される値は、次の表に示す列挙型値の合計です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2020">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span></span>  
  
 <span data-ttu-id="f9aad-2021"><list type="table"><item><term> 値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2021"><list type="table"><item><term> Value</span></span>  
  
 <span data-ttu-id="f9aad-2022"></term><description> 定数</span><span class="sxs-lookup"><span data-stu-id="f9aad-2022"></term><description> Constant</span></span>  
  
 <span data-ttu-id="f9aad-2023"></description><description>説明</span><span class="sxs-lookup"><span data-stu-id="f9aad-2023"></description><description> Description</span></span>  
  
 <span data-ttu-id="f9aad-2024"></description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> 標準。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2024"></description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.</span></span>  
  
 <span data-ttu-id="f9aad-2025"></description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> 読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2025"></description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.</span></span>  
  
 <span data-ttu-id="f9aad-2026"></description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> 非表示。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2026"></description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.</span></span>  
  
 <span data-ttu-id="f9aad-2027"></description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> システム ファイル。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2027"></description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.</span></span>  
  
 <span data-ttu-id="f9aad-2028"></description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> ディレクトリまたはフォルダー。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2028"></description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.</span></span>  
  
 <span data-ttu-id="f9aad-2029"></description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2029"></description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.</span></span>  
  
 <span data-ttu-id="f9aad-2030"></description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2030"></description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.</span></span>  
  
 </description></item></list><block subset="none" type="note"><para>  
 <span data-ttu-id="f9aad-2031">これらの列挙体は Visual Basic 言語によって指定されています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2031">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="f9aad-2032">これらの名前は、実際の値の代わりにコード内のどの部分でも使用できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2032">The names can be used anywhere in your code in place of the actual values.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2033">どの属性が設定を確認するには`And`オペレーターによって返される値のビットごとの比較を実行する、`GetAttr`関数とする個々 のファイル属性の値。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2033">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="f9aad-2034">結果が 0 でない場合、その属性は、名前付きのファイルに設定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2034">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="f9aad-2035">次の戻り値など、`And`式が場合は 0 では、`Archive`属性が設定されていません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2035">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="f9aad-2036">場合、0 以外の値が返されます、`Archive`属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2036">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2037">この例では、`GetAttr`ファイルとディレクトリまたはフォルダーの属性を判断する関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2037">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f9aad-2038"><paramref name="Pathname" /> が無効です。またはワイルドカードを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2038"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f9aad-2039">対象のファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2039">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f9aad-2040">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2040">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2041">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2041">Required.</span></span> <span data-ttu-id="f9aad-2042">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2042">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-2043">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2043">Required.</span></span> <span data-ttu-id="f9aad-2044">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2044">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f9aad-2045">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2045">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2046">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2046">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2047">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2047">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2048">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2048">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2049">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2049">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f9aad-2050">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2050">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2051">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2051">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2052">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2052">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f9aad-2053">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2053">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f9aad-2054">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2054">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f9aad-2055">データ</span><span class="sxs-lookup"><span data-stu-id="f9aad-2055">Data</span></span>|<span data-ttu-id="f9aad-2056">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2056">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f9aad-2057">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f9aad-2057">Delimiting comma or blank line</span></span>|<span data-ttu-id="f9aad-2058">Empty</span><span class="sxs-lookup"><span data-stu-id="f9aad-2058">Empty</span></span>|  
|<span data-ttu-id="f9aad-2059">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2059">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f9aad-2060">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f9aad-2060">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f9aad-2061">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2061">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f9aad-2062">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f9aad-2062">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f9aad-2063">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2063">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f9aad-2064">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f9aad-2064">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f9aad-2065">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2065">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2066">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2066">The `Input` function is not localized.</span></span> <span data-ttu-id="f9aad-2067">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2067">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2068">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2068">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2069">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2069">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2070">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2070">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f9aad-2071">この例では、`TestFile`を使用して書き込まれたデータの一部の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2071">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2072">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2073">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2073">Required.</span></span> <span data-ttu-id="f9aad-2074">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2074">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-2075">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2075">Required.</span></span> <span data-ttu-id="f9aad-2076">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2076">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f9aad-2077">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2077">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2078">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2078">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2079">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2079">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2080">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2080">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2081">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2081">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f9aad-2082">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2082">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2083">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2083">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2084">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2084">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f9aad-2085">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2085">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f9aad-2086">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2086">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f9aad-2087">データ</span><span class="sxs-lookup"><span data-stu-id="f9aad-2087">Data</span></span>|<span data-ttu-id="f9aad-2088">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2088">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f9aad-2089">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f9aad-2089">Delimiting comma or blank line</span></span>|<span data-ttu-id="f9aad-2090">Empty</span><span class="sxs-lookup"><span data-stu-id="f9aad-2090">Empty</span></span>|  
|<span data-ttu-id="f9aad-2091">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2091">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f9aad-2092">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f9aad-2092">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f9aad-2093">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2093">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f9aad-2094">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f9aad-2094">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f9aad-2095">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2095">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f9aad-2096">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f9aad-2096">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f9aad-2097">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2097">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2098">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2098">The `Input` function is not localized.</span></span> <span data-ttu-id="f9aad-2099">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2099">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2100">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2100">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2101">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2101">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2102">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2102">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f9aad-2103">この例では、`TestFile`を使用して書き込まれたデータの一部の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2103">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2104">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2104">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2105">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2105">Required.</span></span> <span data-ttu-id="f9aad-2106">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2106">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-2107">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2107">Required.</span></span> <span data-ttu-id="f9aad-2108">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2108">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f9aad-2109">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2109">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2110">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2110">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2111">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2111">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2112">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2112">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2113">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2113">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f9aad-2114">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2114">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2115">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2115">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2116">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2116">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f9aad-2117">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2117">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f9aad-2118">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2118">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f9aad-2119">データ</span><span class="sxs-lookup"><span data-stu-id="f9aad-2119">Data</span></span>|<span data-ttu-id="f9aad-2120">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2120">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f9aad-2121">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f9aad-2121">Delimiting comma or blank line</span></span>|<span data-ttu-id="f9aad-2122">Empty</span><span class="sxs-lookup"><span data-stu-id="f9aad-2122">Empty</span></span>|  
|<span data-ttu-id="f9aad-2123">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2123">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f9aad-2124">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f9aad-2124">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f9aad-2125">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2125">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f9aad-2126">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f9aad-2126">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f9aad-2127">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2127">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f9aad-2128">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f9aad-2128">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f9aad-2129">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2129">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2130">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2130">The `Input` function is not localized.</span></span> <span data-ttu-id="f9aad-2131">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2131">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2132">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2132">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2133">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2133">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2134">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2134">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f9aad-2135">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2135">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2136">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2136">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2137">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2137">Required.</span></span> <span data-ttu-id="f9aad-2138">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2138">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-2139">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2139">Required.</span></span> <span data-ttu-id="f9aad-2140">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2140">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f9aad-2141">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2141">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2142">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2142">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2143">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2143">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2144">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2144">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2145">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2145">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f9aad-2146">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2146">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2147">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2147">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2148">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2148">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f9aad-2149">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2149">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f9aad-2150">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2150">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f9aad-2151">データ</span><span class="sxs-lookup"><span data-stu-id="f9aad-2151">Data</span></span>|<span data-ttu-id="f9aad-2152">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2152">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f9aad-2153">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f9aad-2153">Delimiting comma or blank line</span></span>|<span data-ttu-id="f9aad-2154">Empty</span><span class="sxs-lookup"><span data-stu-id="f9aad-2154">Empty</span></span>|  
|<span data-ttu-id="f9aad-2155">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2155">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f9aad-2156">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f9aad-2156">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f9aad-2157">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2157">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f9aad-2158">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f9aad-2158">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f9aad-2159">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2159">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f9aad-2160">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f9aad-2160">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f9aad-2161">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2161">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2162">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2162">The `Input` function is not localized.</span></span> <span data-ttu-id="f9aad-2163">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2163">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2164">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2164">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2165">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2165">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2166">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2166">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f9aad-2167">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2167">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2168">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2168">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2169">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2169">Required.</span></span> <span data-ttu-id="f9aad-2170">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2170">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-2171">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2171">Required.</span></span> <span data-ttu-id="f9aad-2172">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2172">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f9aad-2173">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2173">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2174">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2174">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2175">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2175">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2176">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2176">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2177">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2177">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f9aad-2178">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2178">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2179">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2179">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2180">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2180">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f9aad-2181">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2181">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f9aad-2182">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2182">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f9aad-2183">データ</span><span class="sxs-lookup"><span data-stu-id="f9aad-2183">Data</span></span>|<span data-ttu-id="f9aad-2184">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2184">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f9aad-2185">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f9aad-2185">Delimiting comma or blank line</span></span>|<span data-ttu-id="f9aad-2186">Empty</span><span class="sxs-lookup"><span data-stu-id="f9aad-2186">Empty</span></span>|  
|<span data-ttu-id="f9aad-2187">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2187">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f9aad-2188">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f9aad-2188">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f9aad-2189">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2189">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f9aad-2190">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f9aad-2190">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f9aad-2191">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2191">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f9aad-2192">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f9aad-2192">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f9aad-2193">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2193">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2194">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2194">The `Input` function is not localized.</span></span> <span data-ttu-id="f9aad-2195">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2195">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2196">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2196">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2197">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2197">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2198">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2198">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f9aad-2199">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2199">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2200">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2200">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2201">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2201">Required.</span></span> <span data-ttu-id="f9aad-2202">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2202">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-2203">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2203">Required.</span></span> <span data-ttu-id="f9aad-2204">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2204">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f9aad-2205">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2205">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2206">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2206">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2207">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2207">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2208">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2208">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2209">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2209">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f9aad-2210">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2210">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2211">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2211">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2212">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2212">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f9aad-2213">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2213">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f9aad-2214">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2214">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f9aad-2215">データ</span><span class="sxs-lookup"><span data-stu-id="f9aad-2215">Data</span></span>|<span data-ttu-id="f9aad-2216">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2216">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f9aad-2217">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f9aad-2217">Delimiting comma or blank line</span></span>|<span data-ttu-id="f9aad-2218">Empty</span><span class="sxs-lookup"><span data-stu-id="f9aad-2218">Empty</span></span>|  
|<span data-ttu-id="f9aad-2219">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2219">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f9aad-2220">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f9aad-2220">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f9aad-2221">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2221">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f9aad-2222">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f9aad-2222">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f9aad-2223">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2223">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f9aad-2224">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f9aad-2224">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f9aad-2225">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2225">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2226">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2226">The `Input` function is not localized.</span></span> <span data-ttu-id="f9aad-2227">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2227">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2228">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2228">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2229">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2229">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2230">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2230">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f9aad-2231">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2231">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2232">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2232">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2233">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2233">Required.</span></span> <span data-ttu-id="f9aad-2234">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2234">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-2235">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2235">Required.</span></span> <span data-ttu-id="f9aad-2236">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2236">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f9aad-2237">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2237">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2238">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2238">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2239">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2239">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2240">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2240">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2241">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2241">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f9aad-2242">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2242">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2243">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2243">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2244">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2244">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f9aad-2245">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2245">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f9aad-2246">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2246">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f9aad-2247">データ</span><span class="sxs-lookup"><span data-stu-id="f9aad-2247">Data</span></span>|<span data-ttu-id="f9aad-2248">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2248">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f9aad-2249">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f9aad-2249">Delimiting comma or blank line</span></span>|<span data-ttu-id="f9aad-2250">Empty</span><span class="sxs-lookup"><span data-stu-id="f9aad-2250">Empty</span></span>|  
|<span data-ttu-id="f9aad-2251">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2251">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f9aad-2252">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f9aad-2252">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f9aad-2253">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2253">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f9aad-2254">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f9aad-2254">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f9aad-2255">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2255">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f9aad-2256">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f9aad-2256">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f9aad-2257">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2257">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2258">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2258">The `Input` function is not localized.</span></span> <span data-ttu-id="f9aad-2259">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2259">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2260">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2260">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2261">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2261">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2262">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2262">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f9aad-2263">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2263">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2264">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2264">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2265">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2265">Required.</span></span> <span data-ttu-id="f9aad-2266">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2266">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-2267">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2267">Required.</span></span> <span data-ttu-id="f9aad-2268">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2268">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f9aad-2269">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2269">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2270">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2270">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2271">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2271">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2272">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2272">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2273">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2273">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f9aad-2274">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2274">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2275">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2275">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2276">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2276">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f9aad-2277">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2277">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f9aad-2278">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2278">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f9aad-2279">データ</span><span class="sxs-lookup"><span data-stu-id="f9aad-2279">Data</span></span>|<span data-ttu-id="f9aad-2280">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2280">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f9aad-2281">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f9aad-2281">Delimiting comma or blank line</span></span>|<span data-ttu-id="f9aad-2282">Empty</span><span class="sxs-lookup"><span data-stu-id="f9aad-2282">Empty</span></span>|  
|<span data-ttu-id="f9aad-2283">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2283">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f9aad-2284">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f9aad-2284">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f9aad-2285">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2285">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f9aad-2286">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f9aad-2286">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f9aad-2287">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2287">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f9aad-2288">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f9aad-2288">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f9aad-2289">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2289">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2290">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2290">The `Input` function is not localized.</span></span> <span data-ttu-id="f9aad-2291">たとえば、ドイツ語バージョンでは、3,14159、入力した場合、小数点としての代わりに変数の区切り記号としてコンマが処理されるため、3 だけを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2291">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2292">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2292">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2293">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2293">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2294">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2294">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f9aad-2295">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2295">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2296">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2296">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2297">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2297">Required.</span></span> <span data-ttu-id="f9aad-2298">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2298">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-2299">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2299">Required.</span></span> <span data-ttu-id="f9aad-2300">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2300">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f9aad-2301">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2301">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2302">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2302">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2303">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2303">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2304">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2304">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2305">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2305">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f9aad-2306">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2306">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2307">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2307">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2308">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2308">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f9aad-2309">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2309">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f9aad-2310">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2310">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f9aad-2311">データ</span><span class="sxs-lookup"><span data-stu-id="f9aad-2311">Data</span></span>|<span data-ttu-id="f9aad-2312">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2312">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f9aad-2313">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f9aad-2313">Delimiting comma or blank line</span></span>|<span data-ttu-id="f9aad-2314">Empty</span><span class="sxs-lookup"><span data-stu-id="f9aad-2314">Empty</span></span>|  
|<span data-ttu-id="f9aad-2315">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2315">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f9aad-2316">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f9aad-2316">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f9aad-2317">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2317">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f9aad-2318">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f9aad-2318">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f9aad-2319">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2319">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f9aad-2320">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f9aad-2320">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f9aad-2321">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2321">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2322">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2322">The `Input` function is not localized.</span></span> <span data-ttu-id="f9aad-2323">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2323">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2324">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2324">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2325">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2325">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2326">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2326">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f9aad-2327">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2327">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2328">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2328">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2329">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2329">Required.</span></span> <span data-ttu-id="f9aad-2330">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2330">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-2331">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2331">Required.</span></span> <span data-ttu-id="f9aad-2332">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2332">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f9aad-2333">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2333">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2334">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2334">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2335">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2335">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2336">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2336">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2337">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2337">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f9aad-2338">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2338">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2339">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2339">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2340">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2340">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f9aad-2341">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2341">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f9aad-2342">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2342">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f9aad-2343">データ</span><span class="sxs-lookup"><span data-stu-id="f9aad-2343">Data</span></span>|<span data-ttu-id="f9aad-2344">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2344">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f9aad-2345">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f9aad-2345">Delimiting comma or blank line</span></span>|<span data-ttu-id="f9aad-2346">Empty</span><span class="sxs-lookup"><span data-stu-id="f9aad-2346">Empty</span></span>|  
|<span data-ttu-id="f9aad-2347">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2347">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f9aad-2348">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f9aad-2348">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f9aad-2349">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2349">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f9aad-2350">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f9aad-2350">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f9aad-2351">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2351">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f9aad-2352">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f9aad-2352">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f9aad-2353">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2353">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2354">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2354">The `Input` function is not localized.</span></span> <span data-ttu-id="f9aad-2355">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2355">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2356">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2356">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2357">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2357">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2358">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2358">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f9aad-2359">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2359">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2360">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2360">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2361">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2361">Required.</span></span> <span data-ttu-id="f9aad-2362">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2362">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-2363">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2363">Required.</span></span> <span data-ttu-id="f9aad-2364">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2364">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f9aad-2365">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2365">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2366">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2366">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2367">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2367">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2368">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2368">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2369">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2369">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f9aad-2370">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2370">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2371">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2371">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2372">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2372">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f9aad-2373">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2373">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f9aad-2374">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2374">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f9aad-2375">データ</span><span class="sxs-lookup"><span data-stu-id="f9aad-2375">Data</span></span>|<span data-ttu-id="f9aad-2376">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2376">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f9aad-2377">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f9aad-2377">Delimiting comma or blank line</span></span>|<span data-ttu-id="f9aad-2378">Empty</span><span class="sxs-lookup"><span data-stu-id="f9aad-2378">Empty</span></span>|  
|<span data-ttu-id="f9aad-2379">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2379">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f9aad-2380">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f9aad-2380">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f9aad-2381">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2381">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f9aad-2382">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f9aad-2382">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f9aad-2383">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2383">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f9aad-2384">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f9aad-2384">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f9aad-2385">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2385">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2386">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2386">The `Input` function is not localized.</span></span> <span data-ttu-id="f9aad-2387">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2387">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2388">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2388">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2389">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2389">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2390">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2390">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f9aad-2391">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2391">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2392">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2392">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2393">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2393">Required.</span></span> <span data-ttu-id="f9aad-2394">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2394">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f9aad-2395">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2395">Required.</span></span> <span data-ttu-id="f9aad-2396">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2396">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f9aad-2397">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2397">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2398">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2398">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2399">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2399">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2400">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2400">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2401">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2401">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f9aad-2402">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2402">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2403">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2403">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2404">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2404">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f9aad-2405">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2405">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f9aad-2406">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2406">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f9aad-2407">データ</span><span class="sxs-lookup"><span data-stu-id="f9aad-2407">Data</span></span>|<span data-ttu-id="f9aad-2408">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2408">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f9aad-2409">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f9aad-2409">Delimiting comma or blank line</span></span>|<span data-ttu-id="f9aad-2410">Empty</span><span class="sxs-lookup"><span data-stu-id="f9aad-2410">Empty</span></span>|  
|<span data-ttu-id="f9aad-2411">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2411">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f9aad-2412">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f9aad-2412">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f9aad-2413">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2413">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f9aad-2414">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f9aad-2414">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f9aad-2415">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f9aad-2415">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f9aad-2416">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f9aad-2416">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f9aad-2417">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2417">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2418">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2418">The `Input` function is not localized.</span></span> <span data-ttu-id="f9aad-2419">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2419">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2420">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2420">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2421">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2421">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2422">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2422">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f9aad-2423">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2423">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2424">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2424">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2425">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2425">Required.</span></span> <span data-ttu-id="f9aad-2426">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2426">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="f9aad-2427">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2427">Required.</span></span> <span data-ttu-id="f9aad-2428">読み込む文字数を指定する有効な任意の数式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2428">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="f9aad-2429"><see langword="String" /> モードまたは <see langword="Input" /> モードで開いたファイルから読み取る文字を表す文字列型 (<see langword="Binary" />) の値を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2429">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="f9aad-2430"><see langword="My" /> 機能を使用すると、<see langword="InputString" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2430">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="f9aad-2431">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2431">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="f9aad-2432"><see langword="String" /> モードまたは <see langword="Input" /> モードで開いたファイルから読み取る文字を表す文字列型 (<see langword="Binary" />) の値を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2432">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="f9aad-2433"><see langword="My" /> 機能を使用すると、<see langword="InputString" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2433">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2434">`InputString`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2434">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2435">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2435">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2436">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2436">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2437">データを読み取り、`InputString`関数が通常に書き込まれ、ファイルを使用して`Print`または`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2437">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="f9aad-2438">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2438">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="f9aad-2439">異なり、 `Input` 、関数、`InputString`関数がそこにすべての文字を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2439">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="f9aad-2440">これには、コンマ、キャリッジ リターン、ライン フィード、引用符、および先頭のスペースが含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2440">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="f9aad-2441">開いたファイル`Binary`にアクセスするを使用して、ファイルを読み取ろうとして、`InputString`まで関数`EOF`を返します`True`でエラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2441">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="f9aad-2442">使用して、`LOF`と`Loc`関数の代わりに`EOF`を使用してバイナリ ファイルを読み取るときに`InputString`、使用または`FileGet`を使用する場合、`EOF`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2442">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2443">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容に関するセキュリティ上の決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2443">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2444">たとえば、Form1.vb という名前のファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2444">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2445">この例では、`InputString`ファイルから一度に 1 つの文字を読み取るし、印刷する関数、`Output`ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2445">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="f9aad-2446">この例では、`MyFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2446">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f9aad-2447"><paramref name="FileNumber" /> は存在しません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2447"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-2448"><paramref name="CharCount" /> は &lt; 0 または &gt; 214 です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2448"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f9aad-2449">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2449">Required.</span></span> <span data-ttu-id="f9aad-2450">削除する 1 つ以上のファイル名を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2450"><see langword="String" /> expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="f9aad-2451"><c>PathName</c> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2451"><c>PathName</c> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="f9aad-2452">ファイルをディスクから削除します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2452">Deletes files from a disk.</span></span> <span data-ttu-id="f9aad-2453"><see langword="My" /> 機能を使用すると、<see langword="Kill" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2453">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="f9aad-2454">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2454">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2455">`Kill` 複数の文字の使用をサポートしています (`*`) と単一の文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2455">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f9aad-2456">**セキュリティに関する注意**を実行するために、`Kill`関数に必要な`Read`と`PathDiscovery`のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2456">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f9aad-2457">詳細については、次を参照してください<xref:System.Security.SecurityException>[コード アクセス許可。](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="f9aad-2457">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2458">この例では、`Kill`ディスクからファイルを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2458">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2459">対象のファイルが開かれています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2459">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f9aad-2460">対象のファイルが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2460">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f9aad-2461">アクセス許可は拒否されました。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2461">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2462">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2462">Required.</span></span> <span data-ttu-id="f9aad-2463">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2463">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="f9aad-2464">開かれたシーケンシャル ファイルから 1 行を読み込み、<see langword="String" /> 変数に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2464">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="f9aad-2465">開かれたシーケンシャル ファイルから 1 行を読み込み、<see langword="String" /> 変数に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2465">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2466">`LineInput`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2466">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2467">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2467">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2468">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2468">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2469">データを使用して読み取る`LineInput`が通常に書き込まれ、ファイルを使用して`Print`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2469">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2470">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2470">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f9aad-2471">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2471">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="f9aad-2472">`LineInput`関数ファイルの 1 文字からが一度に読み取ってキャリッジ リターンを検出するまで (`Chr(13)`) またはキャリッジ リターン/ライン フィード (`Chr(13) + Chr(10)`) シーケンス。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2472">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="f9aad-2473">キャリッジ リターン/ライン フィードのシーケンスは、文字の文字列に追加の代わりにスキップされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2473">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2474">使用してファイルから読み取る、`LineInput`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2474">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2475">この例では、`LineInput`シーケンシャル ファイルから行を読み取るし、変数に代入する関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2475">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="f9aad-2476">この例では、`TestFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2476">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="f9aad-2477">ファイルの終端に達しました。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2477">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f9aad-2478"><paramref name="FileNumber" /> は存在しません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2478"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2479">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2479">Required.</span></span> <span data-ttu-id="f9aad-2480">有効な任意の <see langword="Integer" /> 型のファイル番号。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2480">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="f9aad-2481">開かれたファイル内の現在の読み込みと書き込みの位置を指定する <see langword="Long" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2481">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="f9aad-2482">開かれたファイル内の現在の読み込みと書き込みの位置を指定する <see langword="Long" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2482">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2483">`Loc`関数は 0 から始まる以外の場合は、ファイルの最初のバイトの取得に使用すると、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2483">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="f9aad-2484">`Loc`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2484">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2485">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2485">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2486">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2486">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2487">各ファイル アクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2487">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="f9aad-2488">モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-2488">Mode</span></span>|<span data-ttu-id="f9aad-2489">戻り値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2489">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f9aad-2490">読み取りまたはファイルに書き込まれた最後のレコードの数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2490">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="f9aad-2491">128 で割った値、ファイル内の現在のバイト位置。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2491">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="f9aad-2492">ただしから返される情報`Loc`のシーケンシャル ファイルが使用されるも必要です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2492">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="f9aad-2493">最後のバイトの読み取りや書き込みの位置。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2493">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2494">この例では、`Loc`関数を開いているファイル内の現在の読み取り/書き込み位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2494">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="f9aad-2495">この例では、`MyFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2495">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2496">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2496">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f9aad-2497"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2497">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f9aad-2498"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2498">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f9aad-2499">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2499">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2500">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2500">Required.</span></span> <span data-ttu-id="f9aad-2501">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2501">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="f9aad-2502"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2502">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f9aad-2503"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2503">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f9aad-2504">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2504">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2505">`Lock`と`Unlock`関数が使用される環境でいくつかのプロセスが、同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2505">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f9aad-2506">`Lock` および`Unlock`関数は、常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2506">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f9aad-2507">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2507">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f9aad-2508">場合`Record`、または`FromRecord`と`ToRecord`が指定されていないロックのなりますファイル全体です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2508">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f9aad-2509">場合`Record`だけが指定されている 1 つのレコードがロック/ロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2509">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f9aad-2510">連続の入力または出力のファイルを開いていた場合`Lock`と`Unlock`によって指定される範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2510">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2511">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2511">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f9aad-2512">この例では、`People.txt`構造体のレコードを含むファイルは、`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2512">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2513">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2513">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2514">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2514">Required.</span></span> <span data-ttu-id="f9aad-2515">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2515">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="f9aad-2516">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2516">Optional.</span></span> <span data-ttu-id="f9aad-2517">ロックまたはアンロックされる唯一のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2517">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="f9aad-2518"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2518">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f9aad-2519"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2519">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f9aad-2520">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2520">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2521">`Lock`と`Unlock`関数が使用される環境でいくつかのプロセスが、同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2521">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f9aad-2522">`Lock` および`Unlock`関数は、常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2522">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f9aad-2523">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2523">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f9aad-2524">場合`Record`、または`FromRecord`と`ToRecord`が指定されていないロックのなりますファイル全体です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2524">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f9aad-2525">場合`Record`だけが指定されている 1 つのレコードがロック/ロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2525">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f9aad-2526">連続の入力または出力のファイルを開いていた場合`Lock`と`Unlock`によって指定される範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2526">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2527">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2527">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f9aad-2528">この例では、`People.txt`構造体のレコードを含むファイルは、`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2528">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2529">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2529">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2530">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2530">Required.</span></span> <span data-ttu-id="f9aad-2531">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2531">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="f9aad-2532">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2532">Optional.</span></span> <span data-ttu-id="f9aad-2533">ロックまたはアンロックされる最初のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2533">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="f9aad-2534">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2534">Optional.</span></span> <span data-ttu-id="f9aad-2535">ロックまたはアンロックされる最後のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2535">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="f9aad-2536"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2536">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f9aad-2537"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2537">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f9aad-2538">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2538">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2539">`Lock`と`Unlock`関数が使用される環境でいくつかのプロセスが、同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2539">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f9aad-2540">`Lock` および`Unlock`関数は、常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2540">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f9aad-2541">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2541">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f9aad-2542">場合`Record`、または`FromRecord`と`ToRecord`が指定されていないロックのなりますファイル全体です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2542">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f9aad-2543">場合`Record`だけが指定されている 1 つのレコードがロック/ロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2543">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f9aad-2544">連続の入力または出力のファイルを開いていた場合`Lock`と`Unlock`によって指定される範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2544">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2545">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2545">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f9aad-2546">この例では、`People.txt`構造体のレコードを含むファイルは、`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2546">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2547">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2547">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2548">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2548">Required.</span></span> <span data-ttu-id="f9aad-2549">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2549">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="f9aad-2550"><see langword="Long" /> 関数を使用して開かれたファイルのサイズをバイト単位で表す <see langword="FileOpen" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2550">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f9aad-2551"><see langword="My" /> 機能を使用すると、<see langword="LOF" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2551">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="f9aad-2552">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2552">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="f9aad-2553"><see langword="Long" /> 関数を使用して開かれたファイルのサイズをバイト単位で表す <see langword="FileOpen" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2553">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f9aad-2554"><see langword="My" /> 機能を使用すると、<see langword="LOF" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2554">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2555">使用して、`FileLen`開かれていないファイルの長さを取得します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2555">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2556">この例では、`LOF`開いているファイルのサイズを判断する関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2556">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="f9aad-2557">この例では、`TestFile`サンプル データを含むテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2557">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2558">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2558">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="f9aad-2559">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2559">Required.</span></span> <span data-ttu-id="f9aad-2560">作成されるディレクトリを識別する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2560"><see langword="String" /> expression that identifies the directory to be created.</span></span> <span data-ttu-id="f9aad-2561"><c>Path</c> にはドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2561">The <c>Path</c> may include the drive.</span></span> <span data-ttu-id="f9aad-2562">ドライブを指定しない場合、<see langword="MkDir" /> は現在のドライブに新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2562">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="f9aad-2563">新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2563">Creates a new directory.</span></span> <span data-ttu-id="f9aad-2564"><see langword="My" /> 機能を使用すると、<see langword="MkDir" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2564">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="f9aad-2565">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2565">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2566">この関数は、新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2566">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2567">この例では、`MkDir`ディレクトリを作成する関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2567">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="f9aad-2568">ドライブが指定されていない場合は、現在のドライブに新しいディレクトリが作成されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2568">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-2569"><paramref name="Path" /> が指定されていません。または空です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2569"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f9aad-2570">アクセス許可は拒否されました。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2570">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2571">ディレクトリが既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2571">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2572">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2572">Required.</span></span> <span data-ttu-id="f9aad-2573">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2573">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="f9aad-2574">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2574">Optional.</span></span> <span data-ttu-id="f9aad-2575">ファイルへ書き込む 0 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2575">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
 <span data-ttu-id="f9aad-2576"><c>Output</c> 引数の設定は以下のとおりです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2576">The <c>Output</c> argument settings are:</span></span>  
  
 <span data-ttu-id="f9aad-2577"><see langword="T:System.IO.IOException" />: ファイル モードが有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2577"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="f9aad-2578"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2578"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span></span></param>
        <summary><span data-ttu-id="f9aad-2579">表示形式データをシーケンシャル ファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2579">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2580">`Print`と`PrintLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2580">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2581">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2581">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2582">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2582">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2583">`Print` 行の最後に、改行は含まれませんただし、`PrintLine`ライン フィードが含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2583">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="f9aad-2584">書き込まれたデータ`Print`を使用して、ファイルから読み取った通常`LineInput`または`Input`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2584">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="f9aad-2585">省略した場合`Output`の`PrintLine`、; のファイルに空白行が出力`Print`出力は、何も行われません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2585">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="f9aad-2586">タブ境界がミキシング コンマ上、コンマで区切られた複数の式に配置され、`TAB`一貫性のない結果が生じる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2586">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="f9aad-2587">`Boolean`データか、`True`または`False`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2587">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="f9aad-2588">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2588">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="f9aad-2589">日付データは、システムによって認識される標準の短い日付形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2589">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="f9aad-2590">日付または時刻部分のいずれかがないか 0 の場合は、提供された部分のみがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2590">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="f9aad-2591">場合、ファイルに書き込まれますが何も`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2591">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f9aad-2592">ただし場合、`Output`リスト データは`DBNull`、`Null`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2592">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="f9aad-2593">`Error`として表示されるデータ、出力`Error errorcode`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2593">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="f9aad-2594">`Error`キーワードが、ロケールに関係なく、変換されません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2594">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="f9aad-2595">使用して、ファイルに書き込まれたすべてのデータ`Print`が国際的に対応しています。 つまり、データ形式が正しく、適切な小数点区切り文字を使用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2595">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="f9aad-2596">ユーザーが複数のロケールで使用するデータを出力したい場合`Write`使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2596">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="f9aad-2597">使用してファイルへの書き込み、`Print`または`PrintLine`関数が必要です`Write`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2597">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2598">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2598">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2599">この例では、`Print`と`PrintLine`関数にデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2599">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2600">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2600">Required.</span></span> <span data-ttu-id="f9aad-2601">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2601">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="f9aad-2602">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2602">Optional.</span></span> <span data-ttu-id="f9aad-2603">ファイルへ書き込む 0 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2603">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
 <span data-ttu-id="f9aad-2604"><c>Output</c> 引数の設定は以下のとおりです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2604">The <c>Output</c> argument settings are:</span></span>  
  
 <span data-ttu-id="f9aad-2605"><see langword="T:System.IO.IOException" />: ファイル モードが有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2605"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="f9aad-2606"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2606"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span></span></param>
        <summary><span data-ttu-id="f9aad-2607">表示形式データをシーケンシャル ファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2607">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2608">`Print`と`PrintLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2608">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2609">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2609">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2610">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2610">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2611">`Print` 行の最後に、改行は含まれませんただし、`PrintLine`ライン フィードが含まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2611">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="f9aad-2612">書き込まれたデータ`Print`を使用して、ファイルから読み取った通常`LineInput`または`Input`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2612">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="f9aad-2613">省略した場合`Output`の`PrintLine`、; のファイルに空白行が出力`Print`出力は、何も行われません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2613">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="f9aad-2614">タブ境界がミキシング コンマ上、コンマで区切られた複数の式に配置され、`TAB`一貫性のない結果が生じる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2614">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="f9aad-2615">`Boolean`データか、`True`または`False`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2615">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="f9aad-2616">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2616">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="f9aad-2617">日付データは、システムによって認識される標準の短い日付形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2617">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="f9aad-2618">日付または時刻部分のいずれかがないか 0 の場合は、提供された部分のみがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2618">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="f9aad-2619">場合、ファイルに書き込まれますが何も`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2619">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f9aad-2620">ただし場合、`Output`リスト データは`DBNull`、`Null`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2620">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="f9aad-2621">`Error`として表示されるデータ、出力`Error errorcode`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2621">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="f9aad-2622">`Error`キーワードが、ロケールに関係なく、変換されません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2622">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="f9aad-2623">使用して、ファイルに書き込まれたすべてのデータ`Print`が国際的に対応しています。 つまり、データ形式が正しく、適切な小数点区切り文字を使用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2623">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="f9aad-2624">ユーザーが複数のロケールで使用するデータを出力したい場合`Write`使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2624">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="f9aad-2625">使用してファイルへの書き込み、`Print`または`PrintLine`関数が必要です`Write`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2625">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2626">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2626">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2627">この例では、`Print`と`PrintLine`関数にデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2627">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="f9aad-2628">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2628">Required.</span></span> <span data-ttu-id="f9aad-2629">既存のファイルの名前と場所を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2629"><see langword="String" /> expression that specifies the existing file name and location.</span></span> <span data-ttu-id="f9aad-2630"><c>OldPath</c> には、ファイルのディレクトリおよびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2630"><c>OldPath</c> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="f9aad-2631">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2631">Required.</span></span> <span data-ttu-id="f9aad-2632">新しいファイルの名前と場所を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2632"><see langword="String" /> expression that specifies the new file name and location.</span></span> <span data-ttu-id="f9aad-2633"><c>NewPath</c> には、出力先のディレクトリおよびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2633"><c>NewPath</c> may include directory and drive of the destination location.</span></span> <span data-ttu-id="f9aad-2634"><c>NewPath</c> には、既に存在しているファイル名は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2634">The file name specified by <c>NewPath</c> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="f9aad-2635">ディスク ファイルまたはディレクトリの名前を変更します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2635">Renames a disk file or directory.</span></span> <span data-ttu-id="f9aad-2636"><see langword="My" /> 機能を使用すると、<see langword="Rename" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2636">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="f9aad-2637">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2637">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2638">`Rename`関数は、ファイルの名前を変更し、必要がある場合は、別のディレクトリに移動します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2638">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="f9aad-2639">`Rename`関数は、ドライブ間でファイルを移動できます。 ただし、既存のディレクトリの名前を変更ことできますのみと両方`NewPath`と`OldPath`同じドライブ上にあります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2639">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="f9aad-2640">`Rename` 新しいファイルまたはディレクトリを作成できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2640">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="f9aad-2641">使用して、`Rename`開かれたファイルで関数がエラーを生成します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2641">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="f9aad-2642">名前を変更する前に、開いているファイルを閉じる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2642">You must close an open file before renaming it.</span></span> <span data-ttu-id="f9aad-2643">`Rename` 引数には、複数の文字 (\*) と単一文字 (?) のワイルドカードを含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2643">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f9aad-2644">使用する場合`Rename`保護されていない場所からファイルを保護された場所にコピーするファイルは制限の少ない権限を保持します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2644">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="f9aad-2645">セキュリティ リスクの可能性を大きくしないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2645">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2646">この例では、`Rename`ファイルの名前を変更する関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2646">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="f9aad-2647">この例では、既に指定されているディレクトリが存在すると仮定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2647">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f9aad-2648">パスが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2648">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f9aad-2649"><paramref name="OldPath" /> ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2649"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2650">異なるデバイスには名前を変更できません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2650">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f9aad-2651"><see langword="FileOpen" /> 関数を使用して開いたすべてのディスク ファイルを閉じます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2651">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f9aad-2652"><see langword="My" /> 機能を使用すると、<see langword="Reset" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2652">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="f9aad-2653">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2653">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2654">`Reset`関数によって開かれたすべてのアクティブなファイルを閉じ、`FileOpen`関数し、同じ機能を持つ`FileClose()`パラメーターを使用せずします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2654">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2655">この例では、`Reset`を開いているすべてのファイルを閉じ、すべてのファイル バッファーの内容をディスクに書き込む関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2655">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="f9aad-2656">使用に注意してください、`Object`変数`FileNumber`文字列と数の両方として。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2656">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="f9aad-2657">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2657">Required.</span></span> <span data-ttu-id="f9aad-2658">削除するディレクトリまたはフォルダーを識別する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2658"><see langword="String" /> expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="f9aad-2659"><c>Path</c> にはドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2659"><c>Path</c> can include the drive.</span></span> <span data-ttu-id="f9aad-2660">ドライブを指定しない場合、<see langword="RmDir" /> は現在のドライブのディレクトリを削除します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2660">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="f9aad-2661">既存のディレクトリを削除します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2661">Removes an existing directory.</span></span> <span data-ttu-id="f9aad-2662"><see langword="My" /> 機能を使用すると、<see langword="RmDir" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2662">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="f9aad-2663">詳細については、「<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2663">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2664">使用しようとする場合、エラーが発生した`RmDir`ファイルを格納するディレクトリにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2664">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="f9aad-2665">使用して、`Kill`ディレクトリを削除しようとする前に、すべてのファイルを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2665">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2666">この例では、`RmDir`関数を既存のディレクトリを削除します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2666">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-2667"><paramref name="Path" /> が指定されていません。または空です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2667"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2668">対象のディレクトリにファイルが存在しています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2668">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f9aad-2669">ディレクトリが存在していません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2669">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f9aad-2670"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2670">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f9aad-2671"><see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2671">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="f9aad-2672">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2672">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2673">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2673">Required.</span></span> <span data-ttu-id="f9aad-2674">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2674">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="f9aad-2675"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2675">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f9aad-2676"><see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="f9aad-2677">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="f9aad-2678"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2678">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2679">`Seek` 1 ~ 2,147, 483,647 の範囲値を返します (= 2 ^31-1)、包括的です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2679">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="f9aad-2680">各ファイル アクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2680">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="f9aad-2681">モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-2681">Mode</span></span>|<span data-ttu-id="f9aad-2682">戻り値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2682">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f9aad-2683">次のレコードの読み取りや書き込みの数</span><span class="sxs-lookup"><span data-stu-id="f9aad-2683">Number of the next record read or written</span></span>|  
|<span data-ttu-id="f9aad-2684">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2684">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="f9aad-2685">次の操作が発生するバイト位置。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2685">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="f9aad-2686">ファイルの最初のバイト位置は 1、2 番目のバイトの位置 2 というようになります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2686">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2687">この例では、`Seek`関数を現在の位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2687">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="f9aad-2688">この例では`TestFile`構造体のレコードを含むファイルは、`Record`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2688">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="f9aad-2689">ファイルを開くの`Random`モード、`Seek`次のレコードの数を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2689">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="f9aad-2690">以外のモードで開かれたファイルの`Random`モード、`Seek`次のバイト位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2690">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f9aad-2691">想定`TestFile`数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2691">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="f9aad-2692">この例では、`Seek`関数またはファイルに書き込みの [次へ] の読み取り位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2692">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="f9aad-2693">以外のモードで開かれたファイルの`Random`モード、`Seek`次のバイト位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2693">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f9aad-2694">想定`TestFile`数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2694">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2695">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2695">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2696">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2696">Required.</span></span> <span data-ttu-id="f9aad-2697">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2697">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="f9aad-2698">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2698">Required.</span></span> <span data-ttu-id="f9aad-2699">次の読み書き操作が発生する場所を示す 1 ～ 2,147,483,647 の範囲の数値。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2699">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="f9aad-2700"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2700">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f9aad-2701"><see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2701">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="f9aad-2702">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2702">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2703">`Seek` 1 ~ 2,147, 483,647 の範囲値を返します (= 2 ^31-1)、包括的です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2703">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="f9aad-2704">各ファイル アクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2704">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="f9aad-2705">モード</span><span class="sxs-lookup"><span data-stu-id="f9aad-2705">Mode</span></span>|<span data-ttu-id="f9aad-2706">戻り値</span><span class="sxs-lookup"><span data-stu-id="f9aad-2706">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f9aad-2707">次のレコードの読み取りや書き込みの数</span><span class="sxs-lookup"><span data-stu-id="f9aad-2707">Number of the next record read or written</span></span>|  
|<span data-ttu-id="f9aad-2708">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="f9aad-2708">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="f9aad-2709">次の操作が発生するバイト位置。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2709">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="f9aad-2710">ファイルの最初のバイト位置は 1、2 番目のバイトの位置 2 というようになります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2710">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2711">この例では、`Seek`関数を現在の位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2711">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="f9aad-2712">この例では`TestFile`構造体のレコードを含むファイルは、`Record`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2712">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="f9aad-2713">ファイルを開くの`Random`モード、`Seek`次のレコードの数を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2713">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="f9aad-2714">以外のモードで開かれたファイルの`Random`モード、`Seek`次のバイト位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2714">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f9aad-2715">想定`TestFile`数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2715">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="f9aad-2716">この例では、`Seek`関数またはファイルに書き込みの [次へ] の読み取り位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2716">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="f9aad-2717">以外のモードで開かれたファイルの`Random`モード、`Seek`次のバイト位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2717">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f9aad-2718">想定`TestFile`数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2718">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2719">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2719">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f9aad-2720">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2720">Required.</span></span> <span data-ttu-id="f9aad-2721">ファイル名を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2721"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="f9aad-2722"><c>PathName</c> にはディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2722"><c>PathName</c> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="f9aad-2723">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2723">Required.</span></span> <span data-ttu-id="f9aad-2724">定数式または数式の合計がファイル属性を指定する場合の定数式または数式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2724">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="f9aad-2725">ファイルの属性情報を設定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2725">Sets attribute information for a file.</span></span> <span data-ttu-id="f9aad-2726"><see langword="My" /> 機能を使用すると、<see langword="SetAttr" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2726">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="f9aad-2727">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2727">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2728">開いているファイルの属性を設定しようとすると、実行時エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2728">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="f9aad-2729">`Attributes`引数列挙の値が次のようには。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2729">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f9aad-2730">[値]</span><span class="sxs-lookup"><span data-stu-id="f9aad-2730">Value</span></span>|<span data-ttu-id="f9aad-2731">定数</span><span class="sxs-lookup"><span data-stu-id="f9aad-2731">Constant</span></span>|<span data-ttu-id="f9aad-2732">説明</span><span class="sxs-lookup"><span data-stu-id="f9aad-2732">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="f9aad-2733">標準 (既定)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2733">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f9aad-2734">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2734">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f9aad-2735">非表示。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2735">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f9aad-2736">システム ファイル。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2736">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f9aad-2737">ボリューム ラベル</span><span class="sxs-lookup"><span data-stu-id="f9aad-2737">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f9aad-2738">ディレクトリまたはフォルダー。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2738">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f9aad-2739">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2739">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f9aad-2740">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2740">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2741">これらの列挙体は Visual Basic 言語によって指定されています。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2741">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="f9aad-2742">名前は、実際の値ではなく、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2742">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2743">この例では、`SetAttr`ファイルの属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2743">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9aad-2744"><paramref name="Attribute" /> の型が無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2744"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="f9aad-2745">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2745">Required.</span></span> <span data-ttu-id="f9aad-2746">リストの次の式を表示または出力する前に挿入する空白の数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2746">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="f9aad-2747"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2747">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="f9aad-2748"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2748">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2749">場合`Count`が出力線の幅を次の出力位置にすぐに次の空白の数よりも少ない。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2749">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="f9aad-2750">場合`Count`出力線の幅より大きい`SPC`式を使用して次の出力の位置が計算されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2750">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f9aad-2751">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="f9aad-2751">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="f9aad-2752">たとえば、現在の印刷位置が 24 の場合は、出力行の幅は 80、しを指定する`SPC(90)`34 (現在の印刷位置 + 90/80 の残りの部分) の位置に、次の出力が開始されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2752">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="f9aad-2753">現在の出力の位置と出力の線の幅の違いがある場合より小さい`Count`(または`Count` `Mod` *幅*) では、`SPC`関数は、次の行の先頭にはスキップし、スペースと等しいが生成されます`Count`– (*幅*–*桁数*)。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2753">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2754">ワイド文字では、十分な表の列があることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2754">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2755">この例では、`SPC`関数ファイルと出力の位置を**出力**ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2755">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f9aad-2756"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2756">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f9aad-2757"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2757">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="f9aad-2758"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2758">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2759">現在の行の現在の印刷位置がよりも大きいかどうか`Column`、`TAB`では、列の値に等しいへスキップ`Column`次の出力行にします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2759">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="f9aad-2760">場合`Column`が 1 より小さい`TAB`印刷位置を 1 列目に移動します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2760">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="f9aad-2761">場合`Column`出力線の幅よりも大きい`TAB`式を使用して次の印刷位置を計算します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2761">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f9aad-2762">Mod の列の幅</span><span class="sxs-lookup"><span data-stu-id="f9aad-2762">Column Mod width</span></span>  
  
 <span data-ttu-id="f9aad-2763">たとえば場合、*幅*80 は、指定した`TAB(90)`10 (90/80 の残りの部分) 列に、次の出力が開始されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2763">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="f9aad-2764">場合`Column`現在印刷位置、計算の印刷位置にある次の行に印刷を開始よりも小さいです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2764">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="f9aad-2765">計算された印刷位置が現在の印刷位置よりも大きい場合は、計算された印刷を開始は、同じ行に位置を印刷します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2765">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="f9aad-2766">出力行の左端の位置を印刷は常に 1 です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2766">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="f9aad-2767">使用する場合、`Print`または`PrintLine`ファイルに出力する関数を使用して設定できる出力ファイルの現在の幅は、右端の印刷位置は、`FileWidth`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2767">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="f9aad-2768">`TAB`関数はでも使用できます、`WriteLine`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2768">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="f9aad-2769">使用することはできません<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>または<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2769">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2770">ワイド文字の十分な表の列があることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2770">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2771">この例では、`TAB`関数ファイルと出力の位置を**出力**ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2771">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="f9aad-2772">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2772">Optional.</span></span> <span data-ttu-id="f9aad-2773">リスト内の次の式を表示または出力する前に移動する先の列番号。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2773">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="f9aad-2774">省略した場合、<see langword="TAB" /> は挿入位置を次の印字領域の最初に移動します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2774">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="f9aad-2775"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2775">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="f9aad-2776"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2776">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2777">現在の行の現在の印刷位置がより大きいかどうか`Column`、`TAB`では、列の値に等しいへスキップ`Column`次の出力行にします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2777">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="f9aad-2778">場合`Column`が 1 より小さい`TAB`印刷位置を 1 列目に移動します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2778">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="f9aad-2779">場合`Column`出力線の幅より大きい`TAB`式を使用して次の出力の位置が計算されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2779">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f9aad-2780">Mod の列の幅</span><span class="sxs-lookup"><span data-stu-id="f9aad-2780">Column Mod width</span></span>  
  
 <span data-ttu-id="f9aad-2781">たとえば場合、*幅*80 は、指定した`TAB(90)`10 (90/80 の残りの部分) 列に、次の出力が開始されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2781">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="f9aad-2782">場合`Column`現在印刷位置、計算の印刷位置にある次の行に印刷を開始よりも小さいです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2782">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="f9aad-2783">計算された印刷位置が現在の印刷位置よりも大きい場合は、計算された印刷を開始は、同じ行に位置を印刷します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2783">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="f9aad-2784">出力行の左端の位置を印刷は常に 1 です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2784">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="f9aad-2785">使用する場合、`Print`または`PrintLine`ファイルに出力する関数を使用して設定できる出力ファイルの現在の幅は、右端の印刷位置は、`FileWidth`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2785">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="f9aad-2786">`TAB`関数はでも使用できます、`WriteLine`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2786">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="f9aad-2787">使用することはできません<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>または<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2787">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f9aad-2788">ワイド文字の十分な表の列があることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2788">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2789">この例では、`TAB`関数ファイルと出力の位置を**出力**ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2789">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f9aad-2790"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f9aad-2791"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f9aad-2792">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2793">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2793">Required.</span></span> <span data-ttu-id="f9aad-2794">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2794">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="f9aad-2795"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2795">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f9aad-2796"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2796">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f9aad-2797">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2797">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2798">`Lock`と`Unlock`関数が使用される環境でいくつかのプロセスが、同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2798">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f9aad-2799">`Lock` および`Unlock`関数は、常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2799">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f9aad-2800">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2800">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f9aad-2801">場合`Record`、または`FromRecord`と`ToRecord`が指定されていないロックのなりますファイル全体です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2801">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f9aad-2802">場合`Record`だけが指定されている 1 つのレコードがロック/ロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2802">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f9aad-2803">連続の入力または出力のファイルを開いていた場合`Lock`と`Unlock`によって指定される範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2803">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2804">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2804">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f9aad-2805">この例では、`People.txt`構造体のレコードを含むファイルは、`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2805">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2806">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2806">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2807">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2807">Required.</span></span> <span data-ttu-id="f9aad-2808">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2808">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="f9aad-2809">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2809">Optional.</span></span> <span data-ttu-id="f9aad-2810">ロックまたはアンロックされる唯一のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2810">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="f9aad-2811"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2811">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f9aad-2812"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2812">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f9aad-2813">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2813">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2814">`Lock`と`Unlock`関数が使用される環境でいくつかのプロセスが、同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2814">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f9aad-2815">`Lock` および`Unlock`関数は、常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2815">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f9aad-2816">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2816">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f9aad-2817">場合`Record`、または`FromRecord`と`ToRecord`が指定されていないロックのなりますファイル全体です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2817">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f9aad-2818">場合`Record`だけが指定されている 1 つのレコードがロック/ロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2818">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f9aad-2819">連続の入力または出力のファイルを開いていた場合`Lock`と`Unlock`によって指定される範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2819">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2820">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2820">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f9aad-2821">この例では、`People.txt`構造体のレコードを含むファイルは、`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2821">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2822">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2822">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2823">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2823">Required.</span></span> <span data-ttu-id="f9aad-2824">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2824">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="f9aad-2825">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2825">Optional.</span></span> <span data-ttu-id="f9aad-2826">ロックまたはアンロックされる最初のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2826">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="f9aad-2827">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2827">Optional.</span></span> <span data-ttu-id="f9aad-2828">ロックまたはアンロックされる最後のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2828">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="f9aad-2829"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2829">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f9aad-2830"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f9aad-2831">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2832">`Lock`と`Unlock`関数が使用される環境でいくつかのプロセスが、同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2832">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f9aad-2833">`Lock` および`Unlock`関数は、常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2833">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f9aad-2834">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2834">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f9aad-2835">場合`Record`、または`FromRecord`と`ToRecord`が指定されていないロックのなりますファイル全体です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2835">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f9aad-2836">場合`Record`だけが指定されている 1 つのレコードがロック/ロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2836">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f9aad-2837">連続の入力または出力のファイルを開いていた場合`Lock`と`Unlock`によって指定される範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2837">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2838">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2838">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f9aad-2839">この例では、`People.txt`構造体のレコードを含むファイルは、`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2839">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2840">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2840">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2841">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2841">Required.</span></span> <span data-ttu-id="f9aad-2842">任意の有効なファイル数を含む <see langword="Integer" /> 式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2842">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="f9aad-2843">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2843">Optional.</span></span> <span data-ttu-id="f9aad-2844">ファイルへ書き込む 1 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2844">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="f9aad-2845">シーケンシャル ファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2845">Writes data to a sequential file.</span></span> <span data-ttu-id="f9aad-2846"><see langword="Write" /> を使用して書き込まれたデータは通常、<see langword="Input" /> を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2846">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2847">`Write`と`WriteLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2847">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2848">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2848">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2849">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2849">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2850">省略した場合`Output`、空白行がファイルに出力します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2850">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="f9aad-2851">複数の式は、コンマで区切ってことができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2851">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="f9aad-2852">異なり、 `Print` 、関数、`Write`関数は、ファイルに書き込まれる項目と文字列を囲む引用符の間にコンマを挿入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2852">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="f9aad-2853">一覧に明示的な区切り記号を配置する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2853">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="f9aad-2854">ときに`Write`をファイルにのみ数値データの書き込みに使用`Boolean`、日付、null の場合、および`Error`データ形式がサポートされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2854">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="f9aad-2855">次の前提に従うと、データが読み取ることができを使用してを正しく解釈されるように`Input`ロケールに関係なく、します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2855">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="f9aad-2856">数値データには、小数点区切り文字としてピリオドを使用して常に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2856">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="f9aad-2857">`Boolean`データか、`#TRUE#`または`#FALSE#`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2857">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="f9aad-2858">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2858">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="f9aad-2859">日付データは、汎用の日付の形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2859">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="f9aad-2860">日付または時刻部分のいずれかがないか 0 の場合は、提供された部分のみがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2860">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="f9aad-2861">場合、ファイルに書き込まれますが何も`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2861">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f9aad-2862">ただし、null のデータの`#NULL#`が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2862">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="f9aad-2863">`Error`として表示されるデータ、出力`#ERROR errorcode#`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2863">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="f9aad-2864">`Error`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2864">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="f9aad-2865">`WriteLine` 改行文字を挿入 (つまり、キャリッジ リターン/ライン フィード、または`Chr(13) + Chr(10)`) が記述されている最後の文字の後、`Output`ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2865">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="f9aad-2866">二重引用符を使用して文字列に引用符を埋め込むことができます、または""です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2866">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="f9aad-2867">たとえば、オブジェクトに適用された</span><span class="sxs-lookup"><span data-stu-id="f9aad-2867">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="f9aad-2868">文字列の値を返します`Double quotation marks aren't "difficult" to handle`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2868">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="f9aad-2869">使用してファイルへの書き込み、`Write`または`WriteLine`関数が必要です`Append`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2869">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2870">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2870">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2871">この例では、`Write`シーケンシャル ファイルに raw データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2871">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f9aad-2872">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2872">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f9aad-2873">必須。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2873">Required.</span></span> <span data-ttu-id="f9aad-2874">任意の有効なファイル数を含む <see langword="Integer" /> 式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2874">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="f9aad-2875">任意。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2875">Optional.</span></span> <span data-ttu-id="f9aad-2876">ファイルへ書き込む 1 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2876">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="f9aad-2877">シーケンシャル ファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2877">Writes data to a sequential file.</span></span> <span data-ttu-id="f9aad-2878"><see langword="Write" /> を使用して書き込まれたデータは通常、<see langword="Input" /> を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2878">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f9aad-2879">`Write`と`WriteLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2879">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f9aad-2880">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2880">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f9aad-2881">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2881">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f9aad-2882">省略した場合`Output`、空白行がファイルに出力します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2882">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="f9aad-2883">複数の式は、コンマで区切ってことができます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2883">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="f9aad-2884">異なり、 `Print` 、関数、`Write`関数は、ファイルに書き込まれる項目と文字列を囲む引用符の間にコンマを挿入します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2884">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="f9aad-2885">一覧に明示的な区切り記号を配置する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2885">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="f9aad-2886">ときに`Write`をファイルにのみ数値データの書き込みに使用`Boolean`、日付、null の場合、および`Error`データ形式がサポートされます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2886">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="f9aad-2887">次の前提に従うと、データが読み取ることができを使用してを正しく解釈されるように`Input`ロケールに関係なく、します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2887">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="f9aad-2888">数値データには、小数点区切り文字としてピリオドを使用して常に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2888">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="f9aad-2889">`Boolean`データか、`#TRUE#`または`#FALSE#`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2889">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="f9aad-2890">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2890">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="f9aad-2891">日付データは、汎用の日付の形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2891">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="f9aad-2892">日付または時刻部分のいずれかがないか 0 の場合は、提供された部分のみがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2892">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="f9aad-2893">場合、ファイルに書き込まれますが何も`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2893">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f9aad-2894">ただし、null のデータの`#NULL#`が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2894">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="f9aad-2895">`Error`として表示されるデータ、出力`#ERROR errorcode#`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2895">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="f9aad-2896">`Error`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2896">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="f9aad-2897">`WriteLine` 改行文字を挿入 (つまり、キャリッジ リターン/ライン フィード、または`Chr(13) + Chr(10)`) が記述されている最後の文字の後、`Output`ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2897">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="f9aad-2898">二重引用符を使用して文字列に引用符を埋め込むことができます、または""です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2898">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="f9aad-2899">たとえば、オブジェクトに適用された</span><span class="sxs-lookup"><span data-stu-id="f9aad-2899">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="f9aad-2900">文字列の値を返します`Double quotation marks aren't "difficult" to handle`です。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2900">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="f9aad-2901">使用してファイルへの書き込み、`Write`または`WriteLine`関数が必要です`Append`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2901">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f9aad-2902">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2902">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f9aad-2903">この例では、`Write`シーケンシャル ファイルに raw データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f9aad-2903">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>