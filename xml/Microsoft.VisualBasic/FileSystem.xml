<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d65968bff7025066b9b9e3f7b680816bf202991" /><Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/05/2018" /><Meta Name="ms.locfileid" Value="52919073" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f997d-101"><see langword="FileSystem" /> モジュールに含まれるプロシージャを使って、ファイル、ディレクトリ、またはフォルダー、およびシステムの操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="f997d-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="f997d-102"><see langword="My" /> 機能を使用すると、<see langword="FileSystem" /> モジュールを使用した場合よりファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="f997d-103">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-104">このモジュールは、Visual Basic 言語のキーワードおよびファイルとフォルダーにアクセスするランタイム ライブラリ メンバーをサポートします。</span><span class="sxs-lookup"><span data-stu-id="f997d-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-105">この例では、`GetAttr`ファイルとディレクトリまたはフォルダーの属性を確認する関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md"><span data-ttu-id="f997d-106">ディレクトリとファイルの概要</span><span class="sxs-lookup"><span data-stu-id="f997d-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md"><span data-ttu-id="f997d-107">入出力の概要</span><span class="sxs-lookup"><span data-stu-id="f997d-107">Input and Output Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="f997d-108">キーワード (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="f997d-109">Visual Basic ランタイム ライブラリ メンバー</span><span class="sxs-lookup"><span data-stu-id="f997d-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="f997d-110">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-110">Required.</span></span> <span data-ttu-id="f997d-111">新しい既定ディレクトリまたはフォルダーになるディレクトリまたはフォルダーを識別する <see langword="String" /> 式。</span><span class="sxs-lookup"><span data-stu-id="f997d-111">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="f997d-112"><paramref name="Path" /> にはドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="f997d-113">ドライブを指定しない場合、<see langword="ChDir" /> は現在のドライブの既定ディレクトリまたは既定フォルダーを変更します。</span><span class="sxs-lookup"><span data-stu-id="f997d-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="f997d-114">現在のディレクトリまたはフォルダーを変更します。</span><span class="sxs-lookup"><span data-stu-id="f997d-114">Changes the current directory or folder.</span></span> <span data-ttu-id="f997d-115"><see langword="My" /> 機能を使用すると、<see langword="ChDir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="f997d-116">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-117">`ChDir`関数は、既定のディレクトリが既定のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="f997d-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="f997d-118">たとえば、既定のドライブが C の場合は、次のステートメントは変更既定のディレクトリをドライブ D、C が既定のドライブに残ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="f997d-119">相対に行うことができますディレクトリの変更は、次のように 2 つのピリオドを入力します。</span><span class="sxs-lookup"><span data-stu-id="f997d-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-120">`ChDir`関数が部分的に信頼された状況では、その実行に影響を与えるアンマネージ コードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="f997d-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f997d-121">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>とします。</span><span class="sxs-lookup"><span data-stu-id="f997d-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-122">この例では、`ChDir`を現在のディレクトリまたはフォルダーを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-123"><paramref name="Path" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="f997d-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f997d-124">指定されたドライブが無効です。または利用できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md"><span data-ttu-id="f997d-125">方法 : Visual Basic でファイル パスを解析する</span><span class="sxs-lookup"><span data-stu-id="f997d-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md"><span data-ttu-id="f997d-126">Visual Basic でのファイルおよびディレクトリの作成、削除、および移動</span><span class="sxs-lookup"><span data-stu-id="f997d-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f997d-127">現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="f997d-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="f997d-128">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-128">Required.</span></span> <span data-ttu-id="f997d-129">既存のドライブを指定する文字列式。</span><span class="sxs-lookup"><span data-stu-id="f997d-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="f997d-130">長さ 0 の文字列 ("") を指定した場合、現在のドライブは変更されません。</span><span class="sxs-lookup"><span data-stu-id="f997d-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="f997d-131"><paramref name="Drive" /> 引数が複数の文字で構成される文字列の場合、<see langword="ChDrive" /> は先頭の文字だけを使用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="f997d-132">現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="f997d-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-133">`ChDrive`関数が部分的に信頼された状況では、その実行に影響を与えるアンマネージ コードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="f997d-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f997d-134">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-135">この例では、`ChDrive`を現在のドライブを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="f997d-136">関数は、ドライブが存在しない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="f997d-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-137">指定されたドライブが無効です。または利用できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-138">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="f997d-139">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-139">Required.</span></span> <span data-ttu-id="f997d-140">既存のドライブを指定する文字列式。</span><span class="sxs-lookup"><span data-stu-id="f997d-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="f997d-141">長さ 0 の文字列 ("") を指定した場合、現在のドライブは変更されません。</span><span class="sxs-lookup"><span data-stu-id="f997d-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="f997d-142"><paramref name="Drive" /> 引数が複数の文字で構成される文字列の場合、<see langword="ChDrive" /> は先頭の文字だけを使用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="f997d-143">現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="f997d-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-144">`ChDrive`関数が部分的に信頼された状況では、その実行に影響を与えるアンマネージ コードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="f997d-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f997d-145">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-146">この例では、`ChDrive`を現在のドライブを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="f997d-147">関数は、ドライブが存在しない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="f997d-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-148">指定されたドライブが無効です。または利用できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-149">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f997d-150">現在のパスを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-150">Returns a string representing the current path.</span></span> <span data-ttu-id="f997d-151"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="f997d-152">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f997d-153">現在のパスを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-153">Returns a string representing the current path.</span></span> <span data-ttu-id="f997d-154"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="f997d-155">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="f997d-156">現在のパスを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="f997d-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f997d-157">この例では、`CurDir`関数を現在のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="f997d-158">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-158">Optional.</span></span> <span data-ttu-id="f997d-159">既存のドライブを指定する <see langword="Char" /> 式です。</span><span class="sxs-lookup"><span data-stu-id="f997d-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="f997d-160">ドライブが指定されていない場合、または <paramref name="Drive" /> が長さ 0 の文字列 ("") である場合は、<see langword="CurDir" /> により現在のドライブのパスが返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="f997d-161">現在のパスを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-161">Returns a string representing the current path.</span></span> <span data-ttu-id="f997d-162"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="f997d-163">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="f997d-164">現在のパスを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="f997d-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f997d-165">この例では、`CurDir`関数を現在のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f997d-166">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="f997d-167"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="f997d-168">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f997d-169">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="f997d-170"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="f997d-171">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="f997d-172">指定されたパターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="f997d-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-173">`Dir`関数は、複数の文字の使用をサポートしています (`*`) と 1 文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f997d-174">`VbVolume` 特定のファイル名の代わりに、ドライブのボリューム ラベルを返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="f997d-175">指定する必要があります、`PathName`初めて呼び出す、`Dir`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="f997d-176">次の項目を取得するには、後続の呼び出しを行うことができます、`Dir`パラメーターなしの関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-177">正常に実行する、`Dir`関数に必要な<xref:System.Security.Permissions.FileIOPermissionAccess.Read>と<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="f997d-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f997d-178">詳細については、次を参照してください。 <xref:System.Security.Permissions.FileIOPermission>、 <xref:System.Security.SecurityException>、および[コード アクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="f997d-179">`Attributes`列挙値の引数は次のようにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f997d-180">[値]</span><span class="sxs-lookup"><span data-stu-id="f997d-180">Value</span></span>|<span data-ttu-id="f997d-181">定数</span><span class="sxs-lookup"><span data-stu-id="f997d-181">Constant</span></span>|<span data-ttu-id="f997d-182">説明</span><span class="sxs-lookup"><span data-stu-id="f997d-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="f997d-183">既定モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-183">Default.</span></span> <span data-ttu-id="f997d-184">属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f997d-185">属性のないファイルや読み取り専用ファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f997d-186">属性のないファイルや隠しファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f997d-187">システム ファイル、およびも属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f997d-188">ボリューム ラベルを指定しますその他の属性が指定されている場合`vbVolume`は無視されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f997d-189">ディレクトリまたはフォルダー、およびも属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f997d-190">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="f997d-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f997d-191">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="f997d-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f997d-192">これらの列挙体は、Visual Basic 言語によって指定され、実際の値ではなく、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-193">この例では、`Dir`関数を特定のファイルおよびディレクトリの存在を確認します。</span><span class="sxs-lookup"><span data-stu-id="f997d-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f997d-194">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-194">Optional.</span></span> <span data-ttu-id="f997d-195">ファイル名、ディレクトリまたはフォルダー名、あるいはドライブ ボリューム ラベルを指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f997d-195"><see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="f997d-196"><paramref name="PathName" /> が見つからない場合は、長さ 0 の文字列 (<see langword="&quot;&quot;" />) が返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes"><span data-ttu-id="f997d-197">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-197">Optional.</span></span> <span data-ttu-id="f997d-198">値がファイル属性を指定する列挙式または数式。</span><span class="sxs-lookup"><span data-stu-id="f997d-198">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="f997d-199">省略した場合、<see langword="Dir" /> は、<paramref name="PathName" /> に一致する、属性のないファイルを返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-199">If omitted, <see langword="Dir" /> returns files that match <paramref name="PathName" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="f997d-200">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-200">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="f997d-201"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-201">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="f997d-202">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-202">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="f997d-203">指定されたパターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="f997d-203">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-204">`Dir`関数は、複数の文字の使用をサポートしています (`*`) と 1 文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-204">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f997d-205">`VbVolume` 特定のファイル名の代わりに、ドライブのボリューム ラベルを返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-205">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="f997d-206">指定する必要があります、`PathName`初めて呼び出す、`Dir`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-206">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="f997d-207">次の項目を取得するには、後続の呼び出しを行うことができます、`Dir`パラメーターなしの関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-207">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-208">正常に実行する、`Dir`関数に必要な<xref:System.Security.Permissions.FileIOPermissionAccess.Read>と<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="f997d-208">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f997d-209">詳細については、次を参照してください。 <xref:System.Security.Permissions.FileIOPermission>、 <xref:System.Security.SecurityException>、および[コード アクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-209">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="f997d-210">`Attributes`列挙値の引数は次のようにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-210">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f997d-211">[値]</span><span class="sxs-lookup"><span data-stu-id="f997d-211">Value</span></span>|<span data-ttu-id="f997d-212">定数</span><span class="sxs-lookup"><span data-stu-id="f997d-212">Constant</span></span>|<span data-ttu-id="f997d-213">説明</span><span class="sxs-lookup"><span data-stu-id="f997d-213">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="f997d-214">既定モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-214">Default.</span></span> <span data-ttu-id="f997d-215">属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-215">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f997d-216">ファイル属性がないだけでなく、読み取り専用のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-216">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f997d-217">ファイル属性がないだけでなく、非表示のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-217">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f997d-218">ファイル属性がないだけでなく、システム ファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-218">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f997d-219">ボリューム ラベルを指定しますその他の属性が指定されている場合`vbVolume`は無視されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-219">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f997d-220">ディレクトリまたはファイル属性がないだけでなく、フォルダーを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-220">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f997d-221">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="f997d-221">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f997d-222">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="f997d-222">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f997d-223">これらの列挙体は、Visual Basic 言語によって指定され、実際の値の代わりに、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-223">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-224">この例では、`Dir`関数を特定のファイルおよびディレクトリの存在を確認します。</span><span class="sxs-lookup"><span data-stu-id="f997d-224">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-225">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-225">Required.</span></span> <span data-ttu-id="f997d-226">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="f997d-226">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="f997d-227"><see langword="True" /> モードまたはシーケンシャル <see langword="Random" /> モードで開いたファイルの現在位置がファイルの末尾に達している場合、ブール値 <see langword="Input" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-227">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="f997d-228"><see langword="True" /> モードまたはシーケンシャル <see langword="Random" /> モードで開いたファイルの現在位置がファイルの末尾に達している場合、ブール値 <see langword="Input" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-228">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-229">使用`EOF`ファイルの末尾の入力を取得しようとして生成されたエラーを回避するためにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-229">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="f997d-230">`EOF`関数が返される`False`ファイルの末尾に達するまでです。</span><span class="sxs-lookup"><span data-stu-id="f997d-230">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="f997d-231">開いたファイル`Random`または`Binary`アクセス、`EOF`返します`False`最後に実行されるまで`FileGet`関数は、レコード全体を読めるようにすることはありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-231">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="f997d-232">開いたファイル`Binary`アクセス、ファイルを使用して、読み込もうとすると、`Input`行われるまで`EOF`返します`True`エラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-232">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="f997d-233">使用して、`LOF`と`Loc`関数の代わりに`EOF`でバイナリ ファイルを読み取るときに`Input`、使用または`Get`を使用する場合、`EOF`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-233">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="f997d-234">開いたファイル`Output`、`EOF`は常に返します`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-234">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-235">この例では、`EOF`ファイルの終わりを検出する関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-235">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="f997d-236">この例では、`Testfile`複数行のテキストを含むテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f997d-236">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-237">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-237">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-238">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-238">Required.</span></span> <span data-ttu-id="f997d-239"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="f997d-239"><see langword="Integer" />.</span></span> <span data-ttu-id="f997d-240">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-240">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="f997d-241"><see langword="FileOpen" /> 関数を使用して開いたファイルのファイル モードを表す列挙体を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-241">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f997d-242"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="FileAttr" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-242">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="f997d-243">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-243">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="f997d-244">次の列挙型値は、ファイルのアクセス モードを示します。</span><span class="sxs-lookup"><span data-stu-id="f997d-244">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="f997d-245">[値]</span><span class="sxs-lookup"><span data-stu-id="f997d-245">Value</span></span> 
 </term><description> <span data-ttu-id="f997d-246">モード</span><span class="sxs-lookup"><span data-stu-id="f997d-246">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="f997d-247">1</span><span class="sxs-lookup"><span data-stu-id="f997d-247">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="f997d-248">2</span><span class="sxs-lookup"><span data-stu-id="f997d-248">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="f997d-249">4</span><span class="sxs-lookup"><span data-stu-id="f997d-249">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="f997d-250">8</span><span class="sxs-lookup"><span data-stu-id="f997d-250">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="f997d-251">32</span><span class="sxs-lookup"><span data-stu-id="f997d-251">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-252">この関数は、ファイルのモードを使用して開かれたファイルを表す列挙体を返します、`FileOpen`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-252">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-253">この例では、`FileAttr`関数を開いているファイルのファイル モードを返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-253">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-254">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-254">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="f997d-255">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-255">Optional.</span></span> <span data-ttu-id="f997d-256">閉じる対象となる、0 以上のチャネルで構成されるパラメーター配列。</span><span class="sxs-lookup"><span data-stu-id="f997d-256">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="f997d-257"><see langword="FileOpen" /> 関数で開いたファイルへの入出力を終了して、ファイルを閉じます。</span><span class="sxs-lookup"><span data-stu-id="f997d-257">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f997d-258"><see langword="My" /> を使用すると、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-258"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="f997d-259">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-259">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-260">`FileClose`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-260">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-261">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-261">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-262">詳細については、次を参照してください[する方法: StreamReader を使用してファイルからのテキストの読み取り](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)、[する方法: StreamWriter を持つファイルに書き込むテキスト](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)、と[チュートリアル: 操作のファイルとディレクトリの。Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-262">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="f997d-263">省略した場合`FileNumbers`、すべてのアクティブなファイルを開く、`FileOpen`関数は閉じられます。</span><span class="sxs-lookup"><span data-stu-id="f997d-263">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="f997d-264">開かれているファイルを閉じるとき`Output`または`Append`出力の最終的なバッファーがそのファイルのオペレーティング システムのバッファーに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-264">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="f997d-265">すべてのバッファー領域が閉じたに関連付けられているファイルは解放されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-265">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="f997d-266">ときに、`FileClose`関数が実行され、ファイルをそのファイルの関連付け番号が終了します。</span><span class="sxs-lookup"><span data-stu-id="f997d-266">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-267">この例では、`FileClose`の開かれたファイルを閉じる関数`Input`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-267">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-268"><paramref name="FileNumber" /> は存在しません。</span><span class="sxs-lookup"><span data-stu-id="f997d-268"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="f997d-269">End ステートメント</span><span class="sxs-lookup"><span data-stu-id="f997d-269">End Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md"><span data-ttu-id="f997d-270">Stop ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-270">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-271">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-271">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="f997d-272">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-272">Required.</span></span> <span data-ttu-id="f997d-273">コピーするファイルの名前を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f997d-273"><see langword="String" /> expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="f997d-274"><paramref name="Source" /> には、コピー先ファイルのディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-274"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="f997d-275">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-275">Required.</span></span> <span data-ttu-id="f997d-276">コピー先のファイルの名前を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f997d-276"><see langword="String" /> expression that specifies the destination file name.</span></span> <span data-ttu-id="f997d-277"><paramref name="Destination" /> には、コピー先ファイルのディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-277"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="f997d-278">ファイルをコピーします。</span><span class="sxs-lookup"><span data-stu-id="f997d-278">Copies a file.</span></span> <span data-ttu-id="f997d-279"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="FileCopy" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-279">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="f997d-280">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-280">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-281">使用しようとする場合、`FileCopy`で現在開いているファイルの場合は、関数のエラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-281">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="f997d-282">`FileCopy` ローカル ドライブで動作する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="f997d-282">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-283">この例では、`FileCopy`別に 1 つのファイルをコピーする関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-283">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="f997d-284">この例のために、仮定`SrcFile`はデータを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f997d-284">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-285"><paramref name="Source" /> または <paramref name="Destination" /> が無効であるか、指定されていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-285"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-286">ファイルは既に開いています。</span><span class="sxs-lookup"><span data-stu-id="f997d-286">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f997d-287">ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="f997d-287">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md"><span data-ttu-id="f997d-288">方法 : Visual Basic でファイルのコピーを別のディレクトリに作成する</span><span class="sxs-lookup"><span data-stu-id="f997d-288">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md"><span data-ttu-id="f997d-289">方法 : Visual Basic でファイルのコピーを同じディレクトリに作成する</span><span class="sxs-lookup"><span data-stu-id="f997d-289">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md"><span data-ttu-id="f997d-290">方法 : Visual Basic でディレクトリを別のディレクトリにコピーする</span><span class="sxs-lookup"><span data-stu-id="f997d-290">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f997d-291">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-291">Required.</span></span> <span data-ttu-id="f997d-292">ファイル名を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f997d-292"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="f997d-293"><paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-293"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="f997d-294">ファイルへの書き込み日時を示す <see langword="Date" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-294">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="f997d-295"><see langword="My" /> 機能を使用すると、<see langword="FileDateTime" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-295">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="f997d-296">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-296">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="f997d-297">ファイルの作成日時または最終変更日時を示す <see langword="Date" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-297"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f997d-298">この例では、`FileDateTime`関数を日付し、時刻のファイルが作成または最後に変更します。</span><span class="sxs-lookup"><span data-stu-id="f997d-298">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="f997d-299">表示される日付の形式は、システムのロケール設定に基づきます。</span><span class="sxs-lookup"><span data-stu-id="f997d-299">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-300"><paramref name="PathName" /> が無効です。またはワイルドカードを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="f997d-300"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f997d-301">対象のファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="f997d-301">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-302">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-302">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f997d-303">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-303">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-304"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-304">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-305">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-305">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-306">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-306">Required.</span></span> <span data-ttu-id="f997d-307">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-307">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-308">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-308">Required.</span></span> <span data-ttu-id="f997d-309">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-309">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-310">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-310">Optional.</span></span> <span data-ttu-id="f997d-311">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-311">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f997d-312">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-312">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-313"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-313">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-314">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-314">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-315">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-315">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-316">データを読み取る`FileGet`通常のファイルに書き込まれ、`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-316">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f997d-317">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-317">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-318">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f997d-318">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-319">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-319">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-320">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-320">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-321">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-321">Random Mode</span></span>  
 <span data-ttu-id="f997d-322">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-322">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-323">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-323">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-324">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-324">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-325">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="f997d-325">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-326">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-326">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-327">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-327">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-328">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-328">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-329">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-329">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-330">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-330">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f997d-331">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-331">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-332">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-332">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f997d-333">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-333">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f997d-334">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-334">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f997d-335">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-335">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-336">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-336">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-337">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-337">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-338">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-338">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f997d-339">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-339">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f997d-340">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f997d-340">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f997d-341">データの 200 バイト: (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="f997d-341">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-342">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-342">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f997d-343">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-343">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-344">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-344">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-345">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-345">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-346">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f997d-347">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-347">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-348">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-348">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-349">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-349">Binary Mode</span></span>  
 <span data-ttu-id="f997d-350">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-350">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-351">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-351">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-352">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-352">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-353">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f997d-353">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-354">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-354">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f997d-355">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-355">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f997d-356">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-356">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-357">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-357">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f997d-358">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-358">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-359"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-359"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-360">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-360">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-361">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-361">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-362">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-362">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-363">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-363">Required.</span></span> <span data-ttu-id="f997d-364">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-364">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-365">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-365">Required.</span></span> <span data-ttu-id="f997d-366">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-366">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-367">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-367">Optional.</span></span> <span data-ttu-id="f997d-368">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-368">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f997d-369">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-369">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-370"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-370">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-371">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-371">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-372">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-372">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-373">データを読み取る`FileGet`通常のファイルに書き込まれ、`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-373">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f997d-374">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-374">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-375">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f997d-375">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-376">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-376">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-377">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-377">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-378">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-378">Random Mode</span></span>  
 <span data-ttu-id="f997d-379">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-379">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-380">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-380">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-381">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-381">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-382">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="f997d-382">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-383">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-383">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-384">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-384">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-385">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-385">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-386">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-386">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-387">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-387">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f997d-388">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-388">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-389">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-389">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f997d-390">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-390">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f997d-391">場合は、記述子は使用されません。</span><span class="sxs-lookup"><span data-stu-id="f997d-391">If the descriptor is not used.</span></span> <span data-ttu-id="f997d-392">渡された配列の境界とサイズ、`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-392">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f997d-393">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-393">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-394">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-394">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-395">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-395">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-396">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-396">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f997d-397">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-397">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f997d-398">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f997d-398">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f997d-399">データの 200 バイト: (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="f997d-399">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-400">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-400">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f997d-401">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-401">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-402">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-402">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-403">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-403">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-404">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f997d-405">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-405">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-406">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-406">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-407">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-407">Binary Mode</span></span>  
 <span data-ttu-id="f997d-408">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-408">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-409">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-409">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-410">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-410">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-411">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f997d-411">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-412">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-412">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f997d-413">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-413">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f997d-414">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-414">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-415">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-415">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f997d-416">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-416">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-417"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-417"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-418">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-418">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-419">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-419">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-420">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-420">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-421">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-421">Required.</span></span> <span data-ttu-id="f997d-422">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-422">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-423">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-423">Required.</span></span> <span data-ttu-id="f997d-424">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-424">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-425">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-425">Optional.</span></span> <span data-ttu-id="f997d-426">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-426">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f997d-427">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-427">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-428"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-428">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-429">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-429">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-430">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-430">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-431">データを読み取る`FileGet`通常のファイルに書き込まれ、`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-431">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f997d-432">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-432">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-433">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f997d-433">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-434">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-434">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-435">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-435">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-436">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-436">Random Mode</span></span>  
 <span data-ttu-id="f997d-437">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-437">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-438">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-438">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-439">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-439">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-440">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="f997d-440">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-441">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-441">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-442">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-442">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-443">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-443">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-444">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-444">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-445">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-445">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f997d-446">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-446">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-447">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-447">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f997d-448">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-448">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f997d-449">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-449">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f997d-450">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-450">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-451">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-451">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-452">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-452">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-453">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-453">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f997d-454">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-454">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f997d-455">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f997d-455">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f997d-456">データの 200 バイト: (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="f997d-456">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-457">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-457">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f997d-458">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-458">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-459">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-459">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-460">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-460">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-461">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f997d-462">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-462">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-463">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-463">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-464">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-464">Binary Mode</span></span>  
 <span data-ttu-id="f997d-465">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-465">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-466">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-466">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-467">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-467">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-468">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f997d-468">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-469">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-469">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f997d-470">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-470">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f997d-471">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-471">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-472">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-472">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f997d-473">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-473">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-474"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-474"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-475">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-475">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-476">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-476">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-477">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-477">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-478">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-478">Required.</span></span> <span data-ttu-id="f997d-479">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-479">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-480">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-480">Required.</span></span> <span data-ttu-id="f997d-481">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-481">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-482">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-482">Optional.</span></span> <span data-ttu-id="f997d-483">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-483">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f997d-484">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-484">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-485"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-485">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-486">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-486">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-487">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-487">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-488">データを読み取る`FileGet`通常のファイルに書き込まれ、`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-488">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f997d-489">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-489">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-490">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f997d-490">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-491">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-491">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-492">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-492">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-493">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-493">Random Mode</span></span>  
 <span data-ttu-id="f997d-494">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-494">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-495">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-495">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-496">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-496">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-497">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="f997d-497">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-498">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-498">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-499">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-499">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-500">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-500">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-501">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-501">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-502">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-502">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f997d-503">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-503">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-504">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-504">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f997d-505">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-505">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f997d-506">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-506">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f997d-507">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-508">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-509">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-509">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-510">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f997d-511">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-511">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f997d-512">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f997d-512">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f997d-513">データの 200 バイト: (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="f997d-513">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-514">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-514">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f997d-515">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-515">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-516">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-516">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-517">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-517">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-518">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f997d-519">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-519">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-520">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-520">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-521">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-521">Binary Mode</span></span>  
 <span data-ttu-id="f997d-522">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-522">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-523">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-523">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-524">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-524">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-525">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f997d-525">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-526">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-526">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f997d-527">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-527">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f997d-528">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-528">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-529">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-529">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f997d-530">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-530">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-531"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-531"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-532">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-532">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-533">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-533">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-534">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-534">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-535">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-535">Required.</span></span> <span data-ttu-id="f997d-536">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-536">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-537">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-537">Required.</span></span> <span data-ttu-id="f997d-538">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-538">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-539">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-539">Optional.</span></span> <span data-ttu-id="f997d-540">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-540">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f997d-541">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-541">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-542"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-542">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-543">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-543">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-544">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-544">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-545">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-545">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f997d-546">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-546">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-547">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f997d-547">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-548">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-548">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-549">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-549">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-550">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-550">Random Mode</span></span>  
 <span data-ttu-id="f997d-551">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-551">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-552">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-552">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-553">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-553">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-554">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="f997d-554">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-555">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-555">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-556">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-556">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-557">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-557">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-558">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-558">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-559">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-559">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f997d-560">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-560">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-561">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-561">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f997d-562">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-562">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f997d-563">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-563">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f997d-564">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-565">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-566">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-566">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-567">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f997d-568">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-568">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f997d-569">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f997d-569">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f997d-570">データの 200 バイト: (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="f997d-570">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-571">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-571">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f997d-572">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-573">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-573">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-574">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-574">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-575">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f997d-576">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-576">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-577">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-577">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-578">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-578">Binary Mode</span></span>  
 <span data-ttu-id="f997d-579">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-579">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-580">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-580">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-581">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-581">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-582">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f997d-582">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-583">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-583">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f997d-584">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-584">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f997d-585">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-585">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-586">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-586">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f997d-587">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-587">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-588"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-588"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-589">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-589">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-590">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-590">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-591">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-592">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-592">Required.</span></span> <span data-ttu-id="f997d-593">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-594">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-594">Required.</span></span> <span data-ttu-id="f997d-595">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-595">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-596">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-596">Optional.</span></span> <span data-ttu-id="f997d-597">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f997d-598">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-598">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-599"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-600">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-601">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-601">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-602">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-602">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f997d-603">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-604">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f997d-604">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-605">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-605">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-606">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-606">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-607">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-607">Random Mode</span></span>  
 <span data-ttu-id="f997d-608">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-608">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-609">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-609">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-610">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-610">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-611">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="f997d-611">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-612">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-612">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-613">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-613">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-614">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-614">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-615">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-615">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-616">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-616">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f997d-617">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-617">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-618">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-618">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f997d-619">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-619">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f997d-620">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-620">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f997d-621">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-621">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-622">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-622">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-623">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-623">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-624">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-624">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f997d-625">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-625">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f997d-626">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f997d-626">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f997d-627">データの 200 バイト: (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="f997d-627">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-628">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-628">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f997d-629">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-630">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-630">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-631">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-631">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-632">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f997d-633">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-633">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-634">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-635">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-635">Binary Mode</span></span>  
 <span data-ttu-id="f997d-636">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-636">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-637">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-637">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-638">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-638">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-639">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f997d-639">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-640">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-640">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f997d-641">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-641">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f997d-642">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-642">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-643">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-643">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f997d-644">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-644">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-645"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-645"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-646">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-646">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-647">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-647">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-648">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-648">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-649">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-649">Required.</span></span> <span data-ttu-id="f997d-650">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-650">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-651">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-651">Required.</span></span> <span data-ttu-id="f997d-652">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-652">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-653">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-653">Optional.</span></span> <span data-ttu-id="f997d-654">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f997d-655">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-655">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-656"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-657">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-658">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-658">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-659">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-659">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f997d-660">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-661">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f997d-661">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-662">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-662">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-663">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-663">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-664">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-664">Random Mode</span></span>  
 <span data-ttu-id="f997d-665">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-665">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-666">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-666">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-667">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-667">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-668">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="f997d-668">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-669">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-669">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-670">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-670">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-671">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-671">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-672">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-672">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-673">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-673">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f997d-674">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-674">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-675">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-675">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f997d-676">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-676">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f997d-677">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-677">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f997d-678">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-678">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-679">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-679">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-680">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-681">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-681">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f997d-682">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-682">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f997d-683">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f997d-683">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f997d-684">データの 200 バイト: (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="f997d-684">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-685">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-685">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f997d-686">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-687">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-687">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-688">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-688">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-689">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f997d-690">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-690">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-691">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-692">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-692">Binary Mode</span></span>  
 <span data-ttu-id="f997d-693">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-693">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-694">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-694">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-695">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-695">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-696">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f997d-696">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-697">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-697">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f997d-698">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-698">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f997d-699">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-699">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-700">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-700">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f997d-701">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-701">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-702"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-702"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-703">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-703">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-704">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-704">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-705">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-705">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-706">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-706">Required.</span></span> <span data-ttu-id="f997d-707">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-707">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-708">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-708">Required.</span></span> <span data-ttu-id="f997d-709">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-709">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-710">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-710">Optional.</span></span> <span data-ttu-id="f997d-711">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-711">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f997d-712">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-712">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-713"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-713">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-714">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-714">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-715">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-715">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-716">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-716">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f997d-717">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-717">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-718">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f997d-718">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-719">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-719">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-720">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-720">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-721">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-721">Random Mode</span></span>  
 <span data-ttu-id="f997d-722">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-723">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-723">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-724">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-725">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="f997d-725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-726">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-726">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-727">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-727">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-728">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-728">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-729">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-729">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-730">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-730">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f997d-731">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-731">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-732">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-732">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f997d-733">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-733">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f997d-734">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-734">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f997d-735">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-735">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-736">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-736">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-737">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-738">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-738">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f997d-739">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-739">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f997d-740">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f997d-740">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f997d-741">データの 200 バイト: (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="f997d-741">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-742">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-742">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f997d-743">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-743">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-744">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-744">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-745">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-745">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-746">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f997d-747">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-747">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-748">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-748">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-749">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-749">Binary Mode</span></span>  
 <span data-ttu-id="f997d-750">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-751">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-752">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-753">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f997d-753">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-754">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-754">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f997d-755">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-755">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f997d-756">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-756">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-757">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-757">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f997d-758">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-758">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-759"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-759"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-760">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-760">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-761">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-761">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-762">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-762">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-763">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-763">Required.</span></span> <span data-ttu-id="f997d-764">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-764">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-765">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-765">Required.</span></span> <span data-ttu-id="f997d-766">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-766">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-767">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-767">Optional.</span></span> <span data-ttu-id="f997d-768">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-768">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f997d-769">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-769">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-770"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-771">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-772">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-772">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-773">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-773">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f997d-774">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-774">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-775">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f997d-775">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-776">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-776">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-777">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-777">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-778">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-778">Random Mode</span></span>  
 <span data-ttu-id="f997d-779">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-779">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-780">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-780">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-781">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-781">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-782">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="f997d-782">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-783">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-783">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-784">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-784">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-785">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-785">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-786">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-786">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-787">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-787">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f997d-788">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-788">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-789">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-789">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f997d-790">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-790">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f997d-791">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-791">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f997d-792">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-792">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-793">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-793">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-794">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-794">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-795">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-795">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f997d-796">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-796">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f997d-797">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f997d-797">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f997d-798">データの 200 バイト: (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="f997d-798">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-799">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-799">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f997d-800">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-800">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-801">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-801">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-802">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-802">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-803">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f997d-804">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-804">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-805">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-805">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-806">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-806">Binary Mode</span></span>  
 <span data-ttu-id="f997d-807">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-807">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-808">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-808">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-809">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-809">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-810">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f997d-810">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-811">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-811">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f997d-812">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-812">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f997d-813">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-813">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-814">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-814">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f997d-815">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-815">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-816"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-816"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-817">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-817">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-818">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-818">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-819">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-819">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-820">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-820">Required.</span></span> <span data-ttu-id="f997d-821">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-821">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-822">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-822">Required.</span></span> <span data-ttu-id="f997d-823">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-823">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-824">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-824">Optional.</span></span> <span data-ttu-id="f997d-825">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-825">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f997d-826">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-826">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-827"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-827">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-828">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-828">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-829">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-829">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-830">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-830">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f997d-831">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-831">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-832">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f997d-832">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-833">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-833">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-834">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-834">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-835">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-835">Random Mode</span></span>  
 <span data-ttu-id="f997d-836">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-836">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-837">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-837">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-838">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-838">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-839">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="f997d-839">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-840">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-840">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-841">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-841">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-842">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-842">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-843">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-843">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-844">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-844">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f997d-845">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-845">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-846">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-846">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f997d-847">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-847">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f997d-848">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-848">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f997d-849">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-849">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-850">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-850">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-851">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-851">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-852">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-852">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f997d-853">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-853">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f997d-854">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f997d-854">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f997d-855">データの 200 バイト: (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="f997d-855">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-856">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-856">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f997d-857">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-857">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-858">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-858">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-859">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-859">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-860">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f997d-861">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-861">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-862">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-862">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-863">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-863">Binary Mode</span></span>  
 <span data-ttu-id="f997d-864">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-864">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-865">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-865">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-866">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-866">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-867">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f997d-867">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-868">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-868">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f997d-869">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-869">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f997d-870">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-870">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-871">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-871">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f997d-872">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-872">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-873"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-873"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-874">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-874">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-875">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-875">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-876">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-876">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-877">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-877">Required.</span></span> <span data-ttu-id="f997d-878">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-878">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-879">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-879">Required.</span></span> <span data-ttu-id="f997d-880">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-880">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-881">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-881">Optional.</span></span> <span data-ttu-id="f997d-882">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-882">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f997d-883">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-883">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-884"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-884">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-885">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-885">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-886">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-886">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-887">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-887">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f997d-888">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-888">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-889">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f997d-889">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-890">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-890">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-891">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-891">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-892">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-892">Random Mode</span></span>  
 <span data-ttu-id="f997d-893">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-893">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-894">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-894">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-895">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-895">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-896">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="f997d-896">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-897">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-897">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-898">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-898">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-899">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-899">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-900">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-900">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-901">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-901">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f997d-902">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-902">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-903">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-903">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f997d-904">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-904">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f997d-905">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-905">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f997d-906">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-906">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-907">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-907">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-908">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-908">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-909">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-909">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f997d-910">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-910">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f997d-911">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f997d-911">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f997d-912">データの 200 バイト: (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="f997d-912">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-913">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-913">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f997d-914">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-914">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-915">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-915">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-916">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-916">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-917">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f997d-918">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-918">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-919">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-919">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-920">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-920">Binary Mode</span></span>  
 <span data-ttu-id="f997d-921">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-921">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-922">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-922">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-923">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-923">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-924">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f997d-924">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-925">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-925">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f997d-926">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-926">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f997d-927">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-927">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-928">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-928">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f997d-929">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-929">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-930"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-930"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-931">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-931">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-932">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-932">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-933">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-933">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-934">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-934">Required.</span></span> <span data-ttu-id="f997d-935">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-935">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-936">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-936">Required.</span></span> <span data-ttu-id="f997d-937">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-937">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-938">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-938">Optional.</span></span> <span data-ttu-id="f997d-939">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-939">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="f997d-940">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-940">Optional.</span></span> <span data-ttu-id="f997d-941">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-941">Applies only when writing a string.</span></span> <span data-ttu-id="f997d-942">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-942">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="f997d-943">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="f997d-943">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="f997d-944">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-944">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-945"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-945">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-946">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-946">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-947">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-947">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-948">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-948">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f997d-949">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-949">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-950">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f997d-950">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-951">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-951">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-952">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-952">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-953">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-953">Random Mode</span></span>  
 <span data-ttu-id="f997d-954">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-954">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-955">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-955">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-956">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-956">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-957">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="f997d-957">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-958">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-958">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-959">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-959">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-960">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-960">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-961">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-961">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-962">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-962">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f997d-963">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-963">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-964">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-964">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f997d-965">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-965">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f997d-966">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-966">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f997d-967">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-967">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-968">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-968">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-969">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-969">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-970">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-970">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f997d-971">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-971">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f997d-972">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f997d-972">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f997d-973">データの 200 バイト: (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="f997d-973">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-974">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-974">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f997d-975">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-975">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-976">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-976">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-977">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-977">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-978">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f997d-979">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-979">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-980">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-980">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-981">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-981">Binary Mode</span></span>  
 <span data-ttu-id="f997d-982">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-982">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-983">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-983">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-984">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-984">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-985">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f997d-985">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-986">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-986">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f997d-987">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-987">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f997d-988">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-988">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-989">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-989">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f997d-990">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-990">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-991"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-991"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-992">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-992">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-993">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-993">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-994">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-994">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-995">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-995">Required.</span></span> <span data-ttu-id="f997d-996">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-996">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-997">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-997">Required.</span></span> <span data-ttu-id="f997d-998">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-998">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-999">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-999">Optional.</span></span> <span data-ttu-id="f997d-1000">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1000">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="f997d-1001">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1001">Optional.</span></span> <span data-ttu-id="f997d-1002">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1002">Applies only when writing an array.</span></span> <span data-ttu-id="f997d-1003">配列を動的として扱うかどうか、およびサイズと境界を表す配列記述子が必要かどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1003">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="f997d-1004">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1004">Optional.</span></span> <span data-ttu-id="f997d-1005">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1005">Applies only when writing a string.</span></span> <span data-ttu-id="f997d-1006">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1006">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="f997d-1007">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1007">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="f997d-1008">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1008">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f997d-1009"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1009">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f997d-1010">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1010">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1011">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1011">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1012">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1012">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f997d-1013">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1013">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1014">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1014">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-1015">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-1015">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-1016">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1016">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1017">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1017">Random Mode</span></span>  
 <span data-ttu-id="f997d-1018">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1018">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1019">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1019">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1020">次のレコードの開始する 1 つのレコードの末尾までには、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1020">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1021">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1021">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-1022">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1022">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1023">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1023">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1024">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1024">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-1025">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1025">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1026">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1026">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f997d-1027">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1027">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1028">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1028">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f997d-1029">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1029">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f997d-1030">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1030">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f997d-1031">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1031">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1032">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1032">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1033">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1033">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1034">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1034">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f997d-1035">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1035">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f997d-1036">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f997d-1036">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f997d-1037">データの 200 バイト: (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1037">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-1038">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1038">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f997d-1039">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1039">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-1040">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1040">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-1041">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1041">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1042">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f997d-1043">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1043">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-1044">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1044">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1045">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1045">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1046">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1046">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1047">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1047">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1048">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1048">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1049">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f997d-1049">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1050">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1050">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f997d-1051">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-1051">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f997d-1052">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1052">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1053">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1053">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f997d-1054">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1054">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1055"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1055"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1056">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1056">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-1057">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-1057">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1058">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1058">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1059">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1059">Required.</span></span> <span data-ttu-id="f997d-1060">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1060">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1061">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1061">Required.</span></span> <span data-ttu-id="f997d-1062">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="f997d-1062">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1063">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1063">Optional.</span></span> <span data-ttu-id="f997d-1064">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1064">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f997d-1065">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1065">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="f997d-1066"><see langword="My" /> 機能を使用すると、<see langword="FileGetObject" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1066">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="f997d-1067">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1067">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1068">`FileGetObject`の代わりに関数を使用して`FileGet`場合は、コンパイル時にあいまいさを避けるために型`Object`など別の型の代わりに返される`Integer`、 `Long`、`Short`となります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1068">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="f997d-1069">記述する場合、`Variant`型、`FileGetObject`が必要です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1069">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="f997d-1070">あれば、2 番目のパラメーター オブジェクトを使用している場合、常にお勧めを使用すること`FilePutObject`と`FileGetObject`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1070">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f997d-1071">`FileGetObject` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1071">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1072">データを読み取る`FileGetObject`に通常書き込まれ、`FilePutObject`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1072">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="f997d-1073">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1073">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1074">省略した場合`RecordNumber`、`FileGetObject`レコードまたはバイトを読み取り、最後の後に`FileGetObject`または`FilePutObject`関数 (または最後を指す`Seek`関数)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1074">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1075">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1075">Random Mode</span></span>  
 <span data-ttu-id="f997d-1076">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1076">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1077">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGetObject`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1077">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1078">1 つのレコードの終わりと次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1078">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1079">埋め込みデータの量を正確に判断できないためには読み取られるデータの長さと一致するレコードの長さであることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1079">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f997d-1080">読み取られた変数が既定では、文字列である`FileGetObject`文字列の長さを含む 2 バイトの記述子を読み取って、変数にデータを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1080">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1081">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1081">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1082">Visual Basic 6.0 と以前のバージョンは、固定長文字列とファイルを読み取るときに、長さの記述子は書き込まれませんをサポートします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1082">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f997d-1083">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1083">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1084">読み取られた変数が、配列で指定されたレコード長の場合、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1084">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1085">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1085">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1086">長さが 2 に加えて、8 時間ディメンションの数: 2 + 8 \* 含まします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1086">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="f997d-1087">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1087">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="f997d-1088">218 バイトが次のように分散: 18 バイトの記述子 (2 + 8 \* 2)、およびデータ (4 \* 5 \* 10) の 100 バイトです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1088">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f997d-1089">`FileGetObject` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1089">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f997d-1090">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePutObject`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: 2 + 8 \* 含まします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1090">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="f997d-1091">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、配列とその記述子を含む、個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1091">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="f997d-1092"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>クラスは、書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1092">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1093">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1093">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1094">ファイルを開くの`Binary`モードでは、すべての`Random`でこれらの例外の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1094">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="f997d-1095">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1095">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1096">`FileGetObject` 変数を読み取るすべてディスクから連続的、つまり、レコード間の埋め込みなしで。</span><span class="sxs-lookup"><span data-stu-id="f997d-1096">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1097">すべての配列、構造体の配列以外の`FileGetObject`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1097">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="f997d-1098">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="f997d-1098">No descriptor is read.</span></span>  
  
 <span data-ttu-id="f997d-1099">`FileGetObject` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1099">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1100">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1100">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-1101">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-1101">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-1102">たとえば、Form1.vb という名前のファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1102">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1103">次の例では、テスト ファイルにレコードを読み取るし、それを取得します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1103">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-1104">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-1104">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1105">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1105">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f997d-1106">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1106">Required.</span></span> <span data-ttu-id="f997d-1107">ファイルを指定する <see langword="String" /> 式。</span><span class="sxs-lookup"><span data-stu-id="f997d-1107"><see langword="String" /> expression that specifies a file.</span></span> <span data-ttu-id="f997d-1108"><paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1108"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="f997d-1109">ファイルの長さをバイト数で指定する <see langword="Long" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1109">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="f997d-1110"><see langword="My" /> 機能を使用すると、<see langword="FileLen" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1110">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="f997d-1111">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1111">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="f997d-1112">ファイルの長さをバイト数で指定する <see langword="Long" /> 値。</span><span class="sxs-lookup"><span data-stu-id="f997d-1112"><see langword="Long" /> value that specifies the length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1113">指定したファイルが開いている場合場合に、`FileLen`関数が呼び出されると、返される値は、開かれた時点で、ファイルのサイズを表します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1113">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-1114">現在開いているファイルの長さを取得する、`LOF`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1114">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1115">この例では、`FileLen`関数をファイルの長さをバイト単位で返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1115">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="f997d-1116">この例のために、仮定`TestFile`はいくつかのデータを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1116">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f997d-1117">ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1117">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-1118">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-1118">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1119">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1119">Required.</span></span> <span data-ttu-id="f997d-1120">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1120">Any valid file number.</span></span> <span data-ttu-id="f997d-1121"><see langword="FreeFile" /> 関数を使用して、次に使用できるファイル番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1121">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="f997d-1122">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1122">Required.</span></span> <span data-ttu-id="f997d-1123">ファイル名を指定する <see langword="String" /> 型の式。ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1123"><see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="f997d-1124">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1124">Required.</span></span> <span data-ttu-id="f997d-1125">ファイル モード (<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" />、または <see langword="Random" />) を指定する列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1125">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="f997d-1126">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenMode" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1126">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="f997d-1127">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1127">Optional.</span></span> <span data-ttu-id="f997d-1128">開いているファイルで許可されている操作 (<see langword="Read" />、<see langword="Write" />、または <see langword="ReadWrite" />) を示す列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1128">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="f997d-1129">既定値は <see langword="ReadWrite" /> です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1129">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="f997d-1130">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenAccess" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1130">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="f997d-1131">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1131">Optional.</span></span> <span data-ttu-id="f997d-1132">他のプロセスによって開かれたファイルで許可されていない操作 (<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" />、および <see langword="Lock Read Write" />) を指定する列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1132">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="f997d-1133">既定値は <see langword="Lock Read Write" /> です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1133">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="f997d-1134">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenShare" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1134">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="f997d-1135">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1135">Optional.</span></span> <span data-ttu-id="f997d-1136">32,767 以下の値 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1136">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="f997d-1137">ランダム アクセス ファイルの場合は、レコード長を表します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1137">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="f997d-1138">シーケンシャル ファイルの場合は、バッファー内の文字数を表します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1138">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="f997d-1139">ファイルを開いて入出力を行います。</span><span class="sxs-lookup"><span data-stu-id="f997d-1139">Opens a file for input or output.</span></span> <span data-ttu-id="f997d-1140"><see langword="My" /> 機能を使用すると、<see langword="FileOpen" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1140">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="f997d-1141">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1141">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1142">`FileOpen`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1142">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-1143">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1143">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-1144">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1144">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-1145">すべての I/O 操作を実行する前に、は、ファイルを開く必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1145">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="f997d-1146">`FileOpen` ファイル I/O のバッファーを割り当てし、バッファーへのアクセス モードを決定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1146">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-1147">ファイルに書き込む場合、アプリケーションを作成しようとするファイルが存在しない場合、ファイルを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1147">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="f997d-1148">これを行うには、ファイルが作成されるディレクトリのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1148">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="f997d-1149">ただし、によってファイルが指定されている場合`FileName`存在は、アプリケーションのニーズ`Write`ファイル自体にのみアクセスを許可します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1149">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="f997d-1150">セキュリティを強化する、可能なが展開および付与中にファイルを作成する任意の場所`Write`アクセス許可をディレクトリ全体の代わりにのみ、します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1150">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="f997d-1151">セキュリティを強化するには、ルート ディレクトリまたは Program Files ディレクトリの代わりに、ユーザーのディレクトリにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1151">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="f997d-1152">使用して、チャネルを開くにはあります、`FreeFile()`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1152">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-1153">`FileOpen`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体は、部分的な信頼された状況では、その実行に影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1153">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="f997d-1154">詳細については、次を参照してください。<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1154">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1155">この例でのさまざまな使用、`FileOpen`入力と出力ファイルを有効にする関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1155">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="f997d-1156">次のコードは、ファイルを開きます`TestFile`で`Input`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1156">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="f997d-1157">この例で、ファイルが開きます`Binary`操作のみを記述するためのモード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1157">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="f997d-1158">次の例で、ファイルを開きます`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1158">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="f997d-1159">ファイルには、構造体のレコードが含まれています。`Person`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1159">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="f997d-1160">このコード例でファイルを開き`Output`モード; 任意のプロセスはファイルに対する読み取りまたは書き込み。</span><span class="sxs-lookup"><span data-stu-id="f997d-1160">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="f997d-1161">このコード例でファイルを開き`Binary`読み込み専用の他のプロセスがファイルを読み取ることはできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1161">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1162">レコード長が、-1 ではない負の値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1162">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1163"><paramref name="FileName" /> が既に開かれています。または <paramref name="FileName" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1163"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-1164">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-1164">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1165">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1165">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f997d-1166">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1166">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1167"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1167">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1168">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1168">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1169">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1169">Required.</span></span> <span data-ttu-id="f997d-1170">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1170">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1171">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1171">Required.</span></span> <span data-ttu-id="f997d-1172">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1172">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1173">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1173">Optional.</span></span> <span data-ttu-id="f997d-1174">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1174">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f997d-1175">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1175">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1176"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1176">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1177">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1177">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1178">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1178">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1179">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1179">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1180">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1180">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1181">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1181">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1182">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1182">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1183">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1183">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1184">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1184">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1185">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1185">Random Mode</span></span>  
 <span data-ttu-id="f997d-1186">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1186">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1187">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1187">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1188">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1188">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1189">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1189">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1190">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1190">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1191">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1191">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1192">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1192">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1193">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1193">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1194">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1194">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1195">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1195">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1196">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1196">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1197">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1197">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1198">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1198">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1199">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1199">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1200">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1200">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1201">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1201">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1202">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1202">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1203">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1203">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1204">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1204">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1205">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1205">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1206">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1206">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1207">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1207">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1208">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1208">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-1209">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-1210">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1210">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-1211">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1211">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-1212">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-1212">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1213">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1213">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1214">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1214">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1215">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1215">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1216">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1216">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1217">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1217">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1218">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1218">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-1219">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1219">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-1220">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1220">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1221">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1221">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-1222">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1222">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-1223">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1223">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1224">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1224">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-1225">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1225">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1226"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1226"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1227">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1227">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1228">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1228">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1229">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1229">Required.</span></span> <span data-ttu-id="f997d-1230">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1230">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1231">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1231">Required.</span></span> <span data-ttu-id="f997d-1232">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1232">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1233">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1233">Optional.</span></span> <span data-ttu-id="f997d-1234">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1234">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f997d-1235">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1235">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1236"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1236">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1237">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1237">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1238">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1238">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1239">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1239">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1240">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1240">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1241">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1241">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1242">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1242">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1243">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1243">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1244">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1244">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1245">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1245">Random Mode</span></span>  
 <span data-ttu-id="f997d-1246">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1246">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1247">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1247">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1248">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1248">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1249">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1249">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1250">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1250">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1251">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1251">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1252">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1252">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1253">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1253">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1254">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1254">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1255">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1255">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1256">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1256">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1257">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1257">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1258">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1258">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1259">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1259">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1260">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1260">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1261">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1261">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1262">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1262">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1263">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1263">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1264">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1264">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1265">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1265">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1266">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1266">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1267">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1267">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1268">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1268">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-1269">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-1270">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1270">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-1271">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1271">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-1272">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-1272">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1273">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1273">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1274">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1274">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1275">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1275">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1276">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1276">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1277">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1277">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1278">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1278">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-1279">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1279">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-1280">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1280">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1281">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1281">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-1282">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1282">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-1283">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1283">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1284">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1284">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-1285">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1285">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1286"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1286"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1287">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1287">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1288">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1288">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1289">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1289">Required.</span></span> <span data-ttu-id="f997d-1290">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1290">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1291">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1291">Required.</span></span> <span data-ttu-id="f997d-1292">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1292">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1293">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1293">Optional.</span></span> <span data-ttu-id="f997d-1294">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1294">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f997d-1295">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1295">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1296"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1296">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1297">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1297">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1298">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1298">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1299">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1299">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1300">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1300">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1301">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1301">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1302">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1302">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1303">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1303">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1304">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1304">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1305">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1305">Random Mode</span></span>  
 <span data-ttu-id="f997d-1306">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1306">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1307">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1307">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1308">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1308">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1309">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1309">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1310">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1310">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1311">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1311">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1312">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1312">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1313">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1313">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1314">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1314">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1315">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1315">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1316">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1316">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1317">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1317">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1318">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1318">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1319">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1319">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1320">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1320">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1321">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1321">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1322">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1322">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1323">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1323">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1324">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1324">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1325">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1325">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1326">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1326">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1327">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1327">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1328">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1328">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-1329">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-1330">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1330">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-1331">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1331">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-1332">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-1332">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1333">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1333">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1334">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1334">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1335">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1335">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1336">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1336">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1337">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1337">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1338">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1338">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-1339">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1339">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-1340">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1340">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1341">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1341">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-1342">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1342">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-1343">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1343">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1344">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1344">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-1345">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1345">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1346"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1346"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1347">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1347">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1348">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1348">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1349">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1349">Required.</span></span> <span data-ttu-id="f997d-1350">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1350">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1351">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1351">Required.</span></span> <span data-ttu-id="f997d-1352">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1352">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1353">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1353">Optional.</span></span> <span data-ttu-id="f997d-1354">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1354">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f997d-1355">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1355">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1356"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1356">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1357">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1357">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1358">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1358">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1359">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1359">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1360">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1360">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1361">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1361">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1362">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1362">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1363">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1363">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1364">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1364">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1365">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1365">Random Mode</span></span>  
 <span data-ttu-id="f997d-1366">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1366">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1367">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1367">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1368">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1368">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1369">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1369">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1370">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1370">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1371">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1371">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1372">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1372">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1373">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1373">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1374">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1374">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1375">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1375">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1376">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1376">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1377">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1378">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1378">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1379">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1379">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1380">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1380">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1381">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1381">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1382">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1382">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1383">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1383">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1384">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1384">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1385">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1385">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1386">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1386">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1387">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1387">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1388">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1388">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-1389">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-1390">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1390">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-1391">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1391">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-1392">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-1392">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1393">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1393">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1394">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1394">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1395">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1395">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1396">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1396">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1397">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1397">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1398">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1398">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-1399">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1399">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-1400">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1400">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1401">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1401">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-1402">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1402">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-1403">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1403">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1404">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1404">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-1405">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1405">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1406"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1406"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1407">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1407">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1408">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1408">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1409">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1409">Required.</span></span> <span data-ttu-id="f997d-1410">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1410">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1411">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1411">Required.</span></span> <span data-ttu-id="f997d-1412">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1412">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1413">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1413">Optional.</span></span> <span data-ttu-id="f997d-1414">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1414">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f997d-1415">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1415">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1416"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1416">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1417">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1417">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1418">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1418">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1419">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1419">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1420">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1420">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1421">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1421">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1422">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1422">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1423">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1423">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1424">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1424">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1425">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1425">Random Mode</span></span>  
 <span data-ttu-id="f997d-1426">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1426">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1427">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1427">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1428">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1428">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1429">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1429">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1430">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1430">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1431">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1431">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1432">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1432">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1433">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1433">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1434">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1434">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1435">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1435">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1436">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1436">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1437">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1437">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1438">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1438">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1439">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1439">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1440">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1440">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1441">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1441">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1442">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1442">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1443">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1443">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1444">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1444">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1445">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1445">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1446">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1446">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1447">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1447">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1448">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1448">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-1449">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-1450">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1450">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-1451">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1451">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-1452">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-1452">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1453">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1453">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1454">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1454">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1455">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1455">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1456">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1456">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1457">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1457">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1458">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1458">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-1459">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1459">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-1460">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1460">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1461">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1461">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-1462">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1462">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-1463">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1463">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1464">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1464">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-1465">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1465">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1466"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1466"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1467">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1467">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1468">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1468">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1469">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1469">Required.</span></span> <span data-ttu-id="f997d-1470">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1470">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1471">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1471">Required.</span></span> <span data-ttu-id="f997d-1472">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1472">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1473">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1473">Optional.</span></span> <span data-ttu-id="f997d-1474">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f997d-1475">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1475">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1476"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1477">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1478">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1479">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1480">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1481">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1482">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1483">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1484">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1485">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1485">Random Mode</span></span>  
 <span data-ttu-id="f997d-1486">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1487">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1488">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1489">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1490">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1491">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1492">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1493">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1494">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1495">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1496">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1497">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1498">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1499">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1500">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1501">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1502">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1503">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1504">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1505">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1506">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1507">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1508">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-1509">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-1510">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-1511">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-1512">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1513">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1513">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1514">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1515">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1516">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1517">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1518">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-1519">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-1520">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1521">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-1522">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-1523">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1524">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-1525">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1526"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1526"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1527">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1527">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1528">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1528">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1529">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1529">Required.</span></span> <span data-ttu-id="f997d-1530">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1530">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1531">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1531">Required.</span></span> <span data-ttu-id="f997d-1532">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1532">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1533">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1533">Optional.</span></span> <span data-ttu-id="f997d-1534">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1534">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f997d-1535">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1535">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1536"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1536">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1537">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1537">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1538">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1538">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1539">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1539">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1540">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1540">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1541">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1541">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1542">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1542">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1543">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1543">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1544">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1544">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1545">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1545">Random Mode</span></span>  
 <span data-ttu-id="f997d-1546">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1546">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1547">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1547">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1548">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1548">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1549">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1549">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1550">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1550">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1551">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1551">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1552">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1552">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1553">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1553">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1554">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1554">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1555">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1555">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1556">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1556">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1557">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1557">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1558">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1558">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1559">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1559">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1560">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1560">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1561">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1561">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1562">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1562">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1563">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1563">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1564">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1565">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1566">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1566">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1567">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1568">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1568">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-1569">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-1570">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1570">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-1571">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1571">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-1572">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-1572">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1573">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1573">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1574">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1574">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1575">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1575">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1576">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1576">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1577">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1577">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1578">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1578">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-1579">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1579">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-1580">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1580">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1581">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1581">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-1582">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1582">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-1583">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1583">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1584">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1584">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-1585">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1585">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1586"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1586"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1587">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1587">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1588">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1588">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1589">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1589">Required.</span></span> <span data-ttu-id="f997d-1590">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1590">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1591">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1591">Required.</span></span> <span data-ttu-id="f997d-1592">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1592">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1593">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1593">Optional.</span></span> <span data-ttu-id="f997d-1594">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1594">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f997d-1595">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1595">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1596"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1596">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1597">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1597">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1598">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1598">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1599">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1599">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1600">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1600">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1601">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1601">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1602">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1602">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1603">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1603">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1604">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1604">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1605">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1605">Random Mode</span></span>  
 <span data-ttu-id="f997d-1606">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1606">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1607">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1607">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1608">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1608">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1609">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1609">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1610">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1610">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1611">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1611">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1612">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1612">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1613">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1613">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1614">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1614">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1615">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1616">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1616">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1617">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1617">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1618">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1618">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1619">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1619">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1620">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1620">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1621">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1621">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1622">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1622">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1623">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1623">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1624">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1625">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1626">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1626">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1627">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1628">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1628">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-1629">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-1630">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1630">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-1631">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1631">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-1632">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-1632">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1633">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1633">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1634">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1634">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1635">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1635">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1636">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1636">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1637">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1637">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1638">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1638">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-1639">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1639">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-1640">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1640">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1641">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1641">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-1642">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1642">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-1643">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1643">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1644">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1644">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-1645">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1645">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1646"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1646"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1647">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1647">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1648">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1648">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1649">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1649">Required.</span></span> <span data-ttu-id="f997d-1650">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1650">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1651">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1651">Required.</span></span> <span data-ttu-id="f997d-1652">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1652">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1653">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1653">Optional.</span></span> <span data-ttu-id="f997d-1654">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f997d-1655">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1655">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1656"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1657">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1658">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1658">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1659">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1659">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1660">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1661">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1661">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1662">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1662">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1663">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1663">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1664">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1664">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1665">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1665">Random Mode</span></span>  
 <span data-ttu-id="f997d-1666">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1666">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1667">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1667">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1668">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1668">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1669">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1669">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1670">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1670">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1671">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1671">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1672">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1672">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1673">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1673">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1674">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1674">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1675">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1675">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1676">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1676">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1677">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1677">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1678">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1678">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1679">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1679">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1680">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1680">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1681">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1681">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1682">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1682">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1683">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1683">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1684">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1684">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1685">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1685">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1686">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1687">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1687">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1688">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1688">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-1689">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-1690">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1690">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-1691">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-1692">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-1692">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1693">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1693">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1694">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1694">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1695">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1695">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1696">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1696">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1697">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1697">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1698">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1698">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-1699">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1699">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-1700">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1700">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1701">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1701">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-1702">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1702">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-1703">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1703">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1704">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1704">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-1705">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1705">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1706"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1706"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1707">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1707">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1708">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1709">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1709">Required.</span></span> <span data-ttu-id="f997d-1710">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1711">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1711">Required.</span></span> <span data-ttu-id="f997d-1712">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1712">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1713">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1713">Optional.</span></span> <span data-ttu-id="f997d-1714">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f997d-1715">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1715">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1716"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1717">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1718">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1718">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1719">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1719">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1720">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1721">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1721">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1722">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1722">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1723">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1723">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1724">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1724">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1725">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1725">Random Mode</span></span>  
 <span data-ttu-id="f997d-1726">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1726">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1727">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1727">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1728">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1728">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1729">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1729">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1730">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1730">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1731">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1731">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1732">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1732">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1733">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1733">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1734">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1734">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1735">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1735">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1736">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1736">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1737">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1738">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1738">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1739">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1739">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1740">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1740">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1741">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1741">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1742">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1742">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1743">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1743">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1744">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1744">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1745">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1745">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1746">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1747">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1747">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1748">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1748">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-1749">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-1750">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1750">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-1751">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-1752">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-1752">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1753">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1753">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1754">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1754">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1755">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1755">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1756">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1756">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1757">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1757">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1758">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1758">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-1759">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1759">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-1760">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1760">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1761">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1761">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-1762">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1762">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-1763">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1763">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1764">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1764">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-1765">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1765">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1766"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1766"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1767">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1767">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1768">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1768">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1769">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1769">Required.</span></span> <span data-ttu-id="f997d-1770">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1770">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1771">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1771">Required.</span></span> <span data-ttu-id="f997d-1772">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1772">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1773">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1773">Optional.</span></span> <span data-ttu-id="f997d-1774">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1774">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f997d-1775">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1775">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1776"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1776">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1777">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1777">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1778">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1778">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1779">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1779">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1780">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1780">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1781">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1781">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1782">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1782">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1783">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1783">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1784">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1784">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1785">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1785">Random Mode</span></span>  
 <span data-ttu-id="f997d-1786">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1786">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1787">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1787">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1788">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1788">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1789">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1789">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1790">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1790">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1791">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1791">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1792">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1792">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1793">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1793">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1794">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1794">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1795">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1795">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1796">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1796">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1797">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1798">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1798">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1799">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1799">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1800">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1800">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1801">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1801">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1802">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1802">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1803">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1803">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1804">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1804">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1805">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1805">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1806">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1807">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1807">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1808">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1808">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-1809">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-1810">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1810">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-1811">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1811">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-1812">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-1812">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1813">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1813">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1814">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1814">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1815">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1815">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1816">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1816">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1817">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1817">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1818">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1818">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-1819">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1819">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-1820">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1820">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1821">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1821">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-1822">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1822">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-1823">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1823">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1824">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1824">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-1825">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1825">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1826"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1826"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1827">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1827">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1828">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1828">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1829">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1829">Required.</span></span> <span data-ttu-id="f997d-1830">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1830">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1831">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1831">Required.</span></span> <span data-ttu-id="f997d-1832">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1832">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1833">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1833">Optional.</span></span> <span data-ttu-id="f997d-1834">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1834">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f997d-1835">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1835">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1836"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1836">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1837">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1837">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1838">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1838">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1839">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1839">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1840">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1840">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1841">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1841">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1842">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1842">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1843">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1843">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1844">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1844">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1845">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1845">Random Mode</span></span>  
 <span data-ttu-id="f997d-1846">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1846">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1847">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1847">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1848">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1848">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1849">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1849">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1850">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1850">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1851">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1851">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1852">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1852">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1853">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1853">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1854">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1854">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1855">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1856">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1856">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1857">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1857">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1858">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1858">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1859">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1859">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1860">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1860">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1861">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1861">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1862">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1862">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1863">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1863">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1864">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1864">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1865">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1865">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1866">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1866">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1867">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1867">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1868">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1868">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-1869">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-1870">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1870">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-1871">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1871">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-1872">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-1872">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1873">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1873">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1874">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1874">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1875">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1875">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1876">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1876">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1877">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1877">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1878">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1878">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-1879">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1879">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-1880">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1880">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1881">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1881">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-1882">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1882">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-1883">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1883">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1884">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1884">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-1885">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1885">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1886"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1886"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1887">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1887">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1888">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1888">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1889">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1889">Required.</span></span> <span data-ttu-id="f997d-1890">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1890">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1891">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1891">Required.</span></span> <span data-ttu-id="f997d-1892">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1892">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1893">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1893">Optional.</span></span> <span data-ttu-id="f997d-1894">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="f997d-1895">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1895">Optional.</span></span> <span data-ttu-id="f997d-1896">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1896">Applies only when writing a string.</span></span> <span data-ttu-id="f997d-1897">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="f997d-1898">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1898">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="f997d-1899">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1899">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1900"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1901">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1902">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1903">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1904">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1905">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1906">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1907">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1908">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1909">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1909">Random Mode</span></span>  
 <span data-ttu-id="f997d-1910">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1911">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1912">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1913">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1914">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1915">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1916">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1917">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1918">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1919">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1920">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1921">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1922">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1923">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1924">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1925">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1926">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1927">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1928">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1929">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1930">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1931">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1932">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-1933">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-1934">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-1935">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-1936">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-1937">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-1937">Binary Mode</span></span>  
 <span data-ttu-id="f997d-1938">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-1939">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-1940">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-1941">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-1942">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-1943">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-1944">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-1945">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-1946">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-1947">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-1948">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-1949">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-1950"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-1950"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-1951">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1951">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-1952">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-1952">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-1953">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1953">Required.</span></span> <span data-ttu-id="f997d-1954">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1954">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-1955">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-1955">Required.</span></span> <span data-ttu-id="f997d-1956">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-1956">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-1957">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1957">Optional.</span></span> <span data-ttu-id="f997d-1958">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1958">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="f997d-1959">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1959">Optional.</span></span> <span data-ttu-id="f997d-1960">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1960">Applies only when writing an array.</span></span> <span data-ttu-id="f997d-1961">配列を動的として扱うかどうか、および長さを表す文字列の配列記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1961">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="f997d-1962">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-1962">Optional.</span></span> <span data-ttu-id="f997d-1963">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1963">Applies only when writing a string.</span></span> <span data-ttu-id="f997d-1964">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1964">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="f997d-1965">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1965">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="f997d-1966">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1966">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f997d-1967"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1967">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f997d-1968">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-1968">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-1969">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-1969">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-1970">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1970">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f997d-1971">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1971">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-1972">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1972">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f997d-1973">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1973">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-1974">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1974">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-1975">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1975">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-1976">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-1976">Random Mode</span></span>  
 <span data-ttu-id="f997d-1977">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1977">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-1978">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1978">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-1979">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1979">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-1980">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-1980">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-1981">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1981">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f997d-1982">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1982">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f997d-1983">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1983">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f997d-1984">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1984">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-1985">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-1985">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-1986">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-1987">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-1987">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-1988">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1988">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-1989">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1989">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-1990">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1990">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f997d-1991">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1991">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f997d-1992">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="f997d-1992">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f997d-1993">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1993">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f997d-1994">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1994">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f997d-1995">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-1995">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-1996">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-1996">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f997d-1997">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-1997">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-1998">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-1998">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f997d-1999">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-1999">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f997d-2000">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f997d-2001">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2001">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f997d-2002">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-2002">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f997d-2003">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f997d-2003">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-2004">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-2004">Binary Mode</span></span>  
 <span data-ttu-id="f997d-2005">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2005">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f997d-2006">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2006">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f997d-2007">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2007">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-2008">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2008">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f997d-2009">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2009">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f997d-2010">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2010">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f997d-2011">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2011">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f997d-2012">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="f997d-2012">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f997d-2013">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2013">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f997d-2014">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2014">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2015">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2015">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f997d-2016">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2016">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-2017"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2017"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2018">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2018">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-2019">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-2019">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2020">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2020">Required.</span></span> <span data-ttu-id="f997d-2021">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2021">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-2022">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2022">Required.</span></span> <span data-ttu-id="f997d-2023">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="f997d-2023">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f997d-2024">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-2024">Optional.</span></span> <span data-ttu-id="f997d-2025">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2025">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f997d-2026">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2026">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="f997d-2027"><see langword="My" /> 機能を使用すると、<see langword="FilePutObject" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2027">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="f997d-2028">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2028">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2029">`FilePutObject`の代わりに関数を使用して`FilePut`場合は、コンパイル時にあいまいさを避けるために型`Object`など別の型ではなく渡された`Integer`、 `Long`、`Short`となります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2029">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="f997d-2030">`FilePutObject` 書き込み、オブジェクトを記述する記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2030">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="f997d-2031">記述する場合、`Variant`型、`FilePutObject`が必要です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2031">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="f997d-2032">状態が不明な 2 番目のパラメーター オブジェクトを使用している場合と、で常に使用こと勧め`FilePutObject`と`FileGetObject`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2032">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f997d-2033">`FilePutObject` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2033">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-2034">`FilePutObject` を使用して書き込まれたデータは通常、`FileGetObject` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2034">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f997d-2035">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2035">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f997d-2036">省略した場合`RecordNumber`、 `FilePutObject` 、最後の後に次のレコードまたはバイトを書き込みます`FileGetObject`または`FilePutObject`関数 (またはレコードまたはバイトが、最後が指す`Seek`関数)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2036">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="f997d-2037">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2037">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f997d-2038">`FilePutObject` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2038">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f997d-2039">使用する場合`StringIsFixedLength`  =  `True`で`FilePutObject`と同じ処理を実行する必要がある`FileGetObject`長さが予期する文字列が初期化されていることを確認することも必要とします。</span><span class="sxs-lookup"><span data-stu-id="f997d-2039">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f997d-2040">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f997d-2040">Random Mode</span></span>  
 <span data-ttu-id="f997d-2041">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2041">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f997d-2042">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePutObject`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2042">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f997d-2043">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2043">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f997d-2044">埋め込みデータの量を正確に判断できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="f997d-2044">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f997d-2045">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2045">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="f997d-2046">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePutObject`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2046">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f997d-2047">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePutObject` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2047">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f997d-2048">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2048">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f997d-2049">書き込まれる変数は、文字列を含むオブジェクト場合`FilePutObject`2 バイトの記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="f997d-2049">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f997d-2050">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2050">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f997d-2051">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2051">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f997d-2052">書き込まれている変数が、配列で指定されたレコード長の場合、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2052">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f997d-2053">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2053">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f997d-2054">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2054">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f997d-2055">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f997d-2055">Binary Mode</span></span>  
 <span data-ttu-id="f997d-2056">ファイルを開くの`Binary`モードでは、すべて、`Random`モードの規則を適用するを除く。</span><span class="sxs-lookup"><span data-stu-id="f997d-2056">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="f997d-2057">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2057">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f997d-2058">`FilePutObject` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2058">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2059">この例では、`FilePutObject`ファイルに文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2059">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-2060">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-2060">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2061">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2061">Required.</span></span> <span data-ttu-id="f997d-2062">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2062">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="f997d-2063">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2063">Required.</span></span> <span data-ttu-id="f997d-2064">改行される前に 1 行に表示できる文字数を表す 0 ～ 255 の範囲の数式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2064">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="f997d-2065"><paramref name="RecordWidth" /> が 0 の場合は、行の長さに制限がないことを示します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2065">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="f997d-2066"><paramref name="RecordWidth" /> の既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2066">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="f997d-2067"><see langword="FileOpen" /> 関数を使用して開いたファイルに出力行の桁数を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2067">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f997d-2068">この例では、`FileWidth`ファイルの出力の線の幅を設定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2068">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2069">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2069">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2070">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2070">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f997d-2071"><see langword="Integer" /> 関数で使用できる次のファイル番号を表す <see langword="FileOpen" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2071">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="f997d-2072"><see langword="Integer" /> 関数で使用できる次のファイル番号を表す <see langword="FileOpen" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2072">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2073">使用`FreeFile`を既に使用されていない、ファイル番号を入力します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2073">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2074">この例では、 `FreeFile` [次へ] の使用可能なファイル数を返す関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2074">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="f997d-2075">出力、ループ内で開かれている 5 つのファイルとそれぞれにいくつかのサンプル データが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2075">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2076">使用中のファイルが 255 個を超えています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2076">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-2077">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-2077">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f997d-2078">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2078">Required.</span></span> <span data-ttu-id="f997d-2079">ファイル、ディレクトリ、またはフォルダーの名前を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2079"><see langword="String" /> expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="f997d-2080"><paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2080"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="f997d-2081">ファイル、ディレクトリ、またはフォルダーの属性を表す <see langword="FileAttribute" /> 型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2081">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="f997d-2082"><see langword="My" /> 機能を使用すると、<see langword="FileAttribute" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2082">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="f997d-2083">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2083">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="f997d-2084"><see langword="GetAttr" /> によって返される値は、次の表に示す列挙型値の合計です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2084">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="f997d-2085">[値]</span><span class="sxs-lookup"><span data-stu-id="f997d-2085">Value</span></span> 
 </term><description> <span data-ttu-id="f997d-2086">定数</span><span class="sxs-lookup"><span data-stu-id="f997d-2086">Constant</span></span> 
 </description><description> <span data-ttu-id="f997d-2087">説明</span><span class="sxs-lookup"><span data-stu-id="f997d-2087">Description</span></span> 
 </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> <span data-ttu-id="f997d-2088">標準。</span><span class="sxs-lookup"><span data-stu-id="f997d-2088">Normal.</span></span>  
  
 </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> <span data-ttu-id="f997d-2089">読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="f997d-2089">Read-only.</span></span>  
  
 </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> <span data-ttu-id="f997d-2090">非表示。</span><span class="sxs-lookup"><span data-stu-id="f997d-2090">Hidden.</span></span>  
  
 </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> <span data-ttu-id="f997d-2091">システム ファイル。</span><span class="sxs-lookup"><span data-stu-id="f997d-2091">System file.</span></span>  
  
 </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> <span data-ttu-id="f997d-2092">ディレクトリまたはフォルダー。</span><span class="sxs-lookup"><span data-stu-id="f997d-2092">Directory or folder.</span></span>  
  
 </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> <span data-ttu-id="f997d-2093">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2093">File has changed since last backup.</span></span>  
  
 </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> <span data-ttu-id="f997d-2094">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2094">File has a different name.</span></span>  
  
 </description></item></list><block subset="none" type="note"><para>  
 <span data-ttu-id="f997d-2095">これらの列挙体は Visual Basic 言語によって指定されています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2095">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="f997d-2096">これらの名前は、実際の値の代わりにコード内のどの部分でも使用できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2096">The names can be used anywhere in your code in place of the actual values.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2097">どの属性が設定を確認するのには、使用、`And`によって返される値のビットごとの比較を実行する演算子、`GetAttr`関数とする個々 のファイル属性の値。</span><span class="sxs-lookup"><span data-stu-id="f997d-2097">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="f997d-2098">結果がゼロでない場合は、その属性が名前付きのファイルの設定されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2098">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="f997d-2099">次の戻り値など、`And`式が場合は 0、`Archive`属性が設定されていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2099">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="f997d-2100">場合、0 以外の値が返されます、`Archive`属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2100">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2101">この例では、`GetAttr`ファイルとディレクトリまたはフォルダーの属性を確認する関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2101">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2102"><paramref name="Pathname" /> が無効です。またはワイルドカードを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2102"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f997d-2103">対象のファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2103">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="f997d-2104">And 演算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2104">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2105">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2105">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f997d-2106">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2106">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2107">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2107">Required.</span></span> <span data-ttu-id="f997d-2108">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2108">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-2109">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2109">Required.</span></span> <span data-ttu-id="f997d-2110">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2110">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f997d-2111">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2111">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2112">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2112">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2113">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2113">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2114">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2114">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2115">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2115">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f997d-2116">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2116">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2117">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2117">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f997d-2118">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2118">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f997d-2119">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="f997d-2119">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f997d-2120">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2120">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f997d-2121">データ</span><span class="sxs-lookup"><span data-stu-id="f997d-2121">Data</span></span>|<span data-ttu-id="f997d-2122">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="f997d-2122">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f997d-2123">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f997d-2123">Delimiting comma or blank line</span></span>|<span data-ttu-id="f997d-2124">Empty</span><span class="sxs-lookup"><span data-stu-id="f997d-2124">Empty</span></span>|  
|<span data-ttu-id="f997d-2125">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f997d-2125">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f997d-2126">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f997d-2126">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f997d-2127">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f997d-2127">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f997d-2128">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="f997d-2128">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f997d-2129">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f997d-2129">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f997d-2130">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f997d-2130">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f997d-2131">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2131">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2132">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2132">The `Input` function is not localized.</span></span> <span data-ttu-id="f997d-2133">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2133">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2134">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2134">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2135">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2135">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2136">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2136">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f997d-2137">この例では、`TestFile`を使用して書き込まれたデータの一部の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2137">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2138">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2138">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2139">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2139">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2140">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2140">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2141">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2141">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2142">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2142">Required.</span></span> <span data-ttu-id="f997d-2143">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2143">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-2144">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2144">Required.</span></span> <span data-ttu-id="f997d-2145">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2145">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f997d-2146">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2146">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2147">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2147">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2148">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2148">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2149">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2149">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2150">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2150">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f997d-2151">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2151">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2152">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2152">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f997d-2153">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2153">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f997d-2154">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="f997d-2154">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f997d-2155">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2155">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f997d-2156">データ</span><span class="sxs-lookup"><span data-stu-id="f997d-2156">Data</span></span>|<span data-ttu-id="f997d-2157">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="f997d-2157">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f997d-2158">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f997d-2158">Delimiting comma or blank line</span></span>|<span data-ttu-id="f997d-2159">Empty</span><span class="sxs-lookup"><span data-stu-id="f997d-2159">Empty</span></span>|  
|<span data-ttu-id="f997d-2160">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f997d-2160">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f997d-2161">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f997d-2161">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f997d-2162">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f997d-2162">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f997d-2163">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="f997d-2163">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f997d-2164">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f997d-2164">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f997d-2165">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f997d-2165">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f997d-2166">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2166">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2167">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2167">The `Input` function is not localized.</span></span> <span data-ttu-id="f997d-2168">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2168">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2169">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2169">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2170">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2170">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2171">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2171">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f997d-2172">この例では、`TestFile`を使用して書き込まれたデータの一部の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2172">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2173">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2173">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2174">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2174">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2175">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2175">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2176">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2176">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2177">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2177">Required.</span></span> <span data-ttu-id="f997d-2178">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2178">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-2179">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2179">Required.</span></span> <span data-ttu-id="f997d-2180">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2180">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f997d-2181">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2181">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2182">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2182">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2183">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2183">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2184">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2184">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2185">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2185">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f997d-2186">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2186">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2187">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2187">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f997d-2188">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2188">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f997d-2189">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="f997d-2189">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f997d-2190">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2190">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f997d-2191">データ</span><span class="sxs-lookup"><span data-stu-id="f997d-2191">Data</span></span>|<span data-ttu-id="f997d-2192">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="f997d-2192">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f997d-2193">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f997d-2193">Delimiting comma or blank line</span></span>|<span data-ttu-id="f997d-2194">Empty</span><span class="sxs-lookup"><span data-stu-id="f997d-2194">Empty</span></span>|  
|<span data-ttu-id="f997d-2195">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f997d-2195">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f997d-2196">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f997d-2196">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f997d-2197">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f997d-2197">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f997d-2198">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="f997d-2198">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f997d-2199">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f997d-2199">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f997d-2200">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f997d-2200">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f997d-2201">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2201">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2202">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2202">The `Input` function is not localized.</span></span> <span data-ttu-id="f997d-2203">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2203">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2204">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2204">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2205">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2205">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2206">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2206">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f997d-2207">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2207">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2208">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2208">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2209">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2209">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2210">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2210">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2211">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2211">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2212">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2212">Required.</span></span> <span data-ttu-id="f997d-2213">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2213">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-2214">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2214">Required.</span></span> <span data-ttu-id="f997d-2215">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2215">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f997d-2216">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2216">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2217">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2217">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2218">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2218">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2219">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2219">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2220">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2220">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f997d-2221">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2221">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2222">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2222">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f997d-2223">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2223">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f997d-2224">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="f997d-2224">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f997d-2225">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2225">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f997d-2226">データ</span><span class="sxs-lookup"><span data-stu-id="f997d-2226">Data</span></span>|<span data-ttu-id="f997d-2227">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="f997d-2227">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f997d-2228">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f997d-2228">Delimiting comma or blank line</span></span>|<span data-ttu-id="f997d-2229">Empty</span><span class="sxs-lookup"><span data-stu-id="f997d-2229">Empty</span></span>|  
|<span data-ttu-id="f997d-2230">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f997d-2230">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f997d-2231">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f997d-2231">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f997d-2232">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f997d-2232">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f997d-2233">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="f997d-2233">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f997d-2234">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f997d-2234">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f997d-2235">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f997d-2235">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f997d-2236">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2236">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2237">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2237">The `Input` function is not localized.</span></span> <span data-ttu-id="f997d-2238">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2238">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2239">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2239">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2240">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2240">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2241">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2241">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f997d-2242">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2242">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2243">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2243">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2244">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2244">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2245">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2245">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2246">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2246">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2247">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2247">Required.</span></span> <span data-ttu-id="f997d-2248">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2248">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-2249">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2249">Required.</span></span> <span data-ttu-id="f997d-2250">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2250">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f997d-2251">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2251">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2252">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2252">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2253">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2253">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2254">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2254">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2255">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2255">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f997d-2256">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2256">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2257">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2257">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f997d-2258">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2258">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f997d-2259">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="f997d-2259">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f997d-2260">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2260">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f997d-2261">データ</span><span class="sxs-lookup"><span data-stu-id="f997d-2261">Data</span></span>|<span data-ttu-id="f997d-2262">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="f997d-2262">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f997d-2263">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f997d-2263">Delimiting comma or blank line</span></span>|<span data-ttu-id="f997d-2264">Empty</span><span class="sxs-lookup"><span data-stu-id="f997d-2264">Empty</span></span>|  
|<span data-ttu-id="f997d-2265">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f997d-2265">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f997d-2266">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f997d-2266">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f997d-2267">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f997d-2267">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f997d-2268">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="f997d-2268">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f997d-2269">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f997d-2269">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f997d-2270">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f997d-2270">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f997d-2271">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2271">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2272">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2272">The `Input` function is not localized.</span></span> <span data-ttu-id="f997d-2273">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2273">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2274">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2274">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2275">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2275">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2276">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2276">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f997d-2277">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2277">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2278">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2278">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2279">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2279">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2280">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2280">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2281">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2281">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2282">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2282">Required.</span></span> <span data-ttu-id="f997d-2283">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2283">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-2284">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2284">Required.</span></span> <span data-ttu-id="f997d-2285">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2285">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f997d-2286">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2286">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2287">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2287">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2288">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2288">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2289">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2289">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2290">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2290">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f997d-2291">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2291">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2292">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2292">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f997d-2293">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2293">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f997d-2294">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="f997d-2294">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f997d-2295">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2295">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f997d-2296">データ</span><span class="sxs-lookup"><span data-stu-id="f997d-2296">Data</span></span>|<span data-ttu-id="f997d-2297">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="f997d-2297">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f997d-2298">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f997d-2298">Delimiting comma or blank line</span></span>|<span data-ttu-id="f997d-2299">Empty</span><span class="sxs-lookup"><span data-stu-id="f997d-2299">Empty</span></span>|  
|<span data-ttu-id="f997d-2300">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f997d-2300">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f997d-2301">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f997d-2301">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f997d-2302">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f997d-2302">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f997d-2303">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="f997d-2303">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f997d-2304">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f997d-2304">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f997d-2305">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f997d-2305">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f997d-2306">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2306">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2307">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2307">The `Input` function is not localized.</span></span> <span data-ttu-id="f997d-2308">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2308">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2309">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2309">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2310">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2310">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2311">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2311">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f997d-2312">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2312">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2313">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2313">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2314">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2314">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2315">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2315">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2316">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2316">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2317">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2317">Required.</span></span> <span data-ttu-id="f997d-2318">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2318">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-2319">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2319">Required.</span></span> <span data-ttu-id="f997d-2320">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2320">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f997d-2321">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2321">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2322">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2322">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2323">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2323">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2324">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2324">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2325">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2325">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f997d-2326">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2326">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2327">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2327">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f997d-2328">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2328">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f997d-2329">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="f997d-2329">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f997d-2330">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2330">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f997d-2331">データ</span><span class="sxs-lookup"><span data-stu-id="f997d-2331">Data</span></span>|<span data-ttu-id="f997d-2332">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="f997d-2332">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f997d-2333">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f997d-2333">Delimiting comma or blank line</span></span>|<span data-ttu-id="f997d-2334">Empty</span><span class="sxs-lookup"><span data-stu-id="f997d-2334">Empty</span></span>|  
|<span data-ttu-id="f997d-2335">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f997d-2335">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f997d-2336">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f997d-2336">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f997d-2337">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f997d-2337">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f997d-2338">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="f997d-2338">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f997d-2339">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f997d-2339">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f997d-2340">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f997d-2340">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f997d-2341">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2341">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2342">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2342">The `Input` function is not localized.</span></span> <span data-ttu-id="f997d-2343">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2343">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2344">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2344">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2345">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2345">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2346">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2346">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f997d-2347">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2347">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2348">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2348">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2349">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2349">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2350">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2350">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2351">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2351">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2352">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2352">Required.</span></span> <span data-ttu-id="f997d-2353">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-2354">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2354">Required.</span></span> <span data-ttu-id="f997d-2355">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2355">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f997d-2356">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2356">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2357">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2357">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2358">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2358">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2359">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2359">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2360">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2360">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f997d-2361">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2361">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2362">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2362">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f997d-2363">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2363">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f997d-2364">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="f997d-2364">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f997d-2365">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2365">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f997d-2366">データ</span><span class="sxs-lookup"><span data-stu-id="f997d-2366">Data</span></span>|<span data-ttu-id="f997d-2367">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="f997d-2367">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f997d-2368">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f997d-2368">Delimiting comma or blank line</span></span>|<span data-ttu-id="f997d-2369">Empty</span><span class="sxs-lookup"><span data-stu-id="f997d-2369">Empty</span></span>|  
|<span data-ttu-id="f997d-2370">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f997d-2370">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f997d-2371">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f997d-2371">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f997d-2372">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f997d-2372">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f997d-2373">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="f997d-2373">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f997d-2374">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f997d-2374">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f997d-2375">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f997d-2375">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f997d-2376">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2376">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2377">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2377">The `Input` function is not localized.</span></span> <span data-ttu-id="f997d-2378">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2378">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2379">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2379">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2380">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2380">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2381">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2381">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f997d-2382">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2382">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2383">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2383">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2384">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2384">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2385">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2385">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2386">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2386">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2387">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2387">Required.</span></span> <span data-ttu-id="f997d-2388">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2388">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-2389">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2389">Required.</span></span> <span data-ttu-id="f997d-2390">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2390">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f997d-2391">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2391">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2392">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2392">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2393">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2393">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2394">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2394">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2395">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2395">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f997d-2396">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2396">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2397">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2397">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f997d-2398">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2398">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f997d-2399">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="f997d-2399">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f997d-2400">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2400">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f997d-2401">データ</span><span class="sxs-lookup"><span data-stu-id="f997d-2401">Data</span></span>|<span data-ttu-id="f997d-2402">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="f997d-2402">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f997d-2403">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f997d-2403">Delimiting comma or blank line</span></span>|<span data-ttu-id="f997d-2404">Empty</span><span class="sxs-lookup"><span data-stu-id="f997d-2404">Empty</span></span>|  
|<span data-ttu-id="f997d-2405">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f997d-2405">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f997d-2406">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f997d-2406">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f997d-2407">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f997d-2407">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f997d-2408">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="f997d-2408">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f997d-2409">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f997d-2409">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f997d-2410">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f997d-2410">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f997d-2411">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2411">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2412">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2412">The `Input` function is not localized.</span></span> <span data-ttu-id="f997d-2413">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2413">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2414">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2414">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2415">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2415">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2416">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2416">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f997d-2417">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2417">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2418">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2418">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2419">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2419">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2420">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2420">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2421">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2421">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2422">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2422">Required.</span></span> <span data-ttu-id="f997d-2423">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2423">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-2424">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2424">Required.</span></span> <span data-ttu-id="f997d-2425">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2425">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f997d-2426">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2426">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2427">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2427">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2428">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2428">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2429">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2429">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2430">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2430">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f997d-2431">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2431">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2432">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2432">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f997d-2433">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2433">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f997d-2434">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="f997d-2434">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f997d-2435">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2435">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f997d-2436">データ</span><span class="sxs-lookup"><span data-stu-id="f997d-2436">Data</span></span>|<span data-ttu-id="f997d-2437">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="f997d-2437">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f997d-2438">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f997d-2438">Delimiting comma or blank line</span></span>|<span data-ttu-id="f997d-2439">Empty</span><span class="sxs-lookup"><span data-stu-id="f997d-2439">Empty</span></span>|  
|<span data-ttu-id="f997d-2440">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f997d-2440">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f997d-2441">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f997d-2441">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f997d-2442">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f997d-2442">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f997d-2443">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="f997d-2443">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f997d-2444">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f997d-2444">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f997d-2445">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f997d-2445">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f997d-2446">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2446">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2447">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2447">The `Input` function is not localized.</span></span> <span data-ttu-id="f997d-2448">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2448">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2449">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2449">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2450">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2450">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2451">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2451">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f997d-2452">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2452">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2453">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2453">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2454">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2454">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2455">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2455">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2456">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2456">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2457">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2457">Required.</span></span> <span data-ttu-id="f997d-2458">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2458">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-2459">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2459">Required.</span></span> <span data-ttu-id="f997d-2460">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2460">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f997d-2461">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2461">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2462">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2462">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2463">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2463">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2464">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2464">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2465">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2465">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f997d-2466">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2466">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2467">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2467">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f997d-2468">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2468">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f997d-2469">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="f997d-2469">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f997d-2470">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2470">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f997d-2471">データ</span><span class="sxs-lookup"><span data-stu-id="f997d-2471">Data</span></span>|<span data-ttu-id="f997d-2472">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="f997d-2472">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f997d-2473">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f997d-2473">Delimiting comma or blank line</span></span>|<span data-ttu-id="f997d-2474">Empty</span><span class="sxs-lookup"><span data-stu-id="f997d-2474">Empty</span></span>|  
|<span data-ttu-id="f997d-2475">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f997d-2475">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f997d-2476">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f997d-2476">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f997d-2477">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f997d-2477">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f997d-2478">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="f997d-2478">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f997d-2479">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f997d-2479">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f997d-2480">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f997d-2480">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f997d-2481">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2481">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2482">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2482">The `Input` function is not localized.</span></span> <span data-ttu-id="f997d-2483">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2483">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2484">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2484">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2485">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2485">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2486">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2486">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f997d-2487">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2487">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2488">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2488">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2489">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2489">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2490">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2490">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2491">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2491">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2492">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2492">Required.</span></span> <span data-ttu-id="f997d-2493">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2493">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f997d-2494">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2494">Required.</span></span> <span data-ttu-id="f997d-2495">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2495">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f997d-2496">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2496">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2497">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2497">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2498">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2498">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2499">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2499">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2500">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2500">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f997d-2501">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2501">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2502">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2502">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f997d-2503">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2503">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f997d-2504">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="f997d-2504">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f997d-2505">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2505">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f997d-2506">データ</span><span class="sxs-lookup"><span data-stu-id="f997d-2506">Data</span></span>|<span data-ttu-id="f997d-2507">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="f997d-2507">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f997d-2508">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f997d-2508">Delimiting comma or blank line</span></span>|<span data-ttu-id="f997d-2509">Empty</span><span class="sxs-lookup"><span data-stu-id="f997d-2509">Empty</span></span>|  
|<span data-ttu-id="f997d-2510">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f997d-2510">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f997d-2511">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f997d-2511">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f997d-2512">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f997d-2512">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f997d-2513">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="f997d-2513">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f997d-2514">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f997d-2514">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f997d-2515">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f997d-2515">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f997d-2516">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2516">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2517">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2517">The `Input` function is not localized.</span></span> <span data-ttu-id="f997d-2518">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2518">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2519">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2519">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2520">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2520">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2521">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2521">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f997d-2522">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2522">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2523">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2523">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2524">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2524">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2525">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2525">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2526">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2526">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2527">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2527">Required.</span></span> <span data-ttu-id="f997d-2528">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2528">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="f997d-2529">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2529">Required.</span></span> <span data-ttu-id="f997d-2530">読み込む文字数を指定する有効な任意の数式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2530">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="f997d-2531"><see langword="String" /> モードまたは <see langword="Input" /> モードで開いたファイルから読み取る文字を表す文字列型 (<see langword="Binary" />) の値を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2531">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="f997d-2532"><see langword="My" /> 機能を使用すると、<see langword="InputString" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="f997d-2533">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="f997d-2534"><see langword="String" /> モードまたは <see langword="Input" /> モードで開いたファイルから読み取る文字を表す文字列型 (<see langword="Binary" />) の値を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2534">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="f997d-2535"><see langword="My" /> 機能を使用すると、<see langword="InputString" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2536">`InputString`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2536">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2537">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2537">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2538">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2538">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2539">データを読み取り、`InputString`を使用して関数が記述ファイルには、通常`Print`または`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2539">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="f997d-2540">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f997d-2540">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="f997d-2541">異なり、`Input`関数の場合、`InputString`関数には、そこにすべての文字が返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2541">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="f997d-2542">これには、コンマ、キャリッジ リターン、ライン フィード、引用符、および先頭のスペースが含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2542">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="f997d-2543">開いたファイル`Binary`アクセスを使用してファイルを読み取ろうとして、`InputString`行われるまで`EOF`返します`True`エラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2543">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="f997d-2544">使用して、`LOF`と`Loc`関数の代わりに`EOF`を使用してバイナリ ファイルを読み取るときに`InputString`、使用または`FileGet`を使用すると、`EOF`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2544">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2545">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容に関するセキュリティ上の決定は行いません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2545">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f997d-2546">たとえば、Form1.vb という名前のファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2546">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2547">この例では、`InputString`ファイルから一度に 1 つの文字を読み取りし、印刷をする関数、`Output`ウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="f997d-2547">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="f997d-2548">この例では、`MyFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f997d-2548">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2549"><paramref name="FileNumber" /> は存在しません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2549"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-2550"><paramref name="CharCount" /> は &lt; 0 または &gt; 214 です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2550"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2551">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2551">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2552">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2552">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2553">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2553">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f997d-2554">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2554">Required.</span></span> <span data-ttu-id="f997d-2555">削除する 1 つ以上のファイル名を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2555"><see langword="String" /> expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="f997d-2556"><paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2556"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="f997d-2557">ファイルをディスクから削除します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2557">Deletes files from a disk.</span></span> <span data-ttu-id="f997d-2558"><see langword="My" /> 機能を使用すると、<see langword="Kill" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2558">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="f997d-2559">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2559">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2560">`Kill` 複数の文字の使用をサポートしています (`*`) と 1 文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2560">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f997d-2561">**セキュリティに関する注意**を実行するために、`Kill`関数に必要な`Read`と`PathDiscovery`のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2561">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f997d-2562">詳細については、次を参照してください<xref:System.Security.SecurityException>[コード アクセス許可。](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="f997d-2562">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2563">この例では、`Kill`ディスクからファイルを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2563">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2564">対象のファイルが開かれています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2564">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f997d-2565">対象のファイルが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2565">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f997d-2566">アクセス許可は拒否されました。</span><span class="sxs-lookup"><span data-stu-id="f997d-2566">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2567">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2567">Required.</span></span> <span data-ttu-id="f997d-2568">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2568">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="f997d-2569">開かれたシーケンシャル ファイルから 1 行を読み込み、<see langword="String" /> 変数に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2569">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="f997d-2570">開かれたシーケンシャル ファイルから 1 行を読み込み、<see langword="String" /> 変数に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2570">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2571">`LineInput`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2571">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2572">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2572">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2573">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2573">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2574">データを読み取る`LineInput`を使用して、ファイルに書き込まれますが、通常は`Print`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2574">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2575">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2575">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f997d-2576">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2576">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="f997d-2577">`LineInput`が復帰を検出するまでの時にファイルの 1 文字から関数を読み取ります (`Chr(13)`) またはキャリッジ リターン/ライン フィード (`Chr(13) + Chr(10)`) シーケンス。</span><span class="sxs-lookup"><span data-stu-id="f997d-2577">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="f997d-2578">キャリッジ リターン/ライン フィードのシーケンスは文字の文字列に追加の代わりにスキップされます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2578">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2579">使用して、ファイルから読み取り、`LineInput`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2579">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2580">この例では、`LineInput`シーケンシャル ファイルから行を読み取るを変数に割り当てる関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2580">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="f997d-2581">この例では、`TestFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f997d-2581">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="f997d-2582">ファイルの終端に達しました。</span><span class="sxs-lookup"><span data-stu-id="f997d-2582">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2583"><paramref name="FileNumber" /> は存在しません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2583"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2584">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2584">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2585">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2585">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2586">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2586">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2587">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2587">Required.</span></span> <span data-ttu-id="f997d-2588">有効な任意の <see langword="Integer" /> 型のファイル番号。</span><span class="sxs-lookup"><span data-stu-id="f997d-2588">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="f997d-2589">開かれたファイル内の現在の読み込みと書き込みの位置を指定する <see langword="Long" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2589">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="f997d-2590">開かれたファイル内の現在の読み込みと書き込みの位置を指定する <see langword="Long" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2590">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2591">`Loc`関数は 0 から始まる; ファイルの最初のバイトを取得するために使用すると、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2591">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="f997d-2592">`Loc`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2592">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2593">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2593">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2594">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2594">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2595">各ファイルのアクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2595">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="f997d-2596">モード</span><span class="sxs-lookup"><span data-stu-id="f997d-2596">Mode</span></span>|<span data-ttu-id="f997d-2597">戻り値</span><span class="sxs-lookup"><span data-stu-id="f997d-2597">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f997d-2598">最後のレコードから読み取りまたは書き込みをファイルの数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2598">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="f997d-2599">128 で割ったファイル内の現在のバイト位置。</span><span class="sxs-lookup"><span data-stu-id="f997d-2599">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="f997d-2600">ただし、した情報が返されます。`Loc`のシーケンシャル ファイルは使用も必要です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2600">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="f997d-2601">最後のバイトの読み取りまたは書き込みの位置。</span><span class="sxs-lookup"><span data-stu-id="f997d-2601">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2602">この例では、`Loc`を開いているファイル内の現在の読み取り/書き込み位置を返す関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2602">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="f997d-2603">この例では、`MyFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f997d-2603">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2604">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2604">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f997d-2605"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2605">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f997d-2606"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2606">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f997d-2607">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2607">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2608">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2608">Required.</span></span> <span data-ttu-id="f997d-2609">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2609">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="f997d-2610"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2610">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f997d-2611"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2611">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f997d-2612">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2612">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2613">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2613">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f997d-2614">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2614">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f997d-2615">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2615">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f997d-2616">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2616">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f997d-2617">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2617">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f997d-2618">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2618">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2619">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2619">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f997d-2620">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2620">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2621">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2621">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2622">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2622">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2623">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2623">Required.</span></span> <span data-ttu-id="f997d-2624">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2624">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="f997d-2625">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-2625">Optional.</span></span> <span data-ttu-id="f997d-2626">ロックまたはアンロックされる唯一のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="f997d-2626">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="f997d-2627"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2627">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f997d-2628"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2628">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f997d-2629">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2629">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2630">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2630">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f997d-2631">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2631">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f997d-2632">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2632">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f997d-2633">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2633">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f997d-2634">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2634">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f997d-2635">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2635">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2636">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2636">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f997d-2637">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2637">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2638">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2638">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2639">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2639">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2640">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2640">Required.</span></span> <span data-ttu-id="f997d-2641">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2641">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="f997d-2642">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-2642">Optional.</span></span> <span data-ttu-id="f997d-2643">ロックまたはアンロックされる最初のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="f997d-2643">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="f997d-2644">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-2644">Optional.</span></span> <span data-ttu-id="f997d-2645">ロックまたはアンロックされる最後のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="f997d-2645">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="f997d-2646"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2646">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f997d-2647"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2647">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f997d-2648">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2648">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2649">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2649">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f997d-2650">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2650">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f997d-2651">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2651">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f997d-2652">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2652">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f997d-2653">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2653">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f997d-2654">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2654">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2655">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2655">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f997d-2656">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2656">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2657">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2657">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2658">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2658">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2659">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2659">Required.</span></span> <span data-ttu-id="f997d-2660">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="f997d-2660">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="f997d-2661"><see langword="Long" /> 関数を使用して開かれたファイルのサイズをバイト単位で表す <see langword="FileOpen" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2661">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f997d-2662"><see langword="My" /> 機能を使用すると、<see langword="LOF" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2662">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="f997d-2663">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2663">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="f997d-2664"><see langword="Long" /> 関数を使用して開かれたファイルのサイズをバイト単位で表す <see langword="FileOpen" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2664">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f997d-2665"><see langword="My" /> 機能を使用すると、<see langword="LOF" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2665">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2666">使用して、`FileLen`開かれていないファイルの長さを取得します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2666">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2667">この例では、`LOF`開いているファイルのサイズを決定する関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2667">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="f997d-2668">この例では、`TestFile`はサンプル データを含むテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f997d-2668">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2669">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2669">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-2670">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-2670">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-2671">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-2671">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="f997d-2672">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2672">Required.</span></span> <span data-ttu-id="f997d-2673">作成されるディレクトリを識別する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2673"><see langword="String" /> expression that identifies the directory to be created.</span></span> <span data-ttu-id="f997d-2674"><paramref name="Path" /> にはドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2674">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="f997d-2675">ドライブを指定しない場合、<see langword="MkDir" /> は現在のドライブに新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2675">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="f997d-2676">新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2676">Creates a new directory.</span></span> <span data-ttu-id="f997d-2677"><see langword="My" /> 機能を使用すると、<see langword="MkDir" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2677">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="f997d-2678">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2678">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2679">この関数は、新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2679">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2680">この例では、`MkDir`ディレクトリを作成する関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2680">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="f997d-2681">ドライブが指定されていない場合は、新しいディレクトリが現在のドライブに作成されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2681">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-2682"><paramref name="Path" /> が指定されていません。または空です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2682"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f997d-2683">アクセス許可は拒否されました。</span><span class="sxs-lookup"><span data-stu-id="f997d-2683">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2684">ディレクトリが既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2684">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md"><span data-ttu-id="f997d-2685">方法 : Visual Basic でディレクトリを作成する</span><span class="sxs-lookup"><span data-stu-id="f997d-2685">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2686">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2686">Required.</span></span> <span data-ttu-id="f997d-2687">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2687">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="f997d-2688">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-2688">Optional.</span></span> <span data-ttu-id="f997d-2689">ファイルへ書き込む 0 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2689">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="f997d-2690"><paramref name="Output" /> 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="f997d-2690">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="f997d-2691"><see langword="T:System.IO.IOException" />: ファイル モードが有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2691"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="f997d-2692"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2692"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="f997d-2693">表示形式データをシーケンシャル ファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2693">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2694">`Print`と`PrintLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2694">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2695">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2695">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2696">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2696">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2697">`Print` 行の最後に、改行は含まれませんただし、`PrintLine`改行にが含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2697">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="f997d-2698">書き込まれたデータ`Print`を使用してファイルから通常の読み取りは`LineInput`または`Input`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2698">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="f997d-2699">省略した場合`Output`の`PrintLine`、ファイルには、空行が出力`Print`、何も出力します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2699">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="f997d-2700">タブの境界が混合コンマ上をコンマで区切られた複数の式に配置され、`TAB`矛盾した結果が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2700">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="f997d-2701">`Boolean`データか、`True`または`False`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2701">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="f997d-2702">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f997d-2702">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="f997d-2703">日付データは、システムによって認識される標準の短い日付形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2703">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="f997d-2704">日付または時刻部分のいずれかが不足している、または 0 の場合は、提供された部分のみが、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2704">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="f997d-2705">場合、ファイルに何も書き込まれませんが`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2705">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f997d-2706">ただし場合、`Output`リスト データは`DBNull`、`Null`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2706">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="f997d-2707">`Error`として、データ、出力が表示されます`Error errorcode`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2707">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="f997d-2708">`Error`キーワードは、ロケールに関係なくは翻訳されません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2708">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="f997d-2709">使用して、ファイルに書き込まれたすべてのデータ`Print`が国際的に対応しています。 つまり、データの形式が正しく、適切な 10 進区切り記号。</span><span class="sxs-lookup"><span data-stu-id="f997d-2709">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="f997d-2710">ユーザーが複数のロケールで使用するためのデータを出力する場合`Write`使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2710">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="f997d-2711">使用して、ファイルへの書き込み、`Print`または`PrintLine`functions が必要です`Write`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2711">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2712">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2712">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2713">この例では、`Print`と`PrintLine`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2713">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2714">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2714">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2715">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2715">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2716">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2716">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2717">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2717">Required.</span></span> <span data-ttu-id="f997d-2718">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2718">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="f997d-2719">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-2719">Optional.</span></span> <span data-ttu-id="f997d-2720">ファイルへ書き込む 0 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2720">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="f997d-2721"><paramref name="Output" /> 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="f997d-2721">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="f997d-2722"><see langword="T:System.IO.IOException" />: ファイル モードが有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2722"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="f997d-2723"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2723"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="f997d-2724">表示形式データをシーケンシャル ファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2724">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2725">`Print`と`PrintLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2725">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2726">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2726">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2727">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2727">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2728">`Print` 行の最後に、改行は含まれませんただし、`PrintLine`改行にが含まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2728">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="f997d-2729">書き込まれたデータ`Print`を使用してファイルから通常の読み取りは`LineInput`または`Input`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2729">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="f997d-2730">省略した場合`Output`の`PrintLine`、ファイルには、空行が出力`Print`、何も出力します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2730">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="f997d-2731">タブの境界が混合コンマ上をコンマで区切られた複数の式に配置され、`TAB`矛盾した結果が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2731">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="f997d-2732">`Boolean`データか、`True`または`False`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2732">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="f997d-2733">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f997d-2733">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="f997d-2734">日付データは、システムによって認識される標準の短い日付形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2734">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="f997d-2735">日付または時刻部分のいずれかが不足している、または 0 の場合は、提供された部分のみが、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2735">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="f997d-2736">場合、ファイルに何も書き込まれませんが`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2736">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f997d-2737">ただし場合、`Output`リスト データは`DBNull`、`Null`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2737">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="f997d-2738">`Error`として、データ、出力が表示されます`Error errorcode`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2738">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="f997d-2739">`Error`キーワードは、ロケールに関係なくは翻訳されません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2739">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="f997d-2740">使用して、ファイルに書き込まれたすべてのデータ`Print`が国際的に対応しています。 つまり、データの形式が正しく、適切な 10 進区切り記号。</span><span class="sxs-lookup"><span data-stu-id="f997d-2740">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="f997d-2741">ユーザーが複数のロケールで使用するためのデータを出力する場合`Write`使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2741">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="f997d-2742">使用して、ファイルへの書き込み、`Print`または`PrintLine`functions が必要です`Write`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-2742">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-2743">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2743">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2744">この例では、`Print`と`PrintLine`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2744">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2745">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2745">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-2746">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2746">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-2747">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-2747">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="f997d-2748">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2748">Required.</span></span> <span data-ttu-id="f997d-2749">既存のファイルの名前と場所を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2749"><see langword="String" /> expression that specifies the existing file name and location.</span></span> <span data-ttu-id="f997d-2750"><paramref name="OldPath" /> には、ファイルのディレクトリおよびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2750"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="f997d-2751">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2751">Required.</span></span> <span data-ttu-id="f997d-2752">新しいファイルの名前と場所を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2752"><see langword="String" /> expression that specifies the new file name and location.</span></span> <span data-ttu-id="f997d-2753"><paramref name="NewPath" /> には、出力先のディレクトリおよびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2753"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="f997d-2754"><paramref name="NewPath" /> には、既に存在しているファイル名は指定できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2754">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="f997d-2755">ディスク ファイルまたはディレクトリの名前を変更します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2755">Renames a disk file or directory.</span></span> <span data-ttu-id="f997d-2756"><see langword="My" /> 機能を使用すると、<see langword="Rename" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2756">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="f997d-2757">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2757">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2758">`Rename`関数は、ファイルの名前を変更し、必要な場合は、別のディレクトリに移動します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2758">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="f997d-2759">`Rename`関数は、ドライブ間でファイルを移動できますが、既存のディレクトリ名前のみ変更できますと両方`NewPath`と`OldPath`同じドライブ上にあります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2759">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="f997d-2760">`Rename` 新しいファイルまたはディレクトリを作成することはできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2760">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="f997d-2761">使用して、`Rename`関数ファイルを開くには、エラーを生成します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2761">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="f997d-2762">名前を変更する前に、開いているファイルを閉じる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2762">You must close an open file before renaming it.</span></span> <span data-ttu-id="f997d-2763">`Rename` 引数には、複数の文字 (\*) および 1 文字 (?) のワイルドカードを含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2763">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f997d-2764">使用する場合`Rename`保護されていない場所からファイルを保護された場所にコピーするファイルは制限の少ない権限を保持します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2764">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="f997d-2765">セキュリティ リスクの可能性を大きくしないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2765">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2766">この例では、`Rename`ファイルの名前を変更する関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2766">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="f997d-2767">この例では、既に指定されているディレクトリが存在すると仮定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2767">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-2768">パスが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2768">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f997d-2769"><paramref name="OldPath" /> ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2769"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2770">異なるデバイスには名前を変更できません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2770">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md"><span data-ttu-id="f997d-2771">方法 : Visual Basic でファイルの名前を変更する</span><span class="sxs-lookup"><span data-stu-id="f997d-2771">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f997d-2772"><see langword="FileOpen" /> 関数を使用して開いたすべてのディスク ファイルを閉じます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2772">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f997d-2773"><see langword="My" /> 機能を使用すると、<see langword="Reset" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="f997d-2774">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2775">`Reset`関数によって開かれたすべてのアクティブなファイルを閉じ、`FileOpen`関数と同じ機能があり`FileClose()`パラメーターなし。</span><span class="sxs-lookup"><span data-stu-id="f997d-2775">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2776">この例では、`Reset`を開いているすべてのファイルを閉じて、すべてのファイル バッファーの内容をディスクに書き込む関数です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2776">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="f997d-2777">使用に注意してください、`Object`変数`FileNumber`文字列と数値の両方として。</span><span class="sxs-lookup"><span data-stu-id="f997d-2777">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="f997d-2778">End ステートメント</span><span class="sxs-lookup"><span data-stu-id="f997d-2778">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="f997d-2779">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2779">Required.</span></span> <span data-ttu-id="f997d-2780">削除するディレクトリまたはフォルダーを識別する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2780"><see langword="String" /> expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="f997d-2781"><paramref name="Path" /> にはドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2781"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="f997d-2782">ドライブを指定しない場合、<see langword="RmDir" /> は現在のドライブのディレクトリを削除します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2782">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="f997d-2783">既存のディレクトリを削除します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2783">Removes an existing directory.</span></span> <span data-ttu-id="f997d-2784"><see langword="My" /> 機能を使用すると、<see langword="RmDir" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="f997d-2785">詳細については、「<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2785">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2786">使用しようとする場合にエラーが発生した`RmDir`ファイルを含むディレクトリにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-2786">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="f997d-2787">使用して、`Kill`ディレクトリを削除しようとする前に、すべてのファイルを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2787">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2788">この例では、`RmDir`既存のディレクトリを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2788">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-2789"><paramref name="Path" /> が指定されていません。または空です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2789"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2790">対象のディレクトリにファイルが存在しています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2790">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f997d-2791">ディレクトリが存在していません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2791">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f997d-2792"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2792">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f997d-2793"><see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2793">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="f997d-2794">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2794">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2795">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2795">Required.</span></span> <span data-ttu-id="f997d-2796">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="f997d-2796">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="f997d-2797"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2797">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f997d-2798"><see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2798">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="f997d-2799">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2799">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="f997d-2800"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2800">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2801">`Seek` 1 から 2,147, 483,647 の値を返します (= 2 ^31-1) と、包括的です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2801">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="f997d-2802">各ファイルのアクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2802">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="f997d-2803">モード</span><span class="sxs-lookup"><span data-stu-id="f997d-2803">Mode</span></span>|<span data-ttu-id="f997d-2804">戻り値</span><span class="sxs-lookup"><span data-stu-id="f997d-2804">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f997d-2805">次のレコードの読み取りまたは書き込みの数</span><span class="sxs-lookup"><span data-stu-id="f997d-2805">Number of the next record read or written</span></span>|  
|<span data-ttu-id="f997d-2806">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="f997d-2806">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="f997d-2807">バイトの位置が次の操作が発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2807">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="f997d-2808">ファイルの最初のバイト位置 1、2 番目のバイトが位置 2、という具合になります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2808">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2809">この例では、`Seek`関数を現在の位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2809">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="f997d-2810">この例では`TestFile`構造体のレコードを含むファイル`Record`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2810">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="f997d-2811">ファイルを開くの`Random`モード、`Seek`次のレコードの数を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2811">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="f997d-2812">以外のモードで開いているファイルの`Random`モード、`Seek`次のバイト位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2812">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f997d-2813">想定`TestFile`は数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f997d-2813">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="f997d-2814">この例では、`Seek`関数またはファイルに書き込みを次の読み取り位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2814">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="f997d-2815">以外のモードで開いているファイルの`Random`モード、`Seek`次のバイト位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2815">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f997d-2816">想定`TestFile`は数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f997d-2816">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2817">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2817">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-2818">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-2818">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-2819">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-2819">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2820">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2820">Required.</span></span> <span data-ttu-id="f997d-2821">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="f997d-2821">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="f997d-2822">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2822">Required.</span></span> <span data-ttu-id="f997d-2823">次の読み書き操作が発生する場所を示す 1 ～ 2,147,483,647 の範囲の数値。</span><span class="sxs-lookup"><span data-stu-id="f997d-2823">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="f997d-2824"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2824">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f997d-2825"><see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2825">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="f997d-2826">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2826">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2827">`Seek` 1 から 2,147, 483,647 の値を返します (= 2 ^31-1) と、包括的です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2827">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="f997d-2828">各ファイルのアクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2828">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="f997d-2829">モード</span><span class="sxs-lookup"><span data-stu-id="f997d-2829">Mode</span></span>|<span data-ttu-id="f997d-2830">戻り値</span><span class="sxs-lookup"><span data-stu-id="f997d-2830">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f997d-2831">次のレコードの読み取りまたは書き込みの数</span><span class="sxs-lookup"><span data-stu-id="f997d-2831">Number of the next record read or written</span></span>|  
|<span data-ttu-id="f997d-2832">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="f997d-2832">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="f997d-2833">バイトの位置が次の操作が発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2833">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="f997d-2834">ファイルの最初のバイト位置 1、2 番目のバイトが位置 2、という具合になります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2834">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2835">この例では、`Seek`関数を現在の位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2835">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="f997d-2836">この例では`TestFile`構造体のレコードを含むファイル`Record`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2836">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="f997d-2837">ファイルを開くの`Random`モード、`Seek`次のレコードの数を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2837">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="f997d-2838">以外のモードで開いているファイルの`Random`モード、`Seek`次のバイト位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2838">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f997d-2839">想定`TestFile`は数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f997d-2839">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="f997d-2840">この例では、`Seek`関数またはファイルに書き込みを次の読み取り位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2840">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="f997d-2841">以外のモードで開いているファイルの`Random`モード、`Seek`次のバイト位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2841">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f997d-2842">想定`TestFile`は数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f997d-2842">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2843">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2843">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="f997d-2844">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="f997d-2844">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="f997d-2845">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="f997d-2845">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f997d-2846">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2846">Required.</span></span> <span data-ttu-id="f997d-2847">ファイル名を指定する <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2847"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="f997d-2848"><paramref name="PathName" /> にはディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2848"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="f997d-2849">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2849">Required.</span></span> <span data-ttu-id="f997d-2850">定数式または数式の合計がファイル属性を指定する場合の定数式または数式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2850">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="f997d-2851">ファイルの属性情報を設定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2851">Sets attribute information for a file.</span></span> <span data-ttu-id="f997d-2852"><see langword="My" /> 機能を使用すると、<see langword="SetAttr" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2852">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="f997d-2853">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2853">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2854">開いているファイルの属性を設定しようとする場合、実行時エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2854">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="f997d-2855">`Attributes`列挙値の引数は次のようにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-2855">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f997d-2856">[値]</span><span class="sxs-lookup"><span data-stu-id="f997d-2856">Value</span></span>|<span data-ttu-id="f997d-2857">定数</span><span class="sxs-lookup"><span data-stu-id="f997d-2857">Constant</span></span>|<span data-ttu-id="f997d-2858">説明</span><span class="sxs-lookup"><span data-stu-id="f997d-2858">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="f997d-2859">標準 (既定値)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2859">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f997d-2860">読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="f997d-2860">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f997d-2861">非表示。</span><span class="sxs-lookup"><span data-stu-id="f997d-2861">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f997d-2862">システム ファイル。</span><span class="sxs-lookup"><span data-stu-id="f997d-2862">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f997d-2863">ボリューム ラベル</span><span class="sxs-lookup"><span data-stu-id="f997d-2863">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f997d-2864">ディレクトリまたはフォルダー。</span><span class="sxs-lookup"><span data-stu-id="f997d-2864">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f997d-2865">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2865">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f997d-2866">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2866">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2867">これらの列挙体は Visual Basic 言語によって指定されています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2867">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="f997d-2868">名前は、実際の値ではなく、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2868">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2869">この例では、`SetAttr`ファイルの属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2869">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f997d-2870"><paramref name="Attribute" /> の型が無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2870"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="f997d-2871">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2871">Required.</span></span> <span data-ttu-id="f997d-2872">リストの次の式を表示または出力する前に挿入する空白の数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2872">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="f997d-2873"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2873">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="f997d-2874"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2875">場合`Count`が出力線の幅、次の出力位置にすぐに次の空白の数よりも少ない。</span><span class="sxs-lookup"><span data-stu-id="f997d-2875">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="f997d-2876">場合`Count`が出力の線の幅よりも大きい`SPC`数式を使用して、次の出力位置が計算されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2876">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f997d-2877">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="f997d-2877">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="f997d-2878">たとえば、現在の出力位置が 24 の場合は、出力行の幅は 80、しを指定する`SPC(90)`、次の出力は 34 (現在の印刷位置 + 90/80 の残りの部分) の位置から開始します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2878">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="f997d-2879">現在の出力位置と出力の線の幅の違いがある場合より小さい`Count`(または`Count` `Mod` *幅*)、`SPC`関数は、次の行の先頭にはスキップし、生成されます空白と等しく`Count`– (*幅*–*桁数*)。</span><span class="sxs-lookup"><span data-stu-id="f997d-2879">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2880">ワイド文字のための十分な表の列があることを確認します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2880">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2881">この例では、`SPC`関数ファイルと出力の位置を**出力**ウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="f997d-2881">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="f997d-2882">Mod 演算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2882">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f997d-2883"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2883">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f997d-2884"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2884">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="f997d-2885"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2885">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2886">現在の行に現在の出力位置がより大きいかどうか`Column`、`TAB`列の値と等しいにスキップ`Column`次の出力行にします。</span><span class="sxs-lookup"><span data-stu-id="f997d-2886">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="f997d-2887">場合`Column`が 1 より小さい、`TAB`印刷位置を 1 列目に移動します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2887">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="f997d-2888">場合`Column`出力線の幅よりも大きい`TAB`数式を使用して、次の出力位置が計算されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2888">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f997d-2889">Mod の列の幅</span><span class="sxs-lookup"><span data-stu-id="f997d-2889">Column Mod width</span></span>  
  
 <span data-ttu-id="f997d-2890">たとえば場合、*幅*80 は、指定した`TAB(90)`10 (残り 90/80 の) 列に、次の出力が開始されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2890">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="f997d-2891">場合`Column`が現在の出力の位置、計算の印刷位置にある次の行に印刷を開始未満です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2891">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="f997d-2892">計算された出力位置が現在の印刷位置よりも大きい場合は、同じ行に位置が印刷計算された印刷を開始します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2892">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="f997d-2893">出力行の左端の出力位置は 1 では常にです。</span><span class="sxs-lookup"><span data-stu-id="f997d-2893">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="f997d-2894">使用すると、`Print`または`PrintLine`ファイルは、印刷する機能右端からの出力位置が現在の幅を使用して設定できる出力ファイルの`FileWidth`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2894">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="f997d-2895">`TAB`関数はでも使用できます、`WriteLine`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2895">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="f997d-2896">は使用できません<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>または<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2896">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2897">ワイド文字の十分な表の列があることを確認します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2897">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2898">この例では、`TAB`関数ファイルと出力の位置を**出力**ウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="f997d-2898">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="f997d-2899">Mod 演算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2899">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="f997d-2900">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-2900">Optional.</span></span> <span data-ttu-id="f997d-2901">リスト内の次の式を表示または出力する前に移動する先の列番号。</span><span class="sxs-lookup"><span data-stu-id="f997d-2901">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="f997d-2902">省略した場合、<see langword="TAB" /> は挿入位置を次の印字領域の最初に移動します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2902">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="f997d-2903"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2903">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="f997d-2904"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2904">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2905">現在の行に現在の出力位置がより大きいかどうか`Column`、`TAB`列の値と等しいにスキップ`Column`次の出力行にします。</span><span class="sxs-lookup"><span data-stu-id="f997d-2905">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="f997d-2906">場合`Column`が 1 より小さい、`TAB`印刷位置を 1 列目に移動します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2906">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="f997d-2907">場合`Column`が出力の線の幅よりも大きい`TAB`数式を使用して、次の出力位置が計算されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2907">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f997d-2908">Mod の列の幅</span><span class="sxs-lookup"><span data-stu-id="f997d-2908">Column Mod width</span></span>  
  
 <span data-ttu-id="f997d-2909">たとえば場合、*幅*80 は、指定した`TAB(90)`10 (残り 90/80 の) 列に、次の出力が開始されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2909">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="f997d-2910">場合`Column`が現在の出力の位置、計算の印刷位置にある次の行に印刷を開始未満です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2910">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="f997d-2911">計算された出力位置が現在の印刷位置よりも大きい場合は、同じ行に位置が印刷計算された印刷を開始します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2911">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="f997d-2912">出力行の左端の出力位置は 1 では常にです。</span><span class="sxs-lookup"><span data-stu-id="f997d-2912">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="f997d-2913">使用すると、`Print`または`PrintLine`ファイルは、印刷する機能右端からの出力位置が現在の幅を使用して設定できる出力ファイルの`FileWidth`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2913">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="f997d-2914">`TAB`関数はでも使用できます、`WriteLine`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2914">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="f997d-2915">は使用できません<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>または<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2915">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f997d-2916">ワイド文字の十分な表の列があることを確認します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2916">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2917">この例では、`TAB`関数ファイルと出力の位置を**出力**ウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="f997d-2917">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="f997d-2918">Mod 演算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-2918">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f997d-2919"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2919">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f997d-2920"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2920">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f997d-2921">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2921">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2922">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2922">Required.</span></span> <span data-ttu-id="f997d-2923">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2923">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="f997d-2924"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2924">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f997d-2925"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2925">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f997d-2926">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2926">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2927">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2927">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f997d-2928">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2928">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f997d-2929">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2929">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f997d-2930">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2930">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f997d-2931">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2931">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f997d-2932">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2932">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2933">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2933">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f997d-2934">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2934">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2935">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2935">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2936">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2936">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2937">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2937">Required.</span></span> <span data-ttu-id="f997d-2938">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2938">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="f997d-2939">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-2939">Optional.</span></span> <span data-ttu-id="f997d-2940">ロックまたはアンロックされる唯一のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="f997d-2940">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="f997d-2941"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2941">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f997d-2942"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2942">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f997d-2943">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2943">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2944">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2944">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f997d-2945">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2945">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f997d-2946">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2946">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f997d-2947">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2947">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f997d-2948">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2948">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f997d-2949">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2949">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2950">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2950">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f997d-2951">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2951">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2952">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2952">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2953">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2953">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2954">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2954">Required.</span></span> <span data-ttu-id="f997d-2955">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2955">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="f997d-2956">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-2956">Optional.</span></span> <span data-ttu-id="f997d-2957">ロックまたはアンロックされる最初のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="f997d-2957">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="f997d-2958">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-2958">Optional.</span></span> <span data-ttu-id="f997d-2959">ロックまたはアンロックされる最後のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="f997d-2959">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="f997d-2960"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2960">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f997d-2961"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2961">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f997d-2962">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-2962">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2963">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2963">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f997d-2964">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2964">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f997d-2965">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2965">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f997d-2966">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2966">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f997d-2967">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2967">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f997d-2968">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2968">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-2969">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f997d-2969">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f997d-2970">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2970">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-2971">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2971">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-2972">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-2972">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-2973">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-2973">Required.</span></span> <span data-ttu-id="f997d-2974">任意の有効なファイル数を含む <see langword="Integer" /> 式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2974">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="f997d-2975">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-2975">Optional.</span></span> <span data-ttu-id="f997d-2976">ファイルへ書き込む 1 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="f997d-2976">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="f997d-2977">シーケンシャル ファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2977">Writes data to a sequential file.</span></span> <span data-ttu-id="f997d-2978"><see langword="Write" /> を使用して書き込まれたデータは通常、<see langword="Input" /> を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2978">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-2979">`Write`と`WriteLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-2979">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-2980">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2980">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-2981">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2981">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-2982">省略した場合`Output`、空白行がファイルに出力します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2982">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="f997d-2983">複数の式は、コンマで区切ってことができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2983">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="f997d-2984">異なり、`Print`関数の場合、`Write`関数は、ファイルに書き込まれる項目と文字列を囲む引用符の間にコンマを挿入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2984">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="f997d-2985">一覧に明示的な区切り記号を配置する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-2985">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="f997d-2986">ときに`Write`ファイルにのみ数値データの書き込みに使用`Boolean`、日付、null の場合、および`Error`データ形式がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="f997d-2986">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="f997d-2987">データが読み取ることができ、正しく解釈されません。 を使用して、次の前提が後に`Input`ロケールに関係なく、します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2987">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="f997d-2988">数値データには、小数点区切り文字としてピリオドを使用して常に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2988">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="f997d-2989">`Boolean`データか、`#TRUE#`または`#FALSE#`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2989">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="f997d-2990">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f997d-2990">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="f997d-2991">日付データは、汎用の日付形式を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2991">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="f997d-2992">日付または時刻部分のいずれかが不足している、または 0 の場合は、提供された部分のみが、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2992">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="f997d-2993">場合、ファイルに何も書き込まれませんが`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2993">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f997d-2994">ただし、null のデータの`#NULL#`が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-2994">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="f997d-2995">`Error`として、データ、出力が表示されます`#ERROR errorcode#`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2995">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="f997d-2996">`Error`ロケールに関係なくキーワードはない変換します。</span><span class="sxs-lookup"><span data-stu-id="f997d-2996">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="f997d-2997">`WriteLine` 改行文字を挿入します (つまり、キャリッジ リターン/ライン フィード、または`Chr(13) + Chr(10)`) 最後の文字、記述後、`Output`ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-2997">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="f997d-2998">二重引用符を使用して文字列に引用符を埋め込むことができます、または""です。</span><span class="sxs-lookup"><span data-stu-id="f997d-2998">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="f997d-2999">たとえば、オブジェクトに適用された</span><span class="sxs-lookup"><span data-stu-id="f997d-2999">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="f997d-3000">文字列の値を返します`Double quotation marks aren't "difficult" to handle`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-3000">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="f997d-3001">使用して、ファイルへの書き込み、`Write`または`WriteLine`functions が必要です`Append`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-3001">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-3002">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-3002">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-3003">この例では、`Write`関数には生データをシーケンシャル ファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-3003">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f997d-3004">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="f997d-3004">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-3005">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-3005">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-3006">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-3006">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-3007">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-3007">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f997d-3008">必須。</span><span class="sxs-lookup"><span data-stu-id="f997d-3008">Required.</span></span> <span data-ttu-id="f997d-3009">任意の有効なファイル数を含む <see langword="Integer" /> 式。</span><span class="sxs-lookup"><span data-stu-id="f997d-3009">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="f997d-3010">任意。</span><span class="sxs-lookup"><span data-stu-id="f997d-3010">Optional.</span></span> <span data-ttu-id="f997d-3011">ファイルへ書き込む 1 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="f997d-3011">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="f997d-3012">シーケンシャル ファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f997d-3012">Writes data to a sequential file.</span></span> <span data-ttu-id="f997d-3013"><see langword="Write" /> を使用して書き込まれたデータは通常、<see langword="Input" /> を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-3013">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f997d-3014">`Write`と`WriteLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f997d-3014">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f997d-3015">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f997d-3015">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f997d-3016">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="f997d-3016">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f997d-3017">省略した場合`Output`、空白行がファイルに出力します。</span><span class="sxs-lookup"><span data-stu-id="f997d-3017">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="f997d-3018">複数の式は、コンマで区切ってことができます。</span><span class="sxs-lookup"><span data-stu-id="f997d-3018">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="f997d-3019">異なり、`Print`関数の場合、`Write`関数は、ファイルに書き込まれる項目と文字列を囲む引用符の間にコンマを挿入します。</span><span class="sxs-lookup"><span data-stu-id="f997d-3019">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="f997d-3020">一覧に明示的な区切り記号を配置する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="f997d-3020">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="f997d-3021">ときに`Write`ファイルにのみ数値データの書き込みに使用`Boolean`、日付、null の場合、および`Error`データ形式がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="f997d-3021">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="f997d-3022">データが読み取ることができ、正しく解釈されません。 を使用して、次の前提が後に`Input`ロケールに関係なく、します。</span><span class="sxs-lookup"><span data-stu-id="f997d-3022">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="f997d-3023">数値データには、小数点区切り文字としてピリオドを使用して常に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-3023">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="f997d-3024">`Boolean`データか、`#TRUE#`または`#FALSE#`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f997d-3024">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="f997d-3025">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f997d-3025">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="f997d-3026">日付データは、汎用の日付形式を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-3026">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="f997d-3027">日付または時刻部分のいずれかが不足している、または 0 の場合は、提供された部分のみが、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-3027">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="f997d-3028">場合、ファイルに何も書き込まれませんが`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="f997d-3028">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f997d-3029">ただし、null のデータの`#NULL#`が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f997d-3029">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="f997d-3030">`Error`として、データ、出力が表示されます`#ERROR errorcode#`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-3030">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="f997d-3031">`Error`ロケールに関係なくキーワードはない変換します。</span><span class="sxs-lookup"><span data-stu-id="f997d-3031">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="f997d-3032">`WriteLine` 改行文字を挿入します (つまり、キャリッジ リターン/ライン フィード、または`Chr(13) + Chr(10)`) 最後の文字、記述後、`Output`ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="f997d-3032">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="f997d-3033">二重引用符を使用して文字列に引用符を埋め込むことができます、または""です。</span><span class="sxs-lookup"><span data-stu-id="f997d-3033">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="f997d-3034">たとえば、オブジェクトに適用された</span><span class="sxs-lookup"><span data-stu-id="f997d-3034">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="f997d-3035">文字列の値を返します`Double quotation marks aren't "difficult" to handle`します。</span><span class="sxs-lookup"><span data-stu-id="f997d-3035">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="f997d-3036">使用して、ファイルへの書き込み、`Write`または`WriteLine`functions が必要です`Append`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="f997d-3036">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f997d-3037">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f997d-3037">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f997d-3038">この例では、`Write`関数には生データをシーケンシャル ファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f997d-3038">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="f997d-3039">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="f997d-3039">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="f997d-3040">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="f997d-3040">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="f997d-3041">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="f997d-3041">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>