<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="76423e19c418e3145c1946201eeb07bad53c0200" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39908795" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="17862-101">
        <see langword="FileSystem" /> モジュールに含まれるプロシージャを使って、ファイル、ディレクトリ、またはフォルダー、およびシステムの操作を実行します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="17862-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="17862-102">
        <see langword="My" /> 機能を使用すると、<see langword="FileSystem" /> モジュールを使用した場合よりファイル I/O 操作の生産性およびパフォーマンスが向上します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="17862-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="17862-103">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
      <span class="sxs-lookup">
        <span data-stu-id="17862-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-104">このモジュールは、Visual Basic 言語のキーワードおよびファイルとフォルダーにアクセスするランタイム ライブラリ メンバーをサポートします。</span><span class="sxs-lookup"><span data-stu-id="17862-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-105">この例では、`GetAttr`ファイルとディレクトリまたはフォルダーの属性を確認する関数。</span><span class="sxs-lookup"><span data-stu-id="17862-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="17862-106">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-106">Required.</span>
          </span>
          <span data-ttu-id="17862-107">新しい既定ディレクトリまたはフォルダーになるディレクトリまたはフォルダーを識別する <see langword="String" /> 式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="17862-108">
            <c>Path</c> にはドライブを含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-108">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="17862-109">ドライブを指定しない場合、<see langword="ChDir" /> は現在のドライブの既定ディレクトリまたは既定フォルダーを変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-110">現在のディレクトリまたはフォルダーを変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-110">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="17862-111">
            <see langword="My" /> 機能を使用すると、<see langword="ChDir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="17862-112">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-113">`ChDir`関数は、既定のディレクトリが既定のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="17862-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="17862-114">たとえば、既定のドライブが C の場合は、次のステートメントは変更既定のディレクトリをドライブ D、C が既定のドライブに残ります。</span><span class="sxs-lookup"><span data-stu-id="17862-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="17862-115">相対に行うことができますディレクトリの変更は、次のように 2 つのピリオドを入力します。</span><span class="sxs-lookup"><span data-stu-id="17862-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-116">`ChDir`関数が部分的に信頼された状況では、その実行に影響を与えるアンマネージ コードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="17862-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="17862-117">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>とします。</span><span class="sxs-lookup"><span data-stu-id="17862-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-118">この例では、`ChDir`を現在のディレクトリまたはフォルダーを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="17862-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-119">
            <paramref name="Path" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-119">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="17862-120">指定されたドライブが無効です。または利用できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-120">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="17862-121">現在のドライブを変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-121">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="17862-122">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-122">Required.</span>
          </span>
          <span data-ttu-id="17862-123">既存のドライブを指定する文字列式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-123">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="17862-124">長さ 0 の文字列 ("") を指定した場合、現在のドライブは変更されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-124">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="17862-125">
            <c>Drive</c> 引数が複数の文字で構成される文字列の場合、<see langword="ChDrive" /> は先頭の文字だけを使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-126">現在のドライブを変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-126">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-127">`ChDrive`関数が部分的に信頼された状況では、その実行に影響を与えるアンマネージ コードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="17862-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="17862-128">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="17862-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-129">この例では、`ChDrive`を現在のドライブを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="17862-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="17862-130">関数は、ドライブが存在しない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="17862-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-131">指定されたドライブが無効です。または利用できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-131">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="17862-132">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-132">Required.</span>
          </span>
          <span data-ttu-id="17862-133">既存のドライブを指定する文字列式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-133">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="17862-134">長さ 0 の文字列 ("") を指定した場合、現在のドライブは変更されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-134">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="17862-135">
            <c>Drive</c> 引数が複数の文字で構成される文字列の場合、<see langword="ChDrive" /> は先頭の文字だけを使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-136">現在のドライブを変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-136">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-137">`ChDrive`関数が部分的に信頼された状況では、その実行に影響を与えるアンマネージ コードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="17862-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="17862-138">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="17862-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-139">この例では、`ChDrive`を現在のドライブを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="17862-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="17862-140">関数は、ドライブが存在しない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="17862-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-141">指定されたドライブが無効です。または利用できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-141">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="17862-142">現在のパスを表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-142">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="17862-143">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="17862-144">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="17862-145">現在のパスを表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-145">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="17862-146">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="17862-147">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-148">現在のパスを表す文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-148">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="17862-149">この例では、`CurDir`関数を現在のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="17862-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="17862-150">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-150">Optional.</span>
          </span>
          <span data-ttu-id="17862-151">既存のドライブを指定する <see langword="Char" /> 式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-151">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="17862-152">ドライブが指定されていない場合、または <c>Drive</c> が長さ 0 の文字列 ("") である場合は、<see langword="CurDir" /> により現在のドライブのパスが返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-153">現在のパスを表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="17862-154">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="17862-155">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-156">現在のパスを表す文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="17862-157">この例では、`CurDir`関数を現在のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="17862-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="17862-158">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="17862-159">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="17862-160">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="17862-161">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="17862-162">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="17862-163">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-164">指定されたパターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-165">`Dir`関数は、複数の文字の使用をサポートしています (`*`) と 1 文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="17862-166">`VbVolume` 特定のファイル名の代わりに、ドライブのボリューム ラベルを返します。</span><span class="sxs-lookup"><span data-stu-id="17862-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="17862-167">指定する必要があります、`PathName`初めて呼び出す、`Dir`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="17862-168">次の項目を取得するには、後続の呼び出しを行うことができます、`Dir`パラメーターなしの関数。</span><span class="sxs-lookup"><span data-stu-id="17862-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-169">正常に実行する、`Dir`関数に必要な<xref:System.Security.Permissions.FileIOPermissionAccess.Read>と<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="17862-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="17862-170">詳細については、次を参照してください。 <xref:System.Security.Permissions.FileIOPermission>、 <xref:System.Security.SecurityException>、および[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="17862-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="17862-171">`Attributes`列挙値の引数は次のようにします。</span><span class="sxs-lookup"><span data-stu-id="17862-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="17862-172">[値]</span><span class="sxs-lookup"><span data-stu-id="17862-172">Value</span></span>|<span data-ttu-id="17862-173">定数</span><span class="sxs-lookup"><span data-stu-id="17862-173">Constant</span></span>|<span data-ttu-id="17862-174">説明</span><span class="sxs-lookup"><span data-stu-id="17862-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="17862-175">既定モード。</span><span class="sxs-lookup"><span data-stu-id="17862-175">Default.</span></span> <span data-ttu-id="17862-176">属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="17862-177">属性のないファイルや読み取り専用ファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="17862-178">属性のないファイルや隠しファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="17862-179">システム ファイル、およびも属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="17862-180">ボリューム ラベルを指定しますその他の属性が指定されている場合`vbVolume`は無視されます。</span><span class="sxs-lookup"><span data-stu-id="17862-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="17862-181">ディレクトリまたはフォルダー、およびも属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="17862-182">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="17862-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="17862-183">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="17862-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="17862-184">これらの列挙体は、Visual Basic 言語によって指定され、実際の値ではなく、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="17862-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-185">この例では、`Dir`関数を特定のファイルおよびディレクトリの存在を確認します。</span><span class="sxs-lookup"><span data-stu-id="17862-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="17862-186">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-186">Optional.</span>
          </span>
          <span data-ttu-id="17862-187">ファイル名、ディレクトリまたはフォルダー名、あるいはドライブ ボリューム ラベルを指定する <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-187">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="17862-188">
            <c>PathName</c> が見つからない場合は、長さ 0 の文字列 (<see langword="&quot;&quot;" />) が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes">
          <span data-ttu-id="17862-189">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-189">Optional.</span>
          </span>
          <span data-ttu-id="17862-190">値がファイル属性を指定する列挙式または数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="17862-191">省略した場合、<see langword="Dir" /> は、<c>PathName</c> に一致する、属性のないファイルを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-192">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="17862-193">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="17862-194">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-195">指定されたパターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-196">`Dir`関数は、複数の文字の使用をサポートしています (`*`) と 1 文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="17862-197">`VbVolume` 特定のファイル名の代わりに、ドライブのボリューム ラベルを返します。</span><span class="sxs-lookup"><span data-stu-id="17862-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="17862-198">指定する必要があります、`PathName`初めて呼び出す、`Dir`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="17862-199">次の項目を取得するには、後続の呼び出しを行うことができます、`Dir`パラメーターなしの関数。</span><span class="sxs-lookup"><span data-stu-id="17862-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-200">正常に実行する、`Dir`関数に必要な<xref:System.Security.Permissions.FileIOPermissionAccess.Read>と<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="17862-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="17862-201">詳細については、次を参照してください。 <xref:System.Security.Permissions.FileIOPermission>、 <xref:System.Security.SecurityException>、および[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="17862-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="17862-202">`Attributes`列挙値の引数は次のようにします。</span><span class="sxs-lookup"><span data-stu-id="17862-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="17862-203">[値]</span><span class="sxs-lookup"><span data-stu-id="17862-203">Value</span></span>|<span data-ttu-id="17862-204">定数</span><span class="sxs-lookup"><span data-stu-id="17862-204">Constant</span></span>|<span data-ttu-id="17862-205">説明</span><span class="sxs-lookup"><span data-stu-id="17862-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="17862-206">既定モード。</span><span class="sxs-lookup"><span data-stu-id="17862-206">Default.</span></span> <span data-ttu-id="17862-207">属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="17862-208">ファイル属性がないだけでなく、読み取り専用のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="17862-209">ファイル属性がないだけでなく、非表示のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="17862-210">ファイル属性がないだけでなく、システム ファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="17862-211">ボリューム ラベルを指定しますその他の属性が指定されている場合`vbVolume`は無視されます。</span><span class="sxs-lookup"><span data-stu-id="17862-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="17862-212">ディレクトリまたはファイル属性がないだけでなく、フォルダーを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="17862-213">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="17862-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="17862-214">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="17862-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="17862-215">これらの列挙体は、Visual Basic 言語によって指定され、実際の値の代わりに、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="17862-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-216">この例では、`Dir`関数を特定のファイルおよびディレクトリの存在を確認します。</span><span class="sxs-lookup"><span data-stu-id="17862-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-217">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-217">Required.</span>
          </span>
          <span data-ttu-id="17862-218">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-218">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-219">
            <see langword="True" /> モードまたはシーケンシャル <see langword="Random" /> モードで開いたファイルの現在位置がファイルの末尾に達している場合、ブール値 <see langword="Input" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-220">
            <see langword="True" /> モードまたはシーケンシャル <see langword="Random" /> モードで開いたファイルの現在位置がファイルの末尾に達している場合、ブール値 <see langword="Input" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-221">使用`EOF`ファイルの末尾の入力を取得しようとして生成されたエラーを回避するためにします。</span><span class="sxs-lookup"><span data-stu-id="17862-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="17862-222">`EOF`関数が返される`False`ファイルの末尾に達するまでです。</span><span class="sxs-lookup"><span data-stu-id="17862-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="17862-223">開いたファイル`Random`または`Binary`アクセス、`EOF`返します`False`最後に実行されるまで`FileGet`関数は、レコード全体を読めるようにすることはありません。</span><span class="sxs-lookup"><span data-stu-id="17862-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="17862-224">開いたファイル`Binary`アクセス、ファイルを使用して、読み込もうとすると、`Input`行われるまで`EOF`返します`True`エラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="17862-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="17862-225">使用して、`LOF`と`Loc`関数の代わりに`EOF`でバイナリ ファイルを読み取るときに`Input`、使用または`Get`を使用する場合、`EOF`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="17862-226">開いたファイル`Output`、`EOF`は常に返します`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-227">この例では、`EOF`ファイルの終わりを検出する関数。</span><span class="sxs-lookup"><span data-stu-id="17862-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="17862-228">この例では、`Testfile`複数行のテキストを含むテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="17862-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-229">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-229">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-230">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-230">Required.</span>
          </span>
          <span data-ttu-id="17862-231">
            <see langword="Integer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-231">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="17862-232">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-232">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-233">
            <see langword="FileOpen" /> 関数を使用して開いたファイルのファイル モードを表す列挙体を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="17862-234">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="FileAttr" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="17862-235">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-236">次の列挙型値は、ファイルのアクセス モードを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-236">The following enumeration values indicate the file access mode:</span>
          </span>
          <span data-ttu-id="17862-237">
            <list type="table">
              <item>
                <term> 値  </term>
                <description> モード  </description>
              </item>
              <item>
                <term> 1  </term>
                <description>
                  <see langword="OpenMode.Input" />
                </description>
              </item>
              <item>
                <term> 2  </term>
                <description>
                  <see langword="OpenMode.Output" />
                </description>
              </item>
              <item>
                <term> 4  </term>
                <description>
                  <see langword="OpenMode.Random" />
                </description>
              </item>
              <item>
                <term> 8  </term>
                <description>
                  <see langword="OpenMode.Append" />
                </description>
              </item>
              <item>
                <term> 32  </term>
                <description>
                  <see langword="OpenMode.Binary" />
                </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-237">
              <list type="table">
                <item>
                  <term> Value  </term>
                  <description> Mode  </description>
                </item>
                <item>
                  <term> 1  </term>
                  <description>
                    <see langword="OpenMode.Input" />
                  </description>
                </item>
                <item>
                  <term> 2  </term>
                  <description>
                    <see langword="OpenMode.Output" />
                  </description>
                </item>
                <item>
                  <term> 4  </term>
                  <description>
                    <see langword="OpenMode.Random" />
                  </description>
                </item>
                <item>
                  <term> 8  </term>
                  <description>
                    <see langword="OpenMode.Append" />
                  </description>
                </item>
                <item>
                  <term> 32  </term>
                  <description>
                    <see langword="OpenMode.Binary" />
                  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-238">この関数は、ファイルのモードを使用して開かれたファイルを表す列挙体を返します、`FileOpen`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-238">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-239">この例では、`FileAttr`関数を開いているファイルのファイル モードを返します。</span><span class="sxs-lookup"><span data-stu-id="17862-239">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="17862-240">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-240">Optional.</span>
          </span>
          <span data-ttu-id="17862-241">閉じる対象となる、0 以上のチャネルで構成されるパラメーター配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-241">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-242">
            <see langword="FileOpen" /> 関数で開いたファイルへの入出力を終了して、ファイルを閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-242">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="17862-243">
            <see langword="My" /> を使用すると、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-243">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="17862-244">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-244">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-245">`FileClose`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-245">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-246">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-246">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-247">詳細については、次を参照してください[する方法: StreamReader を使用してファイルからのテキストの読み取り](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)、[する方法: StreamWriter を持つファイルに書き込むテキスト](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)、と[チュートリアル: 操作のファイルとディレクトリの。Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-247">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="17862-248">省略した場合`FileNumbers`、すべてのアクティブなファイルを開く、`FileOpen`関数は閉じられます。</span><span class="sxs-lookup"><span data-stu-id="17862-248">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="17862-249">開かれているファイルを閉じるとき`Output`または`Append`出力の最終的なバッファーがそのファイルのオペレーティング システムのバッファーに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-249">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="17862-250">すべてのバッファー領域が閉じたに関連付けられているファイルは解放されます。</span><span class="sxs-lookup"><span data-stu-id="17862-250">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="17862-251">ときに、`FileClose`関数が実行され、ファイルをそのファイルの関連付け番号が終了します。</span><span class="sxs-lookup"><span data-stu-id="17862-251">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-252">この例では、`FileClose`の開かれたファイルを閉じる関数`Input`します。</span><span class="sxs-lookup"><span data-stu-id="17862-252">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-253">
            <paramref name="FileNumber" /> は存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-253">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="17862-254">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-254">Required.</span>
          </span>
          <span data-ttu-id="17862-255">コピーするファイルの名前を指定する <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-255">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="17862-256">
            <c>Source</c> には、コピー先ファイルのディレクトリまたはフォルダー、およびドライブを含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-256">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="17862-257">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-257">Required.</span>
          </span>
          <span data-ttu-id="17862-258">コピー先のファイルの名前を指定する <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-258">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="17862-259">
            <c>Destination</c> には、コピー先ファイルのディレクトリまたはフォルダー、およびドライブを含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-259">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-260">ファイルをコピーします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-260">Copies a file.</span>
          </span>
          <span data-ttu-id="17862-261">
            <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="FileCopy" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-261">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="17862-262">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-262">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-263">使用しようとする場合、`FileCopy`で現在開いているファイルの場合は、関数のエラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-263">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="17862-264">`FileCopy` ローカル ドライブで動作する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="17862-264">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-265">この例では、`FileCopy`別に 1 つのファイルをコピーする関数。</span><span class="sxs-lookup"><span data-stu-id="17862-265">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="17862-266">この例のために、仮定`SrcFile`はデータを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="17862-266">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-267">
            <paramref name="Source" /> または <paramref name="Destination" /> が無効であるか、指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-267">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-268">ファイルは既に開いています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-268">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="17862-269">ファイルが存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-269">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="17862-270">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-270">Required.</span>
          </span>
          <span data-ttu-id="17862-271">ファイル名を指定する <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-271">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="17862-272">
            <c>PathName</c> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-272">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-273">ファイルへの書き込み日時を示す <see langword="Date" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-273">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="17862-274">
            <see langword="My" /> 機能を使用すると、<see langword="FileDateTime" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-274">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="17862-275">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-275">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-276">ファイルの作成日時または最終変更日時を示す <see langword="Date" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-276">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="17862-277">この例では、`FileDateTime`関数を日付し、時刻のファイルが作成または最後に変更します。</span><span class="sxs-lookup"><span data-stu-id="17862-277">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="17862-278">表示される日付の形式は、システムのロケール設定に基づきます。</span><span class="sxs-lookup"><span data-stu-id="17862-278">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-279">
            <paramref name="PathName" /> が無効です。またはワイルドカードを含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-279">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="17862-280">対象のファイルが存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-280">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="17862-281">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-281">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-282">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-282">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-283">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-283">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-284">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-284">Required.</span>
          </span>
          <span data-ttu-id="17862-285">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-285">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-286">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-286">Required.</span>
          </span>
          <span data-ttu-id="17862-287">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-287">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-288">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-288">Optional.</span>
          </span>
          <span data-ttu-id="17862-289">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-289">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-290">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-290">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-291">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-291">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-292">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-292">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-293">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-293">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-294">データを読み取る`FileGet`通常のファイルに書き込まれ、`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-294">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="17862-295">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-295">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-296">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="17862-296">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-297">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-297">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-298">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-298">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-299">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-299">Random Mode</span></span>  
 <span data-ttu-id="17862-300">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-300">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-301">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-301">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-302">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-302">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-303">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="17862-303">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-304">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-304">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-305">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-305">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-306">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-306">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-307">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-307">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-308">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="17862-308">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="17862-309">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-309">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-310">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-310">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="17862-311">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-311">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="17862-312">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-312">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="17862-313">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-313">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-314">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-314">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-315">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-315">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-316">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-316">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="17862-317">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="17862-317">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="17862-318">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="17862-318">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="17862-319">データの 200 バイト: (4 * 5 * 10)。</span><span class="sxs-lookup"><span data-stu-id="17862-319">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="17862-320">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-320">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="17862-321">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-321">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-322">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-322">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-323">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-323">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-324">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-324">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="17862-325">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-325">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="17862-326">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-326">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-327">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-327">Binary Mode</span></span>  
 <span data-ttu-id="17862-328">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-328">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-329">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-329">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-330">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-330">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-331">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="17862-331">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-332">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-332">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="17862-333">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-333">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="17862-334">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-334">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-335">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-335">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="17862-336">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-336">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-337">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-337">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-338">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-338">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-339">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-339">Required.</span>
          </span>
          <span data-ttu-id="17862-340">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-340">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-341">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-341">Required.</span>
          </span>
          <span data-ttu-id="17862-342">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-342">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-343">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-343">Optional.</span>
          </span>
          <span data-ttu-id="17862-344">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-344">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-345">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-345">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-346">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-346">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-347">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-347">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-348">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-348">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-349">データを読み取る`FileGet`通常のファイルに書き込まれ、`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-349">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="17862-350">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-350">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-351">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="17862-351">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-352">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-352">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-353">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-353">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-354">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-354">Random Mode</span></span>  
 <span data-ttu-id="17862-355">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-355">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-356">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-356">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-357">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-357">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-358">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="17862-358">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-359">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-359">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-360">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-360">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-361">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-361">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-362">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-362">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-363">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="17862-363">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="17862-364">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-364">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-365">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-365">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="17862-366">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-366">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="17862-367">場合は、記述子は使用されません。</span><span class="sxs-lookup"><span data-stu-id="17862-367">If the descriptor is not used.</span></span> <span data-ttu-id="17862-368">渡された配列の境界とサイズ、`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-368">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="17862-369">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-369">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-370">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-370">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-371">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-371">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-372">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-372">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="17862-373">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="17862-373">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="17862-374">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="17862-374">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="17862-375">データの 200 バイト: (4 * 5 * 10)。</span><span class="sxs-lookup"><span data-stu-id="17862-375">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="17862-376">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-376">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="17862-377">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-377">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-378">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-378">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-379">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-379">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-380">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-380">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="17862-381">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-381">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="17862-382">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-382">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-383">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-383">Binary Mode</span></span>  
 <span data-ttu-id="17862-384">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-384">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-385">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-385">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-386">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-386">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-387">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="17862-387">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-388">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-388">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="17862-389">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-389">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="17862-390">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-390">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-391">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-391">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="17862-392">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-392">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-393">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-393">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-394">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-394">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-395">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-395">Required.</span>
          </span>
          <span data-ttu-id="17862-396">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-396">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-397">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-397">Required.</span>
          </span>
          <span data-ttu-id="17862-398">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-398">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-399">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-399">Optional.</span>
          </span>
          <span data-ttu-id="17862-400">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-400">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-401">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-401">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-402">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-402">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-403">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-403">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-404">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-404">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-405">データを読み取る`FileGet`通常のファイルに書き込まれ、`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-405">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="17862-406">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-406">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-407">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="17862-407">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-408">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-408">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-409">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-409">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-410">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-410">Random Mode</span></span>  
 <span data-ttu-id="17862-411">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-411">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-412">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-412">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-413">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-413">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-414">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="17862-414">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-415">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-415">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-416">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-416">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-417">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-417">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-418">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-418">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-419">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="17862-419">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="17862-420">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-420">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-421">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-421">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="17862-422">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-422">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="17862-423">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-423">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="17862-424">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-424">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-425">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-425">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-426">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-426">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-427">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-427">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="17862-428">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="17862-428">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="17862-429">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="17862-429">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="17862-430">データの 200 バイト: (4 * 5 * 10)。</span><span class="sxs-lookup"><span data-stu-id="17862-430">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="17862-431">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-431">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="17862-432">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-432">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-433">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-433">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-434">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-434">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-435">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-435">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="17862-436">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-436">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="17862-437">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-437">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-438">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-438">Binary Mode</span></span>  
 <span data-ttu-id="17862-439">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-439">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-440">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-440">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-441">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-441">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-442">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="17862-442">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-443">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-443">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="17862-444">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-444">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="17862-445">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-445">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-446">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-446">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="17862-447">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-447">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-448">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-448">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-449">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-449">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-450">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-450">Required.</span>
          </span>
          <span data-ttu-id="17862-451">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-451">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-452">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-452">Required.</span>
          </span>
          <span data-ttu-id="17862-453">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-453">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-454">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-454">Optional.</span>
          </span>
          <span data-ttu-id="17862-455">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-455">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-456">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-456">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-457">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-457">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-458">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-458">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-459">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-459">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-460">データを読み取る`FileGet`通常のファイルに書き込まれ、`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-460">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="17862-461">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-461">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-462">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="17862-462">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-463">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-463">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-464">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-464">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-465">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-465">Random Mode</span></span>  
 <span data-ttu-id="17862-466">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-466">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-467">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-467">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-468">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-468">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-469">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="17862-469">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-470">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-470">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-471">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-471">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-472">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-472">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-473">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-473">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-474">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="17862-474">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="17862-475">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-475">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-476">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-476">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="17862-477">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-477">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="17862-478">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-478">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="17862-479">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-479">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-480">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-480">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-481">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-481">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-482">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-482">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="17862-483">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="17862-483">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="17862-484">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="17862-484">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="17862-485">データの 200 バイト: (4 * 5 * 10)。</span><span class="sxs-lookup"><span data-stu-id="17862-485">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="17862-486">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-486">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="17862-487">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-487">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-488">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-488">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-489">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-489">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-490">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-490">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="17862-491">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-491">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="17862-492">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-492">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-493">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-493">Binary Mode</span></span>  
 <span data-ttu-id="17862-494">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-494">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-495">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-495">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-496">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-496">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-497">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="17862-497">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-498">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-498">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="17862-499">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-499">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="17862-500">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-500">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-501">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-501">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="17862-502">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-502">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-503">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-503">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-504">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-504">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-505">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-505">Required.</span>
          </span>
          <span data-ttu-id="17862-506">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-506">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-507">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-507">Required.</span>
          </span>
          <span data-ttu-id="17862-508">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-508">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-509">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-509">Optional.</span>
          </span>
          <span data-ttu-id="17862-510">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-510">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-511">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-511">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-512">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-512">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-513">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-513">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-514">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-514">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-515">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-515">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="17862-516">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-516">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-517">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="17862-517">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-518">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-518">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-519">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-519">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-520">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-520">Random Mode</span></span>  
 <span data-ttu-id="17862-521">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-521">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-522">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-522">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-523">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-523">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-524">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="17862-524">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-525">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-525">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-526">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-526">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-527">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-527">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-528">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-528">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-529">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="17862-529">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="17862-530">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-530">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-531">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-531">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="17862-532">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-532">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="17862-533">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-533">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="17862-534">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-534">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-535">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-535">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-536">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-536">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-537">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-537">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="17862-538">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="17862-538">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="17862-539">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="17862-539">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="17862-540">データの 200 バイト: (4 * 5 * 10)。</span><span class="sxs-lookup"><span data-stu-id="17862-540">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="17862-541">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-541">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="17862-542">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-542">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-543">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-543">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-544">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-544">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-545">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-545">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="17862-546">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-546">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="17862-547">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-547">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-548">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-548">Binary Mode</span></span>  
 <span data-ttu-id="17862-549">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-549">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-550">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-550">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-551">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-551">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-552">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="17862-552">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-553">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-553">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="17862-554">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-554">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="17862-555">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-555">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-556">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-556">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="17862-557">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-557">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-558">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-558">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-559">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-559">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-560">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-560">Required.</span>
          </span>
          <span data-ttu-id="17862-561">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-561">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-562">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-562">Required.</span>
          </span>
          <span data-ttu-id="17862-563">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-563">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-564">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-564">Optional.</span>
          </span>
          <span data-ttu-id="17862-565">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-565">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-566">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-566">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-567">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-567">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-568">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-568">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-569">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-569">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-570">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-570">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="17862-571">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-571">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-572">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="17862-572">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-573">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-573">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-574">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-574">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-575">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-575">Random Mode</span></span>  
 <span data-ttu-id="17862-576">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-576">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-577">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-577">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-578">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-578">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-579">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="17862-579">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-580">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-580">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-581">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-581">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-582">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-582">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-583">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-583">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-584">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="17862-584">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="17862-585">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-585">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-586">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-586">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="17862-587">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-587">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="17862-588">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-588">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="17862-589">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-589">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-590">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-590">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-591">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-591">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-592">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-592">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="17862-593">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="17862-593">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="17862-594">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="17862-594">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="17862-595">データの 200 バイト: (4 * 5 * 10)。</span><span class="sxs-lookup"><span data-stu-id="17862-595">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="17862-596">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-596">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="17862-597">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-597">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-598">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-598">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-599">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-599">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-600">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-600">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="17862-601">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-601">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="17862-602">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-602">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-603">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-603">Binary Mode</span></span>  
 <span data-ttu-id="17862-604">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-604">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-605">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-605">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-606">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-606">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-607">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="17862-607">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-608">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-608">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="17862-609">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-609">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="17862-610">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-610">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-611">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-611">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="17862-612">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-612">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-613">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-613">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-614">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-614">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-615">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-615">Required.</span>
          </span>
          <span data-ttu-id="17862-616">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-616">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-617">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-617">Required.</span>
          </span>
          <span data-ttu-id="17862-618">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-618">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-619">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-619">Optional.</span>
          </span>
          <span data-ttu-id="17862-620">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-620">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-621">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-621">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-622">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-622">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-623">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-623">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-624">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-624">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-625">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-625">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="17862-626">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-626">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-627">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="17862-627">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-628">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-628">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-629">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-629">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-630">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-630">Random Mode</span></span>  
 <span data-ttu-id="17862-631">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-631">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-632">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-632">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-633">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-633">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-634">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="17862-634">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-635">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-635">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-636">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-636">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-637">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-637">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-638">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-638">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-639">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="17862-639">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="17862-640">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-640">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-641">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-641">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="17862-642">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-642">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="17862-643">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-643">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="17862-644">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-644">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-645">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-645">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-646">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-646">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-647">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-647">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="17862-648">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="17862-648">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="17862-649">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="17862-649">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="17862-650">データの 200 バイト: (4 * 5 * 10)。</span><span class="sxs-lookup"><span data-stu-id="17862-650">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="17862-651">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-651">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="17862-652">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-652">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-653">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-653">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-654">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-654">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-655">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-655">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="17862-656">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-656">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="17862-657">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-657">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-658">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-658">Binary Mode</span></span>  
 <span data-ttu-id="17862-659">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-659">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-660">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-660">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-661">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-661">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-662">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="17862-662">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-663">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-663">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="17862-664">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-664">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="17862-665">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-665">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-666">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-666">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="17862-667">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-667">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-668">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-668">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-669">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-669">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-670">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-670">Required.</span>
          </span>
          <span data-ttu-id="17862-671">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-671">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-672">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-672">Required.</span>
          </span>
          <span data-ttu-id="17862-673">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-673">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-674">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-674">Optional.</span>
          </span>
          <span data-ttu-id="17862-675">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-675">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-676">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-676">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-677">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-677">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-678">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-678">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-679">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-679">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-680">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-680">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="17862-681">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-681">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-682">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="17862-682">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-683">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-683">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-684">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-684">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-685">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-685">Random Mode</span></span>  
 <span data-ttu-id="17862-686">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-686">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-687">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-687">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-688">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-688">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-689">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="17862-689">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-690">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-690">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-691">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-691">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-692">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-692">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-693">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-693">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-694">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="17862-694">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="17862-695">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-695">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-696">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-696">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="17862-697">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-697">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="17862-698">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-698">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="17862-699">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-699">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-700">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-700">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-701">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-701">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-702">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-702">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="17862-703">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="17862-703">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="17862-704">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="17862-704">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="17862-705">データの 200 バイト: (4 * 5 * 10)。</span><span class="sxs-lookup"><span data-stu-id="17862-705">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="17862-706">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-706">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="17862-707">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-707">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-708">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-708">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-709">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-709">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-710">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-710">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="17862-711">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-711">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="17862-712">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-712">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-713">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-713">Binary Mode</span></span>  
 <span data-ttu-id="17862-714">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-714">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-715">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-715">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-716">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-716">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-717">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="17862-717">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-718">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-718">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="17862-719">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-719">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="17862-720">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-720">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-721">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-721">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="17862-722">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-722">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-723">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-723">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-724">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-724">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-725">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-725">Required.</span>
          </span>
          <span data-ttu-id="17862-726">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-726">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-727">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-727">Required.</span>
          </span>
          <span data-ttu-id="17862-728">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-728">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-729">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-729">Optional.</span>
          </span>
          <span data-ttu-id="17862-730">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-730">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-731">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-731">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-732">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-732">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-733">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-733">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-734">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-734">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-735">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-735">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="17862-736">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-736">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-737">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="17862-737">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-738">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-738">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-739">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-739">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-740">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-740">Random Mode</span></span>  
 <span data-ttu-id="17862-741">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-741">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-742">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-742">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-743">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-743">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-744">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="17862-744">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-745">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-745">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-746">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-746">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-747">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-747">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-748">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-748">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-749">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="17862-749">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="17862-750">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-750">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-751">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-751">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="17862-752">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-752">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="17862-753">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-753">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="17862-754">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-754">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-755">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-755">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-756">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-756">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-757">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-757">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="17862-758">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="17862-758">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="17862-759">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="17862-759">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="17862-760">データの 200 バイト: (4 * 5 * 10)。</span><span class="sxs-lookup"><span data-stu-id="17862-760">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="17862-761">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-761">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="17862-762">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-762">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-763">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-763">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-764">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-764">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-765">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-765">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="17862-766">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-766">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="17862-767">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-767">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-768">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-768">Binary Mode</span></span>  
 <span data-ttu-id="17862-769">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-769">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-770">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-770">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-771">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-771">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-772">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="17862-772">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-773">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-773">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="17862-774">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-774">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="17862-775">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-775">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-776">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-776">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="17862-777">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-777">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-778">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-778">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-779">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-779">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-780">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-780">Required.</span>
          </span>
          <span data-ttu-id="17862-781">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-781">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-782">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-782">Required.</span>
          </span>
          <span data-ttu-id="17862-783">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-783">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-784">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-784">Optional.</span>
          </span>
          <span data-ttu-id="17862-785">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-785">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-786">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-786">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-787">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-787">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-788">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-788">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-789">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-789">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-790">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-790">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="17862-791">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-791">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-792">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="17862-792">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-793">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-793">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-794">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-794">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-795">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-795">Random Mode</span></span>  
 <span data-ttu-id="17862-796">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-796">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-797">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-797">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-798">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-798">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-799">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="17862-799">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-800">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-800">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-801">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-801">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-802">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-802">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-803">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-803">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-804">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="17862-804">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="17862-805">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-806">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-806">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="17862-807">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-807">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="17862-808">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-808">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="17862-809">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-809">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-810">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-810">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-811">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-811">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-812">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-812">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="17862-813">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="17862-813">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="17862-814">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="17862-814">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="17862-815">データの 200 バイト: (4 * 5 * 10)。</span><span class="sxs-lookup"><span data-stu-id="17862-815">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="17862-816">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-816">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="17862-817">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-817">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-818">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-818">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-819">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-819">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-820">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-820">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="17862-821">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-821">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="17862-822">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-822">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-823">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-823">Binary Mode</span></span>  
 <span data-ttu-id="17862-824">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-824">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-825">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-825">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-826">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-826">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-827">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="17862-827">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-828">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-828">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="17862-829">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-829">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="17862-830">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-830">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-831">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-831">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="17862-832">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-832">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-833">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-833">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-834">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-834">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-835">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-835">Required.</span>
          </span>
          <span data-ttu-id="17862-836">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-836">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-837">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-837">Required.</span>
          </span>
          <span data-ttu-id="17862-838">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-838">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-839">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-839">Optional.</span>
          </span>
          <span data-ttu-id="17862-840">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-840">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-841">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-841">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-842">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-842">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-843">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-843">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-844">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-844">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-845">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-845">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="17862-846">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-846">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-847">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="17862-847">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-848">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-848">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-849">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-849">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-850">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-850">Random Mode</span></span>  
 <span data-ttu-id="17862-851">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-851">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-852">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-852">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-853">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-853">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-854">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="17862-854">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-855">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-855">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-856">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-856">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-857">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-857">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-858">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-858">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-859">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="17862-859">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="17862-860">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-860">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-861">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-861">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="17862-862">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-862">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="17862-863">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-863">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="17862-864">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-864">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-865">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-865">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-866">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-866">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-867">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-867">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="17862-868">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="17862-868">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="17862-869">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="17862-869">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="17862-870">データの 200 バイト: (4 * 5 * 10)。</span><span class="sxs-lookup"><span data-stu-id="17862-870">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="17862-871">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-871">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="17862-872">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-873">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-873">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-874">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-874">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-875">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-875">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="17862-876">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-876">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="17862-877">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-877">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-878">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-878">Binary Mode</span></span>  
 <span data-ttu-id="17862-879">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-879">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-880">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-880">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-881">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-881">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-882">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="17862-882">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-883">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-883">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="17862-884">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-884">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="17862-885">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-885">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-886">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-886">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="17862-887">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-887">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-888">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-888">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-889">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-889">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-890">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-890">Required.</span>
          </span>
          <span data-ttu-id="17862-891">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-891">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-892">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-892">Required.</span>
          </span>
          <span data-ttu-id="17862-893">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-893">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-894">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-894">Optional.</span>
          </span>
          <span data-ttu-id="17862-895">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-895">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="17862-896">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-896">Optional.</span>
          </span>
          <span data-ttu-id="17862-897">文字列を書き込む場合のみ適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-897">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="17862-898">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-898">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="17862-899">既定値は、<see langword="False" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-899">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-900">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-900">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-901">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-901">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-902">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-902">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-903">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-903">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-904">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-904">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="17862-905">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-905">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-906">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="17862-906">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-907">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-907">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-908">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-908">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-909">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-909">Random Mode</span></span>  
 <span data-ttu-id="17862-910">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-911">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-911">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-912">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-913">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="17862-913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-914">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-914">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-915">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-915">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-916">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-916">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-917">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-917">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-918">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="17862-918">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="17862-919">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-919">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-920">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-920">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="17862-921">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-921">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="17862-922">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-922">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="17862-923">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-923">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-924">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-924">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-925">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-925">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-926">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-926">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="17862-927">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="17862-927">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="17862-928">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="17862-928">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="17862-929">データの 200 バイト: (4 * 5 * 10)。</span><span class="sxs-lookup"><span data-stu-id="17862-929">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="17862-930">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-930">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="17862-931">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-931">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-932">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-932">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-933">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-933">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-934">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-934">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="17862-935">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-935">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="17862-936">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-936">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-937">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-937">Binary Mode</span></span>  
 <span data-ttu-id="17862-938">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-939">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-940">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-941">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="17862-941">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-942">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-942">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="17862-943">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-943">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="17862-944">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-944">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-945">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-945">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="17862-946">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-946">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-947">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-947">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-948">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-948">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-949">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-949">Required.</span>
          </span>
          <span data-ttu-id="17862-950">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-950">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-951">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-951">Required.</span>
          </span>
          <span data-ttu-id="17862-952">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-952">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-953">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-953">Optional.</span>
          </span>
          <span data-ttu-id="17862-954">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-954">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="17862-955">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-955">Optional.</span>
          </span>
          <span data-ttu-id="17862-956">文字列を書き込む場合のみ適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-956">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="17862-957">配列を動的として扱うかどうか、およびサイズと境界を表す配列記述子が必要かどうかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-957">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="17862-958">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-958">Optional.</span>
          </span>
          <span data-ttu-id="17862-959">文字列を書き込む場合のみ適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-959">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="17862-960">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-960">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="17862-961">既定値は、<see langword="False" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-961">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-962">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-962">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-963">
            <see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-963">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="17862-964">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-964">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-965">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-965">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-966">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-966">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="17862-967">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-967">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-968">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="17862-968">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-969">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-969">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-970">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-970">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-971">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-971">Random Mode</span></span>  
 <span data-ttu-id="17862-972">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-972">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-973">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-973">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-974">次のレコードの開始する 1 つのレコードの末尾までには、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-974">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-975">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="17862-975">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-976">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-976">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-977">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-977">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-978">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-978">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-979">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-979">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-980">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="17862-980">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="17862-981">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-981">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-982">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-982">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="17862-983">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-983">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="17862-984">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-984">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="17862-985">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-985">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-986">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-986">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-987">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-987">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-988">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-988">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="17862-989">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="17862-989">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="17862-990">18 バイトの記述子の: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="17862-990">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="17862-991">データの 200 バイト: (4 * 5 * 10)。</span><span class="sxs-lookup"><span data-stu-id="17862-991">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="17862-992">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-992">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="17862-993">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-993">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-994">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-994">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-995">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-995">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-996">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-996">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="17862-997">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-997">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="17862-998">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-998">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-999">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-999">Binary Mode</span></span>  
 <span data-ttu-id="17862-1000">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1000">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1001">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1001">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1002">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1002">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1003">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="17862-1003">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1004">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-1004">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="17862-1005">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-1005">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="17862-1006">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-1006">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1007">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1007">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="17862-1008">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1008">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1009">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1009">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1010">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1010">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1011">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1011">Required.</span>
          </span>
          <span data-ttu-id="17862-1012">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1012">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1013">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1013">Required.</span>
          </span>
          <span data-ttu-id="17862-1014">データの読み込み先となる有効な変数名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1014">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1015">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1015">Optional.</span>
          </span>
          <span data-ttu-id="17862-1016">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1016">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1017">開いたディスク ファイルからデータを読み込んで変数に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1017">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="17862-1018">
            <see langword="My" /> 機能を使用すると、<see langword="FileGetObject" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1018">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="17862-1019">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1019">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1020">`FileGetObject`の代わりに関数を使用して`FileGet`場合は、コンパイル時にあいまいさを避けるために型`Object`など別の型の代わりに返される`Integer`、 `Long`、`Short`となります。</span><span class="sxs-lookup"><span data-stu-id="17862-1020">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="17862-1021">記述する場合、`Variant`型、`FileGetObject`が必要です。</span><span class="sxs-lookup"><span data-stu-id="17862-1021">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="17862-1022">あれば、2 番目のパラメーター オブジェクトを使用している場合、常にお勧めを使用すること`FilePutObject`と`FileGetObject`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1022">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="17862-1023">`FileGetObject` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1023">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1024">データを読み取る`FileGetObject`に通常書き込まれ、`FilePutObject`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1024">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="17862-1025">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1025">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1026">省略した場合`RecordNumber`、`FileGetObject`レコードまたはバイトを読み取り、最後の後に`FileGetObject`または`FilePutObject`関数 (または最後を指す`Seek`関数)。</span><span class="sxs-lookup"><span data-stu-id="17862-1026">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1027">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1027">Random Mode</span></span>  
 <span data-ttu-id="17862-1028">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1028">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1029">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGetObject`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-1029">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1030">1 つのレコードの終わりと次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1030">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1031">埋め込みデータの量を正確に判断できないためには読み取られるデータの長さと一致するレコードの長さであることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="17862-1031">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="17862-1032">読み取られた変数が既定では、文字列である`FileGetObject`文字列の長さを含む 2 バイトの記述子を読み取って、変数にデータを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1032">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="17862-1033">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1033">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1034">Visual Basic 6.0 と以前のバージョンは、固定長文字列とファイルを読み取るときに、長さの記述子は書き込まれませんをサポートします。</span><span class="sxs-lookup"><span data-stu-id="17862-1034">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="17862-1035">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1035">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1036">読み取られた変数が、配列で指定されたレコード長の場合、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1036">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1037">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1037">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1038">長さが 2 に加えて、8 時間ディメンションの数: 2 + 8 \* 含まします。</span><span class="sxs-lookup"><span data-stu-id="17862-1038">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="17862-1039">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1039">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="17862-1040">218 バイトが次のように分散: 18 バイトの記述子 (2 + 8 \* 2)、およびデータ (4 \* 5 \* 10) の 100 バイトです。</span><span class="sxs-lookup"><span data-stu-id="17862-1040">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="17862-1041">`FileGetObject` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-1041">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="17862-1042">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePutObject`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた: 2 + 8 \* 含まします。</span><span class="sxs-lookup"><span data-stu-id="17862-1042">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="17862-1043">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、配列とその記述子を含む、個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1043">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="17862-1044"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>クラスは、書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1044">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1045">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1045">Binary Mode</span></span>  
 <span data-ttu-id="17862-1046">ファイルを開くの`Binary`モードでは、すべての`Random`でこれらの例外の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1046">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="17862-1047">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1047">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1048">`FileGetObject` 変数を読み取るすべてディスクから連続的、つまり、レコード間の埋め込みなしで。</span><span class="sxs-lookup"><span data-stu-id="17862-1048">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1049">すべての配列、構造体の配列以外の`FileGetObject`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-1049">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="17862-1050">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="17862-1050">No descriptor is read.</span></span>  
  
 <span data-ttu-id="17862-1051">`FileGetObject` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-1051">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1052">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1052">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-1053">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-1053">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-1054">たとえば、Form1.vb という名前のファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-1054">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1055">次の例では、テスト ファイルにレコードを読み取るし、それを取得します。</span><span class="sxs-lookup"><span data-stu-id="17862-1055">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="17862-1056">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1056">Required.</span>
          </span>
          <span data-ttu-id="17862-1057">ファイルを指定する <see langword="String" /> 式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1057">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="17862-1058">
            <c>PathName</c> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1058">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1059">ファイルの長さをバイト数で指定する <see langword="Long" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1059">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="17862-1060">
            <see langword="My" /> 機能を使用すると、<see langword="FileLen" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1060">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="17862-1061">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1061">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-1062">ファイルの長さをバイト数で指定する <see langword="Long" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1062">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1063">指定したファイルが開いている場合場合に、`FileLen`関数が呼び出されると、返される値は、開かれた時点で、ファイルのサイズを表します。</span><span class="sxs-lookup"><span data-stu-id="17862-1063">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-1064">現在開いているファイルの長さを取得する、`LOF`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-1064">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1065">この例では、`FileLen`関数をファイルの長さをバイト単位で返します。</span><span class="sxs-lookup"><span data-stu-id="17862-1065">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="17862-1066">この例のために、仮定`TestFile`はいくつかのデータを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="17862-1066">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="17862-1067">ファイルが存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1067">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1068">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1068">Required.</span>
          </span>
          <span data-ttu-id="17862-1069">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1069">Any valid file number.</span>
          </span>
          <span data-ttu-id="17862-1070">
            <see langword="FreeFile" /> 関数を使用して、次に使用できるファイル番号を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1070">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="17862-1071">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1071">Required.</span>
          </span>
          <span data-ttu-id="17862-1072">ファイル名を指定する <see langword="String" /> 型の式。ディレクトリまたはフォルダー、およびドライブを含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1072">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="17862-1073">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1073">Required.</span>
          </span>
          <span data-ttu-id="17862-1074">ファイル モード (<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" />、または <see langword="Random" />) を指定する列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1074">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="17862-1075">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenMode" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1075">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="17862-1076">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1076">Optional.</span>
          </span>
          <span data-ttu-id="17862-1077">開いているファイルで許可されている操作 (<see langword="Read" />、<see langword="Write" />、または <see langword="ReadWrite" />) を示す列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1077">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="17862-1078">既定値は <see langword="ReadWrite" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1078">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="17862-1079">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenAccess" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1079">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="17862-1080">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1080">Optional.</span>
          </span>
          <span data-ttu-id="17862-1081">他のプロセスによって開かれたファイルで許可されていない操作 (<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" />、および <see langword="Lock Read Write" />) を指定する列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1081">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="17862-1082">既定値は <see langword="Lock Read Write" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1082">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="17862-1083">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenShare" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1083">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="17862-1084">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1084">Optional.</span>
          </span>
          <span data-ttu-id="17862-1085">32,767 以下の値 (バイト単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1085">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="17862-1086">ランダム アクセス ファイルの場合は、レコード長を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1086">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="17862-1087">シーケンシャル ファイルの場合は、バッファー内の文字数を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1087">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1088">ファイルを開いて入出力を行います。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1088">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="17862-1089">
            <see langword="My" /> 機能を使用すると、<see langword="FileOpen" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1089">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="17862-1090">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1090">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1091">`FileOpen`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1091">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-1092">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-1092">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-1093">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-1093">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-1094">すべての I/O 操作を実行する前に、は、ファイルを開く必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1094">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="17862-1095">`FileOpen` ファイル I/O のバッファーを割り当てし、バッファーへのアクセス モードを決定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1095">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-1096">ファイルに書き込む場合、アプリケーションを作成しようとするファイルが存在しない場合、ファイルを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1096">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="17862-1097">これを行うには、ファイルが作成されるディレクトリのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="17862-1097">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="17862-1098">ただし、によってファイルが指定されている場合`FileName`存在は、アプリケーションのニーズ`Write`ファイル自体にのみアクセスを許可します。</span><span class="sxs-lookup"><span data-stu-id="17862-1098">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="17862-1099">セキュリティを強化する、可能なが展開および付与中にファイルを作成する任意の場所`Write`アクセス許可をディレクトリ全体の代わりにのみ、します。</span><span class="sxs-lookup"><span data-stu-id="17862-1099">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="17862-1100">セキュリティを強化するには、ルート ディレクトリまたは Program Files ディレクトリの代わりに、ユーザーのディレクトリにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1100">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="17862-1101">使用して、チャネルを開くにはあります、`FreeFile()`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-1101">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-1102">`FileOpen`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体は、部分的な信頼された状況では、その実行に影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1102">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="17862-1103">詳細については、次を参照してください。<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1103">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1104">この例でのさまざまな使用、`FileOpen`入力と出力ファイルを有効にする関数。</span><span class="sxs-lookup"><span data-stu-id="17862-1104">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="17862-1105">次のコードは、ファイルを開きます`TestFile`で`Input`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1105">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="17862-1106">この例で、ファイルが開きます`Binary`操作のみを記述するためのモード。</span><span class="sxs-lookup"><span data-stu-id="17862-1106">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="17862-1107">次の例で、ファイルを開きます`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1107">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="17862-1108">ファイルには、構造体のレコードが含まれています。`Person`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1108">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="17862-1109">このコード例でファイルを開き`Output`モード; 任意のプロセスはファイルに対する読み取りまたは書き込み。</span><span class="sxs-lookup"><span data-stu-id="17862-1109">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="17862-1110">このコード例でファイルを開き`Binary`読み込み専用の他のプロセスがファイルを読み取ることはできません。</span><span class="sxs-lookup"><span data-stu-id="17862-1110">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1111">レコード長が、-1 ではない負の値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1111">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1112">
            <paramref name="FileName" /> が既に開かれています。または <paramref name="FileName" /> が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1112">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="17862-1113">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1113">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1114">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1114">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1115">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1115">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1116">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1116">Required.</span>
          </span>
          <span data-ttu-id="17862-1117">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1117">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1118">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1118">Required.</span>
          </span>
          <span data-ttu-id="17862-1119">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1119">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1120">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1120">Optional.</span>
          </span>
          <span data-ttu-id="17862-1121">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1121">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1122">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1122">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1123">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1123">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1124">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1124">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1125">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1125">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1126">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1126">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1127">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1127">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1128">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1128">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1129">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1129">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1130">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1130">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1131">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1131">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1132">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1132">Random Mode</span></span>  
 <span data-ttu-id="17862-1133">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1133">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1134">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1134">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1135">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1135">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1136">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1136">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1137">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1137">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1138">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1138">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1139">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1139">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1140">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1140">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1141">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1141">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1142">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1142">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1143">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1143">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1144">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1144">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1145">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1145">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1146">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1146">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1147">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1147">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1148">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1148">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1149">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1149">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1150">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1150">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1151">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1151">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1152">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1152">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1153">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1153">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1154">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1154">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1155">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1155">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1156">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1156">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1157">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1157">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1158">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1158">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1159">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1159">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1160">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1160">Binary Mode</span></span>  
 <span data-ttu-id="17862-1161">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1161">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1162">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1162">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1163">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1163">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1164">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1164">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1165">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1165">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1166">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1166">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1167">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1167">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1168">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1168">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1169">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1169">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1170">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1170">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1171">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1171">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1172">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1172">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1173">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1173">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1174">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1174">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1175">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1175">Required.</span>
          </span>
          <span data-ttu-id="17862-1176">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1176">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1177">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1177">Required.</span>
          </span>
          <span data-ttu-id="17862-1178">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1178">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1179">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1179">Optional.</span>
          </span>
          <span data-ttu-id="17862-1180">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1180">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1181">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1181">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1182">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1182">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1183">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1183">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1184">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1184">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1185">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1185">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1186">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1186">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1187">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1187">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1188">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1188">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1189">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1189">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1190">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1190">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1191">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1191">Random Mode</span></span>  
 <span data-ttu-id="17862-1192">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1192">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1193">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1193">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1194">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1194">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1195">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1195">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1196">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1196">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1197">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1197">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1198">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1198">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1199">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1199">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1200">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1200">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1201">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1201">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1202">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1202">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1203">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1203">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1204">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1204">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1205">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1205">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1206">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1206">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1207">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1207">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1208">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1208">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1209">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1209">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1210">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1210">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1211">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1211">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1212">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1213">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1213">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1214">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1214">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1215">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1215">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1216">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1216">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1217">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1217">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1218">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1218">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1219">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1219">Binary Mode</span></span>  
 <span data-ttu-id="17862-1220">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1220">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1221">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1221">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1222">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1222">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1223">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1223">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1224">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1224">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1225">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1225">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1226">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1226">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1227">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1227">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1228">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1228">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1229">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1229">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1230">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1230">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1231">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1231">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1232">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1232">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1233">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1233">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1234">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1234">Required.</span>
          </span>
          <span data-ttu-id="17862-1235">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1235">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1236">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1236">Required.</span>
          </span>
          <span data-ttu-id="17862-1237">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1237">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1238">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1238">Optional.</span>
          </span>
          <span data-ttu-id="17862-1239">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1239">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1240">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1240">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1241">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1241">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1242">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1242">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1243">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1243">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1244">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1244">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1245">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1245">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1246">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1246">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1247">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1247">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1248">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1248">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1249">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1249">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1250">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1250">Random Mode</span></span>  
 <span data-ttu-id="17862-1251">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1251">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1252">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1252">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1253">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1253">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1254">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1254">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1255">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1255">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1256">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1256">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1257">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1257">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1258">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1258">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1259">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1259">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1260">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1261">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1261">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1262">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1262">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1263">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1263">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1264">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1264">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1265">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1265">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1266">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1266">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1267">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1267">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1268">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1268">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1269">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1269">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1270">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1270">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1271">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1271">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1272">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1272">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1273">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1273">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1274">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1274">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1275">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1275">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1276">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1276">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1277">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1277">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1278">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1278">Binary Mode</span></span>  
 <span data-ttu-id="17862-1279">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1279">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1280">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1280">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1281">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1281">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1282">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1282">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1283">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1283">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1284">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1284">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1285">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1285">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1286">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1286">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1287">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1287">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1288">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1288">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1289">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1289">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1290">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1290">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1291">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1291">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1292">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1292">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1293">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1293">Required.</span>
          </span>
          <span data-ttu-id="17862-1294">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1294">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1295">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1295">Required.</span>
          </span>
          <span data-ttu-id="17862-1296">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1296">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1297">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1297">Optional.</span>
          </span>
          <span data-ttu-id="17862-1298">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1298">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1299">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1299">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1300">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1300">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1301">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1301">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1302">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1302">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1303">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1303">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1304">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1304">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1305">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1305">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1306">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1306">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1307">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1307">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1308">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1308">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1309">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1309">Random Mode</span></span>  
 <span data-ttu-id="17862-1310">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1310">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1311">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1311">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1312">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1312">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1313">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1313">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1314">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1314">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1315">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1315">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1316">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1316">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1317">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1317">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1318">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1318">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1319">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1319">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1320">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1320">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1321">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1321">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1322">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1322">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1323">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1323">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1324">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1324">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1325">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1325">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1326">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1326">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1327">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1327">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1328">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1328">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1329">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1329">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1330">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1330">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1331">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1331">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1332">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1332">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1333">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1333">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1334">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1334">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1335">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1335">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1336">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1336">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1337">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1337">Binary Mode</span></span>  
 <span data-ttu-id="17862-1338">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1338">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1339">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1339">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1340">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1340">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1341">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1341">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1342">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1342">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1343">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1343">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1344">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1344">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1345">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1345">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1346">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1346">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1347">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1347">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1348">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1348">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1349">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1349">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1350">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1350">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1351">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1351">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1352">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1352">Required.</span>
          </span>
          <span data-ttu-id="17862-1353">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1353">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1354">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1354">Required.</span>
          </span>
          <span data-ttu-id="17862-1355">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1355">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1356">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1356">Optional.</span>
          </span>
          <span data-ttu-id="17862-1357">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1358">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1358">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1359">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1360">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1361">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1362">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1363">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1364">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1365">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1366">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1367">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1368">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1368">Random Mode</span></span>  
 <span data-ttu-id="17862-1369">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1370">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1371">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1372">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1373">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1374">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1375">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1376">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1377">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1378">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1379">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1380">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1381">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1382">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1383">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1384">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1385">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1386">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1387">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1388">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1389">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1390">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1391">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1392">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1393">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1394">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1395">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1396">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1396">Binary Mode</span></span>  
 <span data-ttu-id="17862-1397">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1398">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1399">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1400">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1401">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1402">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1403">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1404">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1405">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1406">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1407">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1408">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1409">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1409">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1410">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1410">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1411">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1411">Required.</span>
          </span>
          <span data-ttu-id="17862-1412">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1412">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1413">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1413">Required.</span>
          </span>
          <span data-ttu-id="17862-1414">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1414">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1415">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1415">Optional.</span>
          </span>
          <span data-ttu-id="17862-1416">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1416">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1417">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1417">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1418">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1418">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1419">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1419">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1420">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1420">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1421">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1421">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1422">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1422">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1423">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1423">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1424">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1424">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1425">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1425">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1426">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1426">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1427">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1427">Random Mode</span></span>  
 <span data-ttu-id="17862-1428">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1428">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1429">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1429">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1430">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1430">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1431">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1431">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1432">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1432">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1433">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1433">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1434">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1434">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1435">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1435">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1436">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1436">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1437">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1437">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1438">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1438">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1439">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1439">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1440">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1440">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1441">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1441">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1442">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1442">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1443">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1443">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1444">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1444">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1445">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1445">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1446">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1446">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1447">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1447">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1448">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1448">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1449">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1449">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1450">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1450">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1451">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1451">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1452">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1452">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1453">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1453">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1454">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1454">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1455">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1455">Binary Mode</span></span>  
 <span data-ttu-id="17862-1456">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1456">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1457">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1457">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1458">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1458">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1459">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1459">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1460">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1460">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1461">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1461">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1462">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1462">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1463">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1463">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1464">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1464">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1465">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1465">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1466">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1466">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1467">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1467">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1468">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1468">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1469">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1469">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1470">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1470">Required.</span>
          </span>
          <span data-ttu-id="17862-1471">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1471">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1472">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1472">Required.</span>
          </span>
          <span data-ttu-id="17862-1473">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1473">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1474">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1474">Optional.</span>
          </span>
          <span data-ttu-id="17862-1475">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1475">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1476">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1476">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1477">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1477">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1478">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1478">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1479">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1479">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1480">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1480">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1481">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1481">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1482">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1482">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1483">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1483">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1484">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1484">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1485">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1485">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1486">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1486">Random Mode</span></span>  
 <span data-ttu-id="17862-1487">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1487">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1488">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1488">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1489">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1489">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1490">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1490">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1491">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1491">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1492">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1492">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1493">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1493">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1494">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1494">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1495">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1495">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1496">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1496">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1497">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1497">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1498">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1499">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1499">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1500">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1500">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1501">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1501">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1502">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1502">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1503">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1503">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1504">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1504">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1505">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1505">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1506">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1506">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1507">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1507">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1508">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1508">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1509">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1509">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1510">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1510">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1511">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1511">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1512">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1512">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1513">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1513">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1514">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1514">Binary Mode</span></span>  
 <span data-ttu-id="17862-1515">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1515">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1516">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1516">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1517">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1517">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1518">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1518">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1519">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1519">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1520">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1520">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1521">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1521">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1522">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1522">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1523">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1523">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1524">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1524">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1525">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1525">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1526">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1526">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1527">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1527">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1528">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1528">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1529">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1529">Required.</span>
          </span>
          <span data-ttu-id="17862-1530">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1530">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1531">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1531">Required.</span>
          </span>
          <span data-ttu-id="17862-1532">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1532">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1533">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1533">Optional.</span>
          </span>
          <span data-ttu-id="17862-1534">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1534">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1535">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1535">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1536">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1536">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1537">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1537">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1538">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1538">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1539">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1539">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1540">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1540">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1541">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1541">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1542">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1542">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1543">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1543">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1544">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1544">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1545">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1545">Random Mode</span></span>  
 <span data-ttu-id="17862-1546">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1546">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1547">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1547">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1548">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1548">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1549">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1549">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1550">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1550">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1551">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1551">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1552">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1552">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1553">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1553">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1554">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1554">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1555">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1555">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1556">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1556">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1557">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1557">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1558">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1558">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1559">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1559">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1560">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1560">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1561">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1561">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1562">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1562">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1563">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1563">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1564">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1565">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1566">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1566">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1567">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1568">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1568">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1569">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1570">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1570">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1571">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1571">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1572">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1572">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1573">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1573">Binary Mode</span></span>  
 <span data-ttu-id="17862-1574">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1574">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1575">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1575">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1576">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1576">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1577">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1577">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1578">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1578">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1579">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1579">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1580">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1580">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1581">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1581">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1582">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1582">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1583">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1583">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1584">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1584">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1585">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1585">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1586">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1586">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1587">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1587">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1588">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1588">Required.</span>
          </span>
          <span data-ttu-id="17862-1589">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1589">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1590">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1590">Required.</span>
          </span>
          <span data-ttu-id="17862-1591">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1591">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1592">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1592">Optional.</span>
          </span>
          <span data-ttu-id="17862-1593">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1593">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1594">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1594">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1595">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1595">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1596">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1596">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1597">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1597">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1598">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1598">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1599">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1599">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1600">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1600">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1601">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1601">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1602">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1602">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1603">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1603">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1604">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1604">Random Mode</span></span>  
 <span data-ttu-id="17862-1605">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1605">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1606">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1606">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1607">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1607">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1608">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1608">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1609">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1609">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1610">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1610">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1611">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1611">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1612">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1612">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1613">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1613">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1614">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1614">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1615">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1615">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1616">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1616">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1617">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1617">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1618">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1618">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1619">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1619">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1620">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1620">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1621">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1621">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1622">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1622">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1623">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1623">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1624">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1624">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1625">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1625">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1626">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1626">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1627">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1627">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1628">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1628">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1629">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1629">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1630">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1630">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1631">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1631">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1632">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1632">Binary Mode</span></span>  
 <span data-ttu-id="17862-1633">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1633">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1634">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1634">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1635">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1635">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1636">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1636">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1637">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1637">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1638">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1638">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1639">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1639">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1640">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1640">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1641">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1641">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1642">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1642">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1643">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1643">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1644">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1644">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1645">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1645">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1646">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1646">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1647">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1647">Required.</span>
          </span>
          <span data-ttu-id="17862-1648">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1648">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1649">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1649">Required.</span>
          </span>
          <span data-ttu-id="17862-1650">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1650">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1651">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1651">Optional.</span>
          </span>
          <span data-ttu-id="17862-1652">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1652">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1653">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1653">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1654">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1654">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1655">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1655">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1656">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1656">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1657">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1657">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1658">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1658">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1659">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1659">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1660">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1660">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1661">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1661">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1662">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1662">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1663">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1663">Random Mode</span></span>  
 <span data-ttu-id="17862-1664">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1664">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1665">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1665">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1666">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1666">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1667">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1667">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1668">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1668">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1669">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1669">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1670">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1670">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1671">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1671">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1672">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1672">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1673">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1673">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1674">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1674">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1675">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1675">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1676">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1676">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1677">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1677">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1678">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1678">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1679">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1679">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1680">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1680">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1681">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1681">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1682">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1682">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1683">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1683">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1684">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1684">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1685">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1685">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1686">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1686">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1687">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1687">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1688">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1688">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1689">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1689">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1690">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1690">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1691">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1691">Binary Mode</span></span>  
 <span data-ttu-id="17862-1692">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1692">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1693">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1693">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1694">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1694">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1695">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1695">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1696">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1696">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1697">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1697">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1698">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1698">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1699">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1699">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1700">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1700">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1701">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1701">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1702">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1702">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1703">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1703">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1704">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1704">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1705">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1705">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1706">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1706">Required.</span>
          </span>
          <span data-ttu-id="17862-1707">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1707">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1708">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1708">Required.</span>
          </span>
          <span data-ttu-id="17862-1709">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1709">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1710">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1710">Optional.</span>
          </span>
          <span data-ttu-id="17862-1711">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1711">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1712">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1712">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1713">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1713">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1714">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1714">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1715">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1715">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1716">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1716">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1717">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1717">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1718">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1718">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1719">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1719">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1720">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1720">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1721">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1721">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1722">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1722">Random Mode</span></span>  
 <span data-ttu-id="17862-1723">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1723">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1724">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1724">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1725">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1725">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1726">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1726">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1727">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1727">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1728">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1728">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1729">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1729">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1730">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1730">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1731">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1731">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1732">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1732">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1733">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1733">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1734">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1734">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1735">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1735">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1736">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1736">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1737">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1737">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1738">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1738">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1739">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1739">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1740">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1740">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1741">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1741">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1742">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1742">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1743">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1743">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1744">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1744">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1745">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1745">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1746">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1747">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1747">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1748">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1748">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1749">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1749">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1750">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1750">Binary Mode</span></span>  
 <span data-ttu-id="17862-1751">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1751">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1752">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1752">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1753">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1753">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1754">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1754">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1755">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1755">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1756">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1756">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1757">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1757">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1758">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1758">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1759">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1759">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1760">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1760">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1761">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1761">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1762">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1762">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1763">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1763">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1764">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1764">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1765">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1765">Required.</span>
          </span>
          <span data-ttu-id="17862-1766">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1766">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1767">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1767">Required.</span>
          </span>
          <span data-ttu-id="17862-1768">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1768">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1769">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1769">Optional.</span>
          </span>
          <span data-ttu-id="17862-1770">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1770">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1771">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1771">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1772">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1772">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1773">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1773">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1774">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1774">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1775">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1775">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1776">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1776">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1777">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1777">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1778">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1778">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1779">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1779">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1780">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1780">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1781">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1781">Random Mode</span></span>  
 <span data-ttu-id="17862-1782">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1783">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1783">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1784">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1785">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1786">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1786">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1787">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1787">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1788">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1788">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1789">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1789">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1790">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1790">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1791">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1791">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1792">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1792">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1793">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1793">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1794">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1794">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1795">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1795">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1796">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1796">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1797">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1797">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1798">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1798">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1799">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1799">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1800">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1800">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1801">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1801">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1802">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1802">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1803">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1803">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1804">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1804">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1805">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1805">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1806">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1806">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1807">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1807">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1808">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1808">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1809">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1809">Binary Mode</span></span>  
 <span data-ttu-id="17862-1810">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1811">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1812">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1813">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1813">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1814">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1814">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1815">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1815">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1816">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1816">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1817">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1817">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1818">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1818">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1819">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1819">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1820">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1820">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1821">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1821">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1822">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1822">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1823">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1823">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1824">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1824">Required.</span>
          </span>
          <span data-ttu-id="17862-1825">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1825">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1826">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1826">Required.</span>
          </span>
          <span data-ttu-id="17862-1827">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1827">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1828">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1828">Optional.</span>
          </span>
          <span data-ttu-id="17862-1829">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1829">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="17862-1830">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1830">Optional.</span>
          </span>
          <span data-ttu-id="17862-1831">文字列を書き込む場合のみ適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1831">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="17862-1832">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1832">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="17862-1833">既定値は、<see langword="False" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1833">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1834">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1834">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1835">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1835">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1836">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1836">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1837">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1837">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1838">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1838">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1839">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1839">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1840">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1840">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1841">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1841">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1842">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1842">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1843">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1843">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1844">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1844">Random Mode</span></span>  
 <span data-ttu-id="17862-1845">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1845">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1846">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1846">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1847">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1847">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1848">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1848">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1849">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1849">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1850">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1850">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1851">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1851">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1852">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1852">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1853">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1853">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1854">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1855">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1855">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1856">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1856">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1857">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1857">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1858">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1858">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1859">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1859">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1860">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1860">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1861">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1861">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1862">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1862">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1863">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1863">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1864">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1864">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1865">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1865">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1866">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1866">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1867">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1867">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1868">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1868">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1869">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1869">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1870">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1870">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1871">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1871">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1872">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1872">Binary Mode</span></span>  
 <span data-ttu-id="17862-1873">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1873">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1874">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1874">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1875">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1875">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1876">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1876">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1877">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1877">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1878">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1878">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1879">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1879">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1880">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1880">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1881">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1881">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1882">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1882">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1883">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1883">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1884">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1884">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1885">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1885">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1886">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1886">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1887">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1887">Required.</span>
          </span>
          <span data-ttu-id="17862-1888">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1888">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1889">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1889">Required.</span>
          </span>
          <span data-ttu-id="17862-1890">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1890">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1891">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1891">Optional.</span>
          </span>
          <span data-ttu-id="17862-1892">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1892">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="17862-1893">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1893">Optional.</span>
          </span>
          <span data-ttu-id="17862-1894">文字列を書き込む場合のみ適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1894">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="17862-1895">配列を動的として扱うかどうか、および長さを表す文字列の配列記述子を書き込むかどうかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1895">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="17862-1896">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1896">Optional.</span>
          </span>
          <span data-ttu-id="17862-1897">文字列を書き込む場合のみ適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1897">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="17862-1898">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1898">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="17862-1899">既定値は、<see langword="False" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1899">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1900">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1900">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1901">
            <see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1901">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="17862-1902">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1902">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1903">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1903">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1904">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1904">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="17862-1905">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1905">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1906">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1906">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="17862-1907">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1907">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1908">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1908">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1909">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1909">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1910">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1910">Random Mode</span></span>  
 <span data-ttu-id="17862-1911">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1911">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1912">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1912">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1913">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1913">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1914">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1914">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1915">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1915">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="17862-1916">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1916">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="17862-1917">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1917">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="17862-1918">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1918">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1919">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1919">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1920">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1920">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1921">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1921">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1922">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1923">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1923">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1924">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="17862-1924">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="17862-1925">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1925">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="17862-1926">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="17862-1926">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="17862-1927">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1927">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="17862-1928">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1928">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="17862-1929">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1929">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1930">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1930">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="17862-1931">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1931">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1932">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1932">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="17862-1933">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1933">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="17862-1934">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1934">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="17862-1935">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1935">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="17862-1936">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="17862-1936">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="17862-1937">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="17862-1937">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1938">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1938">Binary Mode</span></span>  
 <span data-ttu-id="17862-1939">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1939">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="17862-1940">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1940">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="17862-1941">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1941">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1942">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1942">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="17862-1943">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1943">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="17862-1944">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="17862-1944">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="17862-1945">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1945">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="17862-1946">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="17862-1946">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="17862-1947">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="17862-1947">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="17862-1948">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-1948">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1949">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-1949">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="17862-1950">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1950">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-1951">
            <paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1951">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-1952">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1952">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1953">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1953">Required.</span>
          </span>
          <span data-ttu-id="17862-1954">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1954">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-1955">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1955">Required.</span>
          </span>
          <span data-ttu-id="17862-1956">ディスクに書き込まれるデータを保持する有効な変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1956">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="17862-1957">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1957">Optional.</span>
          </span>
          <span data-ttu-id="17862-1958">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1958">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1959">変数の内容をディスク上のファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1959">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="17862-1960">
            <see langword="My" /> 機能を使用すると、<see langword="FilePutObject" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1960">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="17862-1961">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1961">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-1962">`FilePutObject`の代わりに関数を使用して`FilePut`場合は、コンパイル時にあいまいさを避けるために型`Object`など別の型ではなく渡された`Integer`、 `Long`、`Short`となります。</span><span class="sxs-lookup"><span data-stu-id="17862-1962">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="17862-1963">`FilePutObject` 書き込み、オブジェクトを記述する記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="17862-1963">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="17862-1964">記述する場合、`Variant`型、`FilePutObject`が必要です。</span><span class="sxs-lookup"><span data-stu-id="17862-1964">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="17862-1965">状態が不明な 2 番目のパラメーター オブジェクトを使用している場合と、で常に使用こと勧め`FilePutObject`と`FileGetObject`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1965">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="17862-1966">`FilePutObject` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-1966">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-1967">`FilePutObject` を使用して書き込まれたデータは通常、`FileGetObject` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1967">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="17862-1968">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-1968">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="17862-1969">省略した場合`RecordNumber`、 `FilePutObject` 、最後の後に次のレコードまたはバイトを書き込みます`FileGetObject`または`FilePutObject`関数 (またはレコードまたはバイトが、最後が指す`Seek`関数)。</span><span class="sxs-lookup"><span data-stu-id="17862-1969">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="17862-1970">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="17862-1970">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="17862-1971">`FilePutObject` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="17862-1971">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="17862-1972">使用する場合`StringIsFixedLength`  =  `True`で`FilePutObject`と同じ処理を実行する必要がある`FileGetObject`長さが予期する文字列が初期化されていることを確認することも必要とします。</span><span class="sxs-lookup"><span data-stu-id="17862-1972">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="17862-1973">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="17862-1973">Random Mode</span></span>  
 <span data-ttu-id="17862-1974">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1974">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="17862-1975">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePutObject`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1975">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="17862-1976">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-1976">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="17862-1977">埋め込みデータの量を正確に判断できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="17862-1977">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="17862-1978">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="17862-1978">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="17862-1979">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePutObject`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-1979">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="17862-1980">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePutObject` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="17862-1980">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="17862-1981">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1981">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="17862-1982">書き込まれる変数は、文字列を含むオブジェクト場合`FilePutObject`2 バイトの記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="17862-1982">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="17862-1983">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1983">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="17862-1984">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1984">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="17862-1985">書き込まれている変数が、配列で指定されたレコード長の場合、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-1985">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="17862-1986">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-1986">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="17862-1987">長さが 2 に加えて、8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="17862-1987">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="17862-1988">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="17862-1988">Binary Mode</span></span>  
 <span data-ttu-id="17862-1989">ファイルを開くの`Binary`モードでは、すべて、`Random`モードの規則を適用するを除く。</span><span class="sxs-lookup"><span data-stu-id="17862-1989">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="17862-1990">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="17862-1990">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="17862-1991">`FilePutObject` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1991">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-1992">この例では、`FilePutObject`ファイルに文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17862-1992">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-1993">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1993">Required.</span>
          </span>
          <span data-ttu-id="17862-1994">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1994">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="17862-1995">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1995">Required.</span>
          </span>
          <span data-ttu-id="17862-1996">改行される前に 1 行に表示できる文字数を表す 0 ～ 255 の範囲の数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1996">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="17862-1997">
            <c>RecordWidth</c> が 0 の場合は、行の長さに制限がないことを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1997">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="17862-1998">
            <c>RecordWidth</c> の既定値は 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1998">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-1999">
            <see langword="FileOpen" /> 関数を使用して開いたファイルに出力行の桁数を割り当てます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-1999">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="17862-2000">この例では、`FileWidth`ファイルの出力の線の幅を設定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2000">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2001">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2001">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="17862-2002">
            <see langword="Integer" /> 関数で使用できる次のファイル番号を表す <see langword="FileOpen" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-2003">
            <see langword="Integer" /> 関数で使用できる次のファイル番号を表す <see langword="FileOpen" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2003">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2004">使用`FreeFile`を既に使用されていない、ファイル番号を入力します。</span><span class="sxs-lookup"><span data-stu-id="17862-2004">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2005">この例では、 `FreeFile` [次へ] の使用可能なファイル数を返す関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2005">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="17862-2006">出力、ループ内で開かれている 5 つのファイルとそれぞれにいくつかのサンプル データが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2006">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2007">使用中のファイルが 255 個を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2007">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="17862-2008">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2008">Required.</span>
          </span>
          <span data-ttu-id="17862-2009">ファイル、ディレクトリ、またはフォルダーの名前を指定する <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2009">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="17862-2010">
            <c>PathName</c> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2010">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2011">ファイル、ディレクトリ、またはフォルダーの属性を表す <see langword="FileAttribute" /> 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2011">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="17862-2012">
            <see langword="My" /> 機能を使用すると、<see langword="FileAttribute" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="17862-2013">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-2014">
            <see langword="GetAttr" /> によって返される値は、次の表に示す列挙型値の合計です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2014">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span>
          </span>
          <span data-ttu-id="17862-2015">
            <list type="table">
              <item>
                <term> 値  </term>
                <description> 定数  </description>
                <description> 説明  </description>
              </item>
              <item>
                <term>
                  <see langword="Normal" />
                </term>
                <description>
                  <see langword="vbNormal" />
                </description>
                <description> 標準。</description>
              </item>
              <item>
                <term>
                  <see langword="ReadOnly" />
                </term>
                <description>
                  <see langword="vbReadOnly" />
                </description>
                <description> 読み取り専用。</description>
              </item>
              <item>
                <term>
                  <see langword="Hidden" />
                </term>
                <description>
                  <see langword="vbHidden" />
                </description>
                <description> 非表示。</description>
              </item>
              <item>
                <term>
                  <see langword="System" />
                </term>
                <description>
                  <see langword="vbSystem" />
                </description>
                <description> システム ファイル。</description>
              </item>
              <item>
                <term>
                  <see langword="Directory" />
                </term>
                <description>
                  <see langword="vbDirectory" />
                </description>
                <description> ディレクトリまたはフォルダー。</description>
              </item>
              <item>
                <term>
                  <see langword="Archive" />
                </term>
                <description>
                  <see langword="vbArchive" />
                </description>
                <description> ファイルは前回のバックアップ以降に変更されています。</description>
              </item>
              <item>
                <term>
                  <see langword="Alias" />
                </term>
                <description>
                  <see langword="vbAlias" />
                </description>
                <description> ファイルに別の名前が付いています。</description>
              </item>
            </list>
            <block subset="none" type="note">
              <para> これらの列挙体は Visual Basic 言語によって指定されています。これらの名前は、実際の値の代わりにコード内のどの部分でも使用できます。  </para>
            </block>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2015">
              <list type="table">
                <item>
                  <term> Value  </term>
                  <description> Constant  </description>
                  <description> Description  </description>
                </item>
                <item>
                  <term>
                    <see langword="Normal" />
                  </term>
                  <description>
                    <see langword="vbNormal" />
                  </description>
                  <description> Normal.  </description>
                </item>
                <item>
                  <term>
                    <see langword="ReadOnly" />
                  </term>
                  <description>
                    <see langword="vbReadOnly" />
                  </description>
                  <description> Read-only.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Hidden" />
                  </term>
                  <description>
                    <see langword="vbHidden" />
                  </description>
                  <description> Hidden.  </description>
                </item>
                <item>
                  <term>
                    <see langword="System" />
                  </term>
                  <description>
                    <see langword="vbSystem" />
                  </description>
                  <description> System file.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Directory" />
                  </term>
                  <description>
                    <see langword="vbDirectory" />
                  </description>
                  <description> Directory or folder.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Archive" />
                  </term>
                  <description>
                    <see langword="vbArchive" />
                  </description>
                  <description> File has changed since last backup.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Alias" />
                  </term>
                  <description>
                    <see langword="vbAlias" />
                  </description>
                  <description> File has a different name.  </description>
                </item>
              </list>
              <block subset="none" type="note">
                <para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para>
              </block>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2016">どの属性が設定を確認するのには、使用、`And`によって返される値のビットごとの比較を実行する演算子、`GetAttr`関数とする個々 のファイル属性の値。</span><span class="sxs-lookup"><span data-stu-id="17862-2016">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="17862-2017">結果がゼロでない場合は、その属性が名前付きのファイルの設定されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2017">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="17862-2018">次の戻り値など、`And`式が場合は 0、`Archive`属性が設定されていません。</span><span class="sxs-lookup"><span data-stu-id="17862-2018">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="17862-2019">場合、0 以外の値が返されます、`Archive`属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2019">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2020">この例では、`GetAttr`ファイルとディレクトリまたはフォルダーの属性を確認する関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2020">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2021">
            <paramref name="Pathname" /> が無効です。またはワイルドカードを含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2021">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="17862-2022">対象のファイルが存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2022">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="17862-2023">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2023">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2024">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2024">Required.</span>
          </span>
          <span data-ttu-id="17862-2025">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2025">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-2026">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2026">Required.</span>
          </span>
          <span data-ttu-id="17862-2027">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2027">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2028">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2028">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2029">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2029">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2030">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2030">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2031">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2031">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2032">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2032">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="17862-2033">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-2033">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2034">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-2034">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="17862-2035">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2035">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="17862-2036">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="17862-2036">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="17862-2037">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="17862-2037">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="17862-2038">データ</span><span class="sxs-lookup"><span data-stu-id="17862-2038">Data</span></span>|<span data-ttu-id="17862-2039">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="17862-2039">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="17862-2040">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="17862-2040">Delimiting comma or blank line</span></span>|<span data-ttu-id="17862-2041">Empty</span><span class="sxs-lookup"><span data-stu-id="17862-2041">Empty</span></span>|  
|<span data-ttu-id="17862-2042">[NULL]</span><span class="sxs-lookup"><span data-stu-id="17862-2042">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="17862-2043">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="17862-2043">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="17862-2044">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="17862-2044">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="17862-2045">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="17862-2045">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="17862-2046">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="17862-2046">#ERROR `errornumber`#</span></span>|<span data-ttu-id="17862-2047">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="17862-2047">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="17862-2048">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2048">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2049">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="17862-2049">The `Input` function is not localized.</span></span> <span data-ttu-id="17862-2050">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2050">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2051">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2051">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2052">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2052">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2053">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2053">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="17862-2054">この例では、`TestFile`を使用して書き込まれたデータの一部の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="17862-2054">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2055">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2055">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2056">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2056">Required.</span>
          </span>
          <span data-ttu-id="17862-2057">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2057">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-2058">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2058">Required.</span>
          </span>
          <span data-ttu-id="17862-2059">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2059">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2060">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2060">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2061">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2061">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2062">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2062">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2063">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2063">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2064">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2064">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="17862-2065">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-2065">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2066">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-2066">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="17862-2067">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2067">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="17862-2068">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="17862-2068">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="17862-2069">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="17862-2069">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="17862-2070">データ</span><span class="sxs-lookup"><span data-stu-id="17862-2070">Data</span></span>|<span data-ttu-id="17862-2071">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="17862-2071">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="17862-2072">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="17862-2072">Delimiting comma or blank line</span></span>|<span data-ttu-id="17862-2073">Empty</span><span class="sxs-lookup"><span data-stu-id="17862-2073">Empty</span></span>|  
|<span data-ttu-id="17862-2074">[NULL]</span><span class="sxs-lookup"><span data-stu-id="17862-2074">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="17862-2075">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="17862-2075">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="17862-2076">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="17862-2076">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="17862-2077">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="17862-2077">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="17862-2078">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="17862-2078">#ERROR `errornumber`#</span></span>|<span data-ttu-id="17862-2079">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="17862-2079">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="17862-2080">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2080">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2081">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="17862-2081">The `Input` function is not localized.</span></span> <span data-ttu-id="17862-2082">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2082">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2083">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2083">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2084">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2084">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2085">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2085">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="17862-2086">この例では、`TestFile`を使用して書き込まれたデータの一部の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="17862-2086">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2087">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2087">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2088">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2088">Required.</span>
          </span>
          <span data-ttu-id="17862-2089">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2089">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-2090">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2090">Required.</span>
          </span>
          <span data-ttu-id="17862-2091">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2091">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2092">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2092">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2093">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2093">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2094">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2094">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2095">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2095">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2096">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2096">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="17862-2097">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-2097">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2098">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-2098">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="17862-2099">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2099">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="17862-2100">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="17862-2100">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="17862-2101">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="17862-2101">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="17862-2102">データ</span><span class="sxs-lookup"><span data-stu-id="17862-2102">Data</span></span>|<span data-ttu-id="17862-2103">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="17862-2103">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="17862-2104">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="17862-2104">Delimiting comma or blank line</span></span>|<span data-ttu-id="17862-2105">Empty</span><span class="sxs-lookup"><span data-stu-id="17862-2105">Empty</span></span>|  
|<span data-ttu-id="17862-2106">[NULL]</span><span class="sxs-lookup"><span data-stu-id="17862-2106">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="17862-2107">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="17862-2107">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="17862-2108">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="17862-2108">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="17862-2109">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="17862-2109">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="17862-2110">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="17862-2110">#ERROR `errornumber`#</span></span>|<span data-ttu-id="17862-2111">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="17862-2111">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="17862-2112">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2112">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2113">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="17862-2113">The `Input` function is not localized.</span></span> <span data-ttu-id="17862-2114">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2114">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2115">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2115">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2116">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2116">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2117">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2117">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="17862-2118">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="17862-2118">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2119">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2119">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2120">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2120">Required.</span>
          </span>
          <span data-ttu-id="17862-2121">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2121">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-2122">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2122">Required.</span>
          </span>
          <span data-ttu-id="17862-2123">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2123">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2124">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2124">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2125">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2125">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2126">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2126">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2127">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2127">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2128">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2128">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="17862-2129">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-2129">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2130">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-2130">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="17862-2131">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2131">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="17862-2132">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="17862-2132">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="17862-2133">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="17862-2133">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="17862-2134">データ</span><span class="sxs-lookup"><span data-stu-id="17862-2134">Data</span></span>|<span data-ttu-id="17862-2135">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="17862-2135">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="17862-2136">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="17862-2136">Delimiting comma or blank line</span></span>|<span data-ttu-id="17862-2137">Empty</span><span class="sxs-lookup"><span data-stu-id="17862-2137">Empty</span></span>|  
|<span data-ttu-id="17862-2138">[NULL]</span><span class="sxs-lookup"><span data-stu-id="17862-2138">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="17862-2139">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="17862-2139">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="17862-2140">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="17862-2140">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="17862-2141">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="17862-2141">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="17862-2142">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="17862-2142">#ERROR `errornumber`#</span></span>|<span data-ttu-id="17862-2143">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="17862-2143">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="17862-2144">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2144">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2145">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="17862-2145">The `Input` function is not localized.</span></span> <span data-ttu-id="17862-2146">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2146">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2147">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2147">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2148">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2148">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2149">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2149">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="17862-2150">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="17862-2150">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2151">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2151">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2152">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2152">Required.</span>
          </span>
          <span data-ttu-id="17862-2153">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2153">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-2154">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2154">Required.</span>
          </span>
          <span data-ttu-id="17862-2155">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2155">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2156">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2156">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2157">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2157">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2158">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2158">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2159">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2159">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2160">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2160">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="17862-2161">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-2161">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2162">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-2162">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="17862-2163">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2163">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="17862-2164">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="17862-2164">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="17862-2165">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="17862-2165">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="17862-2166">データ</span><span class="sxs-lookup"><span data-stu-id="17862-2166">Data</span></span>|<span data-ttu-id="17862-2167">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="17862-2167">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="17862-2168">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="17862-2168">Delimiting comma or blank line</span></span>|<span data-ttu-id="17862-2169">Empty</span><span class="sxs-lookup"><span data-stu-id="17862-2169">Empty</span></span>|  
|<span data-ttu-id="17862-2170">[NULL]</span><span class="sxs-lookup"><span data-stu-id="17862-2170">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="17862-2171">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="17862-2171">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="17862-2172">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="17862-2172">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="17862-2173">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="17862-2173">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="17862-2174">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="17862-2174">#ERROR `errornumber`#</span></span>|<span data-ttu-id="17862-2175">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="17862-2175">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="17862-2176">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2176">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2177">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="17862-2177">The `Input` function is not localized.</span></span> <span data-ttu-id="17862-2178">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2178">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2179">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2179">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2180">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2180">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2181">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2181">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="17862-2182">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="17862-2182">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2183">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2183">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2184">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2184">Required.</span>
          </span>
          <span data-ttu-id="17862-2185">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2185">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-2186">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2186">Required.</span>
          </span>
          <span data-ttu-id="17862-2187">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2187">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2188">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2188">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2189">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2189">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2190">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2190">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2191">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2191">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2192">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2192">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="17862-2193">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-2193">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2194">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-2194">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="17862-2195">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2195">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="17862-2196">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="17862-2196">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="17862-2197">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="17862-2197">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="17862-2198">データ</span><span class="sxs-lookup"><span data-stu-id="17862-2198">Data</span></span>|<span data-ttu-id="17862-2199">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="17862-2199">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="17862-2200">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="17862-2200">Delimiting comma or blank line</span></span>|<span data-ttu-id="17862-2201">Empty</span><span class="sxs-lookup"><span data-stu-id="17862-2201">Empty</span></span>|  
|<span data-ttu-id="17862-2202">[NULL]</span><span class="sxs-lookup"><span data-stu-id="17862-2202">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="17862-2203">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="17862-2203">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="17862-2204">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="17862-2204">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="17862-2205">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="17862-2205">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="17862-2206">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="17862-2206">#ERROR `errornumber`#</span></span>|<span data-ttu-id="17862-2207">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="17862-2207">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="17862-2208">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2208">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2209">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="17862-2209">The `Input` function is not localized.</span></span> <span data-ttu-id="17862-2210">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2210">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2211">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2211">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2212">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2212">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2213">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2213">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="17862-2214">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="17862-2214">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2215">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2215">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2216">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2216">Required.</span>
          </span>
          <span data-ttu-id="17862-2217">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2217">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-2218">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2218">Required.</span>
          </span>
          <span data-ttu-id="17862-2219">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2219">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2220">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2220">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2221">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2221">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2222">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2222">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2223">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2223">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2224">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2224">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="17862-2225">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-2225">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2226">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-2226">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="17862-2227">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2227">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="17862-2228">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="17862-2228">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="17862-2229">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="17862-2229">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="17862-2230">データ</span><span class="sxs-lookup"><span data-stu-id="17862-2230">Data</span></span>|<span data-ttu-id="17862-2231">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="17862-2231">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="17862-2232">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="17862-2232">Delimiting comma or blank line</span></span>|<span data-ttu-id="17862-2233">Empty</span><span class="sxs-lookup"><span data-stu-id="17862-2233">Empty</span></span>|  
|<span data-ttu-id="17862-2234">[NULL]</span><span class="sxs-lookup"><span data-stu-id="17862-2234">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="17862-2235">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="17862-2235">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="17862-2236">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="17862-2236">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="17862-2237">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="17862-2237">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="17862-2238">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="17862-2238">#ERROR `errornumber`#</span></span>|<span data-ttu-id="17862-2239">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="17862-2239">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="17862-2240">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2240">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2241">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="17862-2241">The `Input` function is not localized.</span></span> <span data-ttu-id="17862-2242">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2242">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2243">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2243">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2244">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2244">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2245">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2245">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="17862-2246">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="17862-2246">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2247">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2247">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2248">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2248">Required.</span>
          </span>
          <span data-ttu-id="17862-2249">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2249">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-2250">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2250">Required.</span>
          </span>
          <span data-ttu-id="17862-2251">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2251">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2252">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2252">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2253">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2253">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2254">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2254">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2255">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2255">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2256">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2256">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="17862-2257">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-2257">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2258">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-2258">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="17862-2259">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2259">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="17862-2260">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="17862-2260">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="17862-2261">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="17862-2261">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="17862-2262">データ</span><span class="sxs-lookup"><span data-stu-id="17862-2262">Data</span></span>|<span data-ttu-id="17862-2263">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="17862-2263">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="17862-2264">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="17862-2264">Delimiting comma or blank line</span></span>|<span data-ttu-id="17862-2265">Empty</span><span class="sxs-lookup"><span data-stu-id="17862-2265">Empty</span></span>|  
|<span data-ttu-id="17862-2266">[NULL]</span><span class="sxs-lookup"><span data-stu-id="17862-2266">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="17862-2267">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="17862-2267">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="17862-2268">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="17862-2268">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="17862-2269">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="17862-2269">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="17862-2270">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="17862-2270">#ERROR `errornumber`#</span></span>|<span data-ttu-id="17862-2271">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="17862-2271">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="17862-2272">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2272">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2273">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="17862-2273">The `Input` function is not localized.</span></span> <span data-ttu-id="17862-2274">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2274">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2275">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2275">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2276">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2276">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2277">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2277">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="17862-2278">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="17862-2278">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2279">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2279">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2280">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2280">Required.</span>
          </span>
          <span data-ttu-id="17862-2281">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2281">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-2282">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2282">Required.</span>
          </span>
          <span data-ttu-id="17862-2283">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2283">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2284">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2284">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2285">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2285">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2286">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2286">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2287">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2287">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2288">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2288">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="17862-2289">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-2289">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2290">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-2290">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="17862-2291">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2291">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="17862-2292">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="17862-2292">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="17862-2293">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="17862-2293">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="17862-2294">データ</span><span class="sxs-lookup"><span data-stu-id="17862-2294">Data</span></span>|<span data-ttu-id="17862-2295">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="17862-2295">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="17862-2296">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="17862-2296">Delimiting comma or blank line</span></span>|<span data-ttu-id="17862-2297">Empty</span><span class="sxs-lookup"><span data-stu-id="17862-2297">Empty</span></span>|  
|<span data-ttu-id="17862-2298">[NULL]</span><span class="sxs-lookup"><span data-stu-id="17862-2298">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="17862-2299">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="17862-2299">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="17862-2300">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="17862-2300">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="17862-2301">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="17862-2301">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="17862-2302">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="17862-2302">#ERROR `errornumber`#</span></span>|<span data-ttu-id="17862-2303">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="17862-2303">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="17862-2304">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2304">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2305">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="17862-2305">The `Input` function is not localized.</span></span> <span data-ttu-id="17862-2306">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2306">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2307">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2307">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2308">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2308">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2309">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2309">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="17862-2310">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="17862-2310">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2311">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2311">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2312">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2312">Required.</span>
          </span>
          <span data-ttu-id="17862-2313">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2313">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-2314">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2314">Required.</span>
          </span>
          <span data-ttu-id="17862-2315">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2315">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2316">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2316">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2317">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2317">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2318">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2318">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2319">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2319">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2320">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2320">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="17862-2321">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-2321">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2322">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-2322">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="17862-2323">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2323">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="17862-2324">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="17862-2324">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="17862-2325">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="17862-2325">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="17862-2326">データ</span><span class="sxs-lookup"><span data-stu-id="17862-2326">Data</span></span>|<span data-ttu-id="17862-2327">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="17862-2327">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="17862-2328">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="17862-2328">Delimiting comma or blank line</span></span>|<span data-ttu-id="17862-2329">Empty</span><span class="sxs-lookup"><span data-stu-id="17862-2329">Empty</span></span>|  
|<span data-ttu-id="17862-2330">[NULL]</span><span class="sxs-lookup"><span data-stu-id="17862-2330">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="17862-2331">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="17862-2331">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="17862-2332">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="17862-2332">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="17862-2333">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="17862-2333">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="17862-2334">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="17862-2334">#ERROR `errornumber`#</span></span>|<span data-ttu-id="17862-2335">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="17862-2335">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="17862-2336">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2336">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2337">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="17862-2337">The `Input` function is not localized.</span></span> <span data-ttu-id="17862-2338">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2338">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2339">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2339">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2340">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2340">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2341">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2341">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="17862-2342">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="17862-2342">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2343">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2343">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2344">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2344">Required.</span>
          </span>
          <span data-ttu-id="17862-2345">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2345">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-2346">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2346">Required.</span>
          </span>
          <span data-ttu-id="17862-2347">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2347">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2348">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2348">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2349">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2349">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2350">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2350">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2351">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2351">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2352">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2352">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="17862-2353">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-2353">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2354">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-2354">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="17862-2355">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2355">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="17862-2356">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="17862-2356">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="17862-2357">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="17862-2357">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="17862-2358">データ</span><span class="sxs-lookup"><span data-stu-id="17862-2358">Data</span></span>|<span data-ttu-id="17862-2359">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="17862-2359">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="17862-2360">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="17862-2360">Delimiting comma or blank line</span></span>|<span data-ttu-id="17862-2361">Empty</span><span class="sxs-lookup"><span data-stu-id="17862-2361">Empty</span></span>|  
|<span data-ttu-id="17862-2362">[NULL]</span><span class="sxs-lookup"><span data-stu-id="17862-2362">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="17862-2363">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="17862-2363">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="17862-2364">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="17862-2364">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="17862-2365">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="17862-2365">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="17862-2366">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="17862-2366">#ERROR `errornumber`#</span></span>|<span data-ttu-id="17862-2367">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="17862-2367">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="17862-2368">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2368">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2369">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="17862-2369">The `Input` function is not localized.</span></span> <span data-ttu-id="17862-2370">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2370">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2371">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2371">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2372">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2372">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2373">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2373">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="17862-2374">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="17862-2374">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2375">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2375">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2376">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2376">Required.</span>
          </span>
          <span data-ttu-id="17862-2377">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2377">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="17862-2378">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2378">Required.</span>
          </span>
          <span data-ttu-id="17862-2379">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2379">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2380">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2380">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2381">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2381">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2382">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2382">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2383">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2383">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2384">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2384">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="17862-2385">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-2385">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2386">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-2386">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="17862-2387">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2387">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="17862-2388">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="17862-2388">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="17862-2389">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="17862-2389">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="17862-2390">データ</span><span class="sxs-lookup"><span data-stu-id="17862-2390">Data</span></span>|<span data-ttu-id="17862-2391">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="17862-2391">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="17862-2392">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="17862-2392">Delimiting comma or blank line</span></span>|<span data-ttu-id="17862-2393">Empty</span><span class="sxs-lookup"><span data-stu-id="17862-2393">Empty</span></span>|  
|<span data-ttu-id="17862-2394">[NULL]</span><span class="sxs-lookup"><span data-stu-id="17862-2394">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="17862-2395">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="17862-2395">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="17862-2396">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="17862-2396">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="17862-2397">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="17862-2397">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="17862-2398">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="17862-2398">#ERROR `errornumber`#</span></span>|<span data-ttu-id="17862-2399">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="17862-2399">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="17862-2400">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2400">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2401">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="17862-2401">The `Input` function is not localized.</span></span> <span data-ttu-id="17862-2402">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2402">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2403">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2403">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2404">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2404">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2405">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2405">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="17862-2406">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="17862-2406">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2407">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2407">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2408">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2408">Required.</span>
          </span>
          <span data-ttu-id="17862-2409">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2409">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="17862-2410">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2410">Required.</span>
          </span>
          <span data-ttu-id="17862-2411">読み込む文字数を指定する有効な任意の数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2411">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2412">
            <see langword="String" /> モードまたは <see langword="Input" /> モードで開いたファイルから読み取る文字を表す文字列型 (<see langword="Binary" />) の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2412">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="17862-2413">
            <see langword="My" /> 機能を使用すると、<see langword="InputString" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2413">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="17862-2414">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2414">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-2415">
            <see langword="String" /> モードまたは <see langword="Input" /> モードで開いたファイルから読み取る文字を表す文字列型 (<see langword="Binary" />) の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2415">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="17862-2416">
            <see langword="My" /> 機能を使用すると、<see langword="InputString" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2416">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2417">`InputString`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2417">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2418">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2418">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2419">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2419">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2420">データを読み取り、`InputString`を使用して関数が記述ファイルには、通常`Print`または`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2420">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="17862-2421">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="17862-2421">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="17862-2422">異なり、`Input`関数の場合、`InputString`関数には、そこにすべての文字が返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2422">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="17862-2423">これには、コンマ、キャリッジ リターン、ライン フィード、引用符、および先頭のスペースが含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2423">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="17862-2424">開いたファイル`Binary`アクセスを使用してファイルを読み取ろうとして、`InputString`行われるまで`EOF`返します`True`エラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2424">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="17862-2425">使用して、`LOF`と`Loc`関数の代わりに`EOF`を使用してバイナリ ファイルを読み取るときに`InputString`、使用または`FileGet`を使用すると、`EOF`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2425">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2426">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容に関するセキュリティ上の決定は行いません。</span><span class="sxs-lookup"><span data-stu-id="17862-2426">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="17862-2427">たとえば、Form1.vb という名前のファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-2427">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2428">この例では、`InputString`ファイルから一度に 1 つの文字を読み取りし、印刷をする関数、`Output`ウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="17862-2428">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="17862-2429">この例では、`MyFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="17862-2429">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2430">
            <paramref name="FileNumber" /> は存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2430">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-2431">
            <paramref name="CharCount" /> は &lt; 0 または &gt; 214 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2431">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="17862-2432">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2432">Required.</span>
          </span>
          <span data-ttu-id="17862-2433">削除する 1 つ以上のファイル名を指定する <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2433">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="17862-2434">
            <c>PathName</c> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2434">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2435">ファイルをディスクから削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2435">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="17862-2436">
            <see langword="My" /> 機能を使用すると、<see langword="Kill" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2436">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="17862-2437">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2437">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2438">`Kill` 複数の文字の使用をサポートしています (`*`) と 1 文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2438">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="17862-2439">**セキュリティに関する注意**を実行するために、`Kill`関数に必要な`Read`と`PathDiscovery`のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="17862-2439">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="17862-2440">詳細については、次を参照してください<xref:System.Security.SecurityException>[コード アクセス許可。](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="17862-2440">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2441">この例では、`Kill`ディスクからファイルを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2441">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2442">対象のファイルが開かれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2442">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="17862-2443">対象のファイルが見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2443">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="17862-2444">アクセス許可は拒否されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2444">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2445">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2445">Required.</span>
          </span>
          <span data-ttu-id="17862-2446">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2446">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2447">開かれたシーケンシャル ファイルから 1 行を読み込み、<see langword="String" /> 変数に割り当てます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2447">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-2448">開かれたシーケンシャル ファイルから 1 行を読み込み、<see langword="String" /> 変数に割り当てます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2448">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2449">`LineInput`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2449">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2450">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2450">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2451">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2451">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2452">データを読み取る`LineInput`を使用して、ファイルに書き込まれますが、通常は`Print`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2452">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2453">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="17862-2453">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="17862-2454">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="17862-2454">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="17862-2455">`LineInput`が復帰を検出するまでの時にファイルの 1 文字から関数を読み取ります (`Chr(13)`) またはキャリッジ リターン/ライン フィード (`Chr(13) + Chr(10)`) シーケンス。</span><span class="sxs-lookup"><span data-stu-id="17862-2455">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="17862-2456">キャリッジ リターン/ライン フィードのシーケンスは文字の文字列に追加の代わりにスキップされます。</span><span class="sxs-lookup"><span data-stu-id="17862-2456">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2457">使用して、ファイルから読み取り、`LineInput`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2457">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2458">この例では、`LineInput`シーケンシャル ファイルから行を読み取るを変数に割り当てる関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2458">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="17862-2459">この例では、`TestFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="17862-2459">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="17862-2460">ファイルの終端に達しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2460">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2461">
            <paramref name="FileNumber" /> は存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2461">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2462">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2462">Required.</span>
          </span>
          <span data-ttu-id="17862-2463">有効な任意の <see langword="Integer" /> 型のファイル番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2463">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2464">開かれたファイル内の現在の読み込みと書き込みの位置を指定する <see langword="Long" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2464">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-2465">開かれたファイル内の現在の読み込みと書き込みの位置を指定する <see langword="Long" /> 値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2465">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2466">`Loc`関数は 0 から始まる; ファイルの最初のバイトを取得するために使用すると、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2466">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="17862-2467">`Loc`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2467">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2468">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2468">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2469">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2469">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2470">各ファイルのアクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="17862-2470">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="17862-2471">モード</span><span class="sxs-lookup"><span data-stu-id="17862-2471">Mode</span></span>|<span data-ttu-id="17862-2472">戻り値</span><span class="sxs-lookup"><span data-stu-id="17862-2472">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="17862-2473">最後のレコードから読み取りまたは書き込みをファイルの数。</span><span class="sxs-lookup"><span data-stu-id="17862-2473">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="17862-2474">128 で割ったファイル内の現在のバイト位置。</span><span class="sxs-lookup"><span data-stu-id="17862-2474">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="17862-2475">ただし、した情報が返されます。`Loc`のシーケンシャル ファイルは使用も必要です。</span><span class="sxs-lookup"><span data-stu-id="17862-2475">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="17862-2476">最後のバイトの読み取りまたは書き込みの位置。</span><span class="sxs-lookup"><span data-stu-id="17862-2476">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="17862-2477">この例では、`Loc`を開いているファイル内の現在の読み取り/書き込み位置を返す関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2477">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="17862-2478">この例では、`MyFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="17862-2478">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2479">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2479">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="17862-2480">
            <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2480">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="17862-2481">
            <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2481">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="17862-2482">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2482">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2483">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2483">Required.</span>
          </span>
          <span data-ttu-id="17862-2484">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2484">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2485">
            <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2485">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="17862-2486">
            <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2486">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="17862-2487">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2487">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2488">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2488">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="17862-2489">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="17862-2489">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="17862-2490">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2490">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="17862-2491">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="17862-2491">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="17862-2492">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2492">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="17862-2493">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2493">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2494">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2494">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="17862-2495">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2495">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2496">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2496">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2497">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2497">Required.</span>
          </span>
          <span data-ttu-id="17862-2498">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2498">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="17862-2499">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2499">Optional.</span>
          </span>
          <span data-ttu-id="17862-2500">ロックまたはアンロックされる唯一のレコードまたはバイトの番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2500">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2501">
            <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2501">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="17862-2502">
            <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2502">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="17862-2503">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2503">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2504">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2504">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="17862-2505">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="17862-2505">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="17862-2506">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2506">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="17862-2507">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="17862-2507">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="17862-2508">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2508">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="17862-2509">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2509">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2510">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2510">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="17862-2511">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2511">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2512">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2512">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2513">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2513">Required.</span>
          </span>
          <span data-ttu-id="17862-2514">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2514">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="17862-2515">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2515">Optional.</span>
          </span>
          <span data-ttu-id="17862-2516">ロックまたはアンロックされる最初のレコードまたはバイトの番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2516">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="17862-2517">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2517">Optional.</span>
          </span>
          <span data-ttu-id="17862-2518">ロックまたはアンロックされる最後のレコードまたはバイトの番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2518">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2519">
            <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2519">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="17862-2520">
            <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2520">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="17862-2521">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2521">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2522">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2522">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="17862-2523">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="17862-2523">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="17862-2524">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2524">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="17862-2525">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="17862-2525">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="17862-2526">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2526">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="17862-2527">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2527">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2528">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2528">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="17862-2529">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2529">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2530">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2530">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2531">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2531">Required.</span>
          </span>
          <span data-ttu-id="17862-2532">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2532">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2533">
            <see langword="Long" /> 関数を使用して開かれたファイルのサイズをバイト単位で表す <see langword="FileOpen" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2533">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="17862-2534">
            <see langword="My" /> 機能を使用すると、<see langword="LOF" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2534">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="17862-2535">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2535">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-2536">
            <see langword="Long" /> 関数を使用して開かれたファイルのサイズをバイト単位で表す <see langword="FileOpen" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2536">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="17862-2537">
            <see langword="My" /> 機能を使用すると、<see langword="LOF" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2537">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2538">使用して、`FileLen`開かれていないファイルの長さを取得します。</span><span class="sxs-lookup"><span data-stu-id="17862-2538">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2539">この例では、`LOF`開いているファイルのサイズを決定する関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2539">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="17862-2540">この例では、`TestFile`はサンプル データを含むテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="17862-2540">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2541">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2541">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="17862-2542">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2542">Required.</span>
          </span>
          <span data-ttu-id="17862-2543">作成されるディレクトリを識別する <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2543">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="17862-2544">
            <c>Path</c> にはドライブを含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2544">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="17862-2545">ドライブを指定しない場合、<see langword="MkDir" /> は現在のドライブに新しいディレクトリを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2545">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2546">新しいディレクトリを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2546">Creates a new directory.</span>
          </span>
          <span data-ttu-id="17862-2547">
            <see langword="My" /> 機能を使用すると、<see langword="MkDir" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2547">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="17862-2548">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2548">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2549">この関数は、新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="17862-2549">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2550">この例では、`MkDir`ディレクトリを作成する関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2550">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="17862-2551">ドライブが指定されていない場合は、新しいディレクトリが現在のドライブに作成されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2551">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-2552">
            <paramref name="Path" /> が指定されていません。または空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2552">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="17862-2553">アクセス許可は拒否されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2553">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2554">ディレクトリが既に存在しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2554">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2555">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2555">Required.</span>
          </span>
          <span data-ttu-id="17862-2556">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2556">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="17862-2557">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2557">Optional.</span>
          </span>
          <span data-ttu-id="17862-2558">ファイルへ書き込む 0 個以上のコンマで区切られた式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2558">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="17862-2559">
            <c>Output</c> 引数の設定は以下のとおりです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2559">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="17862-2560">
            <see langword="T:System.IO.IOException" />: ファイル モードが有効ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2560">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="17862-2561">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> が存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2561">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2562">表示形式データをシーケンシャル ファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2562">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2563">`Print`と`PrintLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2563">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2564">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2564">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2565">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2565">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2566">`Print` 行の最後に、改行は含まれませんただし、`PrintLine`改行にが含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2566">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="17862-2567">書き込まれたデータ`Print`を使用してファイルから通常の読み取りは`LineInput`または`Input`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2567">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="17862-2568">省略した場合`Output`の`PrintLine`、ファイルには、空行が出力`Print`、何も出力します。</span><span class="sxs-lookup"><span data-stu-id="17862-2568">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="17862-2569">タブの境界が混合コンマ上をコンマで区切られた複数の式に配置され、`TAB`矛盾した結果が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2569">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="17862-2570">`Boolean`データか、`True`または`False`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2570">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="17862-2571">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="17862-2571">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="17862-2572">日付データは、システムによって認識される標準の短い日付形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2572">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="17862-2573">日付または時刻部分のいずれかが不足している、または 0 の場合は、提供された部分のみが、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2573">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="17862-2574">場合、ファイルに何も書き込まれませんが`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="17862-2574">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="17862-2575">ただし場合、`Output`リスト データは`DBNull`、`Null`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2575">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="17862-2576">`Error`として、データ、出力が表示されます`Error errorcode`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2576">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="17862-2577">`Error`キーワードは、ロケールに関係なくは翻訳されません。</span><span class="sxs-lookup"><span data-stu-id="17862-2577">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="17862-2578">使用して、ファイルに書き込まれたすべてのデータ`Print`が国際的に対応しています。 つまり、データの形式が正しく、適切な 10 進区切り記号。</span><span class="sxs-lookup"><span data-stu-id="17862-2578">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="17862-2579">ユーザーが複数のロケールで使用するためのデータを出力する場合`Write`使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2579">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="17862-2580">使用して、ファイルへの書き込み、`Print`または`PrintLine`functions が必要です`Write`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2580">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2581">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2581">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2582">この例では、`Print`と`PrintLine`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-2582">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2583">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2583">Required.</span>
          </span>
          <span data-ttu-id="17862-2584">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2584">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="17862-2585">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2585">Optional.</span>
          </span>
          <span data-ttu-id="17862-2586">ファイルへ書き込む 0 個以上のコンマで区切られた式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2586">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="17862-2587">
            <c>Output</c> 引数の設定は以下のとおりです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2587">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="17862-2588">
            <see langword="T:System.IO.IOException" />: ファイル モードが有効ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2588">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="17862-2589">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> が存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2589">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2590">表示形式データをシーケンシャル ファイルに書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2590">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2591">`Print`と`PrintLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2591">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2592">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2592">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2593">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2593">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2594">`Print` 行の最後に、改行は含まれませんただし、`PrintLine`改行にが含まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2594">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="17862-2595">書き込まれたデータ`Print`を使用してファイルから通常の読み取りは`LineInput`または`Input`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2595">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="17862-2596">省略した場合`Output`の`PrintLine`、ファイルには、空行が出力`Print`、何も出力します。</span><span class="sxs-lookup"><span data-stu-id="17862-2596">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="17862-2597">タブの境界が混合コンマ上をコンマで区切られた複数の式に配置され、`TAB`矛盾した結果が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2597">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="17862-2598">`Boolean`データか、`True`または`False`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2598">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="17862-2599">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="17862-2599">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="17862-2600">日付データは、システムによって認識される標準の短い日付形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2600">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="17862-2601">日付または時刻部分のいずれかが不足している、または 0 の場合は、提供された部分のみが、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2601">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="17862-2602">場合、ファイルに何も書き込まれませんが`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="17862-2602">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="17862-2603">ただし場合、`Output`リスト データは`DBNull`、`Null`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2603">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="17862-2604">`Error`として、データ、出力が表示されます`Error errorcode`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2604">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="17862-2605">`Error`キーワードは、ロケールに関係なくは翻訳されません。</span><span class="sxs-lookup"><span data-stu-id="17862-2605">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="17862-2606">使用して、ファイルに書き込まれたすべてのデータ`Print`が国際的に対応しています。 つまり、データの形式が正しく、適切な 10 進区切り記号。</span><span class="sxs-lookup"><span data-stu-id="17862-2606">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="17862-2607">ユーザーが複数のロケールで使用するためのデータを出力する場合`Write`使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2607">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="17862-2608">使用して、ファイルへの書き込み、`Print`または`PrintLine`functions が必要です`Write`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2608">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2609">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2609">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2610">この例では、`Print`と`PrintLine`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-2610">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="17862-2611">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2611">Required.</span>
          </span>
          <span data-ttu-id="17862-2612">既存のファイルの名前と場所を指定する <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2612">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="17862-2613">
            <c>OldPath</c> には、ファイルのディレクトリおよびドライブを含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2613">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="17862-2614">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2614">Required.</span>
          </span>
          <span data-ttu-id="17862-2615">新しいファイルの名前と場所を指定する <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2615">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="17862-2616">
            <c>NewPath</c> には、出力先のディレクトリおよびドライブを含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2616">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="17862-2617">
            <c>NewPath</c> には、既に存在しているファイル名は指定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2617">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2618">ディスク ファイルまたはディレクトリの名前を変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2618">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="17862-2619">
            <see langword="My" /> 機能を使用すると、<see langword="Rename" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2619">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="17862-2620">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2620">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2621">`Rename`関数は、ファイルの名前を変更し、必要な場合は、別のディレクトリに移動します。</span><span class="sxs-lookup"><span data-stu-id="17862-2621">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="17862-2622">`Rename`関数は、ドライブ間でファイルを移動できますが、既存のディレクトリ名前のみ変更できますと両方`NewPath`と`OldPath`同じドライブ上にあります。</span><span class="sxs-lookup"><span data-stu-id="17862-2622">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="17862-2623">`Rename` 新しいファイルまたはディレクトリを作成することはできません。</span><span class="sxs-lookup"><span data-stu-id="17862-2623">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="17862-2624">使用して、`Rename`関数ファイルを開くには、エラーを生成します。</span><span class="sxs-lookup"><span data-stu-id="17862-2624">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="17862-2625">名前を変更する前に、開いているファイルを閉じる必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2625">You must close an open file before renaming it.</span></span> <span data-ttu-id="17862-2626">`Rename` 引数には、複数の文字 (\*) および 1 文字 (?) のワイルドカードを含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="17862-2626">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="17862-2627">使用する場合`Rename`保護されていない場所からファイルを保護された場所にコピーするファイルは制限の少ない権限を保持します。</span><span class="sxs-lookup"><span data-stu-id="17862-2627">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="17862-2628">セキュリティ リスクの可能性を大きくしないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="17862-2628">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2629">この例では、`Rename`ファイルの名前を変更する関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2629">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="17862-2630">この例では、既に指定されているディレクトリが存在すると仮定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2630">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-2631">パスが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2631">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="17862-2632">
            <paramref name="OldPath" /> ファイルが存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2632">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2633">異なるデバイスには名前を変更できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2633">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="17862-2634">
            <see langword="FileOpen" /> 関数を使用して開いたすべてのディスク ファイルを閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2634">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="17862-2635">
            <see langword="My" /> 機能を使用すると、<see langword="Reset" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2635">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="17862-2636">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2636">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2637">`Reset`関数によって開かれたすべてのアクティブなファイルを閉じ、`FileOpen`関数と同じ機能があり`FileClose()`パラメーターなし。</span><span class="sxs-lookup"><span data-stu-id="17862-2637">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2638">この例では、`Reset`を開いているすべてのファイルを閉じて、すべてのファイル バッファーの内容をディスクに書き込む関数です。</span><span class="sxs-lookup"><span data-stu-id="17862-2638">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="17862-2639">使用に注意してください、`Object`変数`FileNumber`文字列と数値の両方として。</span><span class="sxs-lookup"><span data-stu-id="17862-2639">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="17862-2640">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2640">Required.</span>
          </span>
          <span data-ttu-id="17862-2641">削除するディレクトリまたはフォルダーを識別する <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2641">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="17862-2642">
            <c>Path</c> にはドライブを含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2642">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="17862-2643">ドライブを指定しない場合、<see langword="RmDir" /> は現在のドライブのディレクトリを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2643">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2644">既存のディレクトリを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2644">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="17862-2645">
            <see langword="My" /> 機能を使用すると、<see langword="RmDir" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2645">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="17862-2646">詳細については、「<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2646">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2647">使用しようとする場合にエラーが発生した`RmDir`ファイルを含むディレクトリにします。</span><span class="sxs-lookup"><span data-stu-id="17862-2647">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="17862-2648">使用して、`Kill`ディレクトリを削除しようとする前に、すべてのファイルを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2648">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2649">この例では、`RmDir`既存のディレクトリを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2649">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-2650">
            <paramref name="Path" /> が指定されていません。または空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2650">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2651">対象のディレクトリにファイルが存在しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2651">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="17862-2652">ディレクトリが存在していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2652">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="17862-2653">
            <see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2653">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="17862-2654">
            <see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2654">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="17862-2655">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2655">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2656">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2656">Required.</span>
          </span>
          <span data-ttu-id="17862-2657">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2657">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2658">
            <see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2658">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="17862-2659">
            <see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="17862-2660">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-2661">
            <see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2661">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2662">`Seek` 1 から 2,147, 483,647 の値を返します (= 2 ^31-1) と、包括的です。</span><span class="sxs-lookup"><span data-stu-id="17862-2662">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="17862-2663">各ファイルのアクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="17862-2663">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="17862-2664">モード</span><span class="sxs-lookup"><span data-stu-id="17862-2664">Mode</span></span>|<span data-ttu-id="17862-2665">戻り値</span><span class="sxs-lookup"><span data-stu-id="17862-2665">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="17862-2666">次のレコードの読み取りまたは書き込みの数</span><span class="sxs-lookup"><span data-stu-id="17862-2666">Number of the next record read or written</span></span>|  
|<span data-ttu-id="17862-2667">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="17862-2667">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="17862-2668">バイトの位置が次の操作が発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2668">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="17862-2669">ファイルの最初のバイト位置 1、2 番目のバイトが位置 2、という具合になります。</span><span class="sxs-lookup"><span data-stu-id="17862-2669">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="17862-2670">この例では、`Seek`関数を現在の位置を返します。</span><span class="sxs-lookup"><span data-stu-id="17862-2670">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="17862-2671">この例では`TestFile`構造体のレコードを含むファイル`Record`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2671">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="17862-2672">ファイルを開くの`Random`モード、`Seek`次のレコードの数を返します。</span><span class="sxs-lookup"><span data-stu-id="17862-2672">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="17862-2673">以外のモードで開いているファイルの`Random`モード、`Seek`次のバイト位置を返します。</span><span class="sxs-lookup"><span data-stu-id="17862-2673">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="17862-2674">想定`TestFile`は数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="17862-2674">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="17862-2675">この例では、`Seek`関数またはファイルに書き込みを次の読み取り位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2675">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="17862-2676">以外のモードで開いているファイルの`Random`モード、`Seek`次のバイト位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2676">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="17862-2677">想定`TestFile`は数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="17862-2677">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2678">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2678">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2679">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2679">Required.</span>
          </span>
          <span data-ttu-id="17862-2680">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2680">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="17862-2681">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2681">Required.</span>
          </span>
          <span data-ttu-id="17862-2682">次の読み書き操作が発生する場所を示す 1 ～ 2,147,483,647 の範囲の数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2682">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2683">
            <see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2683">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="17862-2684">
            <see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2684">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="17862-2685">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2685">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2686">`Seek` 1 から 2,147, 483,647 の値を返します (= 2 ^31-1) と、包括的です。</span><span class="sxs-lookup"><span data-stu-id="17862-2686">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="17862-2687">各ファイルのアクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="17862-2687">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="17862-2688">モード</span><span class="sxs-lookup"><span data-stu-id="17862-2688">Mode</span></span>|<span data-ttu-id="17862-2689">戻り値</span><span class="sxs-lookup"><span data-stu-id="17862-2689">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="17862-2690">次のレコードの読み取りまたは書き込みの数</span><span class="sxs-lookup"><span data-stu-id="17862-2690">Number of the next record read or written</span></span>|  
|<span data-ttu-id="17862-2691">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="17862-2691">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="17862-2692">バイトの位置が次の操作が発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2692">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="17862-2693">ファイルの最初のバイト位置 1、2 番目のバイトが位置 2、という具合になります。</span><span class="sxs-lookup"><span data-stu-id="17862-2693">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="17862-2694">この例では、`Seek`関数を現在の位置を返します。</span><span class="sxs-lookup"><span data-stu-id="17862-2694">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="17862-2695">この例では`TestFile`構造体のレコードを含むファイル`Record`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2695">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="17862-2696">ファイルを開くの`Random`モード、`Seek`次のレコードの数を返します。</span><span class="sxs-lookup"><span data-stu-id="17862-2696">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="17862-2697">以外のモードで開いているファイルの`Random`モード、`Seek`次のバイト位置を返します。</span><span class="sxs-lookup"><span data-stu-id="17862-2697">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="17862-2698">想定`TestFile`は数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="17862-2698">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="17862-2699">この例では、`Seek`関数またはファイルに書き込みを次の読み取り位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2699">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="17862-2700">以外のモードで開いているファイルの`Random`モード、`Seek`次のバイト位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2700">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="17862-2701">想定`TestFile`は数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="17862-2701">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2702">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2702">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="17862-2703">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2703">Required.</span>
          </span>
          <span data-ttu-id="17862-2704">ファイル名を指定する <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2704">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="17862-2705">
            <c>PathName</c> にはディレクトリまたはフォルダー、およびドライブを含めることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2705">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="17862-2706">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2706">Required.</span>
          </span>
          <span data-ttu-id="17862-2707">定数式または数式の合計がファイル属性を指定する場合の定数式または数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2707">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2708">ファイルの属性情報を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2708">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="17862-2709">
            <see langword="My" /> 機能を使用すると、<see langword="SetAttr" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2709">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="17862-2710">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2710">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2711">開いているファイルの属性を設定しようとする場合、実行時エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="17862-2711">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="17862-2712">`Attributes`列挙値の引数は次のようにします。</span><span class="sxs-lookup"><span data-stu-id="17862-2712">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="17862-2713">[値]</span><span class="sxs-lookup"><span data-stu-id="17862-2713">Value</span></span>|<span data-ttu-id="17862-2714">定数</span><span class="sxs-lookup"><span data-stu-id="17862-2714">Constant</span></span>|<span data-ttu-id="17862-2715">説明</span><span class="sxs-lookup"><span data-stu-id="17862-2715">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="17862-2716">標準 (既定値)。</span><span class="sxs-lookup"><span data-stu-id="17862-2716">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="17862-2717">読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="17862-2717">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="17862-2718">非表示。</span><span class="sxs-lookup"><span data-stu-id="17862-2718">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="17862-2719">システム ファイル。</span><span class="sxs-lookup"><span data-stu-id="17862-2719">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="17862-2720">ボリューム ラベル</span><span class="sxs-lookup"><span data-stu-id="17862-2720">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="17862-2721">ディレクトリまたはフォルダー。</span><span class="sxs-lookup"><span data-stu-id="17862-2721">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="17862-2722">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="17862-2722">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="17862-2723">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="17862-2723">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="17862-2724">これらの列挙体は Visual Basic 言語によって指定されています。</span><span class="sxs-lookup"><span data-stu-id="17862-2724">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="17862-2725">名前は、実際の値ではなく、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="17862-2725">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2726">この例では、`SetAttr`ファイルの属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2726">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="17862-2727">
            <paramref name="Attribute" /> の型が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2727">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="17862-2728">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2728">Required.</span>
          </span>
          <span data-ttu-id="17862-2729">リストの次の式を表示または出力する前に挿入する空白の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2729">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2730">
            <see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2730">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-2731">
            <see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2731">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2732">場合`Count`が出力線の幅、次の出力位置にすぐに次の空白の数よりも少ない。</span><span class="sxs-lookup"><span data-stu-id="17862-2732">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="17862-2733">場合`Count`が出力の線の幅よりも大きい`SPC`数式を使用して、次の出力位置が計算されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2733">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="17862-2734">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="17862-2734">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="17862-2735">たとえば、現在の出力位置が 24 の場合は、出力行の幅は 80、しを指定する`SPC(90)`、次の出力は 34 (現在の印刷位置 + 90/80 の残りの部分) の位置から開始します。</span><span class="sxs-lookup"><span data-stu-id="17862-2735">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="17862-2736">現在の出力位置と出力の線の幅の違いがある場合より小さい`Count`(または`Count` `Mod` *幅*)、`SPC`関数は、次の行の先頭にはスキップし、生成されます空白と等しく`Count`– (*幅*–*桁数*)。</span><span class="sxs-lookup"><span data-stu-id="17862-2736">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2737">ワイド文字のための十分な表の列があることを確認します。</span><span class="sxs-lookup"><span data-stu-id="17862-2737">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2738">この例では、`SPC`関数ファイルと出力の位置を**出力**ウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="17862-2738">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="17862-2739">
            <see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2739">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="17862-2740">
            <see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2740">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-2741">
            <see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2741">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2742">現在の行に現在の出力位置がより大きいかどうか`Column`、`TAB`列の値と等しいにスキップ`Column`次の出力行にします。</span><span class="sxs-lookup"><span data-stu-id="17862-2742">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="17862-2743">場合`Column`が 1 より小さい、`TAB`印刷位置を 1 列目に移動します。</span><span class="sxs-lookup"><span data-stu-id="17862-2743">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="17862-2744">場合`Column`出力線の幅よりも大きい`TAB`数式を使用して、次の出力位置が計算されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2744">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="17862-2745">Mod の列の幅</span><span class="sxs-lookup"><span data-stu-id="17862-2745">Column Mod width</span></span>  
  
 <span data-ttu-id="17862-2746">たとえば場合、*幅*80 は、指定した`TAB(90)`10 (残り 90/80 の) 列に、次の出力が開始されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2746">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="17862-2747">場合`Column`が現在の出力の位置、計算の印刷位置にある次の行に印刷を開始未満です。</span><span class="sxs-lookup"><span data-stu-id="17862-2747">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="17862-2748">計算された出力位置が現在の印刷位置よりも大きい場合は、同じ行に位置が印刷計算された印刷を開始します。</span><span class="sxs-lookup"><span data-stu-id="17862-2748">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="17862-2749">出力行の左端の出力位置は 1 では常にです。</span><span class="sxs-lookup"><span data-stu-id="17862-2749">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="17862-2750">使用すると、`Print`または`PrintLine`ファイルは、印刷する機能右端からの出力位置が現在の幅を使用して設定できる出力ファイルの`FileWidth`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2750">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="17862-2751">`TAB`関数はでも使用できます、`WriteLine`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2751">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="17862-2752">は使用できません<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>または<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="17862-2752">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2753">ワイド文字の十分な表の列があることを確認します。</span><span class="sxs-lookup"><span data-stu-id="17862-2753">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2754">この例では、`TAB`関数ファイルと出力の位置を**出力**ウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="17862-2754">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="17862-2755">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2755">Optional.</span>
          </span>
          <span data-ttu-id="17862-2756">リスト内の次の式を表示または出力する前に移動する先の列番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2756">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="17862-2757">省略した場合、<see langword="TAB" /> は挿入位置を次の印字領域の最初に移動します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2757">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2758">
            <see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2758">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="17862-2759">
            <see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2759">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2760">現在の行に現在の出力位置がより大きいかどうか`Column`、`TAB`列の値と等しいにスキップ`Column`次の出力行にします。</span><span class="sxs-lookup"><span data-stu-id="17862-2760">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="17862-2761">場合`Column`が 1 より小さい、`TAB`印刷位置を 1 列目に移動します。</span><span class="sxs-lookup"><span data-stu-id="17862-2761">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="17862-2762">場合`Column`が出力の線の幅よりも大きい`TAB`数式を使用して、次の出力位置が計算されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2762">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="17862-2763">Mod の列の幅</span><span class="sxs-lookup"><span data-stu-id="17862-2763">Column Mod width</span></span>  
  
 <span data-ttu-id="17862-2764">たとえば場合、*幅*80 は、指定した`TAB(90)`10 (残り 90/80 の) 列に、次の出力が開始されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2764">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="17862-2765">場合`Column`が現在の出力の位置、計算の印刷位置にある次の行に印刷を開始未満です。</span><span class="sxs-lookup"><span data-stu-id="17862-2765">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="17862-2766">計算された出力位置が現在の印刷位置よりも大きい場合は、同じ行に位置が印刷計算された印刷を開始します。</span><span class="sxs-lookup"><span data-stu-id="17862-2766">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="17862-2767">出力行の左端の出力位置は 1 では常にです。</span><span class="sxs-lookup"><span data-stu-id="17862-2767">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="17862-2768">使用すると、`Print`または`PrintLine`ファイルは、印刷する機能右端からの出力位置が現在の幅を使用して設定できる出力ファイルの`FileWidth`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2768">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="17862-2769">`TAB`関数はでも使用できます、`WriteLine`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2769">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="17862-2770">は使用できません<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>または<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="17862-2770">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="17862-2771">ワイド文字の十分な表の列があることを確認します。</span><span class="sxs-lookup"><span data-stu-id="17862-2771">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2772">この例では、`TAB`関数ファイルと出力の位置を**出力**ウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="17862-2772">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="17862-2773">
            <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2773">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="17862-2774">
            <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2774">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="17862-2775">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2775">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2776">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2776">Required.</span>
          </span>
          <span data-ttu-id="17862-2777">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2777">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2778">
            <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2778">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="17862-2779">
            <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="17862-2780">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2781">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2781">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="17862-2782">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="17862-2782">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="17862-2783">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2783">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="17862-2784">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="17862-2784">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="17862-2785">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2785">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="17862-2786">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2786">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2787">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2787">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="17862-2788">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2788">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2789">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2789">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2790">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2790">Required.</span>
          </span>
          <span data-ttu-id="17862-2791">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2791">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="17862-2792">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2792">Optional.</span>
          </span>
          <span data-ttu-id="17862-2793">ロックまたはアンロックされる唯一のレコードまたはバイトの番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2793">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2794">
            <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2794">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="17862-2795">
            <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2795">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="17862-2796">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2796">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2797">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2797">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="17862-2798">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="17862-2798">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="17862-2799">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2799">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="17862-2800">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="17862-2800">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="17862-2801">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2801">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="17862-2802">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2802">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2803">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2803">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="17862-2804">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2804">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2805">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2805">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2806">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2806">Required.</span>
          </span>
          <span data-ttu-id="17862-2807">任意の有効なファイル数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2807">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="17862-2808">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2808">Optional.</span>
          </span>
          <span data-ttu-id="17862-2809">ロックまたはアンロックされる最初のレコードまたはバイトの番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2809">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="17862-2810">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2810">Optional.</span>
          </span>
          <span data-ttu-id="17862-2811">ロックまたはアンロックされる最後のレコードまたはバイトの番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2811">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2812">
            <see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2812">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="17862-2813">
            <see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2813">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="17862-2814">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2814">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2815">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2815">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="17862-2816">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="17862-2816">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="17862-2817">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2817">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="17862-2818">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="17862-2818">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="17862-2819">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="17862-2819">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="17862-2820">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2820">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2821">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="17862-2821">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="17862-2822">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2822">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2823">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2823">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2824">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2824">Required.</span>
          </span>
          <span data-ttu-id="17862-2825">任意の有効なファイル数を含む <see langword="Integer" /> 式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2825">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="17862-2826">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2826">Optional.</span>
          </span>
          <span data-ttu-id="17862-2827">ファイルへ書き込む 1 個以上のコンマで区切られた式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2827">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2828">シーケンシャル ファイルにデータを書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2828">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="17862-2829">
            <see langword="Write" /> を使用して書き込まれたデータは通常、<see langword="Input" /> を使用してファイルから読み込まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2829">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2830">`Write`と`WriteLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2830">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2831">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2831">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2832">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2832">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2833">省略した場合`Output`、空白行がファイルに出力します。</span><span class="sxs-lookup"><span data-stu-id="17862-2833">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="17862-2834">複数の式は、コンマで区切ってことができます。</span><span class="sxs-lookup"><span data-stu-id="17862-2834">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="17862-2835">異なり、`Print`関数の場合、`Write`関数は、ファイルに書き込まれる項目と文字列を囲む引用符の間にコンマを挿入します。</span><span class="sxs-lookup"><span data-stu-id="17862-2835">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="17862-2836">一覧に明示的な区切り記号を配置する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="17862-2836">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="17862-2837">ときに`Write`ファイルにのみ数値データの書き込みに使用`Boolean`、日付、null の場合、および`Error`データ形式がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="17862-2837">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="17862-2838">データが読み取ることができ、正しく解釈されません。 を使用して、次の前提が後に`Input`ロケールに関係なく、します。</span><span class="sxs-lookup"><span data-stu-id="17862-2838">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="17862-2839">数値データには、小数点区切り文字としてピリオドを使用して常に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2839">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="17862-2840">`Boolean`データか、`#TRUE#`または`#FALSE#`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2840">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="17862-2841">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="17862-2841">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="17862-2842">日付データは、汎用の日付形式を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2842">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="17862-2843">日付または時刻部分のいずれかが不足している、または 0 の場合は、提供された部分のみが、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2843">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="17862-2844">場合、ファイルに何も書き込まれませんが`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="17862-2844">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="17862-2845">ただし、null のデータの`#NULL#`が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2845">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="17862-2846">`Error`として、データ、出力が表示されます`#ERROR errorcode#`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2846">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="17862-2847">`Error`ロケールに関係なくキーワードはない変換します。</span><span class="sxs-lookup"><span data-stu-id="17862-2847">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="17862-2848">`WriteLine` 改行文字を挿入します (つまり、キャリッジ リターン/ライン フィード、または`Chr(13) + Chr(10)`) 最後の文字、記述後、`Output`ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="17862-2848">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="17862-2849">二重引用符を使用して文字列に引用符を埋め込むことができます、または""です。</span><span class="sxs-lookup"><span data-stu-id="17862-2849">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="17862-2850">たとえば、オブジェクトに適用された</span><span class="sxs-lookup"><span data-stu-id="17862-2850">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="17862-2851">文字列の値を返します`Double quotation marks aren't "difficult" to handle`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2851">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="17862-2852">使用して、ファイルへの書き込み、`Write`または`WriteLine`functions が必要です`Append`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2852">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2853">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2853">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2854">この例では、`Write`関数には生データをシーケンシャル ファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-2854">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="17862-2855">ファイル モードが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2855">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="17862-2856">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2856">Required.</span>
          </span>
          <span data-ttu-id="17862-2857">任意の有効なファイル数を含む <see langword="Integer" /> 式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2857">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="17862-2858">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2858">Optional.</span>
          </span>
          <span data-ttu-id="17862-2859">ファイルへ書き込む 1 個以上のコンマで区切られた式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2859">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="17862-2860">シーケンシャル ファイルにデータを書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2860">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="17862-2861">
            <see langword="Write" /> を使用して書き込まれたデータは通常、<see langword="Input" /> を使用してファイルから読み込まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="17862-2861">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17862-2862">`Write`と`WriteLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17862-2862">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="17862-2863">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="17862-2863">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="17862-2864">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="17862-2864">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="17862-2865">省略した場合`Output`、空白行がファイルに出力します。</span><span class="sxs-lookup"><span data-stu-id="17862-2865">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="17862-2866">複数の式は、コンマで区切ってことができます。</span><span class="sxs-lookup"><span data-stu-id="17862-2866">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="17862-2867">異なり、`Print`関数の場合、`Write`関数は、ファイルに書き込まれる項目と文字列を囲む引用符の間にコンマを挿入します。</span><span class="sxs-lookup"><span data-stu-id="17862-2867">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="17862-2868">一覧に明示的な区切り記号を配置する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="17862-2868">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="17862-2869">ときに`Write`ファイルにのみ数値データの書き込みに使用`Boolean`、日付、null の場合、および`Error`データ形式がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="17862-2869">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="17862-2870">データが読み取ることができ、正しく解釈されません。 を使用して、次の前提が後に`Input`ロケールに関係なく、します。</span><span class="sxs-lookup"><span data-stu-id="17862-2870">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="17862-2871">数値データには、小数点区切り文字としてピリオドを使用して常に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2871">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="17862-2872">`Boolean`データか、`#TRUE#`または`#FALSE#`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="17862-2872">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="17862-2873">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="17862-2873">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="17862-2874">日付データは、汎用の日付形式を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2874">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="17862-2875">日付または時刻部分のいずれかが不足している、または 0 の場合は、提供された部分のみが、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2875">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="17862-2876">場合、ファイルに何も書き込まれませんが`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="17862-2876">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="17862-2877">ただし、null のデータの`#NULL#`が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="17862-2877">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="17862-2878">`Error`として、データ、出力が表示されます`#ERROR errorcode#`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2878">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="17862-2879">`Error`ロケールに関係なくキーワードはない変換します。</span><span class="sxs-lookup"><span data-stu-id="17862-2879">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="17862-2880">`WriteLine` 改行文字を挿入します (つまり、キャリッジ リターン/ライン フィード、または`Chr(13) + Chr(10)`) 最後の文字、記述後、`Output`ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="17862-2880">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="17862-2881">二重引用符を使用して文字列に引用符を埋め込むことができます、または""です。</span><span class="sxs-lookup"><span data-stu-id="17862-2881">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="17862-2882">たとえば、オブジェクトに適用された</span><span class="sxs-lookup"><span data-stu-id="17862-2882">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="17862-2883">文字列の値を返します`Double quotation marks aren't "difficult" to handle`します。</span><span class="sxs-lookup"><span data-stu-id="17862-2883">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="17862-2884">使用して、ファイルへの書き込み、`Write`または`WriteLine`functions が必要です`Append`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="17862-2884">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="17862-2885">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="17862-2885">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="17862-2886">この例では、`Write`関数には生データをシーケンシャル ファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="17862-2886">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>