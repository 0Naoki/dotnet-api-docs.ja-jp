<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="757b138ad08a57ad8a16b1f7210ead2e45005193" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36728097" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f2d44-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f2d44-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="f2d44-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f2d44-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="f2d44-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f2d44-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-104">このモジュールは、Visual Basic 言語キーワードおよびファイルとフォルダーにアクセスするランタイム ライブラリ メンバーをサポートします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-105">この例では、`GetAttr`ファイルとディレクトリまたはフォルダーの属性を判断する関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="f2d44-106">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-106">Required.</span>
          </span>
          <span data-ttu-id="f2d44-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="f2d44-108">
            <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-108">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="f2d44-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-110">Changes the current directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-110">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="f2d44-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-113">`ChDir`関数は、既定のディレクトリが既定のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="f2d44-114">たとえば、既定のドライブが C の場合は、次のステートメントは変更 D ドライブの既定のディレクトリが C は、既定のドライブ。</span><span class="sxs-lookup"><span data-stu-id="f2d44-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="f2d44-115">相対にすることができますディレクトリの変更は、次のように 2 つのピリオドを入力します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-116">`ChDir`関数には、部分的に信頼された状況での実行に影響を与えるアンマネージ コードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f2d44-117">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>とします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-118">この例では、`ChDir`を現在のディレクトリまたはフォルダーを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-119">
            <paramref name="Path" /> is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-119">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f2d44-120">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-120">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-121">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-121">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="f2d44-122">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-122">Required.</span>
          </span>
          <span data-ttu-id="f2d44-123">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-123">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="f2d44-124">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-124">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="f2d44-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-126">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-126">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-127">`ChDrive`関数には、部分的に信頼された状況での実行に影響する可能性があります、アンマネージ コード権限が必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f2d44-128">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-129">この例では、`ChDrive`を現在のドライブを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="f2d44-130">関数は、ドライブが存在しない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-131">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-131">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="f2d44-132">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-132">Required.</span>
          </span>
          <span data-ttu-id="f2d44-133">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-133">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="f2d44-134">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-134">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="f2d44-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-136">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-136">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-137">`ChDrive`関数には、部分的に信頼された状況での実行に影響する可能性があります、アンマネージ コード権限が必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f2d44-138">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-139">この例では、`ChDrive`を現在のドライブを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="f2d44-140">関数は、ドライブが存在しない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-141">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-141">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-142">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-142">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="f2d44-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="f2d44-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-145">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-145">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="f2d44-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="f2d44-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-148">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-148">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f2d44-149">この例では、`CurDir`関数を現在のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="f2d44-150">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-150">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-151">
            <see langword="Char" /> expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-151">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="f2d44-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-153">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="f2d44-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="f2d44-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-156">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f2d44-157">この例では、`CurDir`関数を現在のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="f2d44-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="f2d44-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-165">`Dir`関数は、複数の文字の使用をサポートしています (`*`) と単一文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f2d44-166">`VbVolume` 特定のファイル名の代わりに、ドライブのボリューム ラベルを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="f2d44-167">指定する必要があります、`PathName`初めて呼び出すこと、`Dir`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="f2d44-168">次の項目を取得するには、後続の呼び出しを行うことができます、`Dir`パラメーターのない関数です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-169">正常に実行する、`Dir`関数に必要な<xref:System.Security.Permissions.FileIOPermissionAccess.Read>と<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f2d44-170">詳細については、次を参照してください。 <xref:System.Security.Permissions.FileIOPermission>、 <xref:System.Security.SecurityException>、および[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="f2d44-171">`Attributes`引数列挙の値が次のようには。</span><span class="sxs-lookup"><span data-stu-id="f2d44-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f2d44-172">[値]</span><span class="sxs-lookup"><span data-stu-id="f2d44-172">Value</span></span>|<span data-ttu-id="f2d44-173">定数</span><span class="sxs-lookup"><span data-stu-id="f2d44-173">Constant</span></span>|<span data-ttu-id="f2d44-174">説明</span><span class="sxs-lookup"><span data-stu-id="f2d44-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="f2d44-175">既定モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-175">Default.</span></span> <span data-ttu-id="f2d44-176">属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f2d44-177">属性のないファイルや読み取り専用ファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f2d44-178">属性のないファイルや隠しファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f2d44-179">システム ファイル、および属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f2d44-180">ボリューム ラベルを指定しますその他の属性が指定されている場合`vbVolume`は無視されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f2d44-181">ディレクトリまたはフォルダー、およびも属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f2d44-182">ファイルは、最後のバックアップから変更されました。</span><span class="sxs-lookup"><span data-stu-id="f2d44-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f2d44-183">ファイルは、別の名前です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-184">これらの列挙は、Visual Basic 言語によって指定され、実際の値ではなく、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-185">この例では、`Dir`関数で特定のファイルおよびディレクトリの存在をチェックします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="f2d44-186">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-186">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-187">
            <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-187">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="f2d44-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="f2d44-189">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-189">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="f2d44-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="f2d44-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-196">`Dir`関数は、複数の文字の使用をサポートしています (`*`) と単一文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f2d44-197">`VbVolume` 特定のファイル名の代わりに、ドライブのボリューム ラベルを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="f2d44-198">指定する必要があります、`PathName`初めて呼び出すこと、`Dir`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="f2d44-199">次の項目を取得するには、後続の呼び出しを行うことができます、`Dir`パラメーターなしで機能します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-200">正常に実行する、`Dir`関数に必要な<xref:System.Security.Permissions.FileIOPermissionAccess.Read>と<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f2d44-201">詳細については、次を参照してください。 <xref:System.Security.Permissions.FileIOPermission>、 <xref:System.Security.SecurityException>、および[コード アクセス許可](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="f2d44-202">`Attributes`引数列挙の値が次のようには。</span><span class="sxs-lookup"><span data-stu-id="f2d44-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f2d44-203">[値]</span><span class="sxs-lookup"><span data-stu-id="f2d44-203">Value</span></span>|<span data-ttu-id="f2d44-204">定数</span><span class="sxs-lookup"><span data-stu-id="f2d44-204">Constant</span></span>|<span data-ttu-id="f2d44-205">説明</span><span class="sxs-lookup"><span data-stu-id="f2d44-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="f2d44-206">既定モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-206">Default.</span></span> <span data-ttu-id="f2d44-207">属性を持たないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f2d44-208">属性を持たないファイルに加えて、読み取り専用のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f2d44-209">属性を持たないファイルに加えて、隠しファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f2d44-210">属性を持たないファイルに加え、システム ファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f2d44-211">ボリューム ラベルを指定しますその他の属性が指定されている場合`vbVolume`は無視されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f2d44-212">ディレクトリまたはファイルの属性がないほかのフォルダーを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f2d44-213">ファイルは、最後のバックアップから変更されました。</span><span class="sxs-lookup"><span data-stu-id="f2d44-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f2d44-214">ファイルは、別の名前です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-215">これらの列挙は、Visual Basic 言語によって指定され、実際の値の代わりに、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-216">この例では、`Dir`関数で特定のファイルおよびディレクトリの存在をチェックします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-217">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-217">Required.</span>
          </span>
          <span data-ttu-id="f2d44-218">An <see langword="Integer" /> that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-218">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-221">使用して`EOF`ファイルの末尾の入力を取得しようとして生成されたエラーを回避します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="f2d44-222">`EOF`関数が返される`False`まで、ファイルの末尾に達しています。</span><span class="sxs-lookup"><span data-stu-id="f2d44-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="f2d44-223">開いたファイル`Random`または`Binary`アクセス、`EOF`返します`False`最後に実行されるまで`FileGet`関数は、全体のレコードを読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="f2d44-224">開かれたファイルで`Binary`にアクセスするを使用してファイルを読み込もうとすると、`Input`まで関数`EOF`を返します`True`でエラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="f2d44-225">使用して、`LOF`と`Loc`関数の代わりに`EOF`と共にバイナリ ファイルを読み取るとき`Input`、使用または`Get`を使用する場合、`EOF`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="f2d44-226">開いたファイル`Output`、`EOF`は常に返します`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-227">この例では、`EOF`関数、ファイルの終わりを検出します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="f2d44-228">この例では、`Testfile`数行のテキストを含むテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-229">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-229">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-230">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-230">Required.</span>
          </span>
          <span data-ttu-id="f2d44-231">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-231">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="f2d44-232">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-232">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-237">この関数は、ファイルのモードを使用して開かれたファイルを表す列挙体を返します、`FileOpen`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-237">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-238">この例では、`FileAttr`関数を開いているファイルのファイル モードを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-238">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="f2d44-239">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-239">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-240">Parameter array of 0 or more channels to be closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-240">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-242">
            <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-242">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="f2d44-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-244">`FileClose`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-244">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-245">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-245">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-246">詳細については、次を参照してください[する方法: StreamReader を持つファイルをテキストの読み取り](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)、[する方法: StreamWriter を持つファイルに書き込むテキスト](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)、および[チュートリアル: での操作のファイルおよびディレクトリ。Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-246">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="f2d44-247">省略した場合`FileNumbers`、すべてのアクティブなファイルを開く、`FileOpen`関数が終了します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-247">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="f2d44-248">開かれているファイルを閉じるときに`Output`または`Append`出力の最終的なバッファーがそのファイルのオペレーティング システムのバッファーに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-248">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="f2d44-249">すべてのバッファー領域が閉じたに関連付けられているファイルを解放します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-249">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="f2d44-250">ときに、`FileClose`関数が実行され、ファイルをそのファイルの関連付け番号が終了します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-250">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-251">この例では、`FileClose`用に開く、ファイルを閉じる関数`Input`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-251">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-252">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-252">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="f2d44-253">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-253">Required.</span>
          </span>
          <span data-ttu-id="f2d44-254">
            <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-254">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="f2d44-255">
            <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-255">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="f2d44-256">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-256">Required.</span>
          </span>
          <span data-ttu-id="f2d44-257">
            <see langword="String" /> expression that specifies the destination file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-257">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="f2d44-258">
            <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-258">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-259">Copies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-259">Copies a file.</span>
          </span>
          <span data-ttu-id="f2d44-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="f2d44-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-262">使用しようとする場合、`FileCopy`現在開いているファイルの関数のエラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-262">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="f2d44-263">`FileCopy` ローカル ドライブで動作する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-263">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-264">この例では、`FileCopy`別に 1 つのファイルをコピーする関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-264">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="f2d44-265">この例の目的であると想定`SrcFile`データを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-265">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-266">
            <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-266">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-267">File is already open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-267">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f2d44-268">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-268">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="f2d44-269">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-269">Required.</span>
          </span>
          <span data-ttu-id="f2d44-270">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-270">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="f2d44-271">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-271">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="f2d44-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="f2d44-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-275">
            <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-275">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f2d44-276">この例では、`FileDateTime`関数を日付し、時刻のファイルが作成または最後に変更されました。</span><span class="sxs-lookup"><span data-stu-id="f2d44-276">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="f2d44-277">表示される日時の形式は、システムのロケール設定に基づきます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-277">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-278">
            <paramref name="PathName" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-278">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f2d44-279">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-279">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-280">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-280">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-283">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-283">Required.</span>
          </span>
          <span data-ttu-id="f2d44-284">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-284">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-285">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-285">Required.</span>
          </span>
          <span data-ttu-id="f2d44-286">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-286">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-287">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-287">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-289">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-289">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-292">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-292">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-293">データを使用して読み取る`FileGet`は通常のファイルに書き込まれ`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-293">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f2d44-294">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-294">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-295">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-295">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-296">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-296">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-297">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-297">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-298">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-298">Random Mode</span></span>  
 <span data-ttu-id="f2d44-299">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-299">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-300">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-300">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-301">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-301">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-302">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-302">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-303">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-303">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-304">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-304">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-305">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-305">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-306">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-306">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-307">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-307">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f2d44-308">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-308">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-309">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-309">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f2d44-310">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-310">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f2d44-311">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-311">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f2d44-312">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-312">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-313">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-313">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-314">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-314">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-315">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-315">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f2d44-316">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-316">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f2d44-317">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f2d44-317">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f2d44-318">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-318">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f2d44-319">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-319">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f2d44-320">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-320">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-321">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-321">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-322">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-322">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-323">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-323">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f2d44-324">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-324">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-325">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-325">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-326">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-326">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-327">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-327">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-328">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-328">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-329">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-329">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-330">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f2d44-330">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-331">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-331">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f2d44-332">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-332">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f2d44-333">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-333">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-334">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-334">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f2d44-335">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-335">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-336">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-336">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-337">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-337">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-338">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-338">Required.</span>
          </span>
          <span data-ttu-id="f2d44-339">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-339">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-340">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-340">Required.</span>
          </span>
          <span data-ttu-id="f2d44-341">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-341">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-342">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-342">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-344">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-344">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-347">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-347">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-348">データを使用して読み取る`FileGet`は通常のファイルに書き込まれ`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-348">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f2d44-349">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-349">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-350">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-350">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-351">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-351">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-352">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-352">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-353">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-353">Random Mode</span></span>  
 <span data-ttu-id="f2d44-354">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-354">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-355">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-355">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-356">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-356">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-357">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-357">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-358">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-358">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-359">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-359">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-360">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-360">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-361">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-361">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-362">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-362">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f2d44-363">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-363">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-364">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-364">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f2d44-365">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-365">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f2d44-366">場合は、記述子は使用されません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-366">If the descriptor is not used.</span></span> <span data-ttu-id="f2d44-367">渡され、配列の境界とサイズ、`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-367">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f2d44-368">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-368">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-369">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-369">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-370">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-370">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-371">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-371">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f2d44-372">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-372">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f2d44-373">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f2d44-373">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f2d44-374">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-374">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f2d44-375">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-375">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f2d44-376">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-376">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-377">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-377">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-378">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-378">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-379">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-379">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f2d44-380">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-380">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-381">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-381">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-382">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-382">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-383">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-383">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-384">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-384">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-385">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-385">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-386">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f2d44-386">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-387">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-387">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f2d44-388">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-388">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f2d44-389">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-389">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-390">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-390">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f2d44-391">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-391">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-392">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-392">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-393">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-393">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-394">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-394">Required.</span>
          </span>
          <span data-ttu-id="f2d44-395">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-395">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-396">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-396">Required.</span>
          </span>
          <span data-ttu-id="f2d44-397">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-397">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-398">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-398">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-400">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-400">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-403">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-403">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-404">データを使用して読み取る`FileGet`は通常のファイルに書き込まれ`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-404">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f2d44-405">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-405">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-406">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-406">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-407">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-407">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-408">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-408">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-409">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-409">Random Mode</span></span>  
 <span data-ttu-id="f2d44-410">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-410">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-411">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-411">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-412">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-412">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-413">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-413">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-414">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-414">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-415">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-415">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-416">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-416">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-417">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-417">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-418">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-418">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f2d44-419">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-419">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-420">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-420">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f2d44-421">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-421">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f2d44-422">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-422">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f2d44-423">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-423">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-424">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-424">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-425">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-425">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-426">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-426">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f2d44-427">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-427">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f2d44-428">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f2d44-428">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f2d44-429">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-429">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f2d44-430">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-430">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f2d44-431">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-431">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-432">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-432">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-433">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-433">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-434">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-434">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f2d44-435">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-435">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-436">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-436">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-437">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-437">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-438">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-438">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-439">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-439">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-440">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-440">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-441">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f2d44-441">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-442">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-442">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f2d44-443">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-443">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f2d44-444">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-444">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-445">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-445">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f2d44-446">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-446">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-447">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-447">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-448">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-448">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-449">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-449">Required.</span>
          </span>
          <span data-ttu-id="f2d44-450">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-450">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-451">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-451">Required.</span>
          </span>
          <span data-ttu-id="f2d44-452">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-452">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-453">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-453">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-455">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-455">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-458">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-458">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-459">データを使用して読み取る`FileGet`は通常のファイルに書き込まれ`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-459">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f2d44-460">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-460">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-461">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-461">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-462">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-462">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-463">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-463">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-464">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-464">Random Mode</span></span>  
 <span data-ttu-id="f2d44-465">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-465">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-466">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-466">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-467">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-467">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-468">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-468">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-469">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-469">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-470">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-470">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-471">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-471">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-472">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-472">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-473">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-473">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f2d44-474">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-474">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-475">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-475">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f2d44-476">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-476">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f2d44-477">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-477">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f2d44-478">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-478">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-479">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-479">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-480">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-480">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-481">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-481">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f2d44-482">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-482">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f2d44-483">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f2d44-483">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f2d44-484">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-484">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f2d44-485">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-485">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f2d44-486">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-486">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-487">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-487">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-488">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-488">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-489">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-489">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f2d44-490">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-490">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-491">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-491">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-492">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-492">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-493">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-493">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-494">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-494">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-495">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-495">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-496">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f2d44-496">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-497">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-497">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f2d44-498">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-498">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f2d44-499">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-499">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-500">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-500">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f2d44-501">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-501">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-502">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-502">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-503">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-503">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-504">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-504">Required.</span>
          </span>
          <span data-ttu-id="f2d44-505">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-505">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-506">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-506">Required.</span>
          </span>
          <span data-ttu-id="f2d44-507">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-507">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-508">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-508">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-510">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-510">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-513">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-513">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-514">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-514">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f2d44-515">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-515">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-516">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-516">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-517">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-517">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-518">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-518">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-519">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-519">Random Mode</span></span>  
 <span data-ttu-id="f2d44-520">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-520">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-521">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-521">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-522">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-522">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-523">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-523">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-524">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-524">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-525">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-525">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-526">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-526">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-527">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-527">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-528">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-528">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f2d44-529">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-529">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-530">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-530">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f2d44-531">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-531">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f2d44-532">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-532">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f2d44-533">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-533">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-534">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-534">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-535">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-535">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-536">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-536">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f2d44-537">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-537">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f2d44-538">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f2d44-538">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f2d44-539">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-539">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f2d44-540">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-540">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f2d44-541">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-541">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-542">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-542">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-543">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-543">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-544">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-544">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f2d44-545">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-545">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-546">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-546">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-547">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-547">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-548">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-548">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-549">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-549">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-550">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-550">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-551">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f2d44-551">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-552">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-552">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f2d44-553">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-553">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f2d44-554">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-554">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-555">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-555">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f2d44-556">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-556">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-557">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-557">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-558">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-558">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-559">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-559">Required.</span>
          </span>
          <span data-ttu-id="f2d44-560">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-560">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-561">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-561">Required.</span>
          </span>
          <span data-ttu-id="f2d44-562">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-562">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-563">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-563">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-565">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-565">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-568">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-568">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-569">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-569">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f2d44-570">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-570">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-571">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-571">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-572">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-572">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-573">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-573">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-574">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-574">Random Mode</span></span>  
 <span data-ttu-id="f2d44-575">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-575">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-576">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-576">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-577">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-577">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-578">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-578">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-579">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-579">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-580">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-580">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-581">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-581">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-582">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-582">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-583">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-583">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f2d44-584">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-584">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-585">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-585">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f2d44-586">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-586">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f2d44-587">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-587">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f2d44-588">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-588">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-589">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-589">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-590">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-590">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-591">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-591">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f2d44-592">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-592">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f2d44-593">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f2d44-593">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f2d44-594">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-594">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f2d44-595">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-595">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f2d44-596">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-596">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-597">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-597">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-598">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-598">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-599">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-599">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f2d44-600">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-600">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-601">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-601">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-602">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-602">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-603">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-603">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-604">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-604">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-605">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-605">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-606">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f2d44-606">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-607">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-607">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f2d44-608">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-608">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f2d44-609">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-609">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-610">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-610">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f2d44-611">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-611">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-612">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-612">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-613">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-613">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-614">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-614">Required.</span>
          </span>
          <span data-ttu-id="f2d44-615">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-615">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-616">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-616">Required.</span>
          </span>
          <span data-ttu-id="f2d44-617">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-617">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-618">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-618">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-620">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-620">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-623">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-623">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-624">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-624">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f2d44-625">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-625">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-626">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-626">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-627">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-627">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-628">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-628">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-629">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-629">Random Mode</span></span>  
 <span data-ttu-id="f2d44-630">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-630">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-631">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-631">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-632">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-632">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-633">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-633">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-634">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-634">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-635">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-635">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-636">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-636">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-637">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-637">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-638">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-638">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f2d44-639">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-639">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-640">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-640">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f2d44-641">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-641">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f2d44-642">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-642">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f2d44-643">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-643">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-644">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-644">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-645">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-645">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-646">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-646">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f2d44-647">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-647">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f2d44-648">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f2d44-648">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f2d44-649">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-649">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f2d44-650">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-650">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f2d44-651">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-651">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-652">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-652">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-653">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-653">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-654">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-654">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f2d44-655">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-655">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-656">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-656">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-657">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-657">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-658">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-658">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-659">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-659">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-660">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-660">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-661">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f2d44-661">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-662">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-662">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f2d44-663">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-663">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f2d44-664">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-664">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-665">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-665">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f2d44-666">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-666">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-667">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-667">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-668">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-668">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-669">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-669">Required.</span>
          </span>
          <span data-ttu-id="f2d44-670">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-670">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-671">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-671">Required.</span>
          </span>
          <span data-ttu-id="f2d44-672">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-672">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-673">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-673">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-675">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-675">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-678">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-678">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-679">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-679">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f2d44-680">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-680">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-681">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-681">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-682">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-682">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-683">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-683">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-684">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-684">Random Mode</span></span>  
 <span data-ttu-id="f2d44-685">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-685">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-686">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-686">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-687">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-687">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-688">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-688">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-689">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-689">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-690">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-690">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-691">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-691">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-692">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-692">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-693">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-693">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f2d44-694">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-694">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-695">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-695">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f2d44-696">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-696">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f2d44-697">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-697">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f2d44-698">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-698">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-699">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-699">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-700">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-700">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-701">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-701">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f2d44-702">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-702">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f2d44-703">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f2d44-703">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f2d44-704">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-704">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f2d44-705">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-705">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f2d44-706">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-706">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-707">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-707">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-708">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-708">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-709">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-709">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f2d44-710">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-710">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-711">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-711">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-712">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-712">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-713">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-713">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-714">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-714">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-715">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-715">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-716">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f2d44-716">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-717">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-717">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f2d44-718">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-718">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f2d44-719">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-719">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-720">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-720">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f2d44-721">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-721">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-722">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-722">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-723">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-723">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-724">Required.</span>
          </span>
          <span data-ttu-id="f2d44-725">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-725">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-726">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-726">Required.</span>
          </span>
          <span data-ttu-id="f2d44-727">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-727">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-728">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-728">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-730">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-730">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-733">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-733">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-734">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-734">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f2d44-735">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-735">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-736">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-736">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-737">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-737">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-738">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-738">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-739">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-739">Random Mode</span></span>  
 <span data-ttu-id="f2d44-740">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-740">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-741">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-741">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-742">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-742">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-743">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-743">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-744">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-744">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-745">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-745">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-746">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-746">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-747">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-747">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-748">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-748">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f2d44-749">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-749">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-750">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-750">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f2d44-751">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-751">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f2d44-752">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-752">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f2d44-753">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-753">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-754">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-754">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-755">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-755">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-756">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-756">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f2d44-757">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-757">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f2d44-758">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f2d44-758">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f2d44-759">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-759">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f2d44-760">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-760">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f2d44-761">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-761">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-762">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-762">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-763">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-763">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-764">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-764">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f2d44-765">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-765">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-766">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-766">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-767">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-767">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-768">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-768">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-769">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-769">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-770">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-770">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-771">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f2d44-771">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-772">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-772">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f2d44-773">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-773">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f2d44-774">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-774">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-775">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-775">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f2d44-776">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-776">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-777">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-777">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-778">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-778">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-779">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-779">Required.</span>
          </span>
          <span data-ttu-id="f2d44-780">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-780">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-781">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-781">Required.</span>
          </span>
          <span data-ttu-id="f2d44-782">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-782">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-783">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-783">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-785">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-785">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-788">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-788">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-789">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-789">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f2d44-790">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-790">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-791">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-791">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-792">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-792">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-793">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-793">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-794">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-794">Random Mode</span></span>  
 <span data-ttu-id="f2d44-795">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-795">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-796">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-796">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-797">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-797">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-798">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-798">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-799">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-799">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-800">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-800">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-801">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-801">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-802">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-802">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-803">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-803">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f2d44-804">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-804">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-805">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-805">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f2d44-806">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-806">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f2d44-807">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-807">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f2d44-808">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-808">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-809">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-809">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-810">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-810">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-811">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-811">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f2d44-812">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-812">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f2d44-813">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f2d44-813">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f2d44-814">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-814">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f2d44-815">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-815">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f2d44-816">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-816">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-817">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-817">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-818">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-818">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-819">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-819">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f2d44-820">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-820">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-821">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-821">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-822">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-822">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-823">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-823">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-824">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-824">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-825">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-825">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-826">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f2d44-826">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-827">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-827">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f2d44-828">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-828">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f2d44-829">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-829">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-830">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-830">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f2d44-831">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-831">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-832">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-832">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-833">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-833">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-834">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-834">Required.</span>
          </span>
          <span data-ttu-id="f2d44-835">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-835">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-836">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-836">Required.</span>
          </span>
          <span data-ttu-id="f2d44-837">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-837">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-838">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-838">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-840">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-840">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-843">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-843">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-844">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-844">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f2d44-845">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-845">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-846">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-846">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-847">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-847">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-848">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-848">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-849">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-849">Random Mode</span></span>  
 <span data-ttu-id="f2d44-850">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-850">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-851">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-851">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-852">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-852">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-853">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-853">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-854">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-854">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-855">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-855">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-856">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-856">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-857">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-857">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-858">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-858">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f2d44-859">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-859">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-860">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-860">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f2d44-861">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-861">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f2d44-862">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-862">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f2d44-863">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-863">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-864">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-864">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-865">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-865">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-866">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-866">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f2d44-867">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-867">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f2d44-868">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f2d44-868">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f2d44-869">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-869">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f2d44-870">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-870">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f2d44-871">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-871">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-872">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-872">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-873">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-873">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-874">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-874">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f2d44-875">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-875">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-876">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-876">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-877">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-877">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-878">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-878">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-879">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-879">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-880">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-880">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-881">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f2d44-881">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-882">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-882">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f2d44-883">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-883">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f2d44-884">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-884">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-885">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-885">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f2d44-886">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-886">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-887">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-887">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-888">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-888">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-889">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-889">Required.</span>
          </span>
          <span data-ttu-id="f2d44-890">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-890">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-891">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-891">Required.</span>
          </span>
          <span data-ttu-id="f2d44-892">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-892">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-893">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-893">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="f2d44-895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-895">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="f2d44-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="f2d44-898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-899">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-899">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-902">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-902">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-903">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-903">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f2d44-904">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-905">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-905">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-906">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-906">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-907">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-907">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-908">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-908">Random Mode</span></span>  
 <span data-ttu-id="f2d44-909">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-909">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-910">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-910">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-911">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-911">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-912">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-912">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-913">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-913">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-914">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-914">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-915">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-915">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-916">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-916">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-917">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-917">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f2d44-918">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-918">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-919">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-919">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f2d44-920">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-920">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f2d44-921">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-921">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f2d44-922">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-922">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-923">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-923">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-924">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-925">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-925">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f2d44-926">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-926">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f2d44-927">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f2d44-927">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f2d44-928">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-928">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f2d44-929">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-929">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f2d44-930">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-931">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-931">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-932">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-932">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-933">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f2d44-934">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-934">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-935">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-936">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-936">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-937">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-937">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-938">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-938">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-939">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-939">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-940">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f2d44-940">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-941">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-941">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f2d44-942">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-942">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f2d44-943">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-943">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-944">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-944">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f2d44-945">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-945">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-946">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-946">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-947">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-947">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-948">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-948">Required.</span>
          </span>
          <span data-ttu-id="f2d44-949">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-949">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-950">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-950">Required.</span>
          </span>
          <span data-ttu-id="f2d44-951">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-951">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-952">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-952">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="f2d44-954">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-954">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-955">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-955">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="f2d44-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="f2d44-957">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-957">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-958">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-958">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="f2d44-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="f2d44-960">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-960">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-961">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-961">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f2d44-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-964">`FileGet` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-964">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-965">データを使用して読み取る`FileGet`が通常に書き込まれ、ファイルを使用して`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-965">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f2d44-966">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-966">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-967">省略した場合`RecordNumber`、次のレコードまたは前回バイト`FileGet`または`FilePut`関数 (最後によって示されるまたは`Seek`関数) は読み取りです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-967">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-968">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-968">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-969">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-969">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-970">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-970">Random Mode</span></span>  
 <span data-ttu-id="f2d44-971">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-971">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-972">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-972">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-973">次のレコードの開始する 1 つのレコードの末尾までには、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-973">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-974">埋め込みデータの量は指定できないためには、通常は読み取られるデータの長さと一致するレコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-974">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-975">既定では、読み込む変数が文字列、`FileGet`文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-975">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-976">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-976">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-977">Visual Basic 6.0 とそれ以前のバージョン サポートの固定長文字列です。ファイルに書き込む場合、長さ記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-977">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-978">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-978">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-979">読み取られる変数が配列の場合は、サイズと配列の次元の記述子を読み込むかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-979">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f2d44-980">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-980">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-981">配列を読み取るときに、配列の作成方法と一致する必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-981">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f2d44-982">記述子と共に書き込まれている場合は、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-982">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f2d44-983">サイズと配列の境界に渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-983">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f2d44-984">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-984">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-985">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-985">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-986">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-987">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-987">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f2d44-988">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-988">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f2d44-989">記述子の 18 バイト: (2 \* 2 + 8)</span><span class="sxs-lookup"><span data-stu-id="f2d44-989">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f2d44-990">データの 200 バイト: (5 * 10 * 4)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-990">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f2d44-991">読み取られる変数はその他の型の変数 (いない可変長の文字列またはオブジェクト)`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-991">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f2d44-992">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-992">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-993">`FileGet` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-993">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-994">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-994">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-995">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-995">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f2d44-996">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-996">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-997">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-997">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-998">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-998">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-999">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-999">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1000">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1000">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1001">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1001">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1002">`FileGet` ディスクからデータを連続的にすべての変数を読み取りますつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1002">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1003">すべての配列の配列、構造体で以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1003">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f2d44-1004">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1004">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f2d44-1005">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1005">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1006">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1006">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f2d44-1007">使用してファイルから読み取る、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1007">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1008">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1008">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1009">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1009">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1010">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1010">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1011">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1011">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1012">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1012">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1013">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1013">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1014">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1014">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1016">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1016">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f2d44-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="f2d44-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1019">`FileGetObject`の代わりに関数を使用`FileGet`場合は、コンパイル時にあいまいさを避けるために型`Object`など、他の型の代わりに返される`Integer`、 `Long`、`Short`などのようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1019">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="f2d44-1020">記述する場合、`Variant`型、`FileGetObject`が必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1020">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="f2d44-1021">あれば、2 番目のパラメーター オブジェクトを使用している場合、これが常に提案を使用すること`FilePutObject`と`FileGetObject`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1021">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f2d44-1022">`FileGetObject` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1022">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1023">データを使用して読み取る`FileGetObject`に通常書き込まれ、`FilePutObject`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1023">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="f2d44-1024">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1024">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1025">省略した場合`RecordNumber`、 `FileGetObject` 、最後の後に、レコードまたはバイトを読み取ります`FileGetObject`または`FilePutObject`関数 (最後によって示されるまたは`Seek`関数)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1025">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1026">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1026">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1027">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1027">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1028">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGetObject`レコード長の境界での後続のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1028">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1029">1 つのレコードの終了と次のレコードの先頭の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1029">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1030">埋め込みデータの量を正確に判断できないためには、レコード長が読み取られるデータの長さと一致することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1030">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f2d44-1031">読み取られる変数は既定では、文字列`FileGetObject`文字列の長さを表す 2 バイトの記述子を読み取り、変数にデータを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1031">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1032">したがってで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1032">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1033">Visual Basic 6.0 とそれ以前のバージョンは、固定長文字列とファイルを読み取るときに、長さ記述子は書き込まれませんをサポートします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1033">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f2d44-1034">記述子なしの文字列を読み取る場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1034">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1035">読み取られる変数が、配列で指定されたレコード長の場合、`RecordLength`内のパラメーター、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1035">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1036">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1036">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1037">長さが 2 + 8 時間ディメンションの数: 2 + 8 \* 含まです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1037">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="f2d44-1038">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1038">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="f2d44-1039">218 バイトが次のように分散: 記述子 (2 + 8 \* 2)、18 バイトとデータ (5 \* 10 \* 4) の 100 バイトです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1039">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f2d44-1040">`FileGetObject` 要素間の余白がないという場合として、それぞれの読み取り中に個別に、構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1040">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1041">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePutObject`) の長さと等しい 2 と 8 時間ディメンションの数、記述子のプレフィックスが付いた: 2 + 8 \* 含まです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1041">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="f2d44-1042">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、配列とその記述子を含む個々 の要素の読み取りに必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="f2d44-1043"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>クラスは、書き込まれたときに、文字列のサイズを示すために構造体で文字列フィールドに適用することができますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1043">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1044">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1044">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1045">ファイルを開くの`Binary`モードでは、すべての`Random`これらの例外を除き、規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1045">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="f2d44-1046">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1046">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1047">`FileGetObject` 読み取りますディスクからのすべての変数データを連続的、つまり、レコード間の埋め込みはなしで。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1047">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1048">すべての配列の配列、構造体で以外の`FileGetObject`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1048">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="f2d44-1049">記述子は読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1049">No descriptor is read.</span></span>  
  
 <span data-ttu-id="f2d44-1050">`FileGetObject` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1050">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1051">読み取ったバイト数では、文字列内の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1051">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-1052">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1052">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-1053">たとえば、Form1.vb という名前のファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1053">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1054">次の例では、テスト ファイルにレコードを読み取り、それを取得します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1054">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="f2d44-1055">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1055">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1056">
            <see langword="String" /> expression that specifies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1056">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="f2d44-1057">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1057">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="f2d44-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="f2d44-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-1061">
            <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1061">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1062">場合は、指定したファイルが開いているときに、`FileLen`関数が呼び出されると、返された値は、開かれた時点で、ファイルのサイズを表します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1062">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-1063">開いているファイルの現在の長さを取得するを使用して、`LOF`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1063">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1064">この例では、`FileLen`ファイルの長さをバイト単位で取得する関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1064">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="f2d44-1065">この例の目的であると想定`TestFile`をいくつかのデータを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1065">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f2d44-1066">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1066">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1067">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1067">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1068">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1068">Any valid file number.</span>
          </span>
          <span data-ttu-id="f2d44-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="f2d44-1070">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1070">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1071">
            <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1071">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="f2d44-1072">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1072">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="f2d44-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="f2d44-1075">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1075">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="f2d44-1077">Defaults to <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1077">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="f2d44-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="f2d44-1079">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1079">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="f2d44-1081">Defaults to <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1081">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="f2d44-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="f2d44-1083">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1083">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1084">Number less than or equal to 32,767 (bytes).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1084">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="f2d44-1085">For files opened for random access, this value is the record length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1085">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="f2d44-1086">For sequential files, this value is the number of characters buffered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1086">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1087">Opens a file for input or output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1087">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="f2d44-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="f2d44-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1090">`FileOpen`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1090">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-1091">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1091">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-1092">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1092">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-1093">すべての I/O 操作を実行する前にファイルを開く必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1093">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="f2d44-1094">`FileOpen` ファイルへの I/O バッファーを割り当てます、バッファーへのアクセス モードを決定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1094">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-1095">ファイルに書き込む場合、アプリケーションを記述しようとするファイルが存在しない場合、ファイルを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1095">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="f2d44-1096">これを行うには、ファイルが作成されるディレクトリのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1096">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="f2d44-1097">ただし、によってファイルが指定されている場合`FileName`が存在するアプリケーションのニーズ`Write`ファイル自体にのみアクセスを許可します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1097">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="f2d44-1098">セキュリティを強化する、可能なが展開および許可中にファイルを作成する任意の場所`Write`そのファイルへのアクセス許可のみの代わりに、全体のディレクトリにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1098">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="f2d44-1099">セキュリティを強化するには、ルート ディレクトリまたは Program Files ディレクトリへの代わりにユーザーのディレクトリにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1099">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="f2d44-1100">開くには、チャネルを使用して検索することができます、`FreeFile()`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1100">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-1101">`FileOpen`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体は、部分的な信頼されている状況での実行に影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1101">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="f2d44-1102">詳細については、次を参照してください。<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1102">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1103">この例のさまざまな使用を示しています、`FileOpen`入力と、ファイルに出力を有効にする関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1103">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="f2d44-1104">次のコードは、ファイルを開く`TestFile`で`Input`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1104">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="f2d44-1105">この例で、ファイルが開きます`Binary`書き込み専用モードです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1105">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="f2d44-1106">次の例で、ファイルを開きます`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1106">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="f2d44-1107">ファイルには、構造体のレコードが含まれています。`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1107">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="f2d44-1108">このコード例でファイルを開きます`Output`モード以外の任意のプロセスはファイルに対する読み取りまたは書き込み。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1108">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="f2d44-1109">このコード例でファイルを開きます`Binary`モード、読み取り用の他のプロセスがファイルを読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1109">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1110">Record length is negative (and not equal to -1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1110">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1111">
            <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1111">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-1112">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1112">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1115">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1115">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1116">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1116">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1117">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1117">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1118">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1118">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1119">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1119">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1121">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1121">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1124">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1124">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1125">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1125">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1126">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1126">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1127">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1127">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1128">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1128">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1129">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1129">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1130">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1130">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1131">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1131">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1132">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1132">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1133">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1133">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1134">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1134">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1135">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1135">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1136">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1136">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1137">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1137">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1138">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1138">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1139">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1139">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1140">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1140">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1141">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1141">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1142">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1142">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1143">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1143">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1144">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1144">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1145">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1145">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1146">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1146">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1147">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1147">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1148">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1148">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1149">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1149">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1150">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1150">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1151">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1151">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1152">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1152">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1153">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1153">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1154">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1154">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1155">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1155">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1156">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1156">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1157">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1157">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1158">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1158">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1159">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1159">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1160">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1160">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1161">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1161">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1162">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1162">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1163">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1163">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1164">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1164">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1165">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1165">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1166">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1166">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1167">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1167">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1168">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1168">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1169">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1169">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1170">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1170">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1171">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1171">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1172">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1172">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1173">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1173">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1174">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1174">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1175">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1175">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1176">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1176">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1177">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1177">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1178">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1178">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1180">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1180">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1183">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1183">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1184">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1184">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1185">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1185">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1186">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1186">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1187">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1187">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1188">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1188">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1189">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1189">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1190">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1190">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1191">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1191">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1192">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1192">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1193">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1193">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1194">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1194">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1195">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1195">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1196">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1196">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1197">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1197">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1198">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1198">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1199">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1199">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1200">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1201">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1201">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1202">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1202">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1203">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1203">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1204">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1204">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1205">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1205">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1206">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1206">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1207">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1207">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1208">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1208">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1209">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1209">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1210">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1210">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1211">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1211">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1212">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1212">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1213">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1213">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1214">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1214">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1215">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1215">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1216">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1216">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1217">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1217">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1218">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1218">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1219">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1219">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1220">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1220">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1221">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1221">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1222">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1222">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1223">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1223">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1224">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1224">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1225">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1225">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1226">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1226">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1227">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1227">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1228">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1228">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1229">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1229">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1230">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1230">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1231">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1231">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1232">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1232">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1233">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1233">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1234">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1234">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1235">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1235">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1236">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1236">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1237">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1237">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1239">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1239">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1242">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1242">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1243">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1243">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1244">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1244">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1245">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1245">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1246">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1246">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1247">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1247">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1248">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1248">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1249">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1249">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1250">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1250">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1251">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1251">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1252">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1252">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1253">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1253">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1254">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1254">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1255">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1255">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1256">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1256">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1257">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1257">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1258">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1258">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1259">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1259">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1260">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1260">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1261">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1261">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1262">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1262">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1263">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1263">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1264">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1264">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1265">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1265">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1266">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1266">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1267">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1267">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1268">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1268">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1269">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1269">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1270">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1270">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1271">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1271">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1272">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1272">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1273">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1273">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1274">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1274">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1275">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1275">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1276">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1276">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1277">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1277">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1278">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1278">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1279">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1279">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1280">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1280">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1281">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1281">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1282">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1282">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1283">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1283">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1284">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1284">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1285">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1285">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1286">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1286">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1287">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1287">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1288">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1288">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1289">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1289">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1290">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1290">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1291">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1291">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1292">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1292">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1293">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1293">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1294">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1294">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1295">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1295">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1296">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1296">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1298">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1298">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1301">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1302">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1303">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1304">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1305">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1306">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1307">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1308">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1308">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1309">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1310">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1311">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1312">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1313">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1314">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1315">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1316">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1317">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1318">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1319">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1320">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1321">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1322">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1323">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1324">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1325">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1326">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1327">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1328">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1329">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1330">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1331">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1332">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1333">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1334">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1335">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1336">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1336">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1337">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1338">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1339">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1340">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1341">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1342">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1343">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1344">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1345">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1346">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1347">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1348">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1349">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1349">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1350">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1350">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1351">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1351">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1352">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1352">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1353">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1353">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1354">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1354">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1355">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1355">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1357">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1357">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1360">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1360">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1361">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1361">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1362">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1362">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1363">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1363">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1364">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1364">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1365">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1365">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1366">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1366">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1367">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1367">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1368">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1368">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1369">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1369">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1370">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1370">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1371">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1371">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1372">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1372">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1373">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1373">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1374">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1374">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1375">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1375">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1376">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1376">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1377">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1378">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1378">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1379">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1379">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1380">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1380">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1381">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1381">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1382">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1382">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1383">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1383">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1384">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1384">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1385">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1385">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1386">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1386">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1387">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1387">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1388">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1388">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1389">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1389">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1390">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1390">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1391">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1391">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1392">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1392">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1393">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1393">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1394">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1394">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1395">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1395">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1396">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1396">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1397">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1397">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1398">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1398">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1399">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1399">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1400">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1400">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1401">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1401">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1402">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1402">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1403">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1403">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1404">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1404">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1405">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1405">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1406">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1406">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1407">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1407">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1408">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1408">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1409">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1409">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1410">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1410">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1411">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1411">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1412">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1412">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1413">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1413">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1414">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1414">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1416">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1416">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1419">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1419">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1420">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1420">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1421">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1421">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1422">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1422">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1423">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1423">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1424">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1424">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1425">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1425">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1426">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1426">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1427">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1427">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1428">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1428">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1429">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1429">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1430">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1430">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1431">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1431">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1432">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1432">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1433">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1433">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1434">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1434">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1435">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1435">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1436">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1436">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1437">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1437">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1438">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1439">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1439">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1440">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1440">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1441">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1441">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1442">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1442">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1443">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1443">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1444">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1444">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1445">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1445">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1446">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1446">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1447">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1447">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1448">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1448">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1449">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1449">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1450">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1450">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1451">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1451">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1452">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1452">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1453">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1453">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1454">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1454">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1455">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1455">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1456">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1456">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1457">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1457">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1458">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1458">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1459">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1459">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1460">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1460">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1461">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1461">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1462">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1462">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1463">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1463">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1464">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1464">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1465">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1465">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1466">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1466">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1467">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1467">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1468">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1468">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1469">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1469">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1470">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1470">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1471">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1471">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1472">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1472">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1473">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1473">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1475">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1475">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1478">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1479">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1480">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1481">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1482">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1483">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1484">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1485">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1485">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1486">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1487">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1488">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1489">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1490">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1491">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1492">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1493">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1494">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1495">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1496">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1497">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1498">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1499">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1500">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1501">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1502">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1503">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1504">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1505">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1506">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1507">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1508">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1509">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1510">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1511">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1512">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1513">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1513">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1514">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1515">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1516">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1517">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1518">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1519">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1520">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1521">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1522">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1523">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1524">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1525">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1526">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1526">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1527">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1527">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1528">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1528">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1529">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1529">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1530">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1530">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1531">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1531">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1532">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1532">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1534">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1534">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1537">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1537">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1538">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1538">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1539">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1539">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1540">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1540">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1541">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1541">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1542">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1542">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1543">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1543">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1544">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1544">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1545">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1545">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1546">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1546">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1547">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1547">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1548">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1548">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1549">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1549">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1550">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1550">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1551">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1551">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1552">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1552">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1553">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1553">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1554">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1554">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1555">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1555">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1556">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1556">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1557">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1557">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1558">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1558">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1559">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1559">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1560">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1560">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1561">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1561">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1562">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1562">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1563">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1563">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1564">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1564">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1565">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1565">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1566">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1566">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1567">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1567">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1568">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1568">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1569">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1569">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1570">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1570">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1571">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1571">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1572">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1572">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1573">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1573">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1574">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1574">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1575">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1575">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1576">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1576">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1577">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1577">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1578">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1578">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1579">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1579">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1580">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1580">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1581">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1581">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1582">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1582">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1583">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1583">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1584">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1584">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1585">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1585">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1586">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1586">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1587">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1587">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1588">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1588">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1589">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1589">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1590">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1590">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1591">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1591">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1593">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1593">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1596">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1596">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1597">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1597">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1598">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1598">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1599">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1599">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1600">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1600">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1601">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1601">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1602">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1602">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1603">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1603">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1604">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1604">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1605">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1605">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1606">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1606">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1607">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1607">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1608">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1608">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1609">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1609">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1610">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1610">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1611">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1611">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1612">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1612">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1613">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1613">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1614">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1614">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1615">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1616">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1616">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1617">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1617">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1618">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1618">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1619">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1619">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1620">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1621">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1621">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1622">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1622">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1623">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1623">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1624">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1624">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1625">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1625">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1626">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1626">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1627">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1627">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1628">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1628">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1629">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1629">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1630">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1630">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1631">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1631">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1632">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1632">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1633">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1633">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1634">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1634">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1635">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1635">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1636">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1636">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1637">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1637">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1638">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1638">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1639">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1639">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1640">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1640">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1641">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1641">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1642">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1642">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1643">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1643">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1644">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1644">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1645">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1645">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1646">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1646">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1647">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1647">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1648">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1648">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1649">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1649">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1650">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1650">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1652">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1652">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1655">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1655">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1656">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1656">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1657">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1657">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1658">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1658">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1659">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1659">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1660">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1660">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1661">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1661">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1662">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1662">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1663">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1663">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1664">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1664">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1665">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1665">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1666">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1666">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1667">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1667">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1668">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1668">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1669">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1669">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1670">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1670">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1671">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1671">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1672">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1672">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1673">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1673">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1674">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1674">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1675">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1675">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1676">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1676">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1677">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1677">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1678">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1678">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1679">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1679">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1680">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1680">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1681">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1682">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1683">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1683">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1684">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1685">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1685">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1686">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1687">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1687">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1688">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1688">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1689">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1689">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1690">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1690">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1691">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1691">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1692">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1692">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1693">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1693">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1694">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1694">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1695">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1695">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1696">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1696">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1697">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1697">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1698">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1698">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1699">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1699">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1700">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1700">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1701">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1701">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1702">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1702">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1703">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1703">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1704">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1704">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1705">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1705">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1706">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1706">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1707">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1707">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1708">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1708">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1709">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1709">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1711">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1711">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1714">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1714">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1715">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1715">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1716">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1716">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1717">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1717">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1718">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1718">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1719">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1719">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1720">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1720">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1721">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1721">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1722">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1723">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1723">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1724">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1725">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1726">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1726">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1727">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1727">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1728">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1728">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1729">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1729">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1730">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1730">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1731">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1731">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1732">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1732">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1733">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1733">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1734">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1734">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1735">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1735">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1736">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1736">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1737">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1737">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1738">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1738">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1739">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1739">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1740">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1740">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1741">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1741">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1742">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1742">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1743">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1743">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1744">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1744">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1745">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1745">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1746">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1746">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1747">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1747">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1748">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1748">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1749">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1749">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1750">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1751">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1752">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1753">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1753">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1754">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1754">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1755">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1755">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1756">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1756">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1757">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1757">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1758">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1758">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1759">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1759">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1760">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1760">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1761">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1761">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1762">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1762">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1763">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1763">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1764">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1764">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1765">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1765">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1766">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1766">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1767">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1767">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1768">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1768">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1770">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1770">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1773">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1773">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1774">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1774">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1775">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1775">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1776">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1776">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1777">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1777">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1778">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1778">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1779">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1779">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1780">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1780">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1781">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1781">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1782">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1782">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1783">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1783">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1784">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1784">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1785">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1785">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1786">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1786">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1787">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1787">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1788">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1788">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1789">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1789">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1790">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1790">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1791">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1791">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1792">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1792">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1793">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1793">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1794">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1794">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1795">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1795">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1796">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1796">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1797">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1797">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1798">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1798">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1799">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1799">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1800">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1800">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1801">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1801">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1802">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1802">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1803">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1803">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1804">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1804">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1805">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1805">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1806">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1806">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1807">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1807">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1808">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1808">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1809">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1809">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1810">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1810">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1811">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1811">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1812">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1812">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1813">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1813">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1814">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1814">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1815">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1815">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1816">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1816">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1817">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1817">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1818">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1818">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1819">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1819">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1820">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1820">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1821">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1821">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1822">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1822">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1823">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1823">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1824">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1824">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1825">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1825">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1826">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1826">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1827">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1827">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="f2d44-1829">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1829">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1830">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1830">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="f2d44-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="f2d44-1832">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1832">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1833">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1833">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1836">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1836">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1837">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1837">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1838">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1838">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1839">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1839">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1840">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1840">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1841">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1841">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1842">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1842">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1843">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1843">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1844">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1844">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1845">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1845">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1846">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1846">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1847">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1847">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1848">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1848">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1849">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1849">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1850">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1850">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1851">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1851">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1852">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1852">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1853">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1853">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1854">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1854">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1855">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1856">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1856">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1857">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1857">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1858">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1858">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1859">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1859">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1860">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1860">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1861">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1861">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1862">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1862">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1863">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1863">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1864">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1864">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1865">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1865">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1866">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1866">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1867">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1867">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1868">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1868">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1869">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1869">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1870">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1870">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1871">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1871">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1872">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1872">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1873">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1873">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1874">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1874">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1875">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1875">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1876">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1876">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1877">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1877">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1878">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1878">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1879">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1879">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1880">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1880">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1881">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1881">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1882">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1882">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1883">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1883">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1884">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1884">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1885">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1885">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1886">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1886">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1887">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1887">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1888">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1888">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1889">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1889">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1890">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1890">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="f2d44-1892">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1892">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1893">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1893">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="f2d44-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="f2d44-1895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1895">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="f2d44-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="f2d44-1898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1899">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1899">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f2d44-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1902">`FilePut` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1903">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f2d44-1904">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1905">省略した場合`RecordNumber`、次のレコードまたは最後より後のバイト`FileGet`または`FilePut`機能することも最後を指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f2d44-1906">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1907">`FilePut` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1908">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ操作を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があるとします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1909">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1909">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1910">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1911">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1912">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1913">埋め込みデータの量は指定できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1914">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1915">書き込まれている変数が文字列、`FilePut`文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f2d44-1916">そのため、レコード長がで指定された、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f2d44-1917">書き込まれている変数は、数値型を含むオブジェクト`FilePut`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1918">などのオブジェクトを記述する場合を含む、整数、 `FilePut` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1919">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1920">書き込まれる変数は、文字列を含むオブジェクト`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1921">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1922">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1923">書き込まれている変数が配列の場合がある場合、サイズと配列の次元の記述子を作成するかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f2d44-1924">Visual Basic 6.0 とそれ以前のバージョンは、動的配列ですが固定サイズの配列ではなく、ファイル記述子を記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f2d44-1925">Visual Basic 2005 既定値は、記述子を書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f2d44-1926">記述子を作成するには、設定、`ArrayIsDynamic`パラメーターを`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f2d44-1927">配列を書き込むときに、配列の読み込み方法に合わせる必要があります。記述子を読み取る場合は、記述子を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f2d44-1928">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1929">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f2d44-1930">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1931">たとえば、次の配列の宣言が必要 218 バイト配列が書き込まれるときにディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f2d44-1932">書き込まれている変数がその他の型の変数 (いない可変長の文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f2d44-1933">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f2d44-1934">`FilePut` 要素間の余白がありませんを除くそれぞれが個別に書き込まれた場合、構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f2d44-1935">`VBFixedString`属性を書き込むときに、文字列のサイズを示すために、構造内の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f2d44-1936">多くのバイト数で指定されているフィールドの文字列、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="f2d44-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1937">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1937">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1938">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f2d44-1939">次の規則のファイルが開かれている`Binary`モードは、の規則とは異なる`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f2d44-1940">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1941">`FilePut` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f2d44-1942">すべての配列の配列、構造体で以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f2d44-1943">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f2d44-1944">`FilePut` 2 バイト長の記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f2d44-1945">書き込まれたバイト数では、文字列の文字の数と等しい。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f2d44-1946">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトのデータを記述します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f2d44-1947">使用してファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1948">この例では、`FilePut`をファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f2d44-1949">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-1950">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1950">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-1951">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1951">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1952">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1952">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1953">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1953">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-1954">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1954">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1955">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1955">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f2d44-1956">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1956">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1958">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1958">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f2d44-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="f2d44-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-1961">`FilePutObject`関数がの代わりに使用される`FilePut`場合は、コンパイル時にあいまいさを避けるために型`Object`など、他の型ではなく渡された`Integer`、 `Long`、`Short`などのようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1961">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="f2d44-1962">`FilePutObject` 書き込みをオブジェクトを記述する記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1962">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="f2d44-1963">記述する場合、`Variant`型、`FilePutObject`が必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1963">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="f2d44-1964">必ず使用することお勧めに迷う場合、2 番目のパラメーター オブジェクトを使用している場合、`FilePutObject`と`FileGetObject`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1964">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f2d44-1965">`FilePutObject` のみ有効な`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1965">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-1966">`FilePutObject` を使用して書き込まれたデータは通常、`FileGetObject` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1966">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f2d44-1967">最初のレコードまたはファイル内のバイト位置は 1、2 番目のレコードまたはバイト位置 2 というようにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1967">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f2d44-1968">省略した場合`RecordNumber`、 `FilePutObject` 、最後の後に次のレコードまたはバイトを書き込みます`FileGetObject`または`FilePutObject`関数 (レコードまたはバイトを指す最後または`Seek`関数)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1968">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="f2d44-1969">`StringIsFixedLength`引数は、関数が可変であるか、または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1969">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f2d44-1970">`FilePutObject` 引数がある場合、記述子を書き込まない`True`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1970">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f2d44-1971">使用する場合`StringIsFixedLength`  =  `True`で`FilePutObject`と同じ操作を実行する必要がある`FileGetObject`長さが予期する文字列が初期化されていることを確認することも必要とします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1971">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f2d44-1972">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1972">Random Mode</span></span>  
 <span data-ttu-id="f2d44-1973">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1973">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f2d44-1974">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePutObject`レコード長の境界にその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1974">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f2d44-1975">次のレコードの先頭と 1 つのレコードの末尾の間には、ファイル バッファーの既存の内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1975">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f2d44-1976">埋め込みデータの量を正確に判断できないためには一般には書き込まれるデータの長さと一致レコード長です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1976">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f2d44-1977">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1977">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="f2d44-1978">書き込まれている変数は、数値型を含むオブジェクト`FilePutObject`を識別する 2 つのバイトを書き込みます、`VarType`オブジェクトの変数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1978">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f2d44-1979">などのオブジェクトを記述する場合を含む、整数、 `FilePutObject` 6 バイトを書き込みます: としてオブジェクトを識別するための 2 バイト`VarType(3)`(`Integer`) と、データが含まれて 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1979">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f2d44-1980">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数より大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1980">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f2d44-1981">書き込まれる変数は、文字列を含むオブジェクト`FilePutObject`2 バイトの記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子のです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1981">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f2d44-1982">指定されたレコードの長さ、`RecordLength`内のパラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1982">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f2d44-1983">記述子なしの文字列を格納する場合を渡す必要があります`True`を`StringIsFixedLength`パラメーター、および正しい長さにする必要がありますに読み込む文字列。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1983">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f2d44-1984">書き込まれている変数が、配列で指定されたレコード長の場合、`RecordLength`句、`FileOpen`関数が配列のデータや配列の記述子の作成に必要なすべてのバイト数の合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1984">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f2d44-1985">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1985">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f2d44-1986">長さが 2 + 8 時間ディメンションの数: (2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1986">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f2d44-1987">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-1987">Binary Mode</span></span>  
 <span data-ttu-id="f2d44-1988">ファイルを開くの`Binary`モードでは、すべて、`Random`モードの規則を適用するを除く。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1988">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="f2d44-1989">`RecordLength`句、`FileOpen`関数も何も起こりません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1989">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f2d44-1990">`FilePutObject` すべての変数をレコード間の余白なしは、連続した領域、ディスクに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1990">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-1991">この例では、`FilePutObject`関数に文字列をファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1991">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-1992">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1992">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1993">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1993">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="f2d44-1994">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1994">Required.</span>
          </span>
          <span data-ttu-id="f2d44-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="f2d44-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="f2d44-1997">The default value for <c>RecordWidth</c> is 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1997">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f2d44-1999">この例では、`FileWidth`ファイルの出力行の幅を設定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-1999">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2000">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2000">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2003">使用して`FreeFile`が既に使用されていないファイルの番号を指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2003">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2004">この例では、 `FreeFile` [次へ] の使用可能なファイル数を返す関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2004">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="f2d44-2005">5 つのファイルは、ループ内で出力で開かれていて、それぞれにサンプル データが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2005">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2006">More than 255 files are in use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2006">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="f2d44-2007">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2007">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2008">
            <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2008">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="f2d44-2009">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2009">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="f2d44-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="f2d44-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2014">どの属性が設定を確認するには`And`オペレーターによって返される値のビットごとの比較を実行する、`GetAttr`関数とする個々 のファイル属性の値。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2014">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="f2d44-2015">結果が 0 でない場合、その属性は、名前付きのファイルに設定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2015">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="f2d44-2016">次の戻り値など、`And`式が場合は 0 では、`Archive`属性が設定されていません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2016">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="f2d44-2017">場合、0 以外の値が返されます、`Archive`属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2017">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2018">この例では、`GetAttr`ファイルとディレクトリまたはフォルダーの属性を判断する関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2018">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2019">
            <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2019">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f2d44-2020">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2020">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2022">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2022">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2023">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2023">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-2024">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2024">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2027">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2027">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2028">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2028">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2029">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2029">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2030">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2030">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f2d44-2031">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2031">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2032">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2032">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2033">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2033">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f2d44-2034">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2034">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f2d44-2035">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2035">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f2d44-2036">データ</span><span class="sxs-lookup"><span data-stu-id="f2d44-2036">Data</span></span>|<span data-ttu-id="f2d44-2037">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2037">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f2d44-2038">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f2d44-2038">Delimiting comma or blank line</span></span>|<span data-ttu-id="f2d44-2039">Empty</span><span class="sxs-lookup"><span data-stu-id="f2d44-2039">Empty</span></span>|  
|<span data-ttu-id="f2d44-2040">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2040">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f2d44-2041">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2041">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f2d44-2042">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2042">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f2d44-2043">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f2d44-2043">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f2d44-2044">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f2d44-2044">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f2d44-2045">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f2d44-2045">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f2d44-2046">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2046">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2047">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2047">The `Input` function is not localized.</span></span> <span data-ttu-id="f2d44-2048">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2048">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2049">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2049">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2050">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2050">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2051">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2051">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f2d44-2052">この例では、`TestFile`を使用して書き込まれたデータの一部の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2052">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2053">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2053">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2054">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2054">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2055">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2055">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-2056">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2056">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2059">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2059">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2060">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2060">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2061">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2061">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2062">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2062">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f2d44-2063">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2063">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2064">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2064">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2065">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2065">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f2d44-2066">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2066">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f2d44-2067">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2067">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f2d44-2068">データ</span><span class="sxs-lookup"><span data-stu-id="f2d44-2068">Data</span></span>|<span data-ttu-id="f2d44-2069">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2069">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f2d44-2070">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f2d44-2070">Delimiting comma or blank line</span></span>|<span data-ttu-id="f2d44-2071">Empty</span><span class="sxs-lookup"><span data-stu-id="f2d44-2071">Empty</span></span>|  
|<span data-ttu-id="f2d44-2072">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2072">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f2d44-2073">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2073">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f2d44-2074">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2074">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f2d44-2075">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f2d44-2075">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f2d44-2076">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f2d44-2076">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f2d44-2077">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f2d44-2077">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f2d44-2078">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2078">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2079">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2079">The `Input` function is not localized.</span></span> <span data-ttu-id="f2d44-2080">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2080">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2081">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2081">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2082">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2082">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2083">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2083">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f2d44-2084">この例では、`TestFile`を使用して書き込まれたデータの一部の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2084">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2085">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2085">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2086">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2086">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2087">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2087">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-2088">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2088">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2091">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2091">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2092">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2092">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2093">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2093">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2094">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2094">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f2d44-2095">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2095">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2096">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2096">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2097">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2097">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f2d44-2098">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2098">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f2d44-2099">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2099">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f2d44-2100">データ</span><span class="sxs-lookup"><span data-stu-id="f2d44-2100">Data</span></span>|<span data-ttu-id="f2d44-2101">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2101">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f2d44-2102">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f2d44-2102">Delimiting comma or blank line</span></span>|<span data-ttu-id="f2d44-2103">Empty</span><span class="sxs-lookup"><span data-stu-id="f2d44-2103">Empty</span></span>|  
|<span data-ttu-id="f2d44-2104">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2104">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f2d44-2105">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2105">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f2d44-2106">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2106">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f2d44-2107">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f2d44-2107">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f2d44-2108">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f2d44-2108">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f2d44-2109">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f2d44-2109">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f2d44-2110">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2110">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2111">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2111">The `Input` function is not localized.</span></span> <span data-ttu-id="f2d44-2112">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2112">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2113">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2113">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2114">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2114">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2115">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2115">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f2d44-2116">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2116">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2117">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2117">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2118">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2118">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2119">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2119">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-2120">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2120">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2123">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2123">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2124">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2124">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2125">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2125">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2126">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2126">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f2d44-2127">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2127">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2128">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2128">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2129">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2129">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f2d44-2130">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2130">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f2d44-2131">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2131">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f2d44-2132">データ</span><span class="sxs-lookup"><span data-stu-id="f2d44-2132">Data</span></span>|<span data-ttu-id="f2d44-2133">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2133">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f2d44-2134">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f2d44-2134">Delimiting comma or blank line</span></span>|<span data-ttu-id="f2d44-2135">Empty</span><span class="sxs-lookup"><span data-stu-id="f2d44-2135">Empty</span></span>|  
|<span data-ttu-id="f2d44-2136">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2136">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f2d44-2137">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2137">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f2d44-2138">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2138">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f2d44-2139">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f2d44-2139">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f2d44-2140">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f2d44-2140">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f2d44-2141">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f2d44-2141">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f2d44-2142">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2142">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2143">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2143">The `Input` function is not localized.</span></span> <span data-ttu-id="f2d44-2144">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2144">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2145">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2145">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2146">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2146">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2147">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2147">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f2d44-2148">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2148">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2149">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2149">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2150">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2150">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2151">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2151">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-2152">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2152">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2155">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2155">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2156">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2156">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2157">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2157">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2158">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2158">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f2d44-2159">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2159">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2160">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2160">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2161">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2161">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f2d44-2162">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2162">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f2d44-2163">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2163">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f2d44-2164">データ</span><span class="sxs-lookup"><span data-stu-id="f2d44-2164">Data</span></span>|<span data-ttu-id="f2d44-2165">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2165">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f2d44-2166">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f2d44-2166">Delimiting comma or blank line</span></span>|<span data-ttu-id="f2d44-2167">Empty</span><span class="sxs-lookup"><span data-stu-id="f2d44-2167">Empty</span></span>|  
|<span data-ttu-id="f2d44-2168">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2168">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f2d44-2169">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2169">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f2d44-2170">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2170">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f2d44-2171">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f2d44-2171">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f2d44-2172">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f2d44-2172">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f2d44-2173">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f2d44-2173">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f2d44-2174">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2174">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2175">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2175">The `Input` function is not localized.</span></span> <span data-ttu-id="f2d44-2176">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2176">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2177">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2177">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2178">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2178">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2179">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2179">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f2d44-2180">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2180">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2181">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2181">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2182">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2182">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2183">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2183">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-2184">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2184">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2187">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2187">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2188">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2188">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2189">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2189">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2190">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2190">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f2d44-2191">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2191">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2192">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2192">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2193">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2193">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f2d44-2194">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2194">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f2d44-2195">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2195">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f2d44-2196">データ</span><span class="sxs-lookup"><span data-stu-id="f2d44-2196">Data</span></span>|<span data-ttu-id="f2d44-2197">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2197">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f2d44-2198">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f2d44-2198">Delimiting comma or blank line</span></span>|<span data-ttu-id="f2d44-2199">Empty</span><span class="sxs-lookup"><span data-stu-id="f2d44-2199">Empty</span></span>|  
|<span data-ttu-id="f2d44-2200">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2200">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f2d44-2201">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2201">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f2d44-2202">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2202">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f2d44-2203">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f2d44-2203">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f2d44-2204">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f2d44-2204">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f2d44-2205">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f2d44-2205">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f2d44-2206">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2206">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2207">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2207">The `Input` function is not localized.</span></span> <span data-ttu-id="f2d44-2208">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2208">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2209">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2209">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2210">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2210">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2211">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2211">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f2d44-2212">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2212">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2213">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2213">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2214">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2214">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2215">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2215">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-2216">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2216">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2219">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2219">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2220">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2220">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2221">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2221">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2222">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2222">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f2d44-2223">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2223">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2224">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2224">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2225">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2225">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f2d44-2226">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2226">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f2d44-2227">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2227">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f2d44-2228">データ</span><span class="sxs-lookup"><span data-stu-id="f2d44-2228">Data</span></span>|<span data-ttu-id="f2d44-2229">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2229">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f2d44-2230">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f2d44-2230">Delimiting comma or blank line</span></span>|<span data-ttu-id="f2d44-2231">Empty</span><span class="sxs-lookup"><span data-stu-id="f2d44-2231">Empty</span></span>|  
|<span data-ttu-id="f2d44-2232">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2232">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f2d44-2233">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2233">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f2d44-2234">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2234">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f2d44-2235">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f2d44-2235">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f2d44-2236">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f2d44-2236">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f2d44-2237">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f2d44-2237">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f2d44-2238">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2238">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2239">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2239">The `Input` function is not localized.</span></span> <span data-ttu-id="f2d44-2240">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2240">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2241">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2241">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2242">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2242">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2243">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2243">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f2d44-2244">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2244">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2245">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2245">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2246">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2246">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2247">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2247">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-2248">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2248">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2251">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2251">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2252">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2252">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2253">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2253">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2254">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2254">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f2d44-2255">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2255">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2256">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2256">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2257">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2257">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f2d44-2258">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2258">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f2d44-2259">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2259">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f2d44-2260">データ</span><span class="sxs-lookup"><span data-stu-id="f2d44-2260">Data</span></span>|<span data-ttu-id="f2d44-2261">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2261">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f2d44-2262">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f2d44-2262">Delimiting comma or blank line</span></span>|<span data-ttu-id="f2d44-2263">Empty</span><span class="sxs-lookup"><span data-stu-id="f2d44-2263">Empty</span></span>|  
|<span data-ttu-id="f2d44-2264">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2264">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f2d44-2265">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2265">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f2d44-2266">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2266">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f2d44-2267">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f2d44-2267">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f2d44-2268">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f2d44-2268">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f2d44-2269">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f2d44-2269">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f2d44-2270">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2270">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2271">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2271">The `Input` function is not localized.</span></span> <span data-ttu-id="f2d44-2272">たとえば、ドイツ語バージョンでは、3,14159、入力した場合、小数点としての代わりに変数の区切り記号としてコンマが処理されるため、3 だけを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2272">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2273">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2273">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2274">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2274">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2275">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2275">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f2d44-2276">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2276">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2277">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2277">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2278">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2278">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2279">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2279">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-2280">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2280">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2283">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2283">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2284">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2284">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2285">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2285">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2286">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2286">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f2d44-2287">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2287">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2288">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2288">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2289">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2289">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f2d44-2290">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2290">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f2d44-2291">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2291">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f2d44-2292">データ</span><span class="sxs-lookup"><span data-stu-id="f2d44-2292">Data</span></span>|<span data-ttu-id="f2d44-2293">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2293">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f2d44-2294">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f2d44-2294">Delimiting comma or blank line</span></span>|<span data-ttu-id="f2d44-2295">Empty</span><span class="sxs-lookup"><span data-stu-id="f2d44-2295">Empty</span></span>|  
|<span data-ttu-id="f2d44-2296">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2296">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f2d44-2297">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2297">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f2d44-2298">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2298">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f2d44-2299">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f2d44-2299">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f2d44-2300">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f2d44-2300">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f2d44-2301">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f2d44-2301">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f2d44-2302">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2302">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2303">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2303">The `Input` function is not localized.</span></span> <span data-ttu-id="f2d44-2304">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2304">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2305">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2305">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2306">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2306">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2307">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2307">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f2d44-2308">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2308">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2309">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2309">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2310">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2310">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2311">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2311">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-2312">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2312">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2315">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2315">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2316">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2316">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2317">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2317">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2318">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2318">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f2d44-2319">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2319">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2320">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2320">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2321">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2321">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f2d44-2322">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2322">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f2d44-2323">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2323">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f2d44-2324">データ</span><span class="sxs-lookup"><span data-stu-id="f2d44-2324">Data</span></span>|<span data-ttu-id="f2d44-2325">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2325">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f2d44-2326">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f2d44-2326">Delimiting comma or blank line</span></span>|<span data-ttu-id="f2d44-2327">Empty</span><span class="sxs-lookup"><span data-stu-id="f2d44-2327">Empty</span></span>|  
|<span data-ttu-id="f2d44-2328">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2328">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f2d44-2329">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2329">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f2d44-2330">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2330">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f2d44-2331">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f2d44-2331">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f2d44-2332">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f2d44-2332">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f2d44-2333">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f2d44-2333">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f2d44-2334">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2334">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2335">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2335">The `Input` function is not localized.</span></span> <span data-ttu-id="f2d44-2336">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2336">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2337">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2337">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2338">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2338">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2339">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2339">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f2d44-2340">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2340">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2341">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2341">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2342">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2342">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2343">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2343">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-2344">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2344">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2347">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2347">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2348">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2348">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2349">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2349">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2350">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2350">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f2d44-2351">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2351">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2352">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2352">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2353">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2353">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f2d44-2354">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2354">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f2d44-2355">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2355">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f2d44-2356">データ</span><span class="sxs-lookup"><span data-stu-id="f2d44-2356">Data</span></span>|<span data-ttu-id="f2d44-2357">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2357">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f2d44-2358">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f2d44-2358">Delimiting comma or blank line</span></span>|<span data-ttu-id="f2d44-2359">Empty</span><span class="sxs-lookup"><span data-stu-id="f2d44-2359">Empty</span></span>|  
|<span data-ttu-id="f2d44-2360">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2360">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f2d44-2361">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2361">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f2d44-2362">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2362">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f2d44-2363">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f2d44-2363">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f2d44-2364">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f2d44-2364">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f2d44-2365">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f2d44-2365">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f2d44-2366">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2366">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2367">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2367">The `Input` function is not localized.</span></span> <span data-ttu-id="f2d44-2368">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2368">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2369">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2369">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2370">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2370">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2371">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2371">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f2d44-2372">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2372">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2373">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2373">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2374">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2374">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2375">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2375">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f2d44-2376">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2376">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2379">`Input`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2379">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2380">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2380">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2381">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2381">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2382">データを使用して読み取る`Input`が通常に書き込まれ、ファイルを使用して`Write`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2382">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f2d44-2383">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2383">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2384">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2384">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2385">たとえば、Form1.vb というファイルには、Visual Basic 2005 ソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2385">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f2d44-2386">読み取るときに、標準文字列または数値データは割り当てられている変数を変更せずにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2386">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f2d44-2387">次の表では、その他の入力データの処理方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2387">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f2d44-2388">データ</span><span class="sxs-lookup"><span data-stu-id="f2d44-2388">Data</span></span>|<span data-ttu-id="f2d44-2389">変数に代入値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2389">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f2d44-2390">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="f2d44-2390">Delimiting comma or blank line</span></span>|<span data-ttu-id="f2d44-2391">Empty</span><span class="sxs-lookup"><span data-stu-id="f2d44-2391">Empty</span></span>|  
|<span data-ttu-id="f2d44-2392">[NULL]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2392">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f2d44-2393">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2393">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f2d44-2394">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2394">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f2d44-2395">日付や式で表される時刻</span><span class="sxs-lookup"><span data-stu-id="f2d44-2395">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f2d44-2396">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f2d44-2396">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f2d44-2397">`errornumber` (変数では、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="f2d44-2397">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f2d44-2398">データ項目の入力中に、ファイルの末尾に到達した場合は、入力が停止しているし、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2398">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2399">`Input`関数はローカライズされません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2399">The `Input` function is not localized.</span></span> <span data-ttu-id="f2d44-2400">たとえば、ドイツ語版で 3,14159、入力した場合、コンマを小数点としての代わりに変数の区切り文字として扱われるため 3 のみを返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2400">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2401">使用してファイルから読み取る、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2401">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2402">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2402">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2403">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2403">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f2d44-2404">この例では、`TestFile`を使用して書き込まれたデータの複数の行を持つファイルには、`Write`関数は、見積およびなどのコンマで区切られた数値の文字列を含む各行: (「こんにちは」, 234)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2404">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2405">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2405">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2406">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2406">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2407">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2407">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="f2d44-2408">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2408">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2409">Any valid numeric expression specifying the number of characters to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2409">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="f2d44-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="f2d44-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="f2d44-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2415">`InputString`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2415">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2416">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2416">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2417">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2417">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2418">データを読み取り、`InputString`関数が通常に書き込まれ、ファイルを使用して`Print`または`FilePut`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2418">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="f2d44-2419">この関数で開かれたファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2419">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="f2d44-2420">異なり、 `Input` 、関数、`InputString`関数がそこにすべての文字を返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2420">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="f2d44-2421">これには、コンマ、キャリッジ リターン、ライン フィード、引用符、および先頭のスペースが含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2421">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="f2d44-2422">開いたファイル`Binary`にアクセスするを使用して、ファイルを読み取ろうとして、`InputString`まで関数`EOF`を返します`True`でエラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2422">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="f2d44-2423">使用して、`LOF`と`Loc`関数の代わりに`EOF`を使用してバイナリ ファイルを読み取るときに`InputString`、使用または`FileGet`を使用する場合、`EOF`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2423">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2424">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容に関するセキュリティ上の決定しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2424">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2425">たとえば、Form1.vb という名前のファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2425">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2426">この例では、`InputString`ファイルから一度に 1 つの文字を読み取るし、印刷する関数、`Output`ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2426">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="f2d44-2427">この例では、`MyFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2427">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2428">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2428">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-2429">
            <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2429">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="f2d44-2430">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2430">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2431">
            <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2431">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="f2d44-2432">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2432">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2433">Deletes files from a disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2433">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="f2d44-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="f2d44-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2436">`Kill` 複数の文字の使用をサポートしています (`*`) と単一の文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2436">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f2d44-2437">**セキュリティに関する注意**を実行するために、`Kill`関数に必要な`Read`と`PathDiscovery`のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2437">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f2d44-2438">詳細については、次を参照してください<xref:System.Security.SecurityException>[コード アクセス許可。](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="f2d44-2438">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2439">この例では、`Kill`ディスクからファイルを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2439">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2440">Target file(s) open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2440">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f2d44-2441">Target file(s) not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2441">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="f2d44-2442">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2442">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2443">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2443">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2444">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2444">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2447">`LineInput`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2447">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2448">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2448">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2449">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2449">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2450">データを使用して読み取る`LineInput`が通常に書き込まれ、ファイルを使用して`Print`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2450">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2451">ファイルからの読み取り時に、ファイル名拡張子に基づいてファイルの内容を判断しないでください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2451">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f2d44-2452">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイルができません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2452">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="f2d44-2453">`LineInput`関数ファイルの 1 文字からが一度に読み取ってキャリッジ リターンを検出するまで (`Chr(13)`) またはキャリッジ リターン/ライン フィード (`Chr(13) + Chr(10)`) シーケンス。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2453">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="f2d44-2454">キャリッジ リターン/ライン フィードのシーケンスは、文字の文字列に追加の代わりにスキップされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2454">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2455">使用してファイルから読み取る、`LineInput`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2455">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2456">この例では、`LineInput`シーケンシャル ファイルから行を読み取るし、変数に代入する関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2456">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="f2d44-2457">この例では、`TestFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2457">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="f2d44-2458">End of file reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2458">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2459">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2459">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2460">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2460">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2461">Any valid <see langword="Integer" /> file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2461">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2464">`Loc`関数は 0 から始まる以外の場合は、ファイルの最初のバイトの取得に使用すると、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2464">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="f2d44-2465">`Loc`関数は、旧バージョンとの互換性のためが提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2465">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2466">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2466">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2467">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2467">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2468">各ファイル アクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2468">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="f2d44-2469">モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-2469">Mode</span></span>|<span data-ttu-id="f2d44-2470">戻り値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2470">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f2d44-2471">読み取りまたはファイルに書き込まれた最後のレコードの数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2471">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="f2d44-2472">128 で割った値、ファイル内の現在のバイト位置。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2472">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="f2d44-2473">ただしから返される情報`Loc`のシーケンシャル ファイルが使用されるも必要です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2473">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="f2d44-2474">最後のバイトの読み取りや書き込みの位置。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2474">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2475">この例では、`Loc`関数を開いているファイル内の現在の読み取り/書き込み位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2475">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="f2d44-2476">この例では、`MyFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2476">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2477">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2477">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f2d44-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2481">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2481">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2482">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2482">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f2d44-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2486">`Lock`と`Unlock`関数が使用される環境でいくつかのプロセスが、同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2486">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f2d44-2487">`Lock` および`Unlock`関数は、常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2487">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f2d44-2488">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2488">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f2d44-2489">場合`Record`、または`FromRecord`と`ToRecord`が指定されていないロックのなりますファイル全体です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2489">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f2d44-2490">場合`Record`だけが指定されている 1 つのレコードがロック/ロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2490">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f2d44-2491">連続の入力または出力のファイルを開いていた場合`Lock`と`Unlock`によって指定される範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2491">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2492">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2492">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f2d44-2493">この例では、`People.txt`構造体のレコードを含むファイルは、`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2493">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2494">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2494">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2495">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2495">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2496">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2496">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="f2d44-2497">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2497">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-2498">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2498">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f2d44-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2502">`Lock`と`Unlock`関数が使用される環境でいくつかのプロセスが、同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2502">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f2d44-2503">`Lock` および`Unlock`関数は、常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2503">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f2d44-2504">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2504">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f2d44-2505">場合`Record`、または`FromRecord`と`ToRecord`が指定されていないロックのなりますファイル全体です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2505">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f2d44-2506">場合`Record`だけが指定されている 1 つのレコードがロック/ロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2506">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f2d44-2507">連続の入力または出力のファイルを開いていた場合`Lock`と`Unlock`によって指定される範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2507">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2508">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2508">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f2d44-2509">この例では、`People.txt`構造体のレコードを含むファイルは、`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2509">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2510">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2510">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2511">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2511">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2512">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2512">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="f2d44-2513">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2513">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-2514">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2514">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="f2d44-2515">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2515">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-2516">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2516">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f2d44-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2520">`Lock`と`Unlock`関数が使用される環境でいくつかのプロセスが、同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2520">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f2d44-2521">`Lock` および`Unlock`関数は、常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2521">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f2d44-2522">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2522">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f2d44-2523">場合`Record`、または`FromRecord`と`ToRecord`が指定されていないロックのなりますファイル全体です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2523">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f2d44-2524">場合`Record`だけが指定されている 1 つのレコードがロック/ロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2524">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f2d44-2525">連続の入力または出力のファイルを開いていた場合`Lock`と`Unlock`によって指定される範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2525">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2526">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2526">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f2d44-2527">この例では、`People.txt`構造体のレコードを含むファイルは、`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2527">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2528">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2528">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2529">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2529">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="f2d44-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2536">使用して、`FileLen`開かれていないファイルの長さを取得します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2536">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2537">この例では、`LOF`開いているファイルのサイズを判断する関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2537">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="f2d44-2538">この例では、`TestFile`サンプル データを含むテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2538">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2539">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2539">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="f2d44-2540">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2540">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2541">
            <see langword="String" /> expression that identifies the directory to be created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2541">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="f2d44-2542">The <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2542">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="f2d44-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2544">Creates a new directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2544">Creates a new directory.</span>
          </span>
          <span data-ttu-id="f2d44-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="f2d44-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2547">この関数は、新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2547">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2548">この例では、`MkDir`ディレクトリを作成する関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2548">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="f2d44-2549">ドライブが指定されていない場合は、現在のドライブに新しいディレクトリが作成されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2549">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-2550">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2550">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="f2d44-2551">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2551">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2552">Directory already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2552">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2553">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2553">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2554">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2554">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="f2d44-2555">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2555">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-2556">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2556">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="f2d44-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="f2d44-2558">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2558">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2559">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2559">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2560">`Print`と`PrintLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2560">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2561">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2561">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2562">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2562">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2563">`Print` 行の最後に、改行は含まれませんただし、`PrintLine`ライン フィードが含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2563">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="f2d44-2564">書き込まれたデータ`Print`を使用して、ファイルから読み取った通常`LineInput`または`Input`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2564">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="f2d44-2565">省略した場合`Output`の`PrintLine`、; のファイルに空白行が出力`Print`出力は、何も行われません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2565">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="f2d44-2566">タブ境界がミキシング コンマ上、コンマで区切られた複数の式に配置され、`TAB`一貫性のない結果が生じる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2566">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="f2d44-2567">`Boolean`データか、`True`または`False`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2567">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="f2d44-2568">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2568">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="f2d44-2569">日付データは、システムによって認識される標準の短い日付形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2569">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="f2d44-2570">日付または時刻部分のいずれかがないか 0 の場合は、提供された部分のみがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2570">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="f2d44-2571">場合、ファイルに書き込まれますが何も`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2571">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f2d44-2572">ただし場合、`Output`リスト データは`DBNull`、`Null`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2572">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="f2d44-2573">`Error`として表示されるデータ、出力`Error errorcode`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2573">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="f2d44-2574">`Error`キーワードが、ロケールに関係なく、変換されません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2574">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="f2d44-2575">使用して、ファイルに書き込まれたすべてのデータ`Print`が国際的に対応しています。 つまり、データ形式が正しく、適切な小数点区切り文字を使用します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2575">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="f2d44-2576">ユーザーが複数のロケールで使用するデータを出力したい場合`Write`使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2576">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="f2d44-2577">使用してファイルへの書き込み、`Print`または`PrintLine`関数が必要です`Write`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2577">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2578">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2578">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2579">この例では、`Print`と`PrintLine`関数にデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2579">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2580">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2580">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2581">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2581">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="f2d44-2582">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2582">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-2583">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2583">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="f2d44-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="f2d44-2585">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2585">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2586">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2586">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2587">`Print`と`PrintLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2587">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2588">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2588">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2589">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2589">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2590">`Print` 行の最後に、改行は含まれませんただし、`PrintLine`ライン フィードが含まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2590">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="f2d44-2591">書き込まれたデータ`Print`を使用して、ファイルから読み取った通常`LineInput`または`Input`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2591">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="f2d44-2592">省略した場合`Output`の`PrintLine`、; のファイルに空白行が出力`Print`出力は、何も行われません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2592">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="f2d44-2593">タブ境界がミキシング コンマ上、コンマで区切られた複数の式に配置され、`TAB`一貫性のない結果が生じる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2593">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="f2d44-2594">`Boolean`データか、`True`または`False`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2594">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="f2d44-2595">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2595">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="f2d44-2596">日付データは、システムによって認識される標準の短い日付形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2596">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="f2d44-2597">日付または時刻部分のいずれかがないか 0 の場合は、提供された部分のみがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2597">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="f2d44-2598">場合、ファイルに書き込まれますが何も`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2598">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f2d44-2599">ただし場合、`Output`リスト データは`DBNull`、`Null`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2599">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="f2d44-2600">`Error`として表示されるデータ、出力`Error errorcode`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2600">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="f2d44-2601">`Error`キーワードが、ロケールに関係なく、変換されません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2601">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="f2d44-2602">使用して、ファイルに書き込まれたすべてのデータ`Print`が国際的に対応しています。 つまり、データ形式が正しく、適切な小数点区切り文字を使用します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2602">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="f2d44-2603">ユーザーが複数のロケールで使用するデータを出力したい場合`Write`使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2603">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="f2d44-2604">使用してファイルへの書き込み、`Print`または`PrintLine`関数が必要です`Write`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2604">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2605">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2605">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2606">この例では、`Print`と`PrintLine`関数にデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2606">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="f2d44-2607">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2607">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2608">
            <see langword="String" /> expression that specifies the existing file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2608">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="f2d44-2609">
            <c>OldPath</c> may include the directory, and drive, of the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2609">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="f2d44-2610">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2610">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2611">
            <see langword="String" /> expression that specifies the new file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2611">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="f2d44-2612">
            <c>NewPath</c> may include directory and drive of the destination location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2612">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="f2d44-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2614">Renames a disk file or directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2614">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="f2d44-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="f2d44-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2617">`Rename`関数は、ファイルの名前を変更し、必要がある場合は、別のディレクトリに移動します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2617">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="f2d44-2618">`Rename`関数は、ドライブ間でファイルを移動できます。 ただし、既存のディレクトリの名前を変更ことできますのみと両方`NewPath`と`OldPath`同じドライブ上にあります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2618">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="f2d44-2619">`Rename` 新しいファイルまたはディレクトリを作成できません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2619">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="f2d44-2620">使用して、`Rename`開かれたファイルで関数がエラーを生成します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2620">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="f2d44-2621">名前を変更する前に、開いているファイルを閉じる必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2621">You must close an open file before renaming it.</span></span> <span data-ttu-id="f2d44-2622">`Rename` 引数には、複数の文字 (\*) と単一文字 (?) のワイルドカードを含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2622">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2d44-2623">使用する場合`Rename`保護されていない場所からファイルを保護された場所にコピーするファイルは制限の少ない権限を保持します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2623">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="f2d44-2624">セキュリティ リスクの可能性を大きくしないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2624">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2625">この例では、`Rename`ファイルの名前を変更する関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2625">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="f2d44-2626">この例では、既に指定されているディレクトリが存在すると仮定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2626">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-2627">Path is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2627">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f2d44-2628">
            <paramref name="OldPath" /> file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2628">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2629">Cannot rename to different device.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2629">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="f2d44-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2633">`Reset`関数によって開かれたすべてのアクティブなファイルを閉じ、`FileOpen`関数し、同じ機能を持つ`FileClose()`パラメーターを使用せずします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2633">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2634">この例では、`Reset`を開いているすべてのファイルを閉じ、すべてのファイル バッファーの内容をディスクに書き込む関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2634">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="f2d44-2635">使用に注意してください、`Object`変数`FileNumber`文字列と数の両方として。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2635">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="f2d44-2636">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2636">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2637">
            <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2637">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="f2d44-2638">
            <c>Path</c> can include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2638">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="f2d44-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2640">Removes an existing directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2640">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="f2d44-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="f2d44-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2643">使用しようとする場合、エラーが発生した`RmDir`ファイルを格納するディレクトリにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2643">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="f2d44-2644">使用して、`Kill`ディレクトリを削除しようとする前に、すべてのファイルを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2644">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2645">この例では、`RmDir`関数を既存のディレクトリを削除します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2645">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-2646">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2646">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2647">Target directory contains files.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2647">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f2d44-2648">Directory does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2648">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="f2d44-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2652">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2652">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="f2d44-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2658">`Seek` 1 ~ 2,147, 483,647 の範囲値を返します (= 2 ^31-1)、包括的です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2658">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="f2d44-2659">各ファイル アクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2659">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="f2d44-2660">モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-2660">Mode</span></span>|<span data-ttu-id="f2d44-2661">戻り値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2661">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f2d44-2662">次のレコードの読み取りや書き込みの数</span><span class="sxs-lookup"><span data-stu-id="f2d44-2662">Number of the next record read or written</span></span>|  
|<span data-ttu-id="f2d44-2663">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2663">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="f2d44-2664">次の操作が発生するバイト位置。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2664">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="f2d44-2665">ファイルの最初のバイト位置は 1、2 番目のバイトの位置 2 というようになります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2665">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2666">この例では、`Seek`関数を現在の位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2666">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="f2d44-2667">この例では`TestFile`構造体のレコードを含むファイルは、`Record`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2667">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="f2d44-2668">ファイルを開くの`Random`モード、`Seek`次のレコードの数を返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2668">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="f2d44-2669">以外のモードで開かれたファイルの`Random`モード、`Seek`次のバイト位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2669">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f2d44-2670">想定`TestFile`数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2670">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="f2d44-2671">この例では、`Seek`関数またはファイルに書き込みの [次へ] の読み取り位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2671">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="f2d44-2672">以外のモードで開かれたファイルの`Random`モード、`Seek`次のバイト位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2672">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f2d44-2673">想定`TestFile`数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2673">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2674">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2674">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2675">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2675">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="f2d44-2677">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2677">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="f2d44-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2682">`Seek` 1 ~ 2,147, 483,647 の範囲値を返します (= 2 ^31-1)、包括的です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2682">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="f2d44-2683">各ファイル アクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2683">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="f2d44-2684">モード</span><span class="sxs-lookup"><span data-stu-id="f2d44-2684">Mode</span></span>|<span data-ttu-id="f2d44-2685">戻り値</span><span class="sxs-lookup"><span data-stu-id="f2d44-2685">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f2d44-2686">次のレコードの読み取りや書き込みの数</span><span class="sxs-lookup"><span data-stu-id="f2d44-2686">Number of the next record read or written</span></span>|  
|<span data-ttu-id="f2d44-2687">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="f2d44-2687">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="f2d44-2688">次の操作が発生するバイト位置。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2688">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="f2d44-2689">ファイルの最初のバイト位置は 1、2 番目のバイトの位置 2 というようになります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2689">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2690">この例では、`Seek`関数を現在の位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2690">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="f2d44-2691">この例では`TestFile`構造体のレコードを含むファイルは、`Record`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2691">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="f2d44-2692">ファイルを開くの`Random`モード、`Seek`次のレコードの数を返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2692">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="f2d44-2693">以外のモードで開かれたファイルの`Random`モード、`Seek`次のバイト位置を返します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2693">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f2d44-2694">想定`TestFile`数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2694">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="f2d44-2695">この例では、`Seek`関数またはファイルに書き込みの [次へ] の読み取り位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2695">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="f2d44-2696">以外のモードで開かれたファイルの`Random`モード、`Seek`次のバイト位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2696">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f2d44-2697">想定`TestFile`数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2697">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2698">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2698">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="f2d44-2699">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2699">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2700">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2700">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="f2d44-2701">
            <c>PathName</c> can include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2701">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="f2d44-2702">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2702">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2704">Sets attribute information for a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2704">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="f2d44-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="f2d44-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2707">開いているファイルの属性を設定しようとすると、実行時エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2707">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="f2d44-2708">`Attributes`引数列挙の値が次のようには。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2708">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f2d44-2709">[値]</span><span class="sxs-lookup"><span data-stu-id="f2d44-2709">Value</span></span>|<span data-ttu-id="f2d44-2710">定数</span><span class="sxs-lookup"><span data-stu-id="f2d44-2710">Constant</span></span>|<span data-ttu-id="f2d44-2711">説明</span><span class="sxs-lookup"><span data-stu-id="f2d44-2711">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="f2d44-2712">標準 (既定)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2712">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f2d44-2713">読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2713">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f2d44-2714">非表示にします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2714">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f2d44-2715">システム ファイル。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2715">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f2d44-2716">ボリューム ラベル</span><span class="sxs-lookup"><span data-stu-id="f2d44-2716">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f2d44-2717">ディレクトリまたはフォルダーです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2717">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f2d44-2718">ファイルは、最後のバックアップから変更されました。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2718">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f2d44-2719">ファイルは、別の名前です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2719">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2720">これらの列挙は、Visual Basic 言語によって指定されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2720">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="f2d44-2721">名前は、実際の値ではなく、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2721">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2722">この例では、`SetAttr`ファイルの属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2722">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f2d44-2723">
            <paramref name="Attribute" /> type is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2723">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="f2d44-2724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2724">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2728">場合`Count`が出力線の幅を次の出力位置にすぐに次の空白の数よりも少ない。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2728">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="f2d44-2729">場合`Count`出力線の幅より大きい`SPC`式を使用して次の出力の位置が計算されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2729">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f2d44-2730">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="f2d44-2730">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="f2d44-2731">たとえば、現在の印刷位置が 24 の場合は、出力行の幅は 80、しを指定する`SPC(90)`34 (現在の印刷位置 + 90/80 の残りの部分) の位置に、次の出力が開始されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2731">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="f2d44-2732">現在の出力の位置と出力の線の幅の違いがある場合より小さい`Count`(または`Count` `Mod` *幅*) では、`SPC`関数は、次の行の先頭にはスキップし、生成スペースに一致する`Count`– (*幅*–*桁数*)。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2732">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2733">ワイド文字では、十分な表の列があることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2733">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2734">この例では、`SPC`関数ファイルと出力の位置を**出力**ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2734">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2738">現在の行の現在の印刷位置がよりも大きいかどうか`Column`、`TAB`では、列の値に等しいへスキップ`Column`次の出力行にします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2738">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="f2d44-2739">場合`Column`が 1 より小さい`TAB`印刷位置を 1 列目に移動します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2739">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="f2d44-2740">場合`Column`出力線の幅よりも大きい`TAB`式を使用して次の印刷位置を計算します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2740">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f2d44-2741">Mod の列の幅</span><span class="sxs-lookup"><span data-stu-id="f2d44-2741">Column Mod width</span></span>  
  
 <span data-ttu-id="f2d44-2742">たとえば場合、*幅*80 は、指定した`TAB(90)`10 (90/80 の残りの部分) 列に、次の出力が開始されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2742">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="f2d44-2743">場合`Column`現在印刷位置、計算の印刷位置にある次の行に印刷を開始よりも小さいです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2743">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="f2d44-2744">計算された印刷位置が現在の印刷位置よりも大きい場合は、計算された印刷を開始は、同じ行に位置を印刷します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2744">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="f2d44-2745">出力行の左端の位置を印刷は常に 1 です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2745">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="f2d44-2746">使用する場合、`Print`または`PrintLine`ファイルに出力する関数を使用して設定できる出力ファイルの現在の幅は、右端の印刷位置は、`FileWidth`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2746">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="f2d44-2747">`TAB`関数はでも使用できます、`WriteLine`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2747">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="f2d44-2748">使用することはできません<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>または<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2748">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2749">ワイド文字の十分な表の列があることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2749">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2750">この例では、`TAB`関数ファイルと出力の位置を**出力**ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2750">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="f2d44-2751">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2751">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="f2d44-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f2d44-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2756">現在の行の現在の印刷位置がより大きいかどうか`Column`、`TAB`では、列の値に等しいへスキップ`Column`次の出力行にします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2756">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="f2d44-2757">場合`Column`が 1 より小さい`TAB`印刷位置を 1 列目に移動します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2757">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="f2d44-2758">場合`Column`出力線の幅より大きい`TAB`式を使用して次の出力の位置が計算されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2758">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f2d44-2759">Mod の列の幅</span><span class="sxs-lookup"><span data-stu-id="f2d44-2759">Column Mod width</span></span>  
  
 <span data-ttu-id="f2d44-2760">たとえば場合、*幅*80 は、指定した`TAB(90)`10 (90/80 の残りの部分) 列に、次の出力が開始されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2760">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="f2d44-2761">場合`Column`現在印刷位置、計算の印刷位置にある次の行に印刷を開始よりも小さいです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2761">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="f2d44-2762">計算された印刷位置が現在の印刷位置よりも大きい場合は、計算された印刷を開始は、同じ行に位置を印刷します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2762">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="f2d44-2763">出力行の左端の位置を印刷は常に 1 です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2763">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="f2d44-2764">使用する場合、`Print`または`PrintLine`ファイルに出力する関数を使用して設定できる出力ファイルの現在の幅は、右端の印刷位置は、`FileWidth`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2764">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="f2d44-2765">`TAB`関数はでも使用できます、`WriteLine`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2765">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="f2d44-2766">使用することはできません<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>または<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2766">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2d44-2767">ワイド文字の十分な表の列があることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2767">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2768">この例では、`TAB`関数ファイルと出力の位置を**出力**ウィンドウです。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2768">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f2d44-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f2d44-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2772">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2772">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2773">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2773">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f2d44-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2777">`Lock`と`Unlock`関数が使用される環境でいくつかのプロセスが、同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2777">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f2d44-2778">`Lock` および`Unlock`関数は、常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2778">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f2d44-2779">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2779">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f2d44-2780">場合`Record`、または`FromRecord`と`ToRecord`が指定されていないロックのなりますファイル全体です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2780">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f2d44-2781">場合`Record`だけが指定されている 1 つのレコードがロック/ロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2781">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f2d44-2782">連続の入力または出力のファイルを開いていた場合`Lock`と`Unlock`によって指定される範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2782">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2783">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2783">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f2d44-2784">この例では、`People.txt`構造体のレコードを含むファイルは、`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2784">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2785">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2785">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2786">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2786">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2787">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2787">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="f2d44-2788">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2788">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-2789">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2789">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f2d44-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2793">`Lock`と`Unlock`関数が使用される環境でいくつかのプロセスが、同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2793">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f2d44-2794">`Lock` および`Unlock`関数は、常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2794">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f2d44-2795">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2795">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f2d44-2796">場合`Record`、または`FromRecord`と`ToRecord`が指定されていないロックのなりますファイル全体です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2796">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f2d44-2797">場合`Record`だけが指定されている 1 つのレコードがロック/ロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2797">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f2d44-2798">連続の入力または出力のファイルを開いていた場合`Lock`と`Unlock`によって指定される範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2798">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2799">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2799">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f2d44-2800">この例では、`People.txt`構造体のレコードを含むファイルは、`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2800">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2801">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2801">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2802">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2802">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2803">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2803">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="f2d44-2804">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2804">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-2805">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2805">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="f2d44-2806">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2806">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-2807">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2807">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f2d44-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f2d44-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2811">`Lock`と`Unlock`関数が使用される環境でいくつかのプロセスが、同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2811">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f2d44-2812">`Lock` および`Unlock`関数は、常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2812">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f2d44-2813">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2813">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f2d44-2814">場合`Record`、または`FromRecord`と`ToRecord`が指定されていないロックのなりますファイル全体です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2814">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f2d44-2815">場合`Record`だけが指定されている 1 つのレコードがロック/ロック解除されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2815">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f2d44-2816">連続の入力または出力のファイルを開いていた場合`Lock`と`Unlock`によって指定される範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2816">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2817">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2817">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f2d44-2818">この例では、`People.txt`構造体のレコードを含むファイルは、`Person`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2818">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2819">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2819">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2820">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2820">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="f2d44-2822">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2822">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-2823">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2823">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2824">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2824">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="f2d44-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2826">`Write`と`WriteLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2826">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2827">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2827">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2828">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2828">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2829">省略した場合`Output`、空白行がファイルに出力します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2829">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="f2d44-2830">複数の式は、コンマで区切ってことができます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2830">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="f2d44-2831">異なり、 `Print` 、関数、`Write`関数は、ファイルに書き込まれる項目と文字列を囲む引用符の間にコンマを挿入します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2831">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="f2d44-2832">一覧に明示的な区切り記号を配置する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2832">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="f2d44-2833">ときに`Write`をファイルにのみ数値データの書き込みに使用`Boolean`、日付、null の場合、および`Error`データ形式がサポートされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2833">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="f2d44-2834">次の前提に従うと、データが読み取ることができを使用してを正しく解釈されるように`Input`ロケールに関係なく、します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2834">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="f2d44-2835">数値データには、小数点区切り文字としてピリオドを使用して常に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2835">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="f2d44-2836">`Boolean`データか、`#TRUE#`または`#FALSE#`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2836">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="f2d44-2837">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2837">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="f2d44-2838">日付データは、汎用の日付の形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2838">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="f2d44-2839">日付または時刻部分のいずれかがないか 0 の場合は、提供された部分のみがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2839">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="f2d44-2840">場合、ファイルに書き込まれますが何も`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2840">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f2d44-2841">ただし、null のデータの`#NULL#`が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2841">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="f2d44-2842">`Error`として表示されるデータ、出力`#ERROR errorcode#`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2842">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="f2d44-2843">`Error`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2843">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="f2d44-2844">`WriteLine` 改行文字を挿入 (つまり、キャリッジ リターン/ライン フィード、または`Chr(13) + Chr(10)`) が記述されている最後の文字の後、`Output`ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2844">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="f2d44-2845">二重引用符を使用して文字列に引用符を埋め込むことができます、または""です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2845">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="f2d44-2846">たとえば、オブジェクトに適用された</span><span class="sxs-lookup"><span data-stu-id="f2d44-2846">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="f2d44-2847">文字列の値を返します`Double quotation marks aren't "difficult" to handle`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2847">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="f2d44-2848">使用してファイルへの書き込み、`Write`または`WriteLine`関数が必要です`Append`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2848">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2849">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2849">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2850">この例では、`Write`シーケンシャル ファイルに raw データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2850">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f2d44-2851">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2851">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f2d44-2852">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2852">Required.</span>
          </span>
          <span data-ttu-id="f2d44-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="f2d44-2854">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2854">Optional.</span>
          </span>
          <span data-ttu-id="f2d44-2855">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2855">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f2d44-2856">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2856">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="f2d44-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2d44-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2d44-2858">`Write`と`WriteLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2858">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f2d44-2859">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトは、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2859">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f2d44-2860">詳細については、次を参照してください。 [Visual Basic によるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2860">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f2d44-2861">省略した場合`Output`、空白行がファイルに出力します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2861">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="f2d44-2862">複数の式は、コンマで区切ってことができます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2862">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="f2d44-2863">異なり、 `Print` 、関数、`Write`関数は、ファイルに書き込まれる項目と文字列を囲む引用符の間にコンマを挿入します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2863">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="f2d44-2864">一覧に明示的な区切り記号を配置する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2864">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="f2d44-2865">ときに`Write`をファイルにのみ数値データの書き込みに使用`Boolean`、日付、null の場合、および`Error`データ形式がサポートされます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2865">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="f2d44-2866">次の前提に従うと、データが読み取ることができを使用してを正しく解釈されるように`Input`ロケールに関係なく、します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2866">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="f2d44-2867">数値データには、小数点区切り文字としてピリオドを使用して常に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2867">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="f2d44-2868">`Boolean`データか、`#TRUE#`または`#FALSE#`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2868">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="f2d44-2869">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2869">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="f2d44-2870">日付データは、汎用の日付の形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2870">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="f2d44-2871">日付または時刻部分のいずれかがないか 0 の場合は、提供された部分のみがファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2871">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="f2d44-2872">場合、ファイルに書き込まれますが何も`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2872">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f2d44-2873">ただし、null のデータの`#NULL#`が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2873">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="f2d44-2874">`Error`として表示されるデータ、出力`#ERROR errorcode#`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2874">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="f2d44-2875">`Error`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2875">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="f2d44-2876">`WriteLine` 改行文字を挿入 (つまり、キャリッジ リターン/ライン フィード、または`Chr(13) + Chr(10)`) が記述されている最後の文字の後、`Output`ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2876">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="f2d44-2877">二重引用符を使用して文字列に引用符を埋め込むことができます、または""です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2877">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="f2d44-2878">たとえば、オブジェクトに適用された</span><span class="sxs-lookup"><span data-stu-id="f2d44-2878">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="f2d44-2879">文字列の値を返します`Double quotation marks aren't "difficult" to handle`です。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2879">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="f2d44-2880">使用してファイルへの書き込み、`Write`または`WriteLine`関数が必要です`Append`からへのアクセス、`FileIOPermissionAccess`列挙します。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2880">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f2d44-2881">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2881">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2d44-2882">この例では、`Write`シーケンシャル ファイルに raw データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f2d44-2882">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>