<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="934f06896ded78a1be250bb2062ad8017ce8cb49" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58462100" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="87459-101"><see langword="FileSystem" /> モジュールに含まれるプロシージャを使って、ファイル、ディレクトリ、またはフォルダー、およびシステムの操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="87459-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="87459-102"><see langword="My" /> 機能を使用すると、<see langword="FileSystem" /> モジュールを使用した場合よりファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="87459-103">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-104">このモジュールは、Visual Basic 言語のキーワードおよびファイルとフォルダーにアクセスするランタイム ライブラリ メンバーをサポートします。</span><span class="sxs-lookup"><span data-stu-id="87459-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-105">この例では、`GetAttr`ファイルとディレクトリまたはフォルダーの属性を確認する関数。</span><span class="sxs-lookup"><span data-stu-id="87459-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md"><span data-ttu-id="87459-106">ディレクトリとファイルの概要</span><span class="sxs-lookup"><span data-stu-id="87459-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md"><span data-ttu-id="87459-107">入出力の概要</span><span class="sxs-lookup"><span data-stu-id="87459-107">Input and Output Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="87459-108">キーワード (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="87459-109">Visual Basic ランタイム ライブラリ メンバー</span><span class="sxs-lookup"><span data-stu-id="87459-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="87459-110">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-110">Required.</span></span> <span data-ttu-id="87459-111">新しい既定ディレクトリまたはフォルダーになるディレクトリまたはフォルダーを識別する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-111">A string expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="87459-112"><paramref name="Path" /> にはドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="87459-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="87459-113">ドライブを指定しない場合、<see langword="ChDir" /> は現在のドライブの既定ディレクトリまたは既定フォルダーを変更します。</span><span class="sxs-lookup"><span data-stu-id="87459-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="87459-114">現在のディレクトリまたはフォルダーを変更します。</span><span class="sxs-lookup"><span data-stu-id="87459-114">Changes the current directory or folder.</span></span> <span data-ttu-id="87459-115"><see langword="My" /> 機能を使用すると、<see langword="ChDir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="87459-116">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-117">`ChDir`関数は、既定のディレクトリが既定のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="87459-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="87459-118">たとえば、既定のドライブが C の場合は、次のステートメントは変更既定のディレクトリをドライブ D、C が既定のドライブに残ります。</span><span class="sxs-lookup"><span data-stu-id="87459-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="87459-119">相対に行うことができますディレクトリの変更は、次のように 2 つのピリオドを入力します。</span><span class="sxs-lookup"><span data-stu-id="87459-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-120">`ChDir`関数が部分的に信頼された状況では、その実行に影響を与えるアンマネージ コードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="87459-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="87459-121">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>とします。</span><span class="sxs-lookup"><span data-stu-id="87459-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-122">この例では、`ChDir`を現在のディレクトリまたはフォルダーを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="87459-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-123"><paramref name="Path" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="87459-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87459-124">指定されたドライブが無効です。または利用できません。</span><span class="sxs-lookup"><span data-stu-id="87459-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md"><span data-ttu-id="87459-125">方法 : Visual Basic でファイル パスを解析する</span><span class="sxs-lookup"><span data-stu-id="87459-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md"><span data-ttu-id="87459-126">Visual Basic でのファイルおよびディレクトリの作成、削除、および移動</span><span class="sxs-lookup"><span data-stu-id="87459-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87459-127">現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="87459-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="87459-128">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-128">Required.</span></span> <span data-ttu-id="87459-129">既存のドライブを指定する文字列式。</span><span class="sxs-lookup"><span data-stu-id="87459-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="87459-130">長さ 0 の文字列 ("") を指定した場合、現在のドライブは変更されません。</span><span class="sxs-lookup"><span data-stu-id="87459-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="87459-131"><paramref name="Drive" /> 引数が複数の文字で構成される文字列の場合、<see langword="ChDrive" /> は先頭の文字だけを使用します。</span><span class="sxs-lookup"><span data-stu-id="87459-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="87459-132">現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="87459-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-133">`ChDrive`関数が部分的に信頼された状況では、その実行に影響を与えるアンマネージ コードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="87459-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="87459-134">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="87459-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-135">この例では、`ChDrive`を現在のドライブを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="87459-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="87459-136">関数は、ドライブが存在しない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="87459-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-137">指定されたドライブが無効です。または利用できません。</span><span class="sxs-lookup"><span data-stu-id="87459-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-138">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="87459-139">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-139">Required.</span></span> <span data-ttu-id="87459-140">既存のドライブを指定する文字列式。</span><span class="sxs-lookup"><span data-stu-id="87459-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="87459-141">長さ 0 の文字列 ("") を指定した場合、現在のドライブは変更されません。</span><span class="sxs-lookup"><span data-stu-id="87459-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="87459-142"><paramref name="Drive" /> 引数が複数の文字で構成される文字列の場合、<see langword="ChDrive" /> は先頭の文字だけを使用します。</span><span class="sxs-lookup"><span data-stu-id="87459-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="87459-143">現在のドライブを変更します。</span><span class="sxs-lookup"><span data-stu-id="87459-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-144">`ChDrive`関数が部分的に信頼された状況では、その実行に影響を与えるアンマネージ コードのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="87459-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="87459-145">詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="87459-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-146">この例では、`ChDrive`を現在のドライブを変更する関数。</span><span class="sxs-lookup"><span data-stu-id="87459-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="87459-147">関数は、ドライブが存在しない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="87459-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-148">指定されたドライブが無効です。または利用できません。</span><span class="sxs-lookup"><span data-stu-id="87459-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-149">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87459-150">現在のパスを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-150">Returns a string representing the current path.</span></span> <span data-ttu-id="87459-151"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="87459-152">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87459-153">現在のパスを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-153">Returns a string representing the current path.</span></span> <span data-ttu-id="87459-154"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="87459-155">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="87459-156">現在のパスを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="87459-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87459-157">この例では、`CurDir`関数を現在のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="87459-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="87459-158">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-158">Optional.</span></span> <span data-ttu-id="87459-159">既存のドライブを指定する <see langword="Char" /> 式です。</span><span class="sxs-lookup"><span data-stu-id="87459-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="87459-160">ドライブが指定されていない場合、または <paramref name="Drive" /> が長さ 0 の文字列 ("") である場合は、<see langword="CurDir" /> により現在のドライブのパスが返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="87459-161">現在のパスを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-161">Returns a string representing the current path.</span></span> <span data-ttu-id="87459-162"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="CurDir" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="87459-163">詳細については、「<see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="87459-164">現在のパスを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="87459-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87459-165">この例では、`CurDir`関数を現在のパスを返します。</span><span class="sxs-lookup"><span data-stu-id="87459-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87459-166">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="87459-167"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="87459-168">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87459-169">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="87459-170"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="87459-171">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="87459-172">指定されたパターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="87459-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-173">`Dir`関数は、複数の文字の使用をサポートしています (`*`) と 1 文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="87459-174">`VbVolume` 特定のファイル名の代わりに、ドライブのボリューム ラベルを返します。</span><span class="sxs-lookup"><span data-stu-id="87459-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="87459-175">指定する必要があります、`PathName`初めて呼び出す、`Dir`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="87459-176">次の項目を取得するには、後続の呼び出しを行うことができます、`Dir`パラメーターなしの関数。</span><span class="sxs-lookup"><span data-stu-id="87459-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-177">正常に実行する、`Dir`関数に必要な<xref:System.Security.Permissions.FileIOPermissionAccess.Read>と<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="87459-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="87459-178">詳細については、次を参照してください。 <xref:System.Security.Permissions.FileIOPermission>、 <xref:System.Security.SecurityException>、および[コード アクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="87459-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="87459-179">`Attributes`列挙値の引数は次のようにします。</span><span class="sxs-lookup"><span data-stu-id="87459-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="87459-180">[値]</span><span class="sxs-lookup"><span data-stu-id="87459-180">Value</span></span>|<span data-ttu-id="87459-181">定数</span><span class="sxs-lookup"><span data-stu-id="87459-181">Constant</span></span>|<span data-ttu-id="87459-182">説明</span><span class="sxs-lookup"><span data-stu-id="87459-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="87459-183">既定モード。</span><span class="sxs-lookup"><span data-stu-id="87459-183">Default.</span></span> <span data-ttu-id="87459-184">属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="87459-185">属性のないファイルや読み取り専用ファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="87459-186">属性のないファイルや隠しファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="87459-187">システム ファイル、およびも属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="87459-188">ボリューム ラベルを指定しますその他の属性が指定されている場合`vbVolume`は無視されます。</span><span class="sxs-lookup"><span data-stu-id="87459-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="87459-189">ディレクトリまたはフォルダー、およびも属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="87459-190">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="87459-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="87459-191">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="87459-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="87459-192">これらの列挙体は、Visual Basic 言語によって指定され、実際の値ではなく、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="87459-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-193">この例では、`Dir`関数を特定のファイルおよびディレクトリの存在を確認します。</span><span class="sxs-lookup"><span data-stu-id="87459-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0;netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0;netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="87459-194">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-194">Optional.</span></span> <span data-ttu-id="87459-195">ファイル名、ディレクトリまたはフォルダー名、あるいはドライブ ボリューム ラベルを指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-195">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="87459-196"><paramref name="PathName" /> が見つからない場合は、長さ 0 の文字列 (<see langword="&quot;&quot;" />) が返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname"><span data-ttu-id="87459-197">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-197">Optional.</span></span> <span data-ttu-id="87459-198">ファイル名、ディレクトリまたはフォルダー名、あるいはドライブ ボリューム ラベルを指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-198">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="87459-199"><paramref name="Pathname" /> が見つからない場合は、長さ 0 の文字列 (<see langword="&quot;&quot;" />) が返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-199">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="Pathname" /> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="87459-200">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-200">Optional.</span></span> <span data-ttu-id="87459-201">値がファイル属性を指定する列挙式または数式。</span><span class="sxs-lookup"><span data-stu-id="87459-201">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="87459-202">省略した場合、<see langword="Dir" /> は、<paramref name="Pathname" /> に一致する、属性のないファイルを返します。</span><span class="sxs-lookup"><span data-stu-id="87459-202">If omitted, <see langword="Dir" /> returns files that match <paramref name="Pathname" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="87459-203">指定パターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-203">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="87459-204"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="Dir" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-204">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="87459-205">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-205">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="87459-206">指定されたパターンまたはファイル属性と一致するファイル名、ディレクトリ名、フォルダー名を表す文字列、またはドライブのボリューム ラベルを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="87459-206">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-207">`Dir`関数は、複数の文字の使用をサポートしています (`*`) と 1 文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-207">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="87459-208">`VbVolume` 特定のファイル名の代わりに、ドライブのボリューム ラベルを返します。</span><span class="sxs-lookup"><span data-stu-id="87459-208">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="87459-209">指定する必要があります、`PathName`初めて呼び出す、`Dir`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-209">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="87459-210">次の項目を取得するには、後続の呼び出しを行うことができます、`Dir`パラメーターなしの関数。</span><span class="sxs-lookup"><span data-stu-id="87459-210">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-211">正常に実行する、`Dir`関数に必要な<xref:System.Security.Permissions.FileIOPermissionAccess.Read>と<xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="87459-211">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="87459-212">詳細については、次を参照してください。 <xref:System.Security.Permissions.FileIOPermission>、 <xref:System.Security.SecurityException>、および[コード アクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。</span><span class="sxs-lookup"><span data-stu-id="87459-212">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="87459-213">`Attributes`列挙値の引数は次のようにします。</span><span class="sxs-lookup"><span data-stu-id="87459-213">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="87459-214">[値]</span><span class="sxs-lookup"><span data-stu-id="87459-214">Value</span></span>|<span data-ttu-id="87459-215">定数</span><span class="sxs-lookup"><span data-stu-id="87459-215">Constant</span></span>|<span data-ttu-id="87459-216">説明</span><span class="sxs-lookup"><span data-stu-id="87459-216">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="87459-217">既定モード。</span><span class="sxs-lookup"><span data-stu-id="87459-217">Default.</span></span> <span data-ttu-id="87459-218">属性のないファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-218">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="87459-219">ファイル属性がないだけでなく、読み取り専用のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-219">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="87459-220">ファイル属性がないだけでなく、非表示のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-220">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="87459-221">ファイル属性がないだけでなく、システム ファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-221">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="87459-222">ボリューム ラベルを指定しますその他の属性が指定されている場合`vbVolume`は無視されます。</span><span class="sxs-lookup"><span data-stu-id="87459-222">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="87459-223">ディレクトリまたはファイル属性がないだけでなく、フォルダーを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-223">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="87459-224">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="87459-224">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="87459-225">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="87459-225">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="87459-226">これらの列挙体は、Visual Basic 言語によって指定され、実際の値の代わりに、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="87459-226">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-227">この例では、`Dir`関数を特定のファイルおよびディレクトリの存在を確認します。</span><span class="sxs-lookup"><span data-stu-id="87459-227">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-228">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-228">Required.</span></span> <span data-ttu-id="87459-229">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="87459-229">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="87459-230"><see langword="True" /> モードまたはシーケンシャル <see langword="Random" /> モードで開いたファイルの現在位置がファイルの末尾に達している場合、ブール値 <see langword="Input" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-230">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="87459-231"><see langword="True" /> モードまたはシーケンシャル <see langword="Random" /> モードで開いたファイルの現在位置がファイルの末尾に達している場合、ブール値 <see langword="Input" /> です。</span><span class="sxs-lookup"><span data-stu-id="87459-231">A Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-232">使用`EOF`ファイルの末尾の入力を取得しようとして生成されたエラーを回避するためにします。</span><span class="sxs-lookup"><span data-stu-id="87459-232">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="87459-233">`EOF`関数が返される`False`ファイルの末尾に達するまでです。</span><span class="sxs-lookup"><span data-stu-id="87459-233">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="87459-234">開いたファイル`Random`または`Binary`アクセス、`EOF`返します`False`最後に実行されるまで`FileGet`関数は、レコード全体を読めるようにすることはありません。</span><span class="sxs-lookup"><span data-stu-id="87459-234">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="87459-235">開いたファイル`Binary`アクセス、ファイルを使用して、読み込もうとすると、`Input`行われるまで`EOF`返します`True`エラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="87459-235">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="87459-236">使用して、`LOF`と`Loc`関数の代わりに`EOF`でバイナリ ファイルを読み取るときに`Input`、使用または`Get`を使用する場合、`EOF`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-236">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="87459-237">開いたファイル`Output`、`EOF`は常に返します`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-237">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-238">この例では、`EOF`ファイルの終わりを検出する関数。</span><span class="sxs-lookup"><span data-stu-id="87459-238">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="87459-239">この例では、`Testfile`複数行のテキストを含むテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="87459-239">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-240">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-240">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-241">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-241">Required.</span></span> <span data-ttu-id="87459-242"><see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="87459-242"><see langword="Integer" />.</span></span> <span data-ttu-id="87459-243">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-243">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="87459-244"><see langword="FileOpen" /> 関数を使用して開いたファイルのファイル モードを表す列挙体を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-244">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87459-245"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="FileAttr" /> 関数を使用した場合より I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-245">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="87459-246">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-246">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="87459-247">次の列挙型値は、ファイルのアクセス モードを示します。</span><span class="sxs-lookup"><span data-stu-id="87459-247">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="87459-248">[値]</span><span class="sxs-lookup"><span data-stu-id="87459-248">Value</span></span> 
 </term><description> <span data-ttu-id="87459-249">モード</span><span class="sxs-lookup"><span data-stu-id="87459-249">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="87459-250">1</span><span class="sxs-lookup"><span data-stu-id="87459-250">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="87459-251">2</span><span class="sxs-lookup"><span data-stu-id="87459-251">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="87459-252">4</span><span class="sxs-lookup"><span data-stu-id="87459-252">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="87459-253">8</span><span class="sxs-lookup"><span data-stu-id="87459-253">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="87459-254">32</span><span class="sxs-lookup"><span data-stu-id="87459-254">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-255">この関数は、ファイルのモードを使用して開かれたファイルを表す列挙体を返します、`FileOpen`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-255">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-256">この例では、`FileAttr`関数を開いているファイルのファイル モードを返します。</span><span class="sxs-lookup"><span data-stu-id="87459-256">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-257">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-257">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="87459-258">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-258">Optional.</span></span> <span data-ttu-id="87459-259">閉じる対象となる、0 以上のチャネルで構成されるパラメーター配列。</span><span class="sxs-lookup"><span data-stu-id="87459-259">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="87459-260"><see langword="FileOpen" /> 関数で開いたファイルへの入出力を終了して、ファイルを閉じます。</span><span class="sxs-lookup"><span data-stu-id="87459-260">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87459-261"><see langword="My" /> を使用すると、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-261"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="87459-262">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-262">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-263">`FileClose`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-263">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-264">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-264">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-265">詳細については、「[方法 :StreamReader を使用してファイルからテキストを読み取る](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)、[方法。StreamWriter のファイルにテキストを書き込む](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)、および[チュートリアル。Visual Basic でファイルおよびディレクトリを操作する](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-265">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="87459-266">省略した場合`FileNumbers`、すべてのアクティブなファイルを開く、`FileOpen`関数は閉じられます。</span><span class="sxs-lookup"><span data-stu-id="87459-266">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="87459-267">開かれているファイルを閉じるとき`Output`または`Append`出力の最終的なバッファーがそのファイルのオペレーティング システムのバッファーに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-267">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="87459-268">すべてのバッファー領域が閉じたに関連付けられているファイルは解放されます。</span><span class="sxs-lookup"><span data-stu-id="87459-268">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="87459-269">ときに、`FileClose`関数が実行され、ファイルをそのファイルの関連付け番号が終了します。</span><span class="sxs-lookup"><span data-stu-id="87459-269">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-270">この例では、`FileClose`の開かれたファイルを閉じる関数`Input`します。</span><span class="sxs-lookup"><span data-stu-id="87459-270">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-271"><paramref name="FileNumber" /> は存在しません。</span><span class="sxs-lookup"><span data-stu-id="87459-271"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="87459-272">End ステートメント</span><span class="sxs-lookup"><span data-stu-id="87459-272">End Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md"><span data-ttu-id="87459-273">Stop ステートメント (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-273">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-274">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-274">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="87459-275">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-275">Required.</span></span> <span data-ttu-id="87459-276">コピーするファイルの名前を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-276">A string expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="87459-277"><paramref name="Source" /> には、コピー先ファイルのディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="87459-277"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="87459-278">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-278">Required.</span></span> <span data-ttu-id="87459-279">コピー先のファイルの名前を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-279">A string expression that specifies the destination file name.</span></span> <span data-ttu-id="87459-280"><paramref name="Destination" /> には、コピー先ファイルのディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="87459-280"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="87459-281">ファイルをコピーします。</span><span class="sxs-lookup"><span data-stu-id="87459-281">Copies a file.</span></span> <span data-ttu-id="87459-282"><see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> を使用すると、<see langword="FileCopy" /> を使用した場合よりも、ファイル I/O 操作の生産性およびパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-282">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="87459-283">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-283">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-284">使用しようとする場合、`FileCopy`で現在開いているファイルの場合は、関数のエラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-284">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="87459-285">`FileCopy` ローカル ドライブで動作する完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="87459-285">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-286">この例では、`FileCopy`別に 1 つのファイルをコピーする関数。</span><span class="sxs-lookup"><span data-stu-id="87459-286">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="87459-287">この例のために、仮定`SrcFile`はデータを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="87459-287">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-288"><paramref name="Source" /> または <paramref name="Destination" /> が無効であるか、指定されていません。</span><span class="sxs-lookup"><span data-stu-id="87459-288"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-289">ファイルは既に開いています。</span><span class="sxs-lookup"><span data-stu-id="87459-289">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87459-290">ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="87459-290">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md"><span data-ttu-id="87459-291">方法 : Visual Basic でファイルのコピーを別のディレクトリに作成する</span><span class="sxs-lookup"><span data-stu-id="87459-291">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md"><span data-ttu-id="87459-292">方法 : Visual Basic でファイルのコピーを同じディレクトリに作成する</span><span class="sxs-lookup"><span data-stu-id="87459-292">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md"><span data-ttu-id="87459-293">方法 : Visual Basic でディレクトリを別のディレクトリにコピーする</span><span class="sxs-lookup"><span data-stu-id="87459-293">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="87459-294">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-294">Required.</span></span> <span data-ttu-id="87459-295">ファイル名を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-295">A string expression that specifies a file name.</span></span> <span data-ttu-id="87459-296"><paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="87459-296"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="87459-297">ファイルへの書き込み日時を示す <see langword="Date" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-297">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="87459-298"><see langword="My" /> 機能を使用すると、<see langword="FileDateTime" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-298">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="87459-299">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-299">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="87459-300">ファイルの作成日時または最終変更日時を示す <see langword="Date" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-300"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87459-301">この例では、`FileDateTime`関数を日付し、時刻のファイルが作成または最後に変更します。</span><span class="sxs-lookup"><span data-stu-id="87459-301">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="87459-302">表示される日付の形式は、システムのロケール設定に基づきます。</span><span class="sxs-lookup"><span data-stu-id="87459-302">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-303"><paramref name="PathName" /> が無効です。またはワイルドカードを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="87459-303"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87459-304">対象のファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="87459-304">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-305">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-305">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87459-306">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-306">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-307"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-307">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-308">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-308">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-309">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-309">Required.</span></span> <span data-ttu-id="87459-310">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-310">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-311">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-311">Required.</span></span> <span data-ttu-id="87459-312">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-312">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-313">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-313">Optional.</span></span> <span data-ttu-id="87459-314">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-314">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87459-315">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-315">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-316"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-316">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-317">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-317">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-318">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-318">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-319">データを読み取る`FileGet`通常のファイルに書き込まれ、`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-319">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="87459-320">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-320">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-321">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="87459-321">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-322">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-322">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-323">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-323">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-324">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-324">Random Mode</span></span>  
 <span data-ttu-id="87459-325">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-325">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-326">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-326">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-327">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-327">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-328">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="87459-328">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-329">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-329">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-330">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-330">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-331">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-331">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-332">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-332">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-333">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="87459-333">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87459-334">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-334">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-335">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-335">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87459-336">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-336">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87459-337">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-337">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87459-338">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-338">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-339">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-339">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-340">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-340">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-341">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-341">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87459-342">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="87459-342">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87459-343">記述子の 18 バイト。(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87459-343">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87459-344">データのバイト数を 200:(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87459-344">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-345">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-345">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87459-346">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-347">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-347">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-348">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-348">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-349">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-349">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87459-350">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-350">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87459-351">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-351">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-352">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-352">Binary Mode</span></span>  
 <span data-ttu-id="87459-353">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-353">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-354">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-354">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-355">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-355">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-356">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="87459-356">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-357">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-357">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87459-358">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-358">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87459-359">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-359">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-360">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-360">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87459-361">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-361">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-362"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-362"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-363">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-363">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-364">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-364">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-365">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-365">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-366">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-366">Required.</span></span> <span data-ttu-id="87459-367">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-367">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-368">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-368">Required.</span></span> <span data-ttu-id="87459-369">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-369">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-370">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-370">Optional.</span></span> <span data-ttu-id="87459-371">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-371">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87459-372">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-372">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-373"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-373">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-374">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-374">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-375">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-375">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-376">データを読み取る`FileGet`通常のファイルに書き込まれ、`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-376">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="87459-377">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-377">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-378">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="87459-378">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-379">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-379">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-380">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-380">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-381">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-381">Random Mode</span></span>  
 <span data-ttu-id="87459-382">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-382">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-383">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-383">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-384">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-384">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-385">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="87459-385">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-386">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-386">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-387">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-387">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-388">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-388">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-389">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-389">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-390">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="87459-390">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87459-391">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-392">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-392">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87459-393">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-393">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87459-394">場合は、記述子は使用されません。</span><span class="sxs-lookup"><span data-stu-id="87459-394">If the descriptor is not used.</span></span> <span data-ttu-id="87459-395">渡された配列の境界とサイズ、`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-395">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87459-396">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-396">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-397">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-397">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-398">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-398">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-399">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-399">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87459-400">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="87459-400">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87459-401">記述子の 18 バイト。(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87459-401">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87459-402">データのバイト数を 200:(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87459-402">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-403">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-403">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87459-404">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-405">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-405">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-406">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-406">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-407">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-407">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87459-408">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-408">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87459-409">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-409">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-410">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-410">Binary Mode</span></span>  
 <span data-ttu-id="87459-411">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-411">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-412">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-412">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-413">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-413">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-414">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="87459-414">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-415">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-415">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87459-416">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-416">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87459-417">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-417">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-418">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-418">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87459-419">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-419">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-420"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-420"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-421">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-422">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-422">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-423">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-423">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-424">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-424">Required.</span></span> <span data-ttu-id="87459-425">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-425">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-426">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-426">Required.</span></span> <span data-ttu-id="87459-427">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-427">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-428">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-428">Optional.</span></span> <span data-ttu-id="87459-429">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-429">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87459-430">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-430">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-431"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-431">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-432">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-432">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-433">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-433">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-434">データを読み取る`FileGet`通常のファイルに書き込まれ、`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-434">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="87459-435">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-435">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-436">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="87459-436">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-437">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-437">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-438">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-438">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-439">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-439">Random Mode</span></span>  
 <span data-ttu-id="87459-440">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-440">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-441">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-441">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-442">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-442">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-443">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="87459-443">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-444">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-444">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-445">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-445">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-446">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-446">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-447">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-447">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-448">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="87459-448">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87459-449">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-449">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-450">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-450">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87459-451">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-451">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87459-452">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-452">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87459-453">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-453">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-454">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-454">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-455">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-455">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-456">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-456">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87459-457">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="87459-457">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87459-458">記述子の 18 バイト。(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87459-458">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87459-459">データのバイト数を 200:(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87459-459">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-460">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-460">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87459-461">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-462">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-462">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-463">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-463">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-464">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-464">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87459-465">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-465">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87459-466">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-466">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-467">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-467">Binary Mode</span></span>  
 <span data-ttu-id="87459-468">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-468">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-469">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-469">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-470">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-470">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-471">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="87459-471">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-472">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-472">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87459-473">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-473">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87459-474">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-474">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-475">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-475">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87459-476">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-476">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-477"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-477"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-478">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-478">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-479">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-479">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-480">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-480">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-481">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-481">Required.</span></span> <span data-ttu-id="87459-482">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-482">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-483">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-483">Required.</span></span> <span data-ttu-id="87459-484">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-484">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-485">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-485">Optional.</span></span> <span data-ttu-id="87459-486">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-486">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87459-487">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-487">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-488"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-488">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-489">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-489">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-490">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-490">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-491">データを読み取る`FileGet`通常のファイルに書き込まれ、`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-491">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="87459-492">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-492">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-493">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="87459-493">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-494">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-494">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-495">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-495">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-496">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-496">Random Mode</span></span>  
 <span data-ttu-id="87459-497">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-497">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-498">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-498">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-499">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-499">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-500">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="87459-500">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-501">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-501">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-502">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-502">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-503">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-503">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-504">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-504">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-505">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="87459-505">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87459-506">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-506">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-507">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-507">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87459-508">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-508">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87459-509">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-509">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87459-510">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-510">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-511">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-511">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-512">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-512">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-513">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-513">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87459-514">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="87459-514">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87459-515">記述子の 18 バイト。(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87459-515">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87459-516">データのバイト数を 200:(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87459-516">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-517">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-517">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87459-518">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-519">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-519">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-520">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-520">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-521">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-521">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87459-522">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-522">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87459-523">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-523">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-524">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-524">Binary Mode</span></span>  
 <span data-ttu-id="87459-525">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-525">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-526">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-526">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-527">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-527">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-528">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="87459-528">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-529">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-529">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87459-530">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-530">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87459-531">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-531">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-532">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-532">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87459-533">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-533">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-534"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-534"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-535">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-535">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-536">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-536">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-537">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-537">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-538">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-538">Required.</span></span> <span data-ttu-id="87459-539">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-539">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-540">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-540">Required.</span></span> <span data-ttu-id="87459-541">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-541">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-542">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-542">Optional.</span></span> <span data-ttu-id="87459-543">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-543">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87459-544">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-544">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-545"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-546">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-546">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-547">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-547">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-548">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-548">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87459-549">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-549">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-550">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="87459-550">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-551">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-551">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-552">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-552">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-553">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-553">Random Mode</span></span>  
 <span data-ttu-id="87459-554">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-554">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-555">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-555">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-556">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-556">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-557">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="87459-557">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-558">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-558">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-559">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-559">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-560">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-560">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-561">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-561">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-562">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="87459-562">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87459-563">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-563">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-564">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-564">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87459-565">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-565">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87459-566">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-566">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87459-567">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-568">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-569">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-569">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-570">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87459-571">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="87459-571">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87459-572">記述子の 18 バイト。(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87459-572">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87459-573">データのバイト数を 200:(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87459-573">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-574">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-574">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87459-575">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-576">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-576">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-577">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-577">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-578">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-578">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87459-579">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-579">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87459-580">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-580">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-581">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-581">Binary Mode</span></span>  
 <span data-ttu-id="87459-582">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-582">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-583">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-583">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-584">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-584">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-585">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="87459-585">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-586">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-586">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87459-587">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-587">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87459-588">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-588">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-589">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-589">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87459-590">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-590">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-591"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-591"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-592">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-592">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-593">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-593">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-594">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-594">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-595">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-595">Required.</span></span> <span data-ttu-id="87459-596">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-596">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-597">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-597">Required.</span></span> <span data-ttu-id="87459-598">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-598">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-599">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-599">Optional.</span></span> <span data-ttu-id="87459-600">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-600">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87459-601">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-601">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-602"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-603">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-604">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-604">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-605">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-605">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87459-606">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-606">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-607">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="87459-607">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-608">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-608">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-609">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-609">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-610">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-610">Random Mode</span></span>  
 <span data-ttu-id="87459-611">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-612">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-612">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-613">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-614">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="87459-614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-615">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-615">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-616">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-616">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-617">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-617">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-618">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-618">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-619">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="87459-619">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87459-620">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-621">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-621">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87459-622">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-622">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87459-623">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-623">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87459-624">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-625">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-626">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-626">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-627">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87459-628">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="87459-628">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87459-629">記述子の 18 バイト。(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87459-629">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87459-630">データのバイト数を 200:(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87459-630">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-631">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-631">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87459-632">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-633">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-633">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-634">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-634">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-635">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-635">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87459-636">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-636">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87459-637">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-637">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-638">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-638">Binary Mode</span></span>  
 <span data-ttu-id="87459-639">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-640">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-641">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-642">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="87459-642">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-643">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-643">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87459-644">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-644">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87459-645">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-645">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-646">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-646">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87459-647">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-647">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-648"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-648"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-649">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-649">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-650">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-650">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-651">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-652">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-652">Required.</span></span> <span data-ttu-id="87459-653">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-654">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-654">Required.</span></span> <span data-ttu-id="87459-655">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-655">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-656">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-656">Optional.</span></span> <span data-ttu-id="87459-657">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87459-658">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-658">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-659"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-660">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-661">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-661">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-662">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-662">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87459-663">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-664">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="87459-664">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-665">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-665">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-666">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-666">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-667">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-667">Random Mode</span></span>  
 <span data-ttu-id="87459-668">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-668">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-669">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-669">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-670">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-670">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-671">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="87459-671">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-672">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-672">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-673">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-673">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-674">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-674">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-675">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-675">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-676">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="87459-676">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87459-677">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-677">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-678">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-678">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87459-679">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-679">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87459-680">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-680">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87459-681">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-682">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-683">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-683">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-684">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87459-685">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="87459-685">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87459-686">記述子の 18 バイト。(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87459-686">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87459-687">データのバイト数を 200:(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87459-687">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-688">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-688">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87459-689">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-690">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-690">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-691">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-691">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-692">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87459-693">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-693">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87459-694">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-695">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-695">Binary Mode</span></span>  
 <span data-ttu-id="87459-696">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-696">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-697">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-697">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-698">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-698">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-699">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="87459-699">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-700">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-700">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87459-701">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-701">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87459-702">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-702">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-703">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-703">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87459-704">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-704">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-705"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-705"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-706">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-706">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-707">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-707">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-708">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-709">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-709">Required.</span></span> <span data-ttu-id="87459-710">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-711">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-711">Required.</span></span> <span data-ttu-id="87459-712">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-712">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-713">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-713">Optional.</span></span> <span data-ttu-id="87459-714">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87459-715">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-715">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-716"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-717">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-718">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-718">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-719">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-719">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87459-720">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-721">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="87459-721">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-722">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-722">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-723">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-723">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-724">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-724">Random Mode</span></span>  
 <span data-ttu-id="87459-725">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-725">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-726">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-726">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-727">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-727">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-728">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="87459-728">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-729">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-729">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-730">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-730">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-731">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-731">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-732">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-732">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-733">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="87459-733">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87459-734">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-734">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-735">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-735">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87459-736">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-736">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87459-737">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-737">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87459-738">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-738">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-739">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-739">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-740">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-741">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-741">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87459-742">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="87459-742">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87459-743">記述子の 18 バイト。(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87459-743">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87459-744">データのバイト数を 200:(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87459-744">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-745">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-745">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87459-746">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-747">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-747">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-748">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-748">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-749">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87459-750">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-750">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87459-751">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-752">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-752">Binary Mode</span></span>  
 <span data-ttu-id="87459-753">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-753">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-754">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-754">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-755">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-755">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-756">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="87459-756">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-757">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-757">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87459-758">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-758">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87459-759">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-759">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-760">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-760">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87459-761">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-761">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-762"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-762"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-763">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-763">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-764">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-764">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-765">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-765">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-766">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-766">Required.</span></span> <span data-ttu-id="87459-767">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-767">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-768">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-768">Required.</span></span> <span data-ttu-id="87459-769">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-769">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-770">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-770">Optional.</span></span> <span data-ttu-id="87459-771">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-771">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87459-772">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-772">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-773"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-774">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-775">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-775">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-776">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-776">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87459-777">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-777">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-778">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="87459-778">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-779">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-779">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-780">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-780">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-781">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-781">Random Mode</span></span>  
 <span data-ttu-id="87459-782">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-783">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-783">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-784">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-785">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="87459-785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-786">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-786">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-787">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-787">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-788">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-788">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-789">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-789">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-790">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="87459-790">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87459-791">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-791">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-792">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-792">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87459-793">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-793">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87459-794">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-794">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87459-795">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-795">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-796">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-796">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-797">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-798">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-798">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87459-799">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="87459-799">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87459-800">記述子の 18 バイト。(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87459-800">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87459-801">データのバイト数を 200:(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87459-801">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-802">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-802">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87459-803">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-804">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-804">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-805">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-805">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-806">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87459-807">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-807">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87459-808">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-808">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-809">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-809">Binary Mode</span></span>  
 <span data-ttu-id="87459-810">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-811">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-812">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-813">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="87459-813">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-814">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-814">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87459-815">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-815">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87459-816">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-816">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-817">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-817">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87459-818">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-818">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-819"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-819"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-820">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-820">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-821">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-822">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-823">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-823">Required.</span></span> <span data-ttu-id="87459-824">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-824">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-825">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-825">Required.</span></span> <span data-ttu-id="87459-826">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-826">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-827">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-827">Optional.</span></span> <span data-ttu-id="87459-828">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87459-829">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-829">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-830"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-831">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-832">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-832">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-833">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-833">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87459-834">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-834">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-835">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="87459-835">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-836">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-836">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-837">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-837">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-838">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-838">Random Mode</span></span>  
 <span data-ttu-id="87459-839">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-839">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-840">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-840">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-841">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-841">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-842">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="87459-842">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-843">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-843">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-844">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-844">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-845">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-845">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-846">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-846">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-847">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="87459-847">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87459-848">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-848">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-849">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-849">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87459-850">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-850">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87459-851">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-851">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87459-852">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-852">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-853">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-853">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-854">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-855">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-855">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87459-856">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="87459-856">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87459-857">記述子の 18 バイト。(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87459-857">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87459-858">データのバイト数を 200:(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87459-858">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-859">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-859">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87459-860">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-861">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-861">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-862">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-862">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-863">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-863">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87459-864">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-864">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87459-865">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-865">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-866">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-866">Binary Mode</span></span>  
 <span data-ttu-id="87459-867">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-867">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-868">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-868">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-869">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-869">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-870">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="87459-870">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-871">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-871">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87459-872">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-872">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87459-873">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-873">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-874">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-874">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87459-875">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-875">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-876"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-876"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-877">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-877">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-878">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-878">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-879">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-879">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-880">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-880">Required.</span></span> <span data-ttu-id="87459-881">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-881">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-882">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-882">Required.</span></span> <span data-ttu-id="87459-883">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-883">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-884">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-884">Optional.</span></span> <span data-ttu-id="87459-885">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-885">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87459-886">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-886">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-887"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-887">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-888">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-888">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-889">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-889">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-890">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-890">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87459-891">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-891">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-892">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="87459-892">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-893">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-893">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-894">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-894">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-895">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-895">Random Mode</span></span>  
 <span data-ttu-id="87459-896">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-896">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-897">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-897">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-898">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-898">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-899">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="87459-899">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-900">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-900">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-901">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-901">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-902">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-902">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-903">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-903">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-904">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="87459-904">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87459-905">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-905">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-906">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-906">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87459-907">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-907">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87459-908">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-908">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87459-909">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-909">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-910">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-910">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-911">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-911">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-912">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-912">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87459-913">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="87459-913">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87459-914">記述子の 18 バイト。(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87459-914">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87459-915">データのバイト数を 200:(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87459-915">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-916">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-916">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87459-917">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-918">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-918">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-919">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-919">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-920">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-920">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87459-921">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-921">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87459-922">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-922">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-923">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-923">Binary Mode</span></span>  
 <span data-ttu-id="87459-924">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-924">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-925">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-925">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-926">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-926">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-927">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="87459-927">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-928">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-928">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87459-929">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-929">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87459-930">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-930">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-931">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-931">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87459-932">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-932">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-933"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-933"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-934">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-934">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-935">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-935">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-936">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-936">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-937">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-937">Required.</span></span> <span data-ttu-id="87459-938">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-938">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-939">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-939">Required.</span></span> <span data-ttu-id="87459-940">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-940">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-941">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-941">Optional.</span></span> <span data-ttu-id="87459-942">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-942">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="87459-943">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-943">Optional.</span></span> <span data-ttu-id="87459-944">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="87459-944">Applies only when writing a string.</span></span> <span data-ttu-id="87459-945">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-945">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="87459-946">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="87459-946">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="87459-947">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-947">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-948"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-948">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-949">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-949">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-950">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-950">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-951">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-951">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87459-952">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-952">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-953">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="87459-953">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-954">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-954">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-955">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-955">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-956">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-956">Random Mode</span></span>  
 <span data-ttu-id="87459-957">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-957">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-958">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-958">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-959">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-959">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-960">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="87459-960">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-961">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-961">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-962">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-962">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-963">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-963">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-964">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-964">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-965">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="87459-965">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87459-966">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-966">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-967">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-967">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87459-968">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-968">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87459-969">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-969">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87459-970">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-970">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-971">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-971">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-972">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-972">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-973">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-973">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87459-974">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="87459-974">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87459-975">記述子の 18 バイト。(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87459-975">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87459-976">データのバイト数を 200:(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87459-976">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-977">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-977">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87459-978">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-979">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-979">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-980">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-980">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-981">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-981">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87459-982">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-982">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87459-983">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-983">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-984">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-984">Binary Mode</span></span>  
 <span data-ttu-id="87459-985">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-985">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-986">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-986">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-987">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-987">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-988">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="87459-988">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-989">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-989">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87459-990">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-990">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87459-991">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-991">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-992">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-992">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87459-993">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-993">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-994"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-994"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-995">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-996">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-996">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-997">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-997">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-998">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-998">Required.</span></span> <span data-ttu-id="87459-999">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-999">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1000">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1000">Required.</span></span> <span data-ttu-id="87459-1001">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-1001">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1002">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1002">Optional.</span></span> <span data-ttu-id="87459-1003">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1003">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="87459-1004">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1004">Optional.</span></span> <span data-ttu-id="87459-1005">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="87459-1005">Applies only when writing an array.</span></span> <span data-ttu-id="87459-1006">配列を動的として扱うかどうか、およびサイズと境界を表す配列記述子が必要かどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1006">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="87459-1007">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1007">Optional.</span></span> <span data-ttu-id="87459-1008">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="87459-1008">Applies only when writing a string.</span></span> <span data-ttu-id="87459-1009">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1009">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="87459-1010">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="87459-1010">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="87459-1011">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-1011">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="87459-1012"><see langword="My" /> 機能を使用すると、<see langword="FileGet" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="87459-1013">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1014">`FileGet` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1014">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1015">データを読み取る`FileGet`を使用して、ファイルに書き込まれますが、通常は`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1015">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="87459-1016">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1016">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1017">省略した場合`RecordNumber`、[次へ] のレコードまたはバイトの前回`FileGet`または`FilePut`関数 (最後を指すまたは`Seek`関数) は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="87459-1017">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-1018">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-1018">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-1019">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-1019">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1020">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1020">Random Mode</span></span>  
 <span data-ttu-id="87459-1021">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1021">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1022">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGet`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-1022">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1023">次のレコードの開始する 1 つのレコードの末尾までには、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1023">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1024">埋め込みデータの量は指定できないためには一般にはレコード長を読み取られるデータの長さと一致します。</span><span class="sxs-lookup"><span data-stu-id="87459-1024">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-1025">既定でに読み取られた変数が文字列、`FileGet`を文字列の長さを含み、変数にデータを読み込みます 2 バイトの記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-1025">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-1026">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1026">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1027">Visual Basic 6.0 と以前のバージョン サポートの固定長文字列。ファイルに書き込む場合、長さの記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1027">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-1028">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1028">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1029">読み取られた変数が配列の場合は、サイズと配列の次元の記述子を読み取るかどうかを選択できます。</span><span class="sxs-lookup"><span data-stu-id="87459-1029">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="87459-1030">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1030">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1031">配列を読み取るときに、配列の書き込み方法に合わせる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1031">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="87459-1032">記述子を書き込んだ場合、記述子を読み取る必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1032">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="87459-1033">配列の境界とサイズに渡される記述子を使用しない場合`FileGet`読み込む対象を決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1033">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="87459-1034">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1034">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1035">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1035">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1036">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1036">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1037">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1037">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="87459-1038">218 バイトは、次のように配布されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1038">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="87459-1039">記述子の 18 バイト。(2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="87459-1039">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="87459-1040">データのバイト数を 200:(5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="87459-1040">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-1041">読み取られた変数は他の種類 (いない可変長文字列またはオブジェクト) の変数の`FileGet`変数のデータのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-1041">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="87459-1042">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が読み取られるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-1043">`FileGet` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-1043">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-1044">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePut`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1044">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1045">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1045">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="87459-1046">これには、すべてのアレイとその記述子が含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1046">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="87459-1047">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1047">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1048">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1048">Binary Mode</span></span>  
 <span data-ttu-id="87459-1049">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1049">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1050">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1050">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1051">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1051">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1052">`FileGet` すべての変数をディスクからデータを連続的読み取りつまり、レコード間余白なし。</span><span class="sxs-lookup"><span data-stu-id="87459-1052">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1053">すべての配列、構造体の配列以外の`FileGet`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-1053">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="87459-1054">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-1054">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="87459-1055">`FileGet` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-1055">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1056">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1056">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="87459-1057">使用して、ファイルから読み取り、`FileGet`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1057">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1058"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1058"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1059">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1059">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-1060">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-1060">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1061">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1061">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1062">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1062">Required.</span></span> <span data-ttu-id="87459-1063">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1063">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1064">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1064">Required.</span></span> <span data-ttu-id="87459-1065">データの読み込み先となる有効な変数名。</span><span class="sxs-lookup"><span data-stu-id="87459-1065">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1066">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1066">Optional.</span></span> <span data-ttu-id="87459-1067">読み込みを開始する位置の、レコード数 (<see langword="Random" /> モードのファイル) またはバイト数 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1067">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="87459-1068">開いたディスク ファイルからデータを読み込んで変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="87459-1068">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="87459-1069"><see langword="My" /> 機能を使用すると、<see langword="FileGetObject" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1069">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="87459-1070">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1070">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1071">`FileGetObject`の代わりに関数を使用して`FileGet`場合は、コンパイル時にあいまいさを避けるために型`Object`など別の型の代わりに返される`Integer`、 `Long`、`Short`となります。</span><span class="sxs-lookup"><span data-stu-id="87459-1071">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="87459-1072">記述する場合、`Variant`型、`FileGetObject`が必要です。</span><span class="sxs-lookup"><span data-stu-id="87459-1072">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="87459-1073">あれば、2 番目のパラメーター オブジェクトを使用している場合、常にお勧めを使用すること`FilePutObject`と`FileGetObject`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1073">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="87459-1074">`FileGetObject` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1074">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1075">データを読み取る`FileGetObject`に通常書き込まれ、`FilePutObject`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1075">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="87459-1076">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1076">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1077">省略した場合`RecordNumber`、`FileGetObject`レコードまたはバイトを読み取り、最後の後に`FileGetObject`または`FilePutObject`関数 (または最後を指す`Seek`関数)。</span><span class="sxs-lookup"><span data-stu-id="87459-1077">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1078">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1078">Random Mode</span></span>  
 <span data-ttu-id="87459-1079">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1079">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1080">読み取られるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FileGetObject`レコード長の境界上でその後のレコードを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-1080">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1081">1 つのレコードの終わりと次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1081">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1082">埋め込みデータの量を正確に判断できないためには読み取られるデータの長さと一致するレコードの長さであることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="87459-1082">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="87459-1083">読み取られた変数が既定では、文字列である`FileGetObject`文字列の長さを含む 2 バイトの記述子を読み取って、変数にデータを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1083">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="87459-1084">そのためで指定されたレコード長、`RecordLength`の句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1084">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1085">Visual Basic 6.0 と以前のバージョンは、固定長文字列とファイルを読み取るときに、長さの記述子は書き込まれませんをサポートします。</span><span class="sxs-lookup"><span data-stu-id="87459-1085">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="87459-1086">記述子なしの文字列を読み取る場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1086">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1087">読み取られた変数が、配列で指定されたレコード長の場合、`RecordLength`パラメーター、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1087">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1088">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1088">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1089">その長さは、ディメンションの数を 2 と 8 回になります。2 + 8 \* 含まします。</span><span class="sxs-lookup"><span data-stu-id="87459-1089">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="87459-1090">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1090">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="87459-1091">218 バイトは、次のように配布されます。18 バイトの記述子 (2 + 8 \* 2)、および 100 バイトのデータ (4 \* 5 \* 10)。</span><span class="sxs-lookup"><span data-stu-id="87459-1091">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="87459-1092">`FileGetObject` 要素間の余白がないこと以外は場合に、個別に、それぞれ読み取り中の構造体の要素を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-1092">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="87459-1093">ディスク上で、ユーザー定義型の配列の動的な (で記述された`FilePutObject`) 長さが等しい 2 と 8 時間ディメンションの数の記述子のプレフィックスが付いた。2 + 8 \* 含まします。</span><span class="sxs-lookup"><span data-stu-id="87459-1093">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="87459-1094">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が、配列とその記述子を含む、個々 の要素の読み取りに必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1094">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="87459-1095"><xref:Microsoft.VisualBasic.VBFixedStringAttribute>クラスは、書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに適用できますをディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1095">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1096">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1096">Binary Mode</span></span>  
 <span data-ttu-id="87459-1097">ファイルを開くの`Binary`モードでは、すべての`Random`でこれらの例外の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1097">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="87459-1098">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1098">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1099">`FileGetObject` 変数を読み取るすべてディスクから連続的、つまり、レコード間の埋め込みなしで。</span><span class="sxs-lookup"><span data-stu-id="87459-1099">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1100">すべての配列、構造体の配列以外の`FileGetObject`データのみを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-1100">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="87459-1101">記述子は読み取られませんでした。</span><span class="sxs-lookup"><span data-stu-id="87459-1101">No descriptor is read.</span></span>  
  
 <span data-ttu-id="87459-1102">`FileGetObject` 2 バイトの長さの記述子構造体の要素ではない可変長文字列を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-1102">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1103">読み取られたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1103">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-1104">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-1104">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-1105">たとえば、Form1.vb という名前のファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-1105">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1106">次の例では、テスト ファイルにレコードを読み取るし、それを取得します。</span><span class="sxs-lookup"><span data-stu-id="87459-1106">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-1107">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-1107">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1108">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1108">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="87459-1109">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1109">Required.</span></span> <span data-ttu-id="87459-1110">ファイルを指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-1110">A string expression that specifies a file.</span></span> <span data-ttu-id="87459-1111"><paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="87459-1111"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="87459-1112">ファイルの長さをバイト数で指定する値を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-1112">Returns a value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="87459-1113"><see langword="My" /> 機能を使用すると、<see langword="FileLen" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="87459-1114">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1114">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="87459-1115">バイト単位のファイルの長さです。</span><span class="sxs-lookup"><span data-stu-id="87459-1115">The length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1116">指定したファイルが開いている場合場合に、`FileLen`関数が呼び出されると、返される値は、開かれた時点で、ファイルのサイズを表します。</span><span class="sxs-lookup"><span data-stu-id="87459-1116">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-1117">現在開いているファイルの長さを取得する、`LOF`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-1117">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1118">この例では、`FileLen`関数をファイルの長さをバイト単位で返します。</span><span class="sxs-lookup"><span data-stu-id="87459-1118">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="87459-1119">この例のために、仮定`TestFile`はいくつかのデータを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="87459-1119">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87459-1120">ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="87459-1120">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-1121">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-1121">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1122">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1122">Required.</span></span> <span data-ttu-id="87459-1123">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1123">Any valid file number.</span></span> <span data-ttu-id="87459-1124"><see langword="FreeFile" /> 関数を使用して、次に使用できるファイル番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="87459-1124">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="87459-1125">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1125">Required.</span></span> <span data-ttu-id="87459-1126">ファイル名を指定する文字列式。ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="87459-1126">A string expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="87459-1127">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1127">Required.</span></span> <span data-ttu-id="87459-1128">ファイル モード (<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" />、または <see langword="Random" />) を指定する列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1128">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="87459-1129">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenMode" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1129">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="87459-1130">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1130">Optional.</span></span> <span data-ttu-id="87459-1131">開いているファイルで許可されている操作 (<see langword="Read" />、<see langword="Write" />、または <see langword="ReadWrite" />) を示す列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1131">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="87459-1132">既定値は <see langword="ReadWrite" /> です。</span><span class="sxs-lookup"><span data-stu-id="87459-1132">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="87459-1133">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenAccess" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1133">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="87459-1134">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1134">Optional.</span></span> <span data-ttu-id="87459-1135">他のプロセスによって開かれたファイルで許可されていない操作 (<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" />、および <see langword="Lock Read Write" />) を指定する列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1135">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="87459-1136">既定値は <see langword="Lock Read Write" /> です。</span><span class="sxs-lookup"><span data-stu-id="87459-1136">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="87459-1137">詳細については、「<see cref="T:Microsoft.VisualBasic.OpenShare" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1137">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="87459-1138">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1138">Optional.</span></span> <span data-ttu-id="87459-1139">32,767 以下の値 (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="87459-1139">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="87459-1140">ランダム アクセス ファイルの場合は、レコード長を表します。</span><span class="sxs-lookup"><span data-stu-id="87459-1140">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="87459-1141">シーケンシャル ファイルの場合は、バッファー内の文字数を表します。</span><span class="sxs-lookup"><span data-stu-id="87459-1141">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="87459-1142">ファイルを開いて入出力を行います。</span><span class="sxs-lookup"><span data-stu-id="87459-1142">Opens a file for input or output.</span></span> <span data-ttu-id="87459-1143"><see langword="My" /> 機能を使用すると、<see langword="FileOpen" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1143">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="87459-1144">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1144">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1145">`FileOpen`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1145">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-1146">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-1146">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-1147">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-1147">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-1148">すべての I/O 操作を実行する前に、は、ファイルを開く必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1148">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="87459-1149">`FileOpen` ファイル I/O のバッファーを割り当てし、バッファーへのアクセス モードを決定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1149">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-1150">ファイルに書き込む場合、アプリケーションを作成しようとするファイルが存在しない場合、ファイルを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1150">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="87459-1151">これを行うには、ファイルが作成されるディレクトリのアクセス許可が必要です。</span><span class="sxs-lookup"><span data-stu-id="87459-1151">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="87459-1152">ただし、によってファイルが指定されている場合`FileName`存在は、アプリケーションのニーズ`Write`ファイル自体にのみアクセスを許可します。</span><span class="sxs-lookup"><span data-stu-id="87459-1152">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="87459-1153">セキュリティを強化する、可能なが展開および付与中にファイルを作成する任意の場所`Write`アクセス許可をディレクトリ全体の代わりにのみ、します。</span><span class="sxs-lookup"><span data-stu-id="87459-1153">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="87459-1154">セキュリティを強化するには、ルート ディレクトリまたは Program Files ディレクトリの代わりに、ユーザーのディレクトリにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1154">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="87459-1155">使用して、チャネルを開くにはあります、`FreeFile()`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-1155">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-1156">`FileOpen`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体は、部分的な信頼された状況では、その実行に影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1156">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="87459-1157">詳細については、次を参照してください。<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1157">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1158">この例でのさまざまな使用、`FileOpen`入力と出力ファイルを有効にする関数。</span><span class="sxs-lookup"><span data-stu-id="87459-1158">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="87459-1159">次のコードは、ファイルを開きます`TestFile`で`Input`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1159">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="87459-1160">この例で、ファイルが開きます`Binary`操作のみを記述するためのモード。</span><span class="sxs-lookup"><span data-stu-id="87459-1160">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="87459-1161">次の例で、ファイルを開きます`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1161">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="87459-1162">ファイルには、構造体のレコードが含まれています。`Person`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1162">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="87459-1163">このコード例でファイルを開き`Output`モード; 任意のプロセスはファイルに対する読み取りまたは書き込み。</span><span class="sxs-lookup"><span data-stu-id="87459-1163">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="87459-1164">このコード例でファイルを開き`Binary`読み込み専用の他のプロセスがファイルを読み取ることはできません。</span><span class="sxs-lookup"><span data-stu-id="87459-1164">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1165">レコード長が、-1 ではない負の値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1165">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1166"><paramref name="FileName" /> が既に開かれています。または <paramref name="FileName" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1166"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-1167">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-1167">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1168">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1168">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87459-1169">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1169">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1170"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1170">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1171">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1171">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1172">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1172">Required.</span></span> <span data-ttu-id="87459-1173">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1173">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1174">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1174">Required.</span></span> <span data-ttu-id="87459-1175">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1175">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1176">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1176">Optional.</span></span> <span data-ttu-id="87459-1177">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1177">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87459-1178">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1178">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1179"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1179">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1180">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1180">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1181">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1181">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1182">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1182">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1183">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1183">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1184">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1184">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1185">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1185">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1186">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1186">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1187">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1187">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1188">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1188">Random Mode</span></span>  
 <span data-ttu-id="87459-1189">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1189">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1190">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1190">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1191">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1191">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1192">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1192">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1193">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1193">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1194">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1194">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1195">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1195">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1196">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1196">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1197">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1197">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1198">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1198">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1199">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1199">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1200">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1201">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1201">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1202">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1202">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1203">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1203">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1204">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1204">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1205">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1205">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1206">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1206">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1207">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1207">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1208">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1208">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1209">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1210">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1210">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-1211">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1211">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-1212">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-1213">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1213">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-1214">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1214">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-1215">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-1215">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1216">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1216">Binary Mode</span></span>  
 <span data-ttu-id="87459-1217">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1217">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1218">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1218">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1219">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1219">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1220">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1220">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1221">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1221">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-1222">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1222">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-1223">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1223">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1224">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1224">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-1225">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-1225">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-1226">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1226">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1227">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-1227">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-1228">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1228">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1229"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1229"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1230">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1230">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1231">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1231">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1232">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1232">Required.</span></span> <span data-ttu-id="87459-1233">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1233">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1234">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1234">Required.</span></span> <span data-ttu-id="87459-1235">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1235">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1236">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1236">Optional.</span></span> <span data-ttu-id="87459-1237">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1237">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87459-1238">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1238">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1239"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1239">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1240">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1240">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1241">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1241">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1242">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1242">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1243">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1243">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1244">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1244">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1245">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1245">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1246">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1246">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1247">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1247">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1248">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1248">Random Mode</span></span>  
 <span data-ttu-id="87459-1249">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1249">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1250">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1250">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1251">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1251">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1252">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1252">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1253">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1253">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1254">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1254">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1255">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1255">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1256">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1256">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1257">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1257">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1258">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1258">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1259">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1259">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1260">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1261">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1261">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1262">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1262">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1263">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1263">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1264">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1264">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1265">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1265">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1266">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1266">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1267">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1267">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1268">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1268">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1269">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1270">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1270">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-1271">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1271">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-1272">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1272">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-1273">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1273">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-1274">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1274">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-1275">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-1275">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1276">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1276">Binary Mode</span></span>  
 <span data-ttu-id="87459-1277">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1277">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1278">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1278">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1279">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1279">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1280">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1280">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1281">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1281">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-1282">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1282">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-1283">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1283">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1284">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1284">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-1285">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-1285">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-1286">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1286">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1287">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-1287">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-1288">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1288">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1289"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1289"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1290">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1290">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1291">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1291">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1292">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1292">Required.</span></span> <span data-ttu-id="87459-1293">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1293">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1294">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1294">Required.</span></span> <span data-ttu-id="87459-1295">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1295">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1296">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1296">Optional.</span></span> <span data-ttu-id="87459-1297">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87459-1298">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1298">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1299"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1300">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1301">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1302">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1303">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1304">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1305">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1306">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1307">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1308">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1308">Random Mode</span></span>  
 <span data-ttu-id="87459-1309">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1310">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1311">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1312">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1313">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1314">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1315">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1316">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1317">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1318">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1319">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1320">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1321">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1322">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1323">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1324">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1325">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1326">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1327">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1328">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1329">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1330">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-1331">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-1332">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-1333">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-1334">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-1335">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1336">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1336">Binary Mode</span></span>  
 <span data-ttu-id="87459-1337">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1338">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1339">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1340">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1341">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-1342">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-1343">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1344">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-1345">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-1346">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1347">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-1348">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1349"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1349"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1350">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1350">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1351">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1351">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1352">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1352">Required.</span></span> <span data-ttu-id="87459-1353">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1354">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1354">Required.</span></span> <span data-ttu-id="87459-1355">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1355">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1356">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1356">Optional.</span></span> <span data-ttu-id="87459-1357">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87459-1358">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1358">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1359"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1360">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1361">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1362">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1363">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1364">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1365">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1366">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1367">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1368">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1368">Random Mode</span></span>  
 <span data-ttu-id="87459-1369">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1370">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1371">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1372">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1373">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1374">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1375">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1376">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1377">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1378">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1379">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1380">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1381">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1382">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1383">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1384">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1385">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1386">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1387">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1388">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1389">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1390">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-1391">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-1392">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-1393">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-1394">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-1395">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1396">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1396">Binary Mode</span></span>  
 <span data-ttu-id="87459-1397">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1398">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1399">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1400">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1401">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-1402">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-1403">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1404">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-1405">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-1406">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1407">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-1408">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1409"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1409"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1410">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1410">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1411">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1411">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1412">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1412">Required.</span></span> <span data-ttu-id="87459-1413">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1413">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1414">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1414">Required.</span></span> <span data-ttu-id="87459-1415">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1415">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1416">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1416">Optional.</span></span> <span data-ttu-id="87459-1417">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1417">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87459-1418">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1418">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1419"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1419">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1420">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1420">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1421">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1421">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1422">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1422">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1423">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1423">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1424">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1424">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1425">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1425">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1426">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1426">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1427">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1427">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1428">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1428">Random Mode</span></span>  
 <span data-ttu-id="87459-1429">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1429">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1430">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1430">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1431">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1431">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1432">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1432">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1433">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1433">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1434">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1434">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1435">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1435">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1436">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1436">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1437">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1437">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1438">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1439">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1439">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1440">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1440">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1441">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1441">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1442">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1442">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1443">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1443">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1444">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1444">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1445">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1445">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1446">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1446">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1447">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1447">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1448">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1448">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1449">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1450">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1450">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-1451">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1451">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-1452">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1452">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-1453">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1453">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-1454">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1454">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-1455">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-1455">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1456">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1456">Binary Mode</span></span>  
 <span data-ttu-id="87459-1457">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1457">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1458">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1458">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1459">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1459">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1460">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1460">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1461">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1461">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-1462">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1462">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-1463">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1463">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1464">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1464">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-1465">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-1465">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-1466">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1466">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1467">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-1467">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-1468">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1468">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1469"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1469"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1470">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1470">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1471">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1471">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1472">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1472">Required.</span></span> <span data-ttu-id="87459-1473">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1473">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1474">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1474">Required.</span></span> <span data-ttu-id="87459-1475">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1475">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1476">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1476">Optional.</span></span> <span data-ttu-id="87459-1477">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1477">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87459-1478">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1478">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1479"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1480">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1481">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1481">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1482">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1482">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1483">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1483">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1484">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1484">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1485">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1485">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1486">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1486">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1487">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1487">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1488">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1488">Random Mode</span></span>  
 <span data-ttu-id="87459-1489">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1489">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1490">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1490">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1491">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1491">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1492">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1492">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1493">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1493">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1494">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1494">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1495">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1495">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1496">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1496">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1497">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1497">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1498">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1499">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1499">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1500">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1500">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1501">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1501">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1502">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1502">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1503">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1503">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1504">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1504">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1505">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1505">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1506">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1506">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1507">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1508">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1509">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1510">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-1511">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1511">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-1512">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1512">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-1513">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1513">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-1514">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1514">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-1515">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-1515">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1516">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1516">Binary Mode</span></span>  
 <span data-ttu-id="87459-1517">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1517">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1518">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1518">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1519">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1519">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1520">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1520">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1521">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1521">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-1522">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1522">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-1523">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1523">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1524">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1524">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-1525">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-1525">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-1526">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1526">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1527">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-1527">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-1528">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1528">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1529"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1529"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1530">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1530">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1531">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1531">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1532">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1532">Required.</span></span> <span data-ttu-id="87459-1533">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1533">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1534">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1534">Required.</span></span> <span data-ttu-id="87459-1535">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1535">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1536">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1536">Optional.</span></span> <span data-ttu-id="87459-1537">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1537">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87459-1538">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1538">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1539"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1539">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1540">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1540">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1541">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1541">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1542">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1542">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1543">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1543">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1544">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1544">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1545">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1545">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1546">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1546">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1547">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1547">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1548">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1548">Random Mode</span></span>  
 <span data-ttu-id="87459-1549">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1549">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1550">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1550">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1551">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1551">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1552">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1552">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1553">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1553">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1554">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1554">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1555">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1555">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1556">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1556">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1557">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1557">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1558">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1558">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1559">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1559">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1560">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1560">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1561">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1561">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1562">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1562">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1563">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1563">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1564">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1564">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1565">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1565">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1566">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1566">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1567">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1568">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1569">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1570">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-1571">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1571">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-1572">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-1573">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1573">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-1574">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1574">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-1575">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-1575">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1576">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1576">Binary Mode</span></span>  
 <span data-ttu-id="87459-1577">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1577">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1578">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1578">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1579">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1579">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1580">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1580">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1581">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1581">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-1582">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1582">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-1583">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1583">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1584">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1584">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-1585">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-1585">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-1586">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1586">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1587">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-1587">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-1588">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1588">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1589"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1589"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1590">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1590">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1591">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1592">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1592">Required.</span></span> <span data-ttu-id="87459-1593">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1594">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1594">Required.</span></span> <span data-ttu-id="87459-1595">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1595">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1596">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1596">Optional.</span></span> <span data-ttu-id="87459-1597">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87459-1598">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1598">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1599"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1600">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1601">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1601">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1602">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1602">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1603">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1604">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1604">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1605">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1605">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1606">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1606">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1607">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1607">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1608">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1608">Random Mode</span></span>  
 <span data-ttu-id="87459-1609">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1609">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1610">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1610">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1611">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1611">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1612">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1612">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1613">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1613">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1614">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1614">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1615">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1615">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1616">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1616">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1617">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1617">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1618">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1618">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1619">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1619">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1620">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1621">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1621">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1622">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1622">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1623">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1623">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1624">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1624">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1625">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1625">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1626">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1626">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1627">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1627">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1628">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1628">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1629">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1630">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1630">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-1631">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1631">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-1632">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-1633">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1633">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-1634">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-1635">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-1635">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1636">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1636">Binary Mode</span></span>  
 <span data-ttu-id="87459-1637">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1637">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1638">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1638">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1639">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1639">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1640">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1640">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1641">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1641">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-1642">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1642">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-1643">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1643">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1644">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1644">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-1645">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-1645">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-1646">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1646">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1647">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-1647">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-1648">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1648">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1649"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1649"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1650">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1650">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1651">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1652">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1652">Required.</span></span> <span data-ttu-id="87459-1653">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1654">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1654">Required.</span></span> <span data-ttu-id="87459-1655">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1655">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1656">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1656">Optional.</span></span> <span data-ttu-id="87459-1657">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87459-1658">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1658">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1659"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1660">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1661">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1661">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1662">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1662">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1663">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1664">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1664">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1665">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1665">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1666">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1666">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1667">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1667">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1668">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1668">Random Mode</span></span>  
 <span data-ttu-id="87459-1669">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1669">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1670">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1670">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1671">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1671">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1672">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1672">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1673">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1673">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1674">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1674">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1675">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1675">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1676">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1676">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1677">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1677">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1678">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1678">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1679">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1679">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1680">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1681">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1681">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1682">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1682">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1683">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1683">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1684">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1684">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1685">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1685">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1686">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1686">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1687">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1687">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1688">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1688">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1689">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1690">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1690">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-1691">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1691">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-1692">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-1693">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1693">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-1694">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-1695">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-1695">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1696">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1696">Binary Mode</span></span>  
 <span data-ttu-id="87459-1697">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1697">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1698">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1698">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1699">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1699">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1700">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1700">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1701">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1701">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-1702">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1702">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-1703">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1703">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1704">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1704">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-1705">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-1705">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-1706">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1706">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1707">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-1707">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-1708">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1708">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1709"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1709"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1710">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1710">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1711">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1711">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1712">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1712">Required.</span></span> <span data-ttu-id="87459-1713">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1714">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1714">Required.</span></span> <span data-ttu-id="87459-1715">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1716">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1716">Optional.</span></span> <span data-ttu-id="87459-1717">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87459-1718">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1719"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1720">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1721">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1722">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1723">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1724">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1725">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1726">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1727">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1728">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1728">Random Mode</span></span>  
 <span data-ttu-id="87459-1729">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1730">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1730">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1731">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1732">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1733">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1734">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1735">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1736">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1737">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1738">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1739">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1740">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1741">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1742">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1743">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1744">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1745">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1746">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1747">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1748">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1749">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1750">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-1751">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-1752">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-1753">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-1754">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-1755">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1756">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1756">Binary Mode</span></span>  
 <span data-ttu-id="87459-1757">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1758">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1759">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1760">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1761">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-1762">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-1763">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1764">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-1765">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-1766">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1767">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-1768">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1769"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1770">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1771">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1771">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1772">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1772">Required.</span></span> <span data-ttu-id="87459-1773">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1773">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1774">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1774">Required.</span></span> <span data-ttu-id="87459-1775">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1775">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1776">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1776">Optional.</span></span> <span data-ttu-id="87459-1777">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1777">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87459-1778">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1778">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1779"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1780">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1781">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1781">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1782">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1782">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1783">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1783">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1784">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1784">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1785">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1785">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1786">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1786">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1787">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1787">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1788">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1788">Random Mode</span></span>  
 <span data-ttu-id="87459-1789">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1789">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1790">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1790">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1791">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1791">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1792">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1792">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1793">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1793">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1794">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1794">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1795">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1795">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1796">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1796">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1797">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1797">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1798">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1798">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1799">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1799">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1800">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1800">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1801">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1801">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1802">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1802">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1803">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1803">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1804">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1804">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1805">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1806">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1806">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1807">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1807">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1808">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1808">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1809">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1810">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1810">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-1811">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1811">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-1812">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1812">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-1813">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1813">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-1814">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1814">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-1815">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-1815">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1816">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1816">Binary Mode</span></span>  
 <span data-ttu-id="87459-1817">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1817">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1818">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1818">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1819">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1819">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1820">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1820">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1821">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1821">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-1822">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1822">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-1823">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1823">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1824">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1824">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-1825">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-1825">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-1826">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1826">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1827">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-1827">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-1828">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1828">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1829"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1829"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1830">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1830">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1831">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1831">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1832">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1832">Required.</span></span> <span data-ttu-id="87459-1833">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1833">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1834">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1834">Required.</span></span> <span data-ttu-id="87459-1835">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1835">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1836">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1836">Optional.</span></span> <span data-ttu-id="87459-1837">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1837">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87459-1838">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1838">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1839"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1839">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1840">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1840">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1841">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1841">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1842">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1842">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1843">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1843">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1844">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1844">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1845">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1845">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1846">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1846">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1847">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1847">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1848">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1848">Random Mode</span></span>  
 <span data-ttu-id="87459-1849">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1849">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1850">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1850">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1851">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1851">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1852">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1852">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1853">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1853">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1854">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1854">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1855">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1855">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1856">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1856">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1857">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1857">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1858">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1858">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1859">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1859">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1860">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1861">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1861">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1862">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1862">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1863">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1863">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1864">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1864">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1865">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1865">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1866">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1866">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1867">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1867">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1868">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1868">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1869">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1870">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1870">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-1871">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1871">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-1872">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-1873">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1873">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-1874">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1874">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-1875">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-1875">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1876">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1876">Binary Mode</span></span>  
 <span data-ttu-id="87459-1877">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1877">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1878">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1878">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1879">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1879">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1880">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1880">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1881">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1881">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-1882">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1882">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-1883">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1883">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1884">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1884">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-1885">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-1885">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-1886">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1886">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1887">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-1887">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-1888">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1888">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1889"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1889"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1890">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1890">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1891">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1891">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1892">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1892">Required.</span></span> <span data-ttu-id="87459-1893">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1893">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1894">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1894">Required.</span></span> <span data-ttu-id="87459-1895">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1895">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1896">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1896">Optional.</span></span> <span data-ttu-id="87459-1897">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1897">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="87459-1898">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1898">Optional.</span></span> <span data-ttu-id="87459-1899">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="87459-1899">Applies only when writing a string.</span></span> <span data-ttu-id="87459-1900">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1900">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="87459-1901">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="87459-1901">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="87459-1902">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1902">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1903"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1903">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1904">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1904">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1905">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1905">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1906">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1906">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1907">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1907">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1908">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1908">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1909">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1909">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1910">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1910">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1911">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1911">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1912">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1912">Random Mode</span></span>  
 <span data-ttu-id="87459-1913">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1913">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1914">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1914">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1915">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1915">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1916">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1916">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1917">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1917">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1918">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1918">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1919">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1919">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1920">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1920">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1921">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1921">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1922">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1923">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1923">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1924">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1925">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1925">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1926">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1926">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1927">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1927">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1928">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1928">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1929">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1929">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1930">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1930">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1931">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1931">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1932">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1932">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-1933">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-1934">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1934">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-1935">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1935">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-1936">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1936">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-1937">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1937">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-1938">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-1938">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-1939">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-1939">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-1940">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-1940">Binary Mode</span></span>  
 <span data-ttu-id="87459-1941">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1941">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-1942">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1942">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-1943">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-1943">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-1944">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1944">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-1945">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1945">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-1946">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-1946">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-1947">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1947">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-1948">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-1948">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-1949">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-1949">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-1950">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-1950">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-1951">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-1951">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-1952">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1952">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-1953"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-1953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-1954">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-1954">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-1955">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-1955">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-1956">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1956">Required.</span></span> <span data-ttu-id="87459-1957">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-1957">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-1958">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-1958">Required.</span></span> <span data-ttu-id="87459-1959">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-1959">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-1960">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1960">Optional.</span></span> <span data-ttu-id="87459-1961">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-1961">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="87459-1962">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1962">Optional.</span></span> <span data-ttu-id="87459-1963">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="87459-1963">Applies only when writing an array.</span></span> <span data-ttu-id="87459-1964">配列を動的として扱うかどうか、および長さを表す文字列の配列記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1964">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="87459-1965">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-1965">Optional.</span></span> <span data-ttu-id="87459-1966">文字列を書き込む場合のみ適用します。</span><span class="sxs-lookup"><span data-stu-id="87459-1966">Applies only when writing a string.</span></span> <span data-ttu-id="87459-1967">長さを表す文字列に対して 2 バイトの記述子を書き込むかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1967">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="87459-1968">既定値は、<see langword="False" /> です。</span><span class="sxs-lookup"><span data-stu-id="87459-1968">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="87459-1969">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1969">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="87459-1970"><see langword="My" /> 機能を使用すると、<see langword="FilePut" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-1970">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="87459-1971">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-1971">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-1972">`FilePut` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-1972">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-1973">`FilePut` を使用して書き込まれたデータは通常、`FileGet` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1973">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="87459-1974">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-1975">省略した場合`RecordNumber`、[次へ] のレコードまたは最後後のバイト`FileGet`または`FilePut`関数または最後が指す`Seek`関数が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1975">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="87459-1976">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-1977">`FilePut` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1977">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-1978">使用する場合`StringIsFixedLength`  =  `True`で`FilePut`と同じ処理を実行する必要がある`FileGet`長さが予期する文字列が初期化されていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1978">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-1979">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-1979">Random Mode</span></span>  
 <span data-ttu-id="87459-1980">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-1981">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePut`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-1982">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-1983">埋め込みデータの量は指定できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-1983">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-1984">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="87459-1985">書き込まれている変数が、文字列の場合`FilePut`を文字列の長さを含み、変数にデータを書き込む 2 バイトの記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1985">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="87459-1986">そのためで指定されたレコード長、`RecordLength`句、`FileOpen`関数は 2 バイト以上で、文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1986">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="87459-1987">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePut`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-1987">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-1988">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePut` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-1988">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-1989">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-1990">書き込まれている変数が、文字列を含むオブジェクトの場合`FilePut`2 バイト記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-1990">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-1991">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1991">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-1992">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1992">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-1993">書き込まれている変数が配列である場合がある場合のサイズと配列の次元の記述子を書き込むかどうかを選択します。</span><span class="sxs-lookup"><span data-stu-id="87459-1993">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="87459-1994">Visual Basic 6.0 以前のバージョンは、動的配列の固定サイズの配列ではなく、ファイル記述子を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-1994">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="87459-1995">Visual Basic 2005 は、記述子を記述しない既定値です。</span><span class="sxs-lookup"><span data-stu-id="87459-1995">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="87459-1996">記述子を書き込むには、設定、`ArrayIsDynamic`パラメーター`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-1996">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="87459-1997">配列を書き込むときに、配列の読み込み方法と一致する必要があります。記述子を読み取ることがある場合は記述子を記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-1997">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="87459-1998">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-1998">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-1999">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-1999">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="87459-2000">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-2001">次の配列の宣言に 218 バイトが必要です、配列が書き込まれるときに、ディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-2001">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="87459-2002">書き込まれている変数が他の種類の変数 (いない可変長文字列またはオブジェクト) の場合`FilePut`変数のデータのみを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-2002">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="87459-2003">指定されたレコードの長さ、`RecordLength`句、`FileOpen`関数が書き込まれるデータの長さ以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2003">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="87459-2004">`FilePut` 要素間の余白がない点を除いて、個別にそれぞれ記述された場合と構造体の要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-2004">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="87459-2005">`VBFixedString`書き込まれるときに、文字列のサイズを指定する構造体の文字列フィールドに属性を適用できるディスクにします。</span><span class="sxs-lookup"><span data-stu-id="87459-2005">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="87459-2006">文字列のバイトで指定された数のフィールド、`VBFixedString`書き込まれるときに、属性は切り捨てられます、ディスクに</span><span class="sxs-lookup"><span data-stu-id="87459-2006">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-2007">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-2007">Binary Mode</span></span>  
 <span data-ttu-id="87459-2008">ファイルを開くの`Binary`モードでは、ほとんどの`Random`いくつかの例外のモードの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2008">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="87459-2009">次の規則ファイルが開かれている`Binary`モードとは異なる規則`Random`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2009">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="87459-2010">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-2010">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-2011">`FilePut` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-2011">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="87459-2012">すべての配列、構造体の配列以外の`FilePut`データだけを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-2012">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="87459-2013">記述子は書き込まれません。</span><span class="sxs-lookup"><span data-stu-id="87459-2013">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="87459-2014">`FilePut` 2 バイトの長さ記述子構造体の要素ではない可変長文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-2014">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="87459-2015">書き込まれたバイト数では、文字列内の文字の数と同じです。</span><span class="sxs-lookup"><span data-stu-id="87459-2015">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="87459-2016">たとえば、次のステートメントは、ファイル番号 1 を 11 バイトまでですを記述します。</span><span class="sxs-lookup"><span data-stu-id="87459-2016">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="87459-2017">使用して、ファイルへの書き込み、`FilePut`関数に必要な`Write`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2017">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2018">この例では、`FilePut`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-2018">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="87459-2019">構造体の 5 つのレコード`Person`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2019">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-2020"><paramref name="RecordNumber" /> は &lt; 1 で、-1 と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="87459-2020"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2021">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2021">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-2022">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-2022">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2023">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2023">Required.</span></span> <span data-ttu-id="87459-2024">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2024">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-2025">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2025">Required.</span></span> <span data-ttu-id="87459-2026">ディスクに書き込まれるデータを保持する有効な変数の名前。</span><span class="sxs-lookup"><span data-stu-id="87459-2026">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="87459-2027">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-2027">Optional.</span></span> <span data-ttu-id="87459-2028">書き込みを始めるレコード番号 (<see langword="Random" /> モードのファイル) またはバイト位置 (<see langword="Binary" /> モードのファイル)。</span><span class="sxs-lookup"><span data-stu-id="87459-2028">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="87459-2029">変数の内容をディスク上のファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-2029">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="87459-2030"><see langword="My" /> 機能を使用すると、<see langword="FilePutObject" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2030">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="87459-2031">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2031">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2032">`FilePutObject`の代わりに関数を使用して`FilePut`場合は、コンパイル時にあいまいさを避けるために型`Object`など別の型ではなく渡された`Integer`、 `Long`、`Short`となります。</span><span class="sxs-lookup"><span data-stu-id="87459-2032">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="87459-2033">`FilePutObject` 書き込み、オブジェクトを記述する記述子を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="87459-2033">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="87459-2034">記述する場合、`Variant`型、`FilePutObject`が必要です。</span><span class="sxs-lookup"><span data-stu-id="87459-2034">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="87459-2035">状態が不明な 2 番目のパラメーター オブジェクトを使用している場合と、で常に使用こと勧め`FilePutObject`と`FileGetObject`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2035">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="87459-2036">`FilePutObject` のみ有効ですが`Random`と`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2036">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-2037">`FilePutObject` を使用して書き込まれたデータは通常、`FileGetObject` を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2037">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="87459-2038">最初のレコードまたはファイル内のバイトは、位置 1 では、2 番目のレコードまたはバイトが位置 2、という具合にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-2038">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="87459-2039">省略した場合`RecordNumber`、 `FilePutObject` 、最後の後に次のレコードまたはバイトを書き込みます`FileGetObject`または`FilePutObject`関数 (またはレコードまたはバイトが、最後が指す`Seek`関数)。</span><span class="sxs-lookup"><span data-stu-id="87459-2039">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="87459-2040">`StringIsFixedLength`引数は、関数が変数または固定長として文字列を解釈するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-2040">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="87459-2041">`FilePutObject` 引数が長さの記述子が書き込みません`True`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2041">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="87459-2042">使用する場合`StringIsFixedLength`  =  `True`で`FilePutObject`と同じ処理を実行する必要がある`FileGetObject`長さが予期する文字列が初期化されていることを確認することも必要とします。</span><span class="sxs-lookup"><span data-stu-id="87459-2042">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="87459-2043">ランダムなモード</span><span class="sxs-lookup"><span data-stu-id="87459-2043">Random Mode</span></span>  
 <span data-ttu-id="87459-2044">ファイルを開くの`Random`モードでは、次の規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2044">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="87459-2045">書き込まれるデータの長さがで指定された長さより小さい場合、`RecordLength`の句、`FileOpen`関数、`FilePutObject`レコード長の境界上でその後のレコードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-2045">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="87459-2046">1 つのレコードの末尾と次のレコードの先頭の間には、既存のファイル バッファーの内容が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2046">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="87459-2047">埋め込みデータの量を正確に判断できないために、一般的には書き込まれるデータの長さと一致するレコード長に。</span><span class="sxs-lookup"><span data-stu-id="87459-2047">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="87459-2048">書き込まれるデータの長さがで指定された長さより大きい場合、`RecordLength`の句、`FileOpen`関数の場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="87459-2048">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="87459-2049">書き込まれている変数が数値の型を格納しているオブジェクトの場合`FilePutObject`を識別する 2 バイトを書き込んで、`VarType`オブジェクトのによって変数が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2049">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="87459-2050">たとえば、オブジェクトを記述するときに格納している整数では、 `FilePutObject` 6 バイトを書き込みます: 2 バイトとしてオブジェクトを識別する`VarType(3)`(`Integer`) とデータを含む 4 つのバイト数。</span><span class="sxs-lookup"><span data-stu-id="87459-2050">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="87459-2051">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は 2 バイト以上で実際の変数を格納するために必要なバイト数よりも大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2051">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="87459-2052">書き込まれる変数は、文字列を含むオブジェクト場合`FilePutObject`2 バイトの記述子を書き込み、`VarType(8)`オブジェクト、文字列、および、文字列データの書き込みの長さを示す 2 バイトの記述子の。</span><span class="sxs-lookup"><span data-stu-id="87459-2052">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="87459-2053">指定されたレコードの長さ、`RecordLength`パラメーター、`FileOpen`関数は少なくとも 4 バイトの文字列の実際の長さより大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2053">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="87459-2054">記述子なしの文字列を配置する場合は、渡す必要があります`True`を`StringIsFixedLength`パラメーター、および文字列を読み込むときに、正しい長さにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2054">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="87459-2055">書き込まれている変数が、配列で指定されたレコード長の場合、`RecordLength`句、`FileOpen`関数が配列のデータや配列記述子を作成するために必要なすべてのバイトの合計以上にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2055">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="87459-2056">記述子では、配列、サイズ、および各ランクの下限のランクを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2056">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="87459-2057">その長さは、ディメンションの数を 2 と 8 回になります。(2 + 8 \* 含ま)。</span><span class="sxs-lookup"><span data-stu-id="87459-2057">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="87459-2058">バイナリ モード</span><span class="sxs-lookup"><span data-stu-id="87459-2058">Binary Mode</span></span>  
 <span data-ttu-id="87459-2059">ファイルを開くの`Binary`モードでは、すべて、`Random`モードの規則を適用するを除く。</span><span class="sxs-lookup"><span data-stu-id="87459-2059">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="87459-2060">`RecordLength`句、`FileOpen`関数が影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="87459-2060">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="87459-2061">`FilePutObject` つまり、レコード間のパディングなし連続して、ディスクにすべての変数に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-2061">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2062">この例では、`FilePutObject`ファイルに文字列を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-2062">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-2063">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-2063">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2064">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2064">Required.</span></span> <span data-ttu-id="87459-2065">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2065">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="87459-2066">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2066">Required.</span></span> <span data-ttu-id="87459-2067">改行される前に 1 行に表示できる文字数を表す 0 から 255 の範囲の数式。</span><span class="sxs-lookup"><span data-stu-id="87459-2067">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="87459-2068"><paramref name="RecordWidth" /> が 0 の場合は、行の長さに制限がないことを示します。</span><span class="sxs-lookup"><span data-stu-id="87459-2068">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="87459-2069"><paramref name="RecordWidth" /> の既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="87459-2069">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="87459-2070"><see langword="FileOpen" /> 関数を使用して開いたファイルに出力行の桁数を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="87459-2070">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="87459-2071">この例では、`FileWidth`ファイルの出力の線の幅を設定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2071">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2072">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2073">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2073">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87459-2074"><see langword="Integer" /> 関数で使用できる次のファイル番号を表す <see langword="FileOpen" /> 値を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-2074">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="87459-2075"><see langword="FileOpen" /> 関数で使用できる次のファイル番号を表す整数値。</span><span class="sxs-lookup"><span data-stu-id="87459-2075">An integer value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2076">使用`FreeFile`を既に使用されていない、ファイル番号を入力します。</span><span class="sxs-lookup"><span data-stu-id="87459-2076">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2077">この例では、 `FreeFile` [次へ] の使用可能なファイル数を返す関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2077">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="87459-2078">出力、ループ内で開かれている 5 つのファイルとそれぞれにいくつかのサンプル データが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2078">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2079">使用中のファイルが 255 個を超えています。</span><span class="sxs-lookup"><span data-stu-id="87459-2079">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-2080">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-2080">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="87459-2081">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2081">Required.</span></span> <span data-ttu-id="87459-2082">ファイル、ディレクトリ、またはフォルダーの名前を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-2082">A string expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="87459-2083"><paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="87459-2083"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="87459-2084">ファイル、ディレクトリ、またはフォルダーの属性を表す <see langword="FileAttribute" /> 型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-2084">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="87459-2085"><see langword="My" /> 機能を使用すると、<see langword="FileAttribute" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2085">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="87459-2086">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2086">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="87459-2087"><see langword="GetAttr" /> によって返される値は、次の表に示す列挙型値の合計です。</span><span class="sxs-lookup"><span data-stu-id="87459-2087">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="87459-2088">[値]</span><span class="sxs-lookup"><span data-stu-id="87459-2088">Value</span></span> 
 </term><description> <span data-ttu-id="87459-2089">定数</span><span class="sxs-lookup"><span data-stu-id="87459-2089">Constant</span></span> 
 </description><description> <span data-ttu-id="87459-2090">説明</span><span class="sxs-lookup"><span data-stu-id="87459-2090">Description</span></span> 
 </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> <span data-ttu-id="87459-2091">標準。</span><span class="sxs-lookup"><span data-stu-id="87459-2091">Normal.</span></span>  
  
 </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> <span data-ttu-id="87459-2092">読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="87459-2092">Read-only.</span></span>  
  
 </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> <span data-ttu-id="87459-2093">非表示。</span><span class="sxs-lookup"><span data-stu-id="87459-2093">Hidden.</span></span>  
  
 </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> <span data-ttu-id="87459-2094">システム ファイル。</span><span class="sxs-lookup"><span data-stu-id="87459-2094">System file.</span></span>  
  
 </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> <span data-ttu-id="87459-2095">ディレクトリまたはフォルダー。</span><span class="sxs-lookup"><span data-stu-id="87459-2095">Directory or folder.</span></span>  
  
 </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> <span data-ttu-id="87459-2096">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="87459-2096">File has changed since last backup.</span></span>  
  
 </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> <span data-ttu-id="87459-2097">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="87459-2097">File has a different name.</span></span>  
  
 </description></item></list><block subset="none" type="note"><para>  
 <span data-ttu-id="87459-2098">これらの列挙体は Visual Basic 言語によって指定されています。</span><span class="sxs-lookup"><span data-stu-id="87459-2098">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="87459-2099">これらの名前は、実際の値の代わりにコード内のどの部分でも使用できます。</span><span class="sxs-lookup"><span data-stu-id="87459-2099">The names can be used anywhere in your code in place of the actual values.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2100">どの属性が設定を確認するのには、使用、`And`によって返される値のビットごとの比較を実行する演算子、`GetAttr`関数とする個々 のファイル属性の値。</span><span class="sxs-lookup"><span data-stu-id="87459-2100">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="87459-2101">結果がゼロでない場合は、その属性が名前付きのファイルの設定されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2101">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="87459-2102">次の戻り値など、`And`式が場合は 0、`Archive`属性が設定されていません。</span><span class="sxs-lookup"><span data-stu-id="87459-2102">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="87459-2103">場合、0 以外の値が返されます、`Archive`属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2103">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2104">この例では、`GetAttr`ファイルとディレクトリまたはフォルダーの属性を確認する関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2104">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2105"><paramref name="Pathname" /> が無効です。またはワイルドカードを含んでいます。</span><span class="sxs-lookup"><span data-stu-id="87459-2105"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87459-2106">対象のファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="87459-2106">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="87459-2107">And 演算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2107">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2108">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2108">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87459-2109">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2109">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2110">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2110">Required.</span></span> <span data-ttu-id="87459-2111">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2111">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-2112">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2112">Required.</span></span> <span data-ttu-id="87459-2113">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2113">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87459-2114">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2114">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2115">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2115">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2116">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2116">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2117">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2117">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2118">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2118">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87459-2119">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2119">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2120">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-2120">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87459-2121">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2121">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87459-2122">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="87459-2122">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87459-2123">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2123">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87459-2124">データ</span><span class="sxs-lookup"><span data-stu-id="87459-2124">Data</span></span>|<span data-ttu-id="87459-2125">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="87459-2125">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87459-2126">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="87459-2126">Delimiting comma or blank line</span></span>|<span data-ttu-id="87459-2127">Empty</span><span class="sxs-lookup"><span data-stu-id="87459-2127">Empty</span></span>|  
|<span data-ttu-id="87459-2128">[NULL]</span><span class="sxs-lookup"><span data-stu-id="87459-2128">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87459-2129">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="87459-2129">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87459-2130">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="87459-2130">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87459-2131">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="87459-2131">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87459-2132">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87459-2132">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87459-2133">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="87459-2133">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87459-2134">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2134">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2135">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="87459-2135">The `Input` function is not localized.</span></span> <span data-ttu-id="87459-2136">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2136">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2137">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2137">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2138">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2138">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2139">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2139">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87459-2140">この例では、`TestFile`を使用して書き込まれたデータの一部の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="87459-2140">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2141">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2141">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2142">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2142">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2143">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2143">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2144">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2144">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2145">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2145">Required.</span></span> <span data-ttu-id="87459-2146">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2146">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-2147">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2147">Required.</span></span> <span data-ttu-id="87459-2148">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2148">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87459-2149">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2149">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2150">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2150">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2151">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2151">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2152">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2152">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2153">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2153">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87459-2154">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2154">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2155">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-2155">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87459-2156">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2156">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87459-2157">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="87459-2157">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87459-2158">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2158">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87459-2159">データ</span><span class="sxs-lookup"><span data-stu-id="87459-2159">Data</span></span>|<span data-ttu-id="87459-2160">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="87459-2160">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87459-2161">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="87459-2161">Delimiting comma or blank line</span></span>|<span data-ttu-id="87459-2162">Empty</span><span class="sxs-lookup"><span data-stu-id="87459-2162">Empty</span></span>|  
|<span data-ttu-id="87459-2163">[NULL]</span><span class="sxs-lookup"><span data-stu-id="87459-2163">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87459-2164">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="87459-2164">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87459-2165">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="87459-2165">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87459-2166">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="87459-2166">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87459-2167">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87459-2167">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87459-2168">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="87459-2168">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87459-2169">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2169">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2170">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="87459-2170">The `Input` function is not localized.</span></span> <span data-ttu-id="87459-2171">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2171">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2172">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2172">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2173">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2173">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2174">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2174">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87459-2175">この例では、`TestFile`を使用して書き込まれたデータの一部の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="87459-2175">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2176">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2176">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2177">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2177">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2178">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2178">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2179">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2179">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2180">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2180">Required.</span></span> <span data-ttu-id="87459-2181">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2181">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-2182">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2182">Required.</span></span> <span data-ttu-id="87459-2183">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2183">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87459-2184">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2184">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2185">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2185">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2186">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2186">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2187">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2187">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2188">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2188">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87459-2189">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2189">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2190">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-2190">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87459-2191">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2191">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87459-2192">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="87459-2192">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87459-2193">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2193">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87459-2194">データ</span><span class="sxs-lookup"><span data-stu-id="87459-2194">Data</span></span>|<span data-ttu-id="87459-2195">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="87459-2195">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87459-2196">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="87459-2196">Delimiting comma or blank line</span></span>|<span data-ttu-id="87459-2197">Empty</span><span class="sxs-lookup"><span data-stu-id="87459-2197">Empty</span></span>|  
|<span data-ttu-id="87459-2198">[NULL]</span><span class="sxs-lookup"><span data-stu-id="87459-2198">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87459-2199">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="87459-2199">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87459-2200">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="87459-2200">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87459-2201">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="87459-2201">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87459-2202">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87459-2202">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87459-2203">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="87459-2203">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87459-2204">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2204">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2205">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="87459-2205">The `Input` function is not localized.</span></span> <span data-ttu-id="87459-2206">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2206">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2207">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2207">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2208">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2208">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2209">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2209">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87459-2210">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="87459-2210">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2211">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2211">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2212">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2212">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2213">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2213">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2214">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2214">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2215">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2215">Required.</span></span> <span data-ttu-id="87459-2216">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2216">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-2217">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2217">Required.</span></span> <span data-ttu-id="87459-2218">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2218">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87459-2219">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2219">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2220">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2220">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2221">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2221">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2222">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2222">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2223">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2223">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87459-2224">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2224">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2225">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-2225">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87459-2226">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2226">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87459-2227">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="87459-2227">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87459-2228">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2228">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87459-2229">データ</span><span class="sxs-lookup"><span data-stu-id="87459-2229">Data</span></span>|<span data-ttu-id="87459-2230">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="87459-2230">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87459-2231">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="87459-2231">Delimiting comma or blank line</span></span>|<span data-ttu-id="87459-2232">Empty</span><span class="sxs-lookup"><span data-stu-id="87459-2232">Empty</span></span>|  
|<span data-ttu-id="87459-2233">[NULL]</span><span class="sxs-lookup"><span data-stu-id="87459-2233">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87459-2234">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="87459-2234">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87459-2235">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="87459-2235">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87459-2236">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="87459-2236">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87459-2237">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87459-2237">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87459-2238">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="87459-2238">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87459-2239">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2239">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2240">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="87459-2240">The `Input` function is not localized.</span></span> <span data-ttu-id="87459-2241">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2241">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2242">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2242">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2243">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2243">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2244">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2244">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87459-2245">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="87459-2245">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2246">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2246">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2247">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2247">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2248">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2248">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2249">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2249">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2250">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2250">Required.</span></span> <span data-ttu-id="87459-2251">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2251">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-2252">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2252">Required.</span></span> <span data-ttu-id="87459-2253">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2253">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87459-2254">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2254">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2255">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2255">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2256">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2256">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2257">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2257">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2258">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2258">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87459-2259">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2259">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2260">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-2260">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87459-2261">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2261">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87459-2262">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="87459-2262">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87459-2263">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2263">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87459-2264">データ</span><span class="sxs-lookup"><span data-stu-id="87459-2264">Data</span></span>|<span data-ttu-id="87459-2265">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="87459-2265">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87459-2266">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="87459-2266">Delimiting comma or blank line</span></span>|<span data-ttu-id="87459-2267">Empty</span><span class="sxs-lookup"><span data-stu-id="87459-2267">Empty</span></span>|  
|<span data-ttu-id="87459-2268">[NULL]</span><span class="sxs-lookup"><span data-stu-id="87459-2268">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87459-2269">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="87459-2269">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87459-2270">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="87459-2270">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87459-2271">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="87459-2271">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87459-2272">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87459-2272">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87459-2273">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="87459-2273">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87459-2274">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2274">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2275">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="87459-2275">The `Input` function is not localized.</span></span> <span data-ttu-id="87459-2276">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2276">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2277">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2277">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2278">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2278">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2279">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2279">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87459-2280">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="87459-2280">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2281">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2281">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2282">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2282">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2283">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2283">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2284">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2284">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2285">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2285">Required.</span></span> <span data-ttu-id="87459-2286">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2286">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-2287">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2287">Required.</span></span> <span data-ttu-id="87459-2288">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2288">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87459-2289">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2289">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2290">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2290">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2291">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2291">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2292">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2292">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2293">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2293">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87459-2294">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2294">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2295">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-2295">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87459-2296">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2296">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87459-2297">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="87459-2297">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87459-2298">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2298">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87459-2299">データ</span><span class="sxs-lookup"><span data-stu-id="87459-2299">Data</span></span>|<span data-ttu-id="87459-2300">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="87459-2300">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87459-2301">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="87459-2301">Delimiting comma or blank line</span></span>|<span data-ttu-id="87459-2302">Empty</span><span class="sxs-lookup"><span data-stu-id="87459-2302">Empty</span></span>|  
|<span data-ttu-id="87459-2303">[NULL]</span><span class="sxs-lookup"><span data-stu-id="87459-2303">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87459-2304">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="87459-2304">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87459-2305">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="87459-2305">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87459-2306">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="87459-2306">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87459-2307">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87459-2307">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87459-2308">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="87459-2308">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87459-2309">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2309">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2310">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="87459-2310">The `Input` function is not localized.</span></span> <span data-ttu-id="87459-2311">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2311">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2312">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2312">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2313">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2313">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2314">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2314">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87459-2315">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="87459-2315">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2316">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2316">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2317">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2317">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2318">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2318">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2319">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2319">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2320">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2320">Required.</span></span> <span data-ttu-id="87459-2321">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2321">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-2322">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2322">Required.</span></span> <span data-ttu-id="87459-2323">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2323">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87459-2324">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2324">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2325">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2325">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2326">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2326">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2327">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2327">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2328">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2328">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87459-2329">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2329">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2330">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-2330">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87459-2331">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2331">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87459-2332">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="87459-2332">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87459-2333">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2333">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87459-2334">データ</span><span class="sxs-lookup"><span data-stu-id="87459-2334">Data</span></span>|<span data-ttu-id="87459-2335">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="87459-2335">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87459-2336">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="87459-2336">Delimiting comma or blank line</span></span>|<span data-ttu-id="87459-2337">Empty</span><span class="sxs-lookup"><span data-stu-id="87459-2337">Empty</span></span>|  
|<span data-ttu-id="87459-2338">[NULL]</span><span class="sxs-lookup"><span data-stu-id="87459-2338">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87459-2339">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="87459-2339">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87459-2340">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="87459-2340">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87459-2341">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="87459-2341">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87459-2342">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87459-2342">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87459-2343">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="87459-2343">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87459-2344">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2344">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2345">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="87459-2345">The `Input` function is not localized.</span></span> <span data-ttu-id="87459-2346">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2346">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2347">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2347">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2348">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2348">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2349">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2349">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87459-2350">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="87459-2350">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2351">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2351">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2352">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2352">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2353">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2353">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2354">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2354">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2355">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2355">Required.</span></span> <span data-ttu-id="87459-2356">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2356">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-2357">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2357">Required.</span></span> <span data-ttu-id="87459-2358">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2358">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87459-2359">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2359">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2360">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2360">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2361">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2361">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2362">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2362">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2363">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2363">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87459-2364">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2364">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2365">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-2365">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87459-2366">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2366">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87459-2367">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="87459-2367">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87459-2368">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2368">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87459-2369">データ</span><span class="sxs-lookup"><span data-stu-id="87459-2369">Data</span></span>|<span data-ttu-id="87459-2370">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="87459-2370">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87459-2371">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="87459-2371">Delimiting comma or blank line</span></span>|<span data-ttu-id="87459-2372">Empty</span><span class="sxs-lookup"><span data-stu-id="87459-2372">Empty</span></span>|  
|<span data-ttu-id="87459-2373">[NULL]</span><span class="sxs-lookup"><span data-stu-id="87459-2373">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87459-2374">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="87459-2374">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87459-2375">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="87459-2375">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87459-2376">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="87459-2376">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87459-2377">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87459-2377">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87459-2378">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="87459-2378">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87459-2379">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2379">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2380">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="87459-2380">The `Input` function is not localized.</span></span> <span data-ttu-id="87459-2381">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2381">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2382">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2382">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2383">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2383">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2384">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2384">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87459-2385">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="87459-2385">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2386">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2386">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2387">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2387">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2388">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2388">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2389">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2389">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2390">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2390">Required.</span></span> <span data-ttu-id="87459-2391">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2391">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-2392">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2392">Required.</span></span> <span data-ttu-id="87459-2393">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2393">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87459-2394">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2394">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2395">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2395">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2396">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2396">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2397">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2397">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2398">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2398">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87459-2399">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2399">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2400">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-2400">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87459-2401">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2401">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87459-2402">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="87459-2402">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87459-2403">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2403">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87459-2404">データ</span><span class="sxs-lookup"><span data-stu-id="87459-2404">Data</span></span>|<span data-ttu-id="87459-2405">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="87459-2405">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87459-2406">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="87459-2406">Delimiting comma or blank line</span></span>|<span data-ttu-id="87459-2407">Empty</span><span class="sxs-lookup"><span data-stu-id="87459-2407">Empty</span></span>|  
|<span data-ttu-id="87459-2408">[NULL]</span><span class="sxs-lookup"><span data-stu-id="87459-2408">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87459-2409">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="87459-2409">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87459-2410">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="87459-2410">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87459-2411">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="87459-2411">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87459-2412">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87459-2412">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87459-2413">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="87459-2413">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87459-2414">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2414">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2415">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="87459-2415">The `Input` function is not localized.</span></span> <span data-ttu-id="87459-2416">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2416">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2417">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2417">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2418">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2418">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2419">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2419">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87459-2420">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="87459-2420">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2421">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2422">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2422">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2423">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2423">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2424">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2424">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2425">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2425">Required.</span></span> <span data-ttu-id="87459-2426">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2426">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-2427">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2427">Required.</span></span> <span data-ttu-id="87459-2428">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2428">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87459-2429">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2429">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2430">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2430">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2431">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2431">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2432">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2432">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2433">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2433">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87459-2434">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2434">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2435">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-2435">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87459-2436">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2436">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87459-2437">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="87459-2437">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87459-2438">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2438">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87459-2439">データ</span><span class="sxs-lookup"><span data-stu-id="87459-2439">Data</span></span>|<span data-ttu-id="87459-2440">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="87459-2440">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87459-2441">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="87459-2441">Delimiting comma or blank line</span></span>|<span data-ttu-id="87459-2442">Empty</span><span class="sxs-lookup"><span data-stu-id="87459-2442">Empty</span></span>|  
|<span data-ttu-id="87459-2443">[NULL]</span><span class="sxs-lookup"><span data-stu-id="87459-2443">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87459-2444">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="87459-2444">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87459-2445">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="87459-2445">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87459-2446">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="87459-2446">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87459-2447">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87459-2447">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87459-2448">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="87459-2448">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87459-2449">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2449">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2450">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="87459-2450">The `Input` function is not localized.</span></span> <span data-ttu-id="87459-2451">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2451">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2452">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2452">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2453">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2453">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2454">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2454">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87459-2455">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="87459-2455">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2456">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2456">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2457">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2457">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2458">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2458">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2459">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2459">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2460">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2460">Required.</span></span> <span data-ttu-id="87459-2461">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2461">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-2462">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2462">Required.</span></span> <span data-ttu-id="87459-2463">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2463">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87459-2464">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2464">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2465">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2465">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2466">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2466">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2467">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2467">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2468">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2468">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87459-2469">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2469">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2470">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-2470">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87459-2471">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2471">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87459-2472">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="87459-2472">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87459-2473">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2473">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87459-2474">データ</span><span class="sxs-lookup"><span data-stu-id="87459-2474">Data</span></span>|<span data-ttu-id="87459-2475">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="87459-2475">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87459-2476">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="87459-2476">Delimiting comma or blank line</span></span>|<span data-ttu-id="87459-2477">Empty</span><span class="sxs-lookup"><span data-stu-id="87459-2477">Empty</span></span>|  
|<span data-ttu-id="87459-2478">[NULL]</span><span class="sxs-lookup"><span data-stu-id="87459-2478">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87459-2479">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="87459-2479">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87459-2480">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="87459-2480">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87459-2481">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="87459-2481">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87459-2482">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87459-2482">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87459-2483">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="87459-2483">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87459-2484">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2484">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2485">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="87459-2485">The `Input` function is not localized.</span></span> <span data-ttu-id="87459-2486">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2486">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2487">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2487">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2488">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2488">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2489">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2489">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87459-2490">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="87459-2490">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2491">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2491">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2492">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2492">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2493">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2493">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2494">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2494">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2495">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2495">Required.</span></span> <span data-ttu-id="87459-2496">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2496">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="87459-2497">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2497">Required.</span></span> <span data-ttu-id="87459-2498">ファイルから読み込まれた値を割り当てられた変数。配列変数やオブジェクト変数は指定できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2498">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="87459-2499">開いているシーケンシャル ファイルからデータを読み込み、そのデータを変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2499">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2500">`Input`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2500">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2501">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2501">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2502">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2502">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2503">データを読み取る`Input`を使用して、ファイルに書き込まれますが、通常は`Write`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2503">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="87459-2504">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2504">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2505">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-2505">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87459-2506">たとえば、Form1.vb というファイルは、Visual Basic 2005 ソース ファイルではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2506">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="87459-2507">読み込む場合、標準の文字列または数値データが割り当てられる変数を変更せずに。</span><span class="sxs-lookup"><span data-stu-id="87459-2507">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="87459-2508">次の表は、その他の入力データを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2508">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="87459-2509">データ</span><span class="sxs-lookup"><span data-stu-id="87459-2509">Data</span></span>|<span data-ttu-id="87459-2510">変数に割り当てられた値</span><span class="sxs-lookup"><span data-stu-id="87459-2510">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="87459-2511">コンマまたは空白行を区切る</span><span class="sxs-lookup"><span data-stu-id="87459-2511">Delimiting comma or blank line</span></span>|<span data-ttu-id="87459-2512">Empty</span><span class="sxs-lookup"><span data-stu-id="87459-2512">Empty</span></span>|  
|<span data-ttu-id="87459-2513">[NULL]</span><span class="sxs-lookup"><span data-stu-id="87459-2513">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="87459-2514">[TRUE] または [FALSE]</span><span class="sxs-lookup"><span data-stu-id="87459-2514">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="87459-2515">`True` または `False`</span><span class="sxs-lookup"><span data-stu-id="87459-2515">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="87459-2516">日付や時刻の式で表される</span><span class="sxs-lookup"><span data-stu-id="87459-2516">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="87459-2517">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="87459-2517">#ERROR `errornumber`#</span></span>|<span data-ttu-id="87459-2518">`errornumber` (変数は、エラーとしてタグ付けされたオブジェクト)</span><span class="sxs-lookup"><span data-stu-id="87459-2518">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="87459-2519">データ項目の入力中に、ファイルの末尾に到達する場合は、入力を停止し、エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2519">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2520">`Input`関数はローカライズされていません。</span><span class="sxs-lookup"><span data-stu-id="87459-2520">The `Input` function is not localized.</span></span> <span data-ttu-id="87459-2521">たとえば、ドイツ語のバージョンでは、3,14159 を入力する場合、コンマが小数点としての代わりに変数の区切り文字として扱われるため、3 だけが返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2521">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2522">使用して、ファイルから読み取り、`Input`関数に必要な`Read`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2522">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2523">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2523">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2524">この例では、`Input`ファイルから 2 つの変数にデータを読み取る関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2524">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="87459-2525">この例では、`TestFile`を使用して書き込まれたデータの複数の行を含むファイルには、`Write`関数は、見積と、コンマで区切られた数の文字列を格納している各行: (「こんにちは」、234)。</span><span class="sxs-lookup"><span data-stu-id="87459-2525">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2526">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2526">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2527">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2527">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2528">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2528">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2529">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2529">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2530">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2530">Required.</span></span> <span data-ttu-id="87459-2531">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2531">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="87459-2532">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2532">Required.</span></span> <span data-ttu-id="87459-2533">読み込む文字数を指定する有効な任意の数式。</span><span class="sxs-lookup"><span data-stu-id="87459-2533">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="87459-2534"><see langword="String" /> モードまたは <see langword="Input" /> モードで開いたファイルから読み取る文字を表す文字列型 (<see langword="Binary" />) の値を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-2534">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="87459-2535"><see langword="My" /> 機能を使用すると、<see langword="InputString" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="87459-2536">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="87459-2537"><see langword="Input" /> モードまたは <see langword="Binary" /> モードで開いたファイルからの文字が格納された文字列です。</span><span class="sxs-lookup"><span data-stu-id="87459-2537">A string that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="87459-2538"><see langword="My" /> 機能を使用すると、<see langword="InputString" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2538">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2539">`InputString`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2539">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2540">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2540">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2541">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2541">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2542">データを読み取り、`InputString`を使用して関数が記述ファイルには、通常`Print`または`FilePut`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2542">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="87459-2543">この関数で開いているファイルでのみ使用`Input`または`Binary`モード。</span><span class="sxs-lookup"><span data-stu-id="87459-2543">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="87459-2544">異なり、`Input`関数の場合、`InputString`関数には、そこにすべての文字が返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2544">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="87459-2545">これには、コンマ、キャリッジ リターン、ライン フィード、引用符、および先頭のスペースが含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2545">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="87459-2546">開いたファイル`Binary`アクセスを使用してファイルを読み取ろうとして、`InputString`行われるまで`EOF`返します`True`エラーが生成されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2546">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="87459-2547">使用して、`LOF`と`Loc`関数の代わりに`EOF`を使用してバイナリ ファイルを読み取るときに`InputString`、使用または`FileGet`を使用すると、`EOF`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2547">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2548">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容に関するセキュリティ上の決定は行いません。</span><span class="sxs-lookup"><span data-stu-id="87459-2548">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="87459-2549">たとえば、Form1.vb という名前のファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-2549">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2550">この例では、`InputString`ファイルから一度に 1 つの文字を読み取りし、印刷をする関数、`Output`ウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="87459-2550">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="87459-2551">この例では、`MyFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="87459-2551">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2552"><paramref name="FileNumber" /> は存在しません。</span><span class="sxs-lookup"><span data-stu-id="87459-2552"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-2553"><paramref name="CharCount" /> は &lt; 0 または &gt; 214 です。</span><span class="sxs-lookup"><span data-stu-id="87459-2553"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2554">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2554">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2555">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2555">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2556">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2556">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="87459-2557">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2557">Required.</span></span> <span data-ttu-id="87459-2558">削除する 1 つ以上のファイル名を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-2558">A string expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="87459-2559"><paramref name="PathName" /> には、ディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="87459-2559"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="87459-2560">ファイルをディスクから削除します。</span><span class="sxs-lookup"><span data-stu-id="87459-2560">Deletes files from a disk.</span></span> <span data-ttu-id="87459-2561"><see langword="My" /> 機能を使用すると、<see langword="Kill" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2561">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="87459-2562">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2562">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2563">`Kill` 複数の文字の使用をサポートしています (`*`) と 1 文字 (`?`) ワイルドカードを使用すると、複数のファイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2563">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="87459-2564">**セキュリティに関する注意**を実行するために、`Kill`関数に必要な`Read`と`PathDiscovery`のフラグ<xref:System.Security.Permissions.FileIOPermission>コードの実行に許可します。</span><span class="sxs-lookup"><span data-stu-id="87459-2564">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="87459-2565">詳細については、次を参照してください<xref:System.Security.SecurityException>[コード アクセス許可。](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="87459-2565">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2566">この例では、`Kill`ディスクからファイルを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2566">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2567">対象のファイルが開かれています。</span><span class="sxs-lookup"><span data-stu-id="87459-2567">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87459-2568">対象のファイルが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="87459-2568">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="87459-2569">アクセス許可は拒否されました。</span><span class="sxs-lookup"><span data-stu-id="87459-2569">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2570">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2570">Required.</span></span> <span data-ttu-id="87459-2571">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2571">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="87459-2572">開かれたシーケンシャル ファイルから 1 行を読み込み、<see langword="String" /> 変数に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="87459-2572">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="87459-2573">開かれたシーケンシャル ファイルから 1 行を読み込み、<see langword="String" /> 変数に割り当てます。</span><span class="sxs-lookup"><span data-stu-id="87459-2573">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2574">`LineInput`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2574">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2575">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2575">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2576">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2576">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2577">データを読み取る`LineInput`を使用して、ファイルに書き込まれますが、通常は`Print`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2577">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2578">ファイルから読み取る場合、ファイル名拡張子に基づいてファイルの内容を判断を行わない。</span><span class="sxs-lookup"><span data-stu-id="87459-2578">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="87459-2579">たとえば、Form1.vb というファイルには、Visual Basic のソース ファイル可能性がありますできません。</span><span class="sxs-lookup"><span data-stu-id="87459-2579">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="87459-2580">`LineInput`が復帰を検出するまでの時にファイルの 1 文字から関数を読み取ります (`Chr(13)`) またはキャリッジ リターン/ライン フィード (`Chr(13) + Chr(10)`) シーケンス。</span><span class="sxs-lookup"><span data-stu-id="87459-2580">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="87459-2581">キャリッジ リターン/ライン フィードのシーケンスは文字の文字列に追加の代わりにスキップされます。</span><span class="sxs-lookup"><span data-stu-id="87459-2581">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2582">使用して、ファイルから読み取り、`LineInput`関数に必要な`Read`からへのアクセス、<xref:System.Security.Permissions.FileIOPermissionAccess>列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2582">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2583">この例では、`LineInput`シーケンシャル ファイルから行を読み取るを変数に割り当てる関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2583">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="87459-2584">この例では、`TestFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="87459-2584">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="87459-2585">ファイルの終端に達しました。</span><span class="sxs-lookup"><span data-stu-id="87459-2585">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2586"><paramref name="FileNumber" /> は存在しません。</span><span class="sxs-lookup"><span data-stu-id="87459-2586"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2587">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2587">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2588">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2588">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2589">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2589">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2590">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2590">Required.</span></span> <span data-ttu-id="87459-2591">有効な任意の <see langword="Integer" /> 型のファイル番号。</span><span class="sxs-lookup"><span data-stu-id="87459-2591">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="87459-2592">開かれたファイル内の現在の読み込みと書き込みの位置を指定する値を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-2592">Returns a value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="87459-2593">開かれたファイル内の現在の読み取り/書き込み位置です。</span><span class="sxs-lookup"><span data-stu-id="87459-2593">The current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2594">`Loc`関数は 0 から始まる; ファイルの最初のバイトを取得するために使用すると、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2594">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="87459-2595">`Loc`関数は、旧バージョンとの互換性は提供されており、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2595">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2596">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2596">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2597">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2597">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2598">各ファイルのアクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="87459-2598">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="87459-2599">モード</span><span class="sxs-lookup"><span data-stu-id="87459-2599">Mode</span></span>|<span data-ttu-id="87459-2600">戻り値</span><span class="sxs-lookup"><span data-stu-id="87459-2600">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="87459-2601">最後のレコードから読み取りまたは書き込みをファイルの数。</span><span class="sxs-lookup"><span data-stu-id="87459-2601">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="87459-2602">128 で割ったファイル内の現在のバイト位置。</span><span class="sxs-lookup"><span data-stu-id="87459-2602">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="87459-2603">ただし、した情報が返されます。`Loc`のシーケンシャル ファイルは使用も必要です。</span><span class="sxs-lookup"><span data-stu-id="87459-2603">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="87459-2604">最後のバイトの読み取りまたは書き込みの位置。</span><span class="sxs-lookup"><span data-stu-id="87459-2604">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="87459-2605">この例では、`Loc`を開いているファイル内の現在の読み取り/書き込み位置を返す関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2605">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="87459-2606">この例では、`MyFile`をいくつかの行のサンプル データを持つテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="87459-2606">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2607">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2607">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87459-2608"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-2608">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87459-2609"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2609">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87459-2610">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2610">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2611">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2611">Required.</span></span> <span data-ttu-id="87459-2612">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2612">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="87459-2613"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-2613">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87459-2614"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2614">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87459-2615">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2615">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2616">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2616">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="87459-2617">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="87459-2617">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="87459-2618">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2618">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="87459-2619">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="87459-2619">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="87459-2620">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2620">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="87459-2621">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2621">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2622">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2622">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="87459-2623">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2623">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2624">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2624">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2625">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2625">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2626">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2626">Required.</span></span> <span data-ttu-id="87459-2627">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2627">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="87459-2628">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-2628">Optional.</span></span> <span data-ttu-id="87459-2629">ロックまたはアンロックされる唯一のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="87459-2629">Number of the only record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="87459-2630"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-2630">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87459-2631"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87459-2632">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2633">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2633">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="87459-2634">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="87459-2634">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="87459-2635">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2635">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="87459-2636">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="87459-2636">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="87459-2637">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2637">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="87459-2638">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2638">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2639">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2639">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="87459-2640">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2640">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2641">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2641">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2642">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2642">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2643">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2643">Required.</span></span> <span data-ttu-id="87459-2644">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2644">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="87459-2645">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-2645">Optional.</span></span> <span data-ttu-id="87459-2646">ロックまたはアンロックされる最初のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="87459-2646">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="87459-2647">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-2647">Optional.</span></span> <span data-ttu-id="87459-2648">ロックまたはアンロックされる最後のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="87459-2648">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="87459-2649"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-2649">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87459-2650"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87459-2651">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2652">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2652">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="87459-2653">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="87459-2653">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="87459-2654">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2654">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="87459-2655">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="87459-2655">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="87459-2656">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2656">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="87459-2657">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2657">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2658">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2658">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="87459-2659">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2659">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2660">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2660">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2661">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2661">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2662">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2662">Required.</span></span> <span data-ttu-id="87459-2663">有効なファイル番号が格納された整数です。</span><span class="sxs-lookup"><span data-stu-id="87459-2663">An integer that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="87459-2664"><see langword="FileOpen" /> 関数を使用して開かれたファイルのサイズをバイト単位で返します。</span><span class="sxs-lookup"><span data-stu-id="87459-2664">Returns the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87459-2665"><see langword="My" /> 機能を使用すると、<see langword="LOF" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2665">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="87459-2666">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2666">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="87459-2667"><see langword="FileOpen" /> 関数を使用して開かれたファイルのサイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="87459-2667">The size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87459-2668"><see langword="My" /> 機能を使用すると、<see langword="LOF" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2668">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2669">使用して、`FileLen`開かれていないファイルの長さを取得します。</span><span class="sxs-lookup"><span data-stu-id="87459-2669">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2670">この例では、`LOF`開いているファイルのサイズを決定する関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2670">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="87459-2671">この例では、`TestFile`はサンプル データを含むテキスト ファイルです。</span><span class="sxs-lookup"><span data-stu-id="87459-2671">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2672">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2672">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-2673">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-2673">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-2674">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-2674">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="87459-2675">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2675">Required.</span></span> <span data-ttu-id="87459-2676">作成されるディレクトリを識別する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-2676">A string expression that identifies the directory to be created.</span></span> <span data-ttu-id="87459-2677"><paramref name="Path" /> にはドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="87459-2677">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="87459-2678">ドライブを指定しない場合、<see langword="MkDir" /> は現在のドライブに新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="87459-2678">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="87459-2679">新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="87459-2679">Creates a new directory.</span></span> <span data-ttu-id="87459-2680"><see langword="My" /> 機能を使用すると、<see langword="MkDir" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="87459-2681">詳細については、「<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2681">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2682">この関数は、新しいディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="87459-2682">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2683">この例では、`MkDir`ディレクトリを作成する関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2683">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="87459-2684">ドライブが指定されていない場合は、新しいディレクトリが現在のドライブに作成されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2684">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-2685"><paramref name="Path" /> が指定されていません。または空です。</span><span class="sxs-lookup"><span data-stu-id="87459-2685"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="87459-2686">アクセス許可は拒否されました。</span><span class="sxs-lookup"><span data-stu-id="87459-2686">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2687">ディレクトリが既に存在しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2687">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md"><span data-ttu-id="87459-2688">方法 : Visual Basic でディレクトリを作成する</span><span class="sxs-lookup"><span data-stu-id="87459-2688">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2689">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2689">Required.</span></span> <span data-ttu-id="87459-2690">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2690">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="87459-2691">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-2691">Optional.</span></span> <span data-ttu-id="87459-2692">ファイルへ書き込む 0 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="87459-2692">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="87459-2693"><paramref name="Output" /> 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="87459-2693">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="87459-2694"><see langword="T:System.IO.IOException" />:ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2694"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="87459-2695"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="87459-2695"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="87459-2696">表示形式データをシーケンシャル ファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-2696">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2697">`Print`と`PrintLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2697">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2698">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2698">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2699">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2699">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2700">`Print` 行の最後に、改行は含まれませんただし、`PrintLine`改行にが含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2700">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="87459-2701">書き込まれたデータ`Print`を使用してファイルから通常の読み取りは`LineInput`または`Input`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2701">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="87459-2702">省略した場合`Output`の`PrintLine`、ファイルには、空行が出力`Print`、何も出力します。</span><span class="sxs-lookup"><span data-stu-id="87459-2702">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="87459-2703">タブの境界が混合コンマ上をコンマで区切られた複数の式に配置され、`TAB`矛盾した結果が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2703">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="87459-2704">`Boolean`データか、`True`または`False`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2704">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="87459-2705">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="87459-2705">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="87459-2706">日付データは、システムによって認識される標準の短い日付形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2706">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="87459-2707">日付または時刻部分のいずれかが不足している、または 0 の場合は、提供された部分のみが、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2707">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="87459-2708">場合、ファイルに何も書き込まれませんが`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="87459-2708">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="87459-2709">ただし場合、`Output`リスト データは`DBNull`、`Null`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2709">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="87459-2710">`Error`として、データ、出力が表示されます`Error errorcode`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2710">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="87459-2711">`Error`キーワードは、ロケールに関係なくは翻訳されません。</span><span class="sxs-lookup"><span data-stu-id="87459-2711">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="87459-2712">使用して、ファイルに書き込まれたすべてのデータ`Print`が国際的に対応しています。 つまり、データの形式が正しく、適切な 10 進区切り記号。</span><span class="sxs-lookup"><span data-stu-id="87459-2712">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="87459-2713">ユーザーが複数のロケールで使用するためのデータを出力する場合`Write`使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2713">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="87459-2714">使用して、ファイルへの書き込み、`Print`または`PrintLine`functions が必要です`Write`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2714">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2715">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2715">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2716">この例では、`Print`と`PrintLine`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-2716">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2717">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2717">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2718">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2718">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2719">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2719">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2720">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2720">Required.</span></span> <span data-ttu-id="87459-2721">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2721">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="87459-2722">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-2722">Optional.</span></span> <span data-ttu-id="87459-2723">ファイルへ書き込む 0 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="87459-2723">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="87459-2724"><paramref name="Output" /> 引数の設定は以下の通りです。</span><span class="sxs-lookup"><span data-stu-id="87459-2724">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="87459-2725"><see langword="T:System.IO.IOException" />:ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2725"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="87459-2726"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> が存在しません。</span><span class="sxs-lookup"><span data-stu-id="87459-2726"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="87459-2727">表示形式データをシーケンシャル ファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-2727">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2728">`Print`と`PrintLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2728">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2729">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2729">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2730">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2730">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2731">`Print` 行の最後に、改行は含まれませんただし、`PrintLine`改行にが含まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2731">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="87459-2732">書き込まれたデータ`Print`を使用してファイルから通常の読み取りは`LineInput`または`Input`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2732">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="87459-2733">省略した場合`Output`の`PrintLine`、ファイルには、空行が出力`Print`、何も出力します。</span><span class="sxs-lookup"><span data-stu-id="87459-2733">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="87459-2734">タブの境界が混合コンマ上をコンマで区切られた複数の式に配置され、`TAB`矛盾した結果が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2734">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="87459-2735">`Boolean`データか、`True`または`False`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2735">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="87459-2736">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="87459-2736">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="87459-2737">日付データは、システムによって認識される標準の短い日付形式を使用して、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2737">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="87459-2738">日付または時刻部分のいずれかが不足している、または 0 の場合は、提供された部分のみが、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2738">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="87459-2739">場合、ファイルに何も書き込まれませんが`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="87459-2739">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="87459-2740">ただし場合、`Output`リスト データは`DBNull`、`Null`ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2740">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="87459-2741">`Error`として、データ、出力が表示されます`Error errorcode`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2741">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="87459-2742">`Error`キーワードは、ロケールに関係なくは翻訳されません。</span><span class="sxs-lookup"><span data-stu-id="87459-2742">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="87459-2743">使用して、ファイルに書き込まれたすべてのデータ`Print`が国際的に対応しています。 つまり、データの形式が正しく、適切な 10 進区切り記号。</span><span class="sxs-lookup"><span data-stu-id="87459-2743">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="87459-2744">ユーザーが複数のロケールで使用するためのデータを出力する場合`Write`使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2744">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="87459-2745">使用して、ファイルへの書き込み、`Print`または`PrintLine`functions が必要です`Write`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-2745">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-2746">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2746">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2747">この例では、`Print`と`PrintLine`関数にはデータをファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-2747">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2748">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2748">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-2749">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2749">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-2750">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-2750">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="87459-2751">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2751">Required.</span></span> <span data-ttu-id="87459-2752">既存のファイルの名前と場所を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-2752">A string expression that specifies the existing file name and location.</span></span> <span data-ttu-id="87459-2753"><paramref name="OldPath" /> には、ファイルのディレクトリおよびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="87459-2753"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="87459-2754">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2754">Required.</span></span> <span data-ttu-id="87459-2755">新しいファイルの名前と場所を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-2755">A string expression that specifies the new file name and location.</span></span> <span data-ttu-id="87459-2756"><paramref name="NewPath" /> には、出力先のディレクトリおよびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="87459-2756"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="87459-2757"><paramref name="NewPath" /> には、既に存在しているファイル名は指定できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2757">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="87459-2758">ディスク ファイルまたはディレクトリの名前を変更します。</span><span class="sxs-lookup"><span data-stu-id="87459-2758">Renames a disk file or directory.</span></span> <span data-ttu-id="87459-2759"><see langword="My" /> 機能を使用すると、<see langword="Rename" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2759">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="87459-2760">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2760">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2761">`Rename`関数は、ファイルの名前を変更し、必要な場合は、別のディレクトリに移動します。</span><span class="sxs-lookup"><span data-stu-id="87459-2761">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="87459-2762">`Rename`関数は、ドライブ間でファイルを移動できますが、既存のディレクトリ名前のみ変更できますと両方`NewPath`と`OldPath`同じドライブ上にあります。</span><span class="sxs-lookup"><span data-stu-id="87459-2762">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="87459-2763">`Rename` 新しいファイルまたはディレクトリを作成することはできません。</span><span class="sxs-lookup"><span data-stu-id="87459-2763">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="87459-2764">使用して、`Rename`関数ファイルを開くには、エラーを生成します。</span><span class="sxs-lookup"><span data-stu-id="87459-2764">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="87459-2765">名前を変更する前に、開いているファイルを閉じる必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2765">You must close an open file before renaming it.</span></span> <span data-ttu-id="87459-2766">`Rename` 引数には、複数の文字 (\*) および 1 文字 (?) のワイルドカードを含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="87459-2766">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="87459-2767">使用する場合`Rename`保護されていない場所からファイルを保護された場所にコピーするファイルは制限の少ない権限を保持します。</span><span class="sxs-lookup"><span data-stu-id="87459-2767">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="87459-2768">セキュリティ リスクの可能性を大きくしないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="87459-2768">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2769">この例では、`Rename`ファイルの名前を変更する関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2769">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="87459-2770">この例では、既に指定されているディレクトリが存在すると仮定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2770">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-2771">パスが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2771">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87459-2772"><paramref name="OldPath" /> ファイルが存在しません。</span><span class="sxs-lookup"><span data-stu-id="87459-2772"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2773">異なるデバイスには名前を変更できません。</span><span class="sxs-lookup"><span data-stu-id="87459-2773">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md"><span data-ttu-id="87459-2774">方法 : Visual Basic でファイルの名前を変更する</span><span class="sxs-lookup"><span data-stu-id="87459-2774">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87459-2775"><see langword="FileOpen" /> 関数を使用して開いたすべてのディスク ファイルを閉じます。</span><span class="sxs-lookup"><span data-stu-id="87459-2775">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87459-2776"><see langword="My" /> 機能を使用すると、<see langword="Reset" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2776">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="87459-2777">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2777">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2778">`Reset`関数によって開かれたすべてのアクティブなファイルを閉じ、`FileOpen`関数と同じ機能があり`FileClose()`パラメーターなし。</span><span class="sxs-lookup"><span data-stu-id="87459-2778">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2779">この例では、`Reset`を開いているすべてのファイルを閉じて、すべてのファイル バッファーの内容をディスクに書き込む関数です。</span><span class="sxs-lookup"><span data-stu-id="87459-2779">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="87459-2780">使用に注意してください、`Object`変数`FileNumber`文字列と数値の両方として。</span><span class="sxs-lookup"><span data-stu-id="87459-2780">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="87459-2781">End ステートメント</span><span class="sxs-lookup"><span data-stu-id="87459-2781">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="87459-2782">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2782">Required.</span></span> <span data-ttu-id="87459-2783">削除するディレクトリまたはフォルダーを識別する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-2783">A string expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="87459-2784"><paramref name="Path" /> にはドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="87459-2784"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="87459-2785">ドライブを指定しない場合、<see langword="RmDir" /> は現在のドライブのディレクトリを削除します。</span><span class="sxs-lookup"><span data-stu-id="87459-2785">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="87459-2786">既存のディレクトリを削除します。</span><span class="sxs-lookup"><span data-stu-id="87459-2786">Removes an existing directory.</span></span> <span data-ttu-id="87459-2787"><see langword="My" /> 機能を使用すると、<see langword="RmDir" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2787">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="87459-2788">詳細については、「<see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2788">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2789">使用しようとする場合にエラーが発生した`RmDir`ファイルを含むディレクトリにします。</span><span class="sxs-lookup"><span data-stu-id="87459-2789">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="87459-2790">使用して、`Kill`ディレクトリを削除しようとする前に、すべてのファイルを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2790">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2791">この例では、`RmDir`既存のディレクトリを削除する関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2791">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-2792"><paramref name="Path" /> が指定されていません。または空です。</span><span class="sxs-lookup"><span data-stu-id="87459-2792"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2793">対象のディレクトリにファイルが存在しています。</span><span class="sxs-lookup"><span data-stu-id="87459-2793">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="87459-2794">ディレクトリが存在していません。</span><span class="sxs-lookup"><span data-stu-id="87459-2794">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87459-2795"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2795">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87459-2796"><see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2796">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="87459-2797">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2797">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2798">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2798">Required.</span></span> <span data-ttu-id="87459-2799">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="87459-2799">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="87459-2800"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2800">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87459-2801"><see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2801">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="87459-2802">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2802">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="87459-2803"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" />。または、<see langword="FileOpen" /> 関数を使用して開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2803">A <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2804">`Seek` 1 から 2,147, 483,647 の値を返します (= 2 ^31-1)、包括的です。</span><span class="sxs-lookup"><span data-stu-id="87459-2804">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="87459-2805">各ファイルのアクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="87459-2805">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="87459-2806">モード</span><span class="sxs-lookup"><span data-stu-id="87459-2806">Mode</span></span>|<span data-ttu-id="87459-2807">戻り値</span><span class="sxs-lookup"><span data-stu-id="87459-2807">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="87459-2808">次のレコードの読み取りまたは書き込みの数</span><span class="sxs-lookup"><span data-stu-id="87459-2808">Number of the next record read or written</span></span>|  
|<span data-ttu-id="87459-2809">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="87459-2809">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="87459-2810">バイトの位置が次の操作が発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2810">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="87459-2811">ファイルの最初のバイト位置 1、2 番目のバイトが位置 2、という具合になります。</span><span class="sxs-lookup"><span data-stu-id="87459-2811">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="87459-2812">この例では、`Seek`関数を現在の位置を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-2812">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="87459-2813">この例では`TestFile`構造体のレコードを含むファイル`Record`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2813">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="87459-2814">ファイルを開くの`Random`モード、`Seek`次のレコードの数を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-2814">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="87459-2815">以外のモードで開いているファイルの`Random`モード、`Seek`次のバイト位置を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-2815">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="87459-2816">想定`TestFile`は数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="87459-2816">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="87459-2817">この例では、`Seek`関数またはファイルに書き込みを次の読み取り位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2817">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="87459-2818">以外のモードで開いているファイルの`Random`モード、`Seek`次のバイト位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2818">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="87459-2819">想定`TestFile`は数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="87459-2819">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2820">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2820">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-2821">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-2821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-2822">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-2822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2823">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2823">Required.</span></span> <span data-ttu-id="87459-2824">有効なファイル番号が含まれている <see langword="Integer" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="87459-2824">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="87459-2825">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2825">Required.</span></span> <span data-ttu-id="87459-2826">次の読み書き操作が発生する場所を示す 1 から 2,147,483,647 の範囲の数値。</span><span class="sxs-lookup"><span data-stu-id="87459-2826">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="87459-2827"><see langword="Long" /> 関数を使用して開いたファイル内の現在の読み込み位置または書き込み位置を示す <see langword="FileOpen" /> を返します。また、<see langword="FileOpen" /> 関数で開いたファイルの、次に読み込みまたは書き込みを行う位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2827">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="87459-2828"><see langword="My" /> 機能を使用すると、<see langword="Seek" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2828">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="87459-2829">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2829">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2830">`Seek` 1 から 2,147, 483,647 の値を返します (= 2 ^31-1)、包括的です。</span><span class="sxs-lookup"><span data-stu-id="87459-2830">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="87459-2831">各ファイルのアクセス モードの戻り値を次に示します。</span><span class="sxs-lookup"><span data-stu-id="87459-2831">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="87459-2832">モード</span><span class="sxs-lookup"><span data-stu-id="87459-2832">Mode</span></span>|<span data-ttu-id="87459-2833">戻り値</span><span class="sxs-lookup"><span data-stu-id="87459-2833">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="87459-2834">次のレコードの読み取りまたは書き込みの数</span><span class="sxs-lookup"><span data-stu-id="87459-2834">Number of the next record read or written</span></span>|  
|<span data-ttu-id="87459-2835">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="87459-2835">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="87459-2836">バイトの位置が次の操作が発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2836">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="87459-2837">ファイルの最初のバイト位置 1、2 番目のバイトが位置 2、という具合になります。</span><span class="sxs-lookup"><span data-stu-id="87459-2837">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="87459-2838">この例では、`Seek`関数を現在の位置を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-2838">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="87459-2839">この例では`TestFile`構造体のレコードを含むファイル`Record`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2839">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="87459-2840">ファイルを開くの`Random`モード、`Seek`次のレコードの数を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-2840">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="87459-2841">以外のモードで開いているファイルの`Random`モード、`Seek`次のバイト位置を返します。</span><span class="sxs-lookup"><span data-stu-id="87459-2841">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="87459-2842">想定`TestFile`は数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="87459-2842">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="87459-2843">この例では、`Seek`関数またはファイルに書き込みを次の読み取り位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2843">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="87459-2844">以外のモードで開いているファイルの`Random`モード、`Seek`次のバイト位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2844">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="87459-2845">想定`TestFile`は数行のテキストを含むファイルです。</span><span class="sxs-lookup"><span data-stu-id="87459-2845">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2846">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2846">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="87459-2847">Visual Basic でのファイルの読み取り</span><span class="sxs-lookup"><span data-stu-id="87459-2847">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="87459-2848">Visual Basic でのファイルへの書き込み</span><span class="sxs-lookup"><span data-stu-id="87459-2848">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="87459-2849">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2849">Required.</span></span> <span data-ttu-id="87459-2850">ファイル名を指定する文字列式です。</span><span class="sxs-lookup"><span data-stu-id="87459-2850">A string expression that specifies a file name.</span></span> <span data-ttu-id="87459-2851"><paramref name="PathName" /> にはディレクトリまたはフォルダー、およびドライブを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="87459-2851"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="87459-2852">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2852">Required.</span></span> <span data-ttu-id="87459-2853">定数式または数式の合計がファイル属性を指定する場合の定数式または数式。</span><span class="sxs-lookup"><span data-stu-id="87459-2853">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="87459-2854">ファイルの属性情報を設定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2854">Sets attribute information for a file.</span></span> <span data-ttu-id="87459-2855"><see langword="My" /> 機能を使用すると、<see langword="SetAttr" /> よりもファイル I/O 処理の生産性とパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2855">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="87459-2856">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2856">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2857">開いているファイルの属性を設定しようとする場合、実行時エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="87459-2857">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="87459-2858">`Attributes`列挙値の引数は次のようにします。</span><span class="sxs-lookup"><span data-stu-id="87459-2858">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="87459-2859">[値]</span><span class="sxs-lookup"><span data-stu-id="87459-2859">Value</span></span>|<span data-ttu-id="87459-2860">定数</span><span class="sxs-lookup"><span data-stu-id="87459-2860">Constant</span></span>|<span data-ttu-id="87459-2861">説明</span><span class="sxs-lookup"><span data-stu-id="87459-2861">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="87459-2862">標準 (既定値)。</span><span class="sxs-lookup"><span data-stu-id="87459-2862">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="87459-2863">読み取り専用。</span><span class="sxs-lookup"><span data-stu-id="87459-2863">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="87459-2864">非表示。</span><span class="sxs-lookup"><span data-stu-id="87459-2864">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="87459-2865">システム ファイル。</span><span class="sxs-lookup"><span data-stu-id="87459-2865">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="87459-2866">ボリューム ラベル</span><span class="sxs-lookup"><span data-stu-id="87459-2866">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="87459-2867">ディレクトリまたはフォルダー。</span><span class="sxs-lookup"><span data-stu-id="87459-2867">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="87459-2868">ファイルは前回のバックアップ以降に変更されています。</span><span class="sxs-lookup"><span data-stu-id="87459-2868">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="87459-2869">ファイルに別の名前が付いています。</span><span class="sxs-lookup"><span data-stu-id="87459-2869">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="87459-2870">これらの列挙体は Visual Basic 言語によって指定されています。</span><span class="sxs-lookup"><span data-stu-id="87459-2870">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="87459-2871">名前は、実際の値ではなく、コード内の任意の場所で使用できます。</span><span class="sxs-lookup"><span data-stu-id="87459-2871">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2872">この例では、`SetAttr`ファイルの属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2872">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="87459-2873"><paramref name="Attribute" /> の型が無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2873"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="87459-2874">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2874">Required.</span></span> <span data-ttu-id="87459-2875">リストの次の式を表示または出力する前に挿入する空白の数。</span><span class="sxs-lookup"><span data-stu-id="87459-2875">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="87459-2876"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="87459-2876">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="87459-2877"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="87459-2877">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2878">場合`Count`が出力線の幅、次の出力位置にすぐに次の空白の数よりも少ない。</span><span class="sxs-lookup"><span data-stu-id="87459-2878">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="87459-2879">場合`Count`が出力の線の幅よりも大きい`SPC`数式を使用して、次の出力位置が計算されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2879">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="87459-2880">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="87459-2880">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="87459-2881">たとえば、現在の出力位置が 24 の場合は、出力行の幅は 80、しを指定する`SPC(90)`、次の出力は 34 (現在の印刷位置 + 90/80 の残りの部分) の位置から開始します。</span><span class="sxs-lookup"><span data-stu-id="87459-2881">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="87459-2882">現在の出力位置と出力の線の幅の違いがある場合より小さい`Count`(または`Count` `Mod` *幅*)、`SPC`関数は、次の行の先頭にはスキップし、生成されます空白と等しく`Count`-(*幅* - *桁数*)。</span><span class="sxs-lookup"><span data-stu-id="87459-2882">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2883">ワイド文字のための十分な表の列があることを確認します。</span><span class="sxs-lookup"><span data-stu-id="87459-2883">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2884">この例では、`SPC`関数ファイルと出力の位置を**出力**ウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="87459-2884">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="87459-2885">Mod 演算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2885">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87459-2886"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="87459-2886">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87459-2887"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="87459-2887">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="87459-2888"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="87459-2888">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2889">現在の行に現在の出力位置がより大きいかどうか`Column`、`TAB`列の値と等しいにスキップ`Column`次の出力行にします。</span><span class="sxs-lookup"><span data-stu-id="87459-2889">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="87459-2890">場合`Column`が 1 より小さい、`TAB`印刷位置を 1 列目に移動します。</span><span class="sxs-lookup"><span data-stu-id="87459-2890">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="87459-2891">場合`Column`出力線の幅よりも大きい`TAB`数式を使用して、次の出力位置が計算されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2891">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="87459-2892">Mod の列の幅</span><span class="sxs-lookup"><span data-stu-id="87459-2892">Column Mod width</span></span>  
  
 <span data-ttu-id="87459-2893">たとえば場合、*幅*80 は、指定した`TAB(90)`10 (残り 90/80 の) 列に、次の出力が開始されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2893">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="87459-2894">場合`Column`が現在の出力の位置、計算の印刷位置にある次の行に印刷を開始未満です。</span><span class="sxs-lookup"><span data-stu-id="87459-2894">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="87459-2895">計算された出力位置が現在の印刷位置よりも大きい場合は、同じ行に位置が印刷計算された印刷を開始します。</span><span class="sxs-lookup"><span data-stu-id="87459-2895">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="87459-2896">出力行の左端の出力位置は 1 では常にです。</span><span class="sxs-lookup"><span data-stu-id="87459-2896">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="87459-2897">使用すると、`Print`または`PrintLine`ファイルは、印刷する機能右端からの出力位置が現在の幅を使用して設定できる出力ファイルの`FileWidth`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2897">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="87459-2898">`TAB`関数はでも使用できます、`WriteLine`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2898">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="87459-2899">は使用できません<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>または<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="87459-2899">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2900">ワイド文字の十分な表の列があることを確認します。</span><span class="sxs-lookup"><span data-stu-id="87459-2900">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2901">この例では、`TAB`関数ファイルと出力の位置を**出力**ウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="87459-2901">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="87459-2902">Mod 演算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2902">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="87459-2903">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-2903">Optional.</span></span> <span data-ttu-id="87459-2904">リスト内の次の式を表示または出力する前に移動する先の列番号。</span><span class="sxs-lookup"><span data-stu-id="87459-2904">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="87459-2905">省略した場合、<see langword="TAB" /> は挿入位置を次の印字領域の最初に移動します。</span><span class="sxs-lookup"><span data-stu-id="87459-2905">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="87459-2906"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="87459-2906">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="87459-2907"><see langword="Print" /> 関数または <see langword="PrintLine" /> 関数と共に使用し、出力の位置を移動させます。</span><span class="sxs-lookup"><span data-stu-id="87459-2907">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2908">現在の行に現在の出力位置がより大きいかどうか`Column`、`TAB`列の値と等しいにスキップ`Column`次の出力行にします。</span><span class="sxs-lookup"><span data-stu-id="87459-2908">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="87459-2909">場合`Column`が 1 より小さい、`TAB`印刷位置を 1 列目に移動します。</span><span class="sxs-lookup"><span data-stu-id="87459-2909">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="87459-2910">場合`Column`が出力の線の幅よりも大きい`TAB`数式を使用して、次の出力位置が計算されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2910">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="87459-2911">Mod の列の幅</span><span class="sxs-lookup"><span data-stu-id="87459-2911">Column Mod width</span></span>  
  
 <span data-ttu-id="87459-2912">たとえば場合、*幅*80 は、指定した`TAB(90)`10 (残り 90/80 の) 列に、次の出力が開始されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2912">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="87459-2913">場合`Column`が現在の出力の位置、計算の印刷位置にある次の行に印刷を開始未満です。</span><span class="sxs-lookup"><span data-stu-id="87459-2913">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="87459-2914">計算された出力位置が現在の印刷位置よりも大きい場合は、同じ行に位置が印刷計算された印刷を開始します。</span><span class="sxs-lookup"><span data-stu-id="87459-2914">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="87459-2915">出力行の左端の出力位置は 1 では常にです。</span><span class="sxs-lookup"><span data-stu-id="87459-2915">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="87459-2916">使用すると、`Print`または`PrintLine`ファイルは、印刷する機能右端からの出力位置が現在の幅を使用して設定できる出力ファイルの`FileWidth`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2916">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="87459-2917">`TAB`関数はでも使用できます、`WriteLine`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2917">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="87459-2918">は使用できません<xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType>または<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="87459-2918">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="87459-2919">ワイド文字の十分な表の列があることを確認します。</span><span class="sxs-lookup"><span data-stu-id="87459-2919">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2920">この例では、`TAB`関数ファイルと出力の位置を**出力**ウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="87459-2920">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="87459-2921">Mod 演算子 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-2921">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="87459-2922"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-2922">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87459-2923"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2923">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87459-2924">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2924">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2925">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2925">Required.</span></span> <span data-ttu-id="87459-2926">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2926">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="87459-2927"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-2927">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87459-2928"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2928">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87459-2929">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2929">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2930">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2930">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="87459-2931">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="87459-2931">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="87459-2932">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2932">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="87459-2933">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="87459-2933">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="87459-2934">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2934">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="87459-2935">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2935">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2936">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2936">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="87459-2937">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2937">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2938">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2938">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2939">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2939">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2940">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2940">Required.</span></span> <span data-ttu-id="87459-2941">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2941">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="87459-2942">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-2942">Optional.</span></span> <span data-ttu-id="87459-2943">ロックまたはアンロックされる唯一のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="87459-2943">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="87459-2944"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-2944">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87459-2945"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2945">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87459-2946">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2946">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2947">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2947">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="87459-2948">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="87459-2948">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="87459-2949">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2949">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="87459-2950">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="87459-2950">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="87459-2951">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2951">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="87459-2952">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2952">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2953">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2953">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="87459-2954">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2954">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2955">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2955">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2956">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2956">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2957">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2957">Required.</span></span> <span data-ttu-id="87459-2958">任意の有効なファイル数。</span><span class="sxs-lookup"><span data-stu-id="87459-2958">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="87459-2959">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-2959">Optional.</span></span> <span data-ttu-id="87459-2960">ロックまたはアンロックされる最初のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="87459-2960">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="87459-2961">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-2961">Optional.</span></span> <span data-ttu-id="87459-2962">ロックまたはアンロックされる最後のレコードまたはバイトの番号。</span><span class="sxs-lookup"><span data-stu-id="87459-2962">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="87459-2963"><see langword="Open" /> 関数を使用して開かれたファイルの全部または一部に対して、他のプロセスからのアクセスを制御します。</span><span class="sxs-lookup"><span data-stu-id="87459-2963">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="87459-2964"><see langword="My" /> 機能を使用すると、<see langword="Lock" /> および <see langword="Unlock" /> を使用するよりもファイル I/O 処理の生産性とパフォーマンスが格段に向上します。</span><span class="sxs-lookup"><span data-stu-id="87459-2964">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="87459-2965">詳細については、「<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-2965">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2966">`Lock`と`Unlock`関数は環境で使用がいくつかのプロセスが同じファイルへのアクセスを必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2966">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="87459-2967">`Lock` `Unlock`関数は常にペアで使用します。</span><span class="sxs-lookup"><span data-stu-id="87459-2967">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="87459-2968">引数を`Lock`と`Unlock`と同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2968">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="87459-2969">場合`Record`、または`FromRecord`と`ToRecord`は省略すると、ロックはファイル全体でになります。</span><span class="sxs-lookup"><span data-stu-id="87459-2969">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="87459-2970">場合`Record`1 つのレコードはロック/ロック解除をするだけでを指定します。</span><span class="sxs-lookup"><span data-stu-id="87459-2970">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="87459-2971">シーケンシャル入力または出力ファイルが開かれている場合`Lock`と`Unlock`で指定された範囲に関係なく、ファイル全体に影響を与える`FromRecord`と`ToRecord`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2971">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-2972">この例での使用、`Lock`と`Unlock`関数。</span><span class="sxs-lookup"><span data-stu-id="87459-2972">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="87459-2973">この例では、`People.txt`構造体のレコードを含むファイル`Person`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2973">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-2974">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-2974">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-2975">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-2975">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-2976">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-2976">Required.</span></span> <span data-ttu-id="87459-2977">任意の有効なファイル数を含む <see langword="Integer" /> 式。</span><span class="sxs-lookup"><span data-stu-id="87459-2977">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="87459-2978">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-2978">Optional.</span></span> <span data-ttu-id="87459-2979">ファイルへ書き込む 1 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="87459-2979">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="87459-2980">シーケンシャル ファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-2980">Writes data to a sequential file.</span></span> <span data-ttu-id="87459-2981"><see langword="Write" /> を使用して書き込まれたデータは通常、<see langword="Input" /> を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2981">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-2982">`Write`と`WriteLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-2982">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-2983">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-2983">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-2984">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-2984">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-2985">省略した場合`Output`、空白行がファイルに出力します。</span><span class="sxs-lookup"><span data-stu-id="87459-2985">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="87459-2986">複数の式は、コンマで区切ってことができます。</span><span class="sxs-lookup"><span data-stu-id="87459-2986">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="87459-2987">異なり、`Print`関数の場合、`Write`関数は、ファイルに書き込まれる項目と文字列を囲む引用符の間にコンマを挿入します。</span><span class="sxs-lookup"><span data-stu-id="87459-2987">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="87459-2988">一覧に明示的な区切り記号を配置する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="87459-2988">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="87459-2989">ときに`Write`ファイルにのみ数値データの書き込みに使用`Boolean`、日付、null の場合、および`Error`データ形式がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="87459-2989">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="87459-2990">データが読み取ることができ、正しく解釈されません。 を使用して、次の前提が後に`Input`ロケールに関係なく、します。</span><span class="sxs-lookup"><span data-stu-id="87459-2990">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="87459-2991">数値データには、小数点区切り文字としてピリオドを使用して常に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2991">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="87459-2992">`Boolean`データか、`#TRUE#`または`#FALSE#`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-2992">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="87459-2993">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="87459-2993">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="87459-2994">日付データは、汎用の日付形式を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2994">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="87459-2995">日付または時刻部分のいずれかが不足している、または 0 の場合は、提供された部分のみが、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2995">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="87459-2996">場合、ファイルに何も書き込まれませんが`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="87459-2996">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="87459-2997">ただし、null のデータの`#NULL#`が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-2997">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="87459-2998">`Error`として、データ、出力が表示されます`#ERROR errorcode#`します。</span><span class="sxs-lookup"><span data-stu-id="87459-2998">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="87459-2999">`Error`ロケールに関係なくキーワードはない変換します。</span><span class="sxs-lookup"><span data-stu-id="87459-2999">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="87459-3000">`WriteLine` 改行文字を挿入します (つまり、キャリッジ リターン/ライン フィード、または`Chr(13) + Chr(10)`) 最後の文字、記述後、`Output`ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="87459-3000">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="87459-3001">二重引用符を使用して文字列に引用符を埋め込むことができます、または""です。</span><span class="sxs-lookup"><span data-stu-id="87459-3001">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="87459-3002">たとえば、オブジェクトに適用された</span><span class="sxs-lookup"><span data-stu-id="87459-3002">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="87459-3003">文字列の値を返します`Double quotation marks aren't "difficult" to handle`します。</span><span class="sxs-lookup"><span data-stu-id="87459-3003">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="87459-3004">使用して、ファイルへの書き込み、`Write`または`WriteLine`functions が必要です`Append`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-3004">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-3005">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-3005">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-3006">この例では、`Write`関数には生データをシーケンシャル ファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-3006">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="87459-3007">ファイル モードが無効です。</span><span class="sxs-lookup"><span data-stu-id="87459-3007">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-3008">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-3008">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-3009">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-3009">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-3010">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-3010">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="87459-3011">必須です。</span><span class="sxs-lookup"><span data-stu-id="87459-3011">Required.</span></span> <span data-ttu-id="87459-3012">任意の有効なファイル数を含む <see langword="Integer" /> 式。</span><span class="sxs-lookup"><span data-stu-id="87459-3012">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="87459-3013">任意。</span><span class="sxs-lookup"><span data-stu-id="87459-3013">Optional.</span></span> <span data-ttu-id="87459-3014">ファイルへ書き込む 1 個以上のコンマで区切られた式。</span><span class="sxs-lookup"><span data-stu-id="87459-3014">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="87459-3015">シーケンシャル ファイルにデータを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="87459-3015">Writes data to a sequential file.</span></span> <span data-ttu-id="87459-3016"><see langword="Write" /> を使用して書き込まれたデータは通常、<see langword="Input" /> を使用してファイルから読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-3016">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87459-3017">`Write`と`WriteLine`関数は、旧バージョンとの互換性のために提供され、パフォーマンスに影響を与える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="87459-3017">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="87459-3018">非レガシ アプリケーションの場合、`My.Computer.FileSystem`オブジェクトより優れたパフォーマンスを提供します。</span><span class="sxs-lookup"><span data-stu-id="87459-3018">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="87459-3019">詳細については、次を参照してください。 [Visual basic におけるファイル アクセス](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md)します。</span><span class="sxs-lookup"><span data-stu-id="87459-3019">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="87459-3020">省略した場合`Output`、空白行がファイルに出力します。</span><span class="sxs-lookup"><span data-stu-id="87459-3020">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="87459-3021">複数の式は、コンマで区切ってことができます。</span><span class="sxs-lookup"><span data-stu-id="87459-3021">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="87459-3022">異なり、`Print`関数の場合、`Write`関数は、ファイルに書き込まれる項目と文字列を囲む引用符の間にコンマを挿入します。</span><span class="sxs-lookup"><span data-stu-id="87459-3022">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="87459-3023">一覧に明示的な区切り記号を配置する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="87459-3023">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="87459-3024">ときに`Write`ファイルにのみ数値データの書き込みに使用`Boolean`、日付、null の場合、および`Error`データ形式がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="87459-3024">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="87459-3025">データが読み取ることができ、正しく解釈されません。 を使用して、次の前提が後に`Input`ロケールに関係なく、します。</span><span class="sxs-lookup"><span data-stu-id="87459-3025">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="87459-3026">数値データには、小数点区切り文字としてピリオドを使用して常に書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-3026">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="87459-3027">`Boolean`データか、`#TRUE#`または`#FALSE#`が出力されます。</span><span class="sxs-lookup"><span data-stu-id="87459-3027">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="87459-3028">`True`と`False`キーワードは翻訳されません、ロケールに関係なく。</span><span class="sxs-lookup"><span data-stu-id="87459-3028">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="87459-3029">日付データは、汎用の日付形式を使用してファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-3029">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="87459-3030">日付または時刻部分のいずれかが不足している、または 0 の場合は、提供された部分のみが、ファイルに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-3030">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="87459-3031">場合、ファイルに何も書き込まれませんが`Output`データが空です。</span><span class="sxs-lookup"><span data-stu-id="87459-3031">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="87459-3032">ただし、null のデータの`#NULL#`が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="87459-3032">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="87459-3033">`Error`として、データ、出力が表示されます`#ERROR errorcode#`します。</span><span class="sxs-lookup"><span data-stu-id="87459-3033">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="87459-3034">`Error`ロケールに関係なくキーワードはない変換します。</span><span class="sxs-lookup"><span data-stu-id="87459-3034">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="87459-3035">`WriteLine` 改行文字を挿入します (つまり、キャリッジ リターン/ライン フィード、または`Chr(13) + Chr(10)`) 最後の文字、記述後、`Output`ファイルにします。</span><span class="sxs-lookup"><span data-stu-id="87459-3035">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="87459-3036">二重引用符を使用して文字列に引用符を埋め込むことができます、または""です。</span><span class="sxs-lookup"><span data-stu-id="87459-3036">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="87459-3037">たとえば、オブジェクトに適用された</span><span class="sxs-lookup"><span data-stu-id="87459-3037">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="87459-3038">文字列の値を返します`Double quotation marks aren't "difficult" to handle`します。</span><span class="sxs-lookup"><span data-stu-id="87459-3038">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="87459-3039">使用して、ファイルへの書き込み、`Write`または`WriteLine`functions が必要です`Append`からへのアクセス、`FileIOPermissionAccess`列挙体。</span><span class="sxs-lookup"><span data-stu-id="87459-3039">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="87459-3040">詳細については、「<xref:System.Security.Permissions.FileIOPermissionAccess>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="87459-3040">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87459-3041">この例では、`Write`関数には生データをシーケンシャル ファイルに書き込めません。</span><span class="sxs-lookup"><span data-stu-id="87459-3041">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="87459-3042">Visual Basic におけるファイル アクセス</span><span class="sxs-lookup"><span data-stu-id="87459-3042">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="87459-3043">方法: ファイルにテキストを書き込む (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="87459-3043">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="87459-3044">方法: Streamwriter (Visual Basic) を持つファイルにテキストを書き込む</span><span class="sxs-lookup"><span data-stu-id="87459-3044">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>