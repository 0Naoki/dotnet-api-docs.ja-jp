<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99efa4f2fa97adfbbe2e2ba0ece6a60e4e9943ba" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52221919" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see langword="ErrObject" /> モジュールに含まれているプロパティおよびプロシージャを使用して、<see langword="Err" /> オブジェクトによる実行時エラーの識別と処理を実行します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ErrObject`モジュールは、サポート、`Err`オブジェクト。 詳細については、「<xref:Microsoft.VisualBasic.Information.Err%2A>」を参照してください。  
  
   
  
## Examples  
 この例のプロパティを使用して、`Err`エラー メッセージ ダイアログ ボックスを作成するオブジェクト。 使用するときの動作に注意してください、`Clear`メソッド最初: しと Visual Basic エラーを生成すると、`Raise`メソッドでは、Visual Basic の既定値のプロパティになります、`Err`オブジェクト。  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error ステートメント (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Try...Catch...Finally ステートメント (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">キーワード (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic ランタイム ライブラリ メンバー</related>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see langword="Err" /> オブジェクトのプロパティ設定をすべてクリアします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、`Clear`を明示的にオフに、`Err`オブジェクトの遅延のエラーの処理を使用する場合など、エラーが処理された後`On Error Resume Next`します。 `Clear`メソッドが自動的に呼び出されるたびに、次のステートメントのいずれかを実行します。  
  
-   任意の種類の`Resume`ステートメント  
  
-   `Exit Sub`、 `Exit Function`、または `Exit Property`  
  
-   すべて`On Error`ステートメント  
  
-   すべて`Try...Catch...Finally`ステートメント  
  
    > [!NOTE]
    >  `On Error Resume Next`コンストラクトことをお勧めする`On Error GoTo`他のオブジェクトへのアクセス中にエラーを処理するときにします。 チェック`Err`オブジェクトと対話を削除して、コードによってアクセスされたオブジェクトがあいまいさ: を確認するオブジェクトのエラー コードを配置する`Err.Number`オブジェクト (オブジェクトのエラーの発生源と指定されている`Err.Source`)。  
  
   
  
## Examples  
 この例では、`Err`オブジェクトの`Clear`の数値プロパティをリセットする方法、`Err`が 0 の文字列プロパティは、長さ 0 の文字列をオブジェクト。 呼び出さずに`Clear`、2 番目の呼び出し`MsgBox`同じエラー メッセージが表示されます。  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error ステートメント (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エラーに関連する説明文字列を含む <see langword="String" /> 型の式を返すか、または設定します。 読み取り/書き込み。</summary>
        <value>エラーに関連する説明文字列を含む <see langword="String" /> 型の式を返すか、または設定します。 読み取り/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Description`エラーの簡単な説明のプロパティの設定で構成されます。 このプロパティを使用して、エラーを処理したくない、またはできないユーザーに警告します。 ユーザー定義のエラーを生成するときに、エラーの簡単な説明を割り当てる、`Description`プロパティ。 場合、`Description`プロパティには、設定しないとの値、<xref:Microsoft.VisualBasic.ErrObject.Number%2A>プロパティは、Visual Basic 実行時エラーに対応し、によって返される文字列、<xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A>で関数が設定されて、`Description`エラーが生成されたときに、プロパティ。  
  
   
  
## Examples  
 この例では、ユーザー定義メッセージを`Description`のプロパティ、`Err`オブジェクト。  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最後に実行されたステートメントの行番号を示す整数値を返します。 読み取り専用。</summary>
        <value>最後に実行されたステートメントの行番号を示す整数値を返します。 読み取り専用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic に行番号がない場合は、0 を返します。  
  
   
  
## Examples  
 この例では、`Erl`プロパティを行番号を指定します。  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>発生したエラーを表す例外を返します。</summary>
        <returns>発生したエラーを表す例外を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetException`関数はからのみ使用できます、`Err`オブジェクト クラス。 動作する、`Exception`のプロパティ、`Err`発生したエラーを表示するオブジェクト。  
  
   
  
## Examples  
 次のコードで例外に割り当てられているメッセージを表示する、`Err`オブジェクト。  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ヘルプ ファイルのトピックのコンテキスト ID を含む <see langword="Integer" /> を返すか、または設定します。 読み取り/書き込み。</summary>
        <value>ヘルプ ファイルのトピックのコンテキスト ID を含む <see langword="Integer" /> を返すか、または設定します。 読み取り/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HelpContext`プロパティを使用して、アプリケーションの状況依存のヘルプを表示します。 ヘルプ ファイルがで指定されている場合`HelpFile`、`HelpContext`特定されたヘルプ ファイルを自動的に表示するプロパティを使用します。 どちらの場合、`HelpFile`と`HelpContext`プロパティが空の値、<xref:Microsoft.VisualBasic.ErrObject.Number%2A>プロパティがチェックされます。 場合の値、`Number`プロパティは、Visual Basic ランタイム エラー値に対応し、エラーの Visual Basic のヘルプ コンテキスト ID を使用します。 場合の値、`Number`プロパティは、Visual Basic エラーに対応していない、Visual Basic ヘルプ ファイルの内容の画面が表示されます。  
  
> [!NOTE]
>  一般的なエラーを処理するために、アプリケーションでルーチンを記述する必要があります。 オブジェクトを使用したプログラミング、ときに、エラー処理の品質を向上させるために、またはエラーが回復可能でない場合にユーザーにわかりやすいメッセージを表示するオブジェクトのヘルプ ファイルを使用することができます。  
  
   
  
## Examples  
 この例では、`HelpContext`のプロパティ、`Err`の Visual Basic ヘルプ トピックを表示するオブジェクト、`Overflow`エラー。  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ヘルプ ファイルへの絶対パスを含む <see langword="String" /> 型の式を返すか、または設定します。 読み取り/書き込み。</summary>
        <value>ヘルプ ファイルへの絶対パスを含む <see langword="String" /> 型の式を返すか、または設定します。 読み取り/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ヘルプ ファイルを指定する場合、`HelpFile`プロパティ、自動的にで呼び出された、ユーザーがヘルプ キー (または F1 キー) を押すと、エラー メッセージ ダイアログ ボックス。 場合、`HelpContext`プロパティには、このトピックで、指定したファイルの ID が自動的に表示される有効なコンテキストが含まれています。 ない場合は`HelpFile`を指定すると、Visual Basic ヘルプ ファイルが表示されます。  
  
> [!NOTE]
>  一般的なエラーを処理するために、アプリケーションでルーチンを記述する必要があります。 オブジェクトを使用したプログラミング、ときに、エラー処理の品質を向上させるために、またはエラーが回復可能でない場合にユーザーにわかりやすいメッセージを表示するオブジェクトのヘルプ ファイルを使用することができます。  
  
   
  
## Examples  
 この例では、`HelpFile`のプロパティ、`Err`ヘルプ システムを起動するオブジェクト。 既定で、`HelpFile`プロパティには、Visual Basic のヘルプ ファイルの名前が含まれています。  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ダイナミック リンク ライブラリ (DLL) の呼び出しによって生成されたシステム エラー コードを返します。 読み取り専用。</summary>
        <value>ダイナミック リンク ライブラリ (DLL) の呼び出しによって生成されたシステム エラー コードを返します。 読み取り専用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>プロパティは、Visual Basic コードから DLL の呼び出しにのみ適用されます。 このような呼び出しが行われたときに、呼び出された関数は、通常、成功または失敗を示すコードが返されます、<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>プロパティを設定します。 成功または失敗を示す戻り値を決定する DLL の関数のマニュアルを確認します。 Visual Basic アプリケーションをすぐに確認するエラー コードが返されるたびに、<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>プロパティ。 例外が発生しなかったときに、<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>プロパティを設定します。  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>プロパティは保護されて<xref:System.Security.Permissions.SecurityAction.LinkDemand>から信頼されていないコードからアクセスされるようにするのに役立ちます。 ただし、<xref:System.Security.Permissions.SecurityAction.LinkDemand>が直前の呼び出し元のみが必要です<xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A>権限。 値を公開する場合は、コードは、部分的に信頼されたコードから呼び出すことができます、<xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A>検証は、セキュリティ上のリスクなし。  
>   
>  使用する方法についての重要な制限については、 <xref:System.Security.Permissions.SecurityAction.LinkDemand> 、メンバーを参照してください[Demand とします。LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5)します。 アクセス許可の詳細については、次を参照してください。<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)します。  
  
 スマート デバイスのこのプロパティは常に 0 を返しますに注意してください。  
  
   
  
## Examples  
 次の例を使用する方法を示しています、 `LastDllError` Windows api 関数を呼び出した後のプロパティ。 `PrintWindowCoordinates`プロシージャは、ウィンドウを呼び出し、ハンドルを取得、`GetWindowRect`関数。 `GetWindowRect` RECT データ構造体をウィンドウを構成する四角形の辺の長さに設定します。 エラーが発生して、エラー番号は無効なハンドルを渡す場合、`LastDllError`プロパティ。  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エラーを示す数値を返すか、または設定します。 読み取り/書き込み。</summary>
        <value>エラーを示す数値を返すか、または設定します。 読み取り/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての`Raise`以外で引数`Number`は省略可能です。 省略可能な引数、およびのプロパティの設定を省略した場合、`Err`オブジェクトが消去されていない値を含めることが、その値、エラーの値として使用します。  
  
 `Err`オブジェクトでエラーを生成する場合よりも豊富な情報を提供する、`Error`ステートメントでは、`Raise`はクラス モジュールを記述するときにエラーを生成するために便利です。 たとえば、`Raise`メソッドでは、エラーを生成したソースで指定できます、`Source`プロパティ、エラーのオンライン ヘルプは、参照できるし、具合です。  
  
 オブジェクトから、ユーザー定義のエラーを返すときに設定`Err.Number`エラー コードとして選択した数を加算して、`VbObjectError`定数。 たとえば、次のコードを使用して、1051 エラー コードとしての数を返します。  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 この例での一般的な使用、`Number`エラー処理ルーチン内のプロパティ。  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 この例では、`Err`オブジェクトの`Raise`Visual Basic で記述された関数内で元のエラーを生成します。 呼び出し元の関数は、エラーをキャッチし、ユーザーに報告できます。 そのプロシージャに注意してください`CallingProcedure`から派生できる情報の種類の比較、`Err`オブジェクトから派生できる情報を`Exception`オブジェクト。  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> が 65535 より大きい値です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必須。 エラーの性質を識別する <see langword="Long" /> 型の整数。 Visual Basic エラーの番号は 0 ～ 65535 の範囲です。0 ～ 512 はシステム エラー用に予約されています。513 ～ 65535 はユーザー定義エラーに使用できます。 クラス モジュールの <see langword="Number" /> プロパティに固有のエラー コードを設定する場合は、エラー コード番号を <see langword="vbObjectError" /> 定数に追加する必要があります。 たとえば、エラー番号 513 を生成するには、<c>vbObjectError + 513</c> を <see langword="Number" /> プロパティに割り当てます。</param>
        <param name="Source">任意。 エラーが生成されたオブジェクトまたはアプリケーションを指定する <see langword="String" /> 型の式。 オブジェクトに対してこのプロパティを設定する場合は、<c>project</c>.<c>class</c> の形式を使用します。 <paramref name="Source" /> が指定されていない場合は、現在の Visual Basic プロジェクトのプロセス ID が使用されます。</param>
        <param name="Description">任意。 エラーを説明する <see langword="String" /> 型の式。 省略した場合、<see langword="Number" /> プロパティの値が調べられます。 Visual Basic 実行時エラー コードに対応する可能性がある場合、<see langword="Error" /> 関数によって返される文字列は <see langword="Description" /> プロパティとして使用されます。 <see langword="Number" /> プロパティに対応する Visual Basic エラーがなかった場合は、"アプリケーション定義エラーまたはオブジェクト定義エラー" メッセージが使用されます。</param>
        <param name="HelpFile">任意。 このエラーのヘルプが含まれているヘルプ ファイルへの絶対パス。 省略した場合、Visual Basic は Visual Basic ヘルプ ファイルの完全修飾されたドライブ、パス、およびファイル名を使用します。</param>
        <param name="HelpContext">任意。 エラーのヘルプを提供する <paramref name="HelpFile" /> 内のトピックを識別するコンテキスト ID。 省略した場合、<see langword="Number" /> プロパティに対応するエラーの Visual Basic ヘルプ ファイルのコンテキスト ID が使用されます (存在する場合)。</param>
        <summary>実行時エラーを生成します。<see langword="Error" /> ステートメントの代わりに使用できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての`Raise`以外で引数`Number`は省略可能です。 省略可能な引数、およびのプロパティの設定を省略した場合、`Err`オブジェクトが消去されていない値を含めることが、その値、エラーの値として使用します。  
  
 `Err`オブジェクトでエラーを生成する場合よりも豊富な情報を提供する、`Error`ステートメントでは、`Raise`はクラス モジュールを記述するときにエラーを生成するために便利です。 たとえば、`Raise`メソッドでは、エラーを生成したソースで指定できます、`Source`プロパティ、エラーのオンライン ヘルプは、参照できるし、具合です。  
  
   
  
## Examples  
 この例では、`Err`オブジェクトの`Raise`Visual Basic で記述された関数内でエラーを生成します。 呼び出し元の関数は、エラーをキャッチし、それをメッセージ ボックスでユーザーに報告できます。  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error ステートメント</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error ステートメント (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最初にエラーを生成したオブジェクトまたはアプリケーションの名前を示す <see langword="String" /> 型の式を返すか、または設定します。 読み取り/書き込み。</summary>
        <value>最初にエラーを生成したオブジェクトまたはアプリケーションの名前を示す <see langword="String" /> 型の式を返すか、または設定します。 読み取り/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source`プロパティを指定します、`String`オブジェクトを表す式のエラーを生成した; 式は、通常、オブジェクトのクラス名またはプロセス id です。 使用して、`Source`プロパティをコードがアクセス先のオブジェクトで生成されたエラーを処理できない場合は、情報を提供します。 例では、Microsoft Excel にアクセスすることが生成される場合、`Division by zero`エラー、Microsoft Excel を設定`Err.Number`エラーとセットの場合は、そのエラー コードを`Source`"Excel.Application"にします。  
  
 アプリケーションが、コードからエラーを生成するときに`Source`は、アプリケーションのプログラム ID です。 クラス内で`Source`形式を持つ名前を含める必要があります*プロジェクト*.*クラス*します。 コードで、予期しないエラーが発生した場合、`Source`プロパティ自動的に入力します。 モジュールの場合にエラー`Source`プロジェクト名が含まれています。  
  
   
  
## Examples  
 この例の使用、`Source`一般的なエラー処理ルーチンにします。 エラーが発生したとき`Class1`、文字列`"Class1"`に割り当てられている、`Source`のプロパティ、`Err`オブジェクト。 この文字列は、ソースと、エラーの数を示す情報メッセージに表示されます。  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error ステートメント (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>