<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc28c5733fb9f77e132ec584a6f025b3048ad10b" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48643509" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="39d71-101">
        <see langword="Conversion" /> モジュールに含まれるプロシージャを使って、さまざまな変換演算を実行します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="39d71-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-102">このモジュールはサポート、Visual Basic 言語のキーワードと、他の底を 10 進数に変換するランタイム ライブラリ メンバーを別の数値文字列、数値、文字列および 1 つのデータを入力します。</span><span class="sxs-lookup"><span data-stu-id="39d71-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-103">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
      <span data-ttu-id="39d71-104">変換の概要</span>
      <span class="sxs-lookup">
        <span data-stu-id="39d71-104">Conversion Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="39d71-105">キーワード (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="39d71-105">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="39d71-106">Visual Basic ランタイム ライブラリ メンバー</span>
      <span class="sxs-lookup">
        <span data-stu-id="39d71-106">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="39d71-107">変換対象のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-107">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="39d71-108">変換後のオブジェクトの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-108">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-109">オブジェクトを指定された型に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-109">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-110">実行時の種類が要求されたターゲットの種類であるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-110">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-111">`CTypeDynamic`メソッドとして渡されたオブジェクトの変換、`Expression`パラメーターで指定された型を`TargetType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="39d71-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="39d71-112">オブジェクトがオブジェクトを動的オブジェクトである場合、`CTypeDynamic`メソッドで使用できる動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="39d71-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="39d71-113">`CTypeDynamic`メソッドには、オブジェクト自体で定義された変換セマンティクスに従って、動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="39d71-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="39d71-114">動的オブジェクトから継承している場合<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`メソッドは、まずユーザー定義の静的な変換を使用して、変換の実行を試みます。</span><span class="sxs-lookup"><span data-stu-id="39d71-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="39d71-115">ユーザー定義の静的な変換に失敗した場合、`CTypeDynamic`メソッドは動的な変換を使用して変換を実行しようとしています。</span><span class="sxs-lookup"><span data-stu-id="39d71-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="39d71-116">動的オブジェクトが実装されている場合<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`メソッドでは、ユーザー定義の静的な変換を動的への変換からの優先順位が与えられます。</span><span class="sxs-lookup"><span data-stu-id="39d71-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-117">次の例では、`CTypeDynamic`動的オブジェクトによって定義された変換を使用して動的オブジェクトを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="39d71-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="39d71-118">動的オブジェクトの使用 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-118">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="39d71-119">チュートリアル: 動的オブジェクトの作成と使用 (C# および Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="39d71-120">変換後のオブジェクトの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-120">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="39d71-121">変換対象のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-121">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-122">指定したジェネリック型にオブジェクトを変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-122">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-123">要求されたジェネリック型として静的に型指定されたオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-123">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-124">`CTypeDynamic`メソッドとして渡されたオブジェクトの変換、`Expression`ジェネリック パラメーターの型で指定された型のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="39d71-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="39d71-125">オブジェクトがオブジェクトを動的オブジェクトである場合、`CTypeDynamic`メソッドで使用できる動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="39d71-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="39d71-126">`CTypeDynamic`メソッドには、オブジェクト自体で定義された変換セマンティクスに従って、動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="39d71-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="39d71-127">動的オブジェクトから継承している場合<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`メソッドは、まずユーザー定義の静的な変換を使用して、変換の実行を試みます。</span><span class="sxs-lookup"><span data-stu-id="39d71-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="39d71-128">ユーザー定義の静的な変換に失敗した場合、`CTypeDynamic`メソッドは動的な変換を使用して変換を実行しようとしています。</span><span class="sxs-lookup"><span data-stu-id="39d71-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="39d71-129">動的オブジェクトが実装されている場合<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`メソッドでは、ユーザー定義の静的な変換を動的への変換からの優先順位が与えられます。</span><span class="sxs-lookup"><span data-stu-id="39d71-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-130">次の例では、`CTypeDynamic`動的オブジェクトによって定義された変換を使用して動的オブジェクトを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="39d71-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="39d71-131">動的オブジェクトの使用 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-131">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="39d71-132">チュートリアル: 動的オブジェクトの作成と使用 (C# および Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="39d71-133">特定のエラー番号に対応するエラー メッセージを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-133">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="39d71-134">特定のエラー番号に対応するエラー メッセージを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-134">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-135">直前の実行時エラーに対応するエラー メッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-135">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-136">`ErrorToString`関数のプロパティの設定を調べ、`Err`最新の実行時エラーを識別するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="39d71-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="39d71-137">戻り値、`ErrorToString`関数に対応する、`Description`のプロパティ、`Err`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="39d71-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="39d71-138">実行時エラーが発生しなかった場合`ErrorToString`長さ 0 の文字列を返します ("")。</span><span class="sxs-lookup"><span data-stu-id="39d71-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="39d71-139">Visual basic 6.0 とそれ以前のバージョンではこの機能によって提供された、`Error`関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-140">次のコードでは、`ErrorToString`指定したエラーの番号に対応するエラー メッセージを表示する関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-141">
            <paramref name="ErrorNumber" /> が範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-141">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="39d71-142">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-142">Optional.</span>
          </span>
          <span data-ttu-id="39d71-143">有効なエラー番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-143">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-144">特定のエラー番号に対応するエラー メッセージを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-144">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-145">特定のエラー番号に対応するエラー メッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-145">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-146">`ErrorToString`関数のプロパティの設定を調べ、`Err`最新の実行時エラーを識別するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="39d71-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="39d71-147">戻り値、`ErrorToString`関数に対応する、`Description`のプロパティ、`Err`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="39d71-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="39d71-148">場合`ErrorNumber`は有効なエラー番号が定義されていない`ErrorToString`文字列を返します`"Application-defined or object-defined error."`場合`ErrorNumber`が有効でないエラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="39d71-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="39d71-149">場合`ErrorNumber`を省略すると、メッセージを最新に対応する実行時エラーが返されます。</span><span class="sxs-lookup"><span data-stu-id="39d71-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="39d71-150">実行時エラーが発生していない場合または`ErrorNumber`は 0 です。`ErrorToString`長さ 0 の文字列を返します ("")。</span><span class="sxs-lookup"><span data-stu-id="39d71-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="39d71-151">Visual basic 6.0 とそれ以前のバージョンではこの機能によって提供された、`Error`関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-152">次のコードでは、`ErrorToString`指定したエラーの番号に対応するエラー メッセージを表示する関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-153">
            <paramref name="ErrorNumber" /> が範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-153">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="39d71-154">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-154">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-155">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-155">Required.</span>
          </span>
          <span data-ttu-id="39d71-156">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-156">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-157">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-157">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-158">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-158">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-159">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-159">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-160">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-160">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-161">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-161">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-162">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-162">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-163">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-163">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-164">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-164">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-165">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-165">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-166">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-166">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-167">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-167">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-168">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-168">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-169">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-169">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-170">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-170">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-171">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-171">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-172">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-172">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-173">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-173">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-174">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-174">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-175">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-175">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-176">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-176">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-177">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-177">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-178">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-178">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-179">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-179">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-180">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-180">Required.</span>
          </span>
          <span data-ttu-id="39d71-181">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-181">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-182">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-182">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-183">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-183">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-184">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-184">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-185">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-185">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-186">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-186">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-187">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-187">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-188">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-188">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-189">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-189">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-190">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-190">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-191">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-191">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-192">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-192">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-193">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-193">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-194">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-194">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-195">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-195">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-196">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-196">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-197">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-197">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-198">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-198">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-199">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-199">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-200">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-200">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-201">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-201">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-202">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-202">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-203">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-203">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-204">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-204">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-205">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-205">Required.</span>
          </span>
          <span data-ttu-id="39d71-206">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-206">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-207">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-207">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-208">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-208">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-209">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-209">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-210">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-211">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-212">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-213">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-214">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-215">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-216">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-217">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-218">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-219">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-220">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-221">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-222">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-223">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-223">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-224">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-224">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-225">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-225">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-226">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-226">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-227">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-227">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-228">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-228">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-229">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-229">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-230">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-230">Required.</span>
          </span>
          <span data-ttu-id="39d71-231">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-231">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-232">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-232">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-233">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-233">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-234">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-234">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-235">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-235">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-236">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-236">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-237">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-237">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-238">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-238">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-239">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-239">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-240">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-240">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-241">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-241">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-242">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-242">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-243">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-243">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-244">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-245">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-245">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-246">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-246">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-247">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-247">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-248">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-248">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-249">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-249">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-250">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-250">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-251">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-251">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-252">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-252">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-253">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-253">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-254">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-254">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-255">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-255">Required.</span>
          </span>
          <span data-ttu-id="39d71-256">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-256">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-257">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-257">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-258">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-258">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-259">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-259">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-260">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-260">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-261">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-261">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-262">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-262">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-263">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-263">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-264">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-264">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-265">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-265">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-266">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-266">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-267">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-267">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-268">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-268">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-269">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-270">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-270">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-271">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-271">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-272">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-272">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-273">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-273">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-274">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-274">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-275">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-275">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-276">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-276">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-277">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-277">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-278">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-278">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-279">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-279">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-280">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-280">Required.</span>
          </span>
          <span data-ttu-id="39d71-281">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-281">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-282">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-282">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-283">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-283">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-284">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-284">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-285">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-285">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-286">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-286">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-287">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-287">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-288">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-288">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-289">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-289">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-290">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-290">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-291">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-291">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-292">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-292">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-293">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-293">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-294">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-294">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-295">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-295">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-296">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-296">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-297">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-297">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-298">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-298">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-299">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-299">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-300">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-300">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-301">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-301">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-302">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-302">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-303">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-303">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-304">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-304">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-305">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-305">Required.</span>
          </span>
          <span data-ttu-id="39d71-306">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-306">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-307">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-307">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-308">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-308">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-309">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-309">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-310">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-311">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-312">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-313">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-314">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-314">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-315">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-315">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-316">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-316">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-317">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-317">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-318">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-318">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-319">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-319">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-320">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-320">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-321">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-321">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-322">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-322">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-323">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-323">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-324">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-324">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-325">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-325">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-326">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-326">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-327">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-327">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-328">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-328">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-329">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-329">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="39d71-330">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-330">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-331">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-331">Required.</span>
          </span>
          <span data-ttu-id="39d71-332">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-332">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-333">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-333">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-334">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-334">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-335">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-335">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-336">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="39d71-336">If `Number` is</span></span>|<span data-ttu-id="39d71-337">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="39d71-337">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-338">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-338">Empty</span></span>|<span data-ttu-id="39d71-339">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-339">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-340">任意の数値</span><span class="sxs-lookup"><span data-stu-id="39d71-340">Any numeric value</span></span>|<span data-ttu-id="39d71-341">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="39d71-341">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="39d71-342">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-342">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="39d71-343">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="39d71-343">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-344">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-344">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-345">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-345">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-346">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-346">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-347">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-347">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="39d71-348">方法 : 16 進文字列を数値に変換する</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-348">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-349">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-349">Required.</span>
          </span>
          <span data-ttu-id="39d71-350">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-350">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-351">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-351">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-352">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-352">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-353">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-353">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-354">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="39d71-354">If `Number` is</span></span>|<span data-ttu-id="39d71-355">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="39d71-355">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-356">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-356">Empty</span></span>|<span data-ttu-id="39d71-357">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-357">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-358">任意の数値</span><span class="sxs-lookup"><span data-stu-id="39d71-358">Any numeric value</span></span>|<span data-ttu-id="39d71-359">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="39d71-359">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="39d71-360">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-360">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="39d71-361">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="39d71-361">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-362">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-362">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-363">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-363">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-364">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-364">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-365">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-365">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="39d71-366">方法 : 16 進文字列を数値に変換する</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-366">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-367">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-367">Required.</span>
          </span>
          <span data-ttu-id="39d71-368">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-368">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-369">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-369">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-370">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-370">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-371">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-371">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-372">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="39d71-372">If `Number` is</span></span>|<span data-ttu-id="39d71-373">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="39d71-373">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-374">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-374">Empty</span></span>|<span data-ttu-id="39d71-375">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-375">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-376">任意の数値</span><span class="sxs-lookup"><span data-stu-id="39d71-376">Any numeric value</span></span>|<span data-ttu-id="39d71-377">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="39d71-377">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="39d71-378">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-378">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="39d71-379">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="39d71-379">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-380">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-380">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-381">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-381">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-382">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-382">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-383">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-383">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="39d71-384">方法 : 16 進文字列を数値に変換する</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-384">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-385">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-385">Required.</span>
          </span>
          <span data-ttu-id="39d71-386">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-387">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-388">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-389">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-390">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="39d71-390">If `Number` is</span></span>|<span data-ttu-id="39d71-391">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="39d71-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-392">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-392">Empty</span></span>|<span data-ttu-id="39d71-393">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-393">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-394">任意の数値</span><span class="sxs-lookup"><span data-stu-id="39d71-394">Any numeric value</span></span>|<span data-ttu-id="39d71-395">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="39d71-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="39d71-396">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="39d71-397">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="39d71-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-398">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-399">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-400">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-401">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-401">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="39d71-402">方法 : 16 進文字列を数値に変換する</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-402">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-403">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-403">Required.</span>
          </span>
          <span data-ttu-id="39d71-404">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-404">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-405">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-405">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-406">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-406">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-407">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-407">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-408">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="39d71-408">If `Number` is</span></span>|<span data-ttu-id="39d71-409">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="39d71-409">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-410">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-410">Empty</span></span>|<span data-ttu-id="39d71-411">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-411">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-412">任意の数値</span><span class="sxs-lookup"><span data-stu-id="39d71-412">Any numeric value</span></span>|<span data-ttu-id="39d71-413">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="39d71-413">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="39d71-414">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-414">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="39d71-415">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="39d71-415">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-416">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-416">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-417">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-417">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-418">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-418">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-419">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-419">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="39d71-420">方法 : 16 進文字列を数値に変換する</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-420">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-421">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-421">Required.</span>
          </span>
          <span data-ttu-id="39d71-422">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-422">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-423">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-423">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-424">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-424">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-425">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-425">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-426">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="39d71-426">If `Number` is</span></span>|<span data-ttu-id="39d71-427">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="39d71-427">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-428">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-428">Empty</span></span>|<span data-ttu-id="39d71-429">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-429">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-430">任意の数値</span><span class="sxs-lookup"><span data-stu-id="39d71-430">Any numeric value</span></span>|<span data-ttu-id="39d71-431">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="39d71-431">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="39d71-432">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-432">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="39d71-433">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="39d71-433">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-434">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-434">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-435">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-435">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-436">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-436">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-437">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-437">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="39d71-438">方法 : 16 進文字列を数値に変換する</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-438">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-439">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-439">Required.</span>
          </span>
          <span data-ttu-id="39d71-440">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-440">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-441">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-441">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-442">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-442">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-443">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-443">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-444">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="39d71-444">If `Number` is</span></span>|<span data-ttu-id="39d71-445">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="39d71-445">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-446">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-446">Empty</span></span>|<span data-ttu-id="39d71-447">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-447">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-448">任意の数値</span><span class="sxs-lookup"><span data-stu-id="39d71-448">Any numeric value</span></span>|<span data-ttu-id="39d71-449">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="39d71-449">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="39d71-450">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-450">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="39d71-451">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="39d71-451">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-452">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-452">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-453">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-453">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-454">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-454">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-455">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-455">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="39d71-456">方法 : 16 進文字列を数値に変換する</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-456">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-457">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-457">Required.</span>
          </span>
          <span data-ttu-id="39d71-458">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-458">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-459">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-459">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-460">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-460">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-461">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-461">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-462">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="39d71-462">If `Number` is</span></span>|<span data-ttu-id="39d71-463">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="39d71-463">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-464">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-464">Empty</span></span>|<span data-ttu-id="39d71-465">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-465">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-466">任意の数値</span><span class="sxs-lookup"><span data-stu-id="39d71-466">Any numeric value</span></span>|<span data-ttu-id="39d71-467">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="39d71-467">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="39d71-468">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-468">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="39d71-469">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="39d71-469">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-470">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-470">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-471">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-471">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-472">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-472">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-473">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-473">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="39d71-474">方法 : 16 進文字列を数値に変換する</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-474">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-475">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-475">Required.</span>
          </span>
          <span data-ttu-id="39d71-476">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-476">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-477">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-477">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-478">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-478">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-479">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-479">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-480">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="39d71-480">If `Number` is</span></span>|<span data-ttu-id="39d71-481">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="39d71-481">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-482">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-482">Empty</span></span>|<span data-ttu-id="39d71-483">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-483">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-484">任意の数値</span><span class="sxs-lookup"><span data-stu-id="39d71-484">Any numeric value</span></span>|<span data-ttu-id="39d71-485">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="39d71-485">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="39d71-486">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-486">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="39d71-487">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="39d71-487">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-488">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-488">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-489">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-489">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-490">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-490">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-491">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-491">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="39d71-492">方法 : 16 進文字列を数値に変換する</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-492">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="39d71-493">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-493">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-494">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-494">Required.</span>
          </span>
          <span data-ttu-id="39d71-495">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-496">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-497">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-498">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-499">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-500">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-501">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-502">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-503">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-504">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-505">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-506">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-507">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-508">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-509">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-510">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-511">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-512">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-513">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-514">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-514">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-515">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-515">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-516">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-516">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-517">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-517">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-518">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-518">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-519">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-519">Required.</span>
          </span>
          <span data-ttu-id="39d71-520">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-520">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-521">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-521">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-522">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-522">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-523">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-523">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-524">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-524">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-525">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-525">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-526">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-526">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-527">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-527">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-528">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-528">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-529">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-529">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-530">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-530">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-531">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-531">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-532">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-532">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-533">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-533">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-534">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-534">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-535">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-535">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-536">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-536">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-537">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-537">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-538">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-538">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-539">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-539">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-540">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-540">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-541">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-541">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-542">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-542">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-543">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-543">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-544">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-544">Required.</span>
          </span>
          <span data-ttu-id="39d71-545">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-545">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-546">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-546">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-547">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-547">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-548">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-548">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-549">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-549">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-550">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-550">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-551">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-551">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-552">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-552">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-553">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-553">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-554">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-554">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-555">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-555">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-556">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-556">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-557">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-557">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-558">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-558">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-559">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-559">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-560">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-560">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-561">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-561">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-562">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-562">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-563">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-563">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-564">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-564">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-565">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-565">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-566">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-566">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-567">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-567">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-568">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-568">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-569">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-569">Required.</span>
          </span>
          <span data-ttu-id="39d71-570">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-570">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-571">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-571">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-572">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-572">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-573">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-573">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-574">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-574">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-575">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-575">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-576">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-576">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-577">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-577">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-578">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-578">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-579">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-579">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-580">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-580">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-581">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-581">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-582">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-582">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-583">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-583">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-584">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-584">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-585">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-586">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-586">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-587">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-587">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-588">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-588">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-589">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-589">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-590">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-590">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-591">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-591">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-592">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-592">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-593">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-593">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-594">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-594">Required.</span>
          </span>
          <span data-ttu-id="39d71-595">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-595">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-596">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-596">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-597">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-597">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-598">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-598">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-599">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-599">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-600">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-600">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-601">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-601">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-602">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-602">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-603">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-603">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-604">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-604">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-605">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-605">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-606">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-606">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-607">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-607">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-608">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-608">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-609">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-609">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-610">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-610">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-611">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-611">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-612">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-612">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-613">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-613">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-614">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-614">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-615">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-615">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-616">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-616">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-617">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-617">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-618">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-618">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-619">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-619">Required.</span>
          </span>
          <span data-ttu-id="39d71-620">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-620">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-621">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-621">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-622">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-622">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-623">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-623">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-624">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-624">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-625">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-625">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-626">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-626">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-627">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-627">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-628">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-628">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-629">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-629">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-630">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-630">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-631">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-631">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-632">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-632">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-633">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-633">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-634">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-634">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-635">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-635">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-636">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-636">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-637">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-637">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-638">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-638">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-639">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-639">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-640">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-640">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-641">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-641">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-642">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-642">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-643">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-643">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-644">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-644">Required.</span>
          </span>
          <span data-ttu-id="39d71-645">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-645">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="39d71-646">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-646">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-647">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-647">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-648">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-648">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-649">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-649">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="39d71-650">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-650">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="39d71-651">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-651">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="39d71-652">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="39d71-652">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-653">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-653">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="39d71-654">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-654">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="39d71-655">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="39d71-655">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="39d71-656">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-656">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="39d71-657">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-657">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="39d71-658">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-658">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="39d71-659">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="39d71-659">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="39d71-660">例:</span><span class="sxs-lookup"><span data-stu-id="39d71-660">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="39d71-661">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="39d71-661">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-662">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-662">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-663">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-663">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-664">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-664">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="39d71-665">データ型の概要 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-665">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="39d71-666">数値演算の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-666">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="39d71-667">数値演算関数 (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-667">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-668">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-668">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="39d71-669">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-669">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-670">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-670">Required.</span>
          </span>
          <span data-ttu-id="39d71-671">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-671">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-672">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-672">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-673">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-673">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-674">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-674">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-675">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="39d71-675">If Number is</span></span>|<span data-ttu-id="39d71-676">月を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-676">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-677">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-677">Empty</span></span>|<span data-ttu-id="39d71-678">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-678">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-679">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="39d71-679">Any other number</span></span>|<span data-ttu-id="39d71-680">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="39d71-680">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="39d71-681">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-681">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="39d71-682">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="39d71-682">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-683">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-683">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-684">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-684">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-685">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-685">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-686">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-686">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-687">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-687">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-688">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-688">Required.</span>
          </span>
          <span data-ttu-id="39d71-689">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-689">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-690">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-690">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-691">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-691">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-692">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-692">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-693">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="39d71-693">If Number is</span></span>|<span data-ttu-id="39d71-694">月を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-694">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-695">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-695">Empty</span></span>|<span data-ttu-id="39d71-696">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-696">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-697">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="39d71-697">Any other number</span></span>|<span data-ttu-id="39d71-698">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="39d71-698">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="39d71-699">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-699">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="39d71-700">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="39d71-700">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-701">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-701">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-702">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-702">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-703">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-703">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-704">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-704">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-705">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-705">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-706">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-706">Required.</span>
          </span>
          <span data-ttu-id="39d71-707">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-707">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-708">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-708">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-709">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-709">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-710">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-710">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-711">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="39d71-711">If Number is</span></span>|<span data-ttu-id="39d71-712">月を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-712">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-713">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-713">Empty</span></span>|<span data-ttu-id="39d71-714">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-714">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-715">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="39d71-715">Any other number</span></span>|<span data-ttu-id="39d71-716">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="39d71-716">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="39d71-717">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-717">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="39d71-718">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="39d71-718">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-719">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-719">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-720">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-720">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-721">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-721">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-722">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-722">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-723">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-723">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-724">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-724">Required.</span>
          </span>
          <span data-ttu-id="39d71-725">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-725">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-726">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-726">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-727">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-727">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-728">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-728">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-729">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="39d71-729">If Number is</span></span>|<span data-ttu-id="39d71-730">月を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-730">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-731">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-731">Empty</span></span>|<span data-ttu-id="39d71-732">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-732">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-733">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="39d71-733">Any other number</span></span>|<span data-ttu-id="39d71-734">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="39d71-734">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="39d71-735">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-735">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="39d71-736">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="39d71-736">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-737">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-737">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-738">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-738">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-739">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-739">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-740">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-740">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-741">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-741">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-742">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-742">Required.</span>
          </span>
          <span data-ttu-id="39d71-743">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-743">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-744">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-744">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-745">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-745">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-746">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-746">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-747">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="39d71-747">If Number is</span></span>|<span data-ttu-id="39d71-748">月を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-748">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-749">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-749">Empty</span></span>|<span data-ttu-id="39d71-750">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-750">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-751">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="39d71-751">Any other number</span></span>|<span data-ttu-id="39d71-752">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="39d71-752">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="39d71-753">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-753">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="39d71-754">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="39d71-754">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-755">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-755">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-756">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-756">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-757">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-757">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-758">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-758">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-759">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-759">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-760">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-760">Required.</span>
          </span>
          <span data-ttu-id="39d71-761">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-761">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-762">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-762">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-763">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-763">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-764">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-764">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-765">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="39d71-765">If Number is</span></span>|<span data-ttu-id="39d71-766">月を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-766">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-767">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-767">Empty</span></span>|<span data-ttu-id="39d71-768">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-768">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-769">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="39d71-769">Any other number</span></span>|<span data-ttu-id="39d71-770">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="39d71-770">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="39d71-771">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-771">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="39d71-772">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="39d71-772">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-773">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-773">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-774">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-774">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-775">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-775">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-776">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-776">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-777">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-777">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-778">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-778">Required.</span>
          </span>
          <span data-ttu-id="39d71-779">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-779">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-780">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-780">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-781">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-781">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-782">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-782">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-783">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="39d71-783">If Number is</span></span>|<span data-ttu-id="39d71-784">月を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-784">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-785">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-785">Empty</span></span>|<span data-ttu-id="39d71-786">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-786">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-787">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="39d71-787">Any other number</span></span>|<span data-ttu-id="39d71-788">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="39d71-788">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="39d71-789">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-789">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="39d71-790">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="39d71-790">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-791">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-791">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-792">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-792">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-793">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-793">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-794">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-794">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-795">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-795">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-796">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-796">Required.</span>
          </span>
          <span data-ttu-id="39d71-797">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-797">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-798">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-798">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-799">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-799">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-800">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-800">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-801">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="39d71-801">If Number is</span></span>|<span data-ttu-id="39d71-802">月を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-802">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-803">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-803">Empty</span></span>|<span data-ttu-id="39d71-804">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-804">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-805">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="39d71-805">Any other number</span></span>|<span data-ttu-id="39d71-806">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="39d71-806">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="39d71-807">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-807">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="39d71-808">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="39d71-808">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-809">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-809">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-810">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-810">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-811">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-811">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-812">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-812">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-813">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-813">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-814">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-814">Required.</span>
          </span>
          <span data-ttu-id="39d71-815">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-815">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-816">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-816">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-817">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-817">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-818">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="39d71-818">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="39d71-819">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="39d71-819">If Number is</span></span>|<span data-ttu-id="39d71-820">月を返します。</span><span class="sxs-lookup"><span data-stu-id="39d71-820">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="39d71-821">Empty</span><span class="sxs-lookup"><span data-stu-id="39d71-821">Empty</span></span>|<span data-ttu-id="39d71-822">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="39d71-822">Zero (0)</span></span>|  
|<span data-ttu-id="39d71-823">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="39d71-823">Any other number</span></span>|<span data-ttu-id="39d71-824">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="39d71-824">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="39d71-825">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-825">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="39d71-826">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="39d71-826">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-827">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-827">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-828">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-828">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-829">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-829">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-830">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-830">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-831">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-831">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="39d71-832">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-832">Required.</span>
          </span>
          <span data-ttu-id="39d71-833">任意の有効な数式を含む <see langword="Object" /> 型の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-833">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-834">数値を表す <see langword="String" /> 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-834">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-835">数値を表す <see langword="String" /> 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-835">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-836">数値が文字列に変換されると、先頭を空白の符号は常に予約されています`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-836">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="39d71-837">場合`Number`が正、返される文字列に先頭にスペースが含まれていて、プラス記号が暗黙的に指定します。</span><span class="sxs-lookup"><span data-stu-id="39d71-837">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="39d71-838">負の数には、マイナス記号 (-) と先頭領域がありませんが含まれます。</span><span class="sxs-lookup"><span data-stu-id="39d71-838">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="39d71-839">使用して、`Format`またはその他のユーザー定義の形式で日付、時刻、または通貨として書式設定する数値の値に変換する関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-839">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="39d71-840">異なり、`Str`関数の場合、`Format`関数では、符号の先頭領域は含まれません`Number`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-840">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39d71-841">`Str`関数は、ピリオドのみを認識 (`.`) 有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="39d71-841">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="39d71-842">(たとえば、国際対応のアプリケーションで別の 10 進区切り記号を使用する場合は、使用、`CStr`または`Format`数値文字列に変換する関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-842">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="39d71-843">特定のカルチャの数値の文字列形式を取得するには、数値を使用`ToString(IFormatProvider)`メソッド。</span><span class="sxs-lookup"><span data-stu-id="39d71-843">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="39d71-844">たとえば、使用して<xref:System.Double.ToString%2A>型の値を変換するときに`Double`文字列にします。</span><span class="sxs-lookup"><span data-stu-id="39d71-844">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="39d71-845">この例では、`Str`を返す関数、`String`数値の形式。</span><span class="sxs-lookup"><span data-stu-id="39d71-845">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="39d71-846">正の数値が文字列に変換されると、先頭領域は、符号を常に予約されています。</span><span class="sxs-lookup"><span data-stu-id="39d71-846">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="39d71-847">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-847">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="39d71-848">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-848">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="39d71-849">変換の概要</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-849">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-850">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-850">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="39d71-851">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-851">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="39d71-852">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-852">Required.</span>
          </span>
          <span data-ttu-id="39d71-853">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-853">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="39d71-854">
            <c>Expression</c> が <see langword="Object" /> 型の場合、その値が <see langword="String" /> に変換できる必要があります。できない場合は <see cref="T:System.ArgumentException" /> エラーが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-854">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-855">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-855">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-856">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-856">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-857">`Val`関数は、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="39d71-857">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="39d71-858">シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="39d71-858">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="39d71-859">ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の 8 進数) と`&H`(の 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="39d71-859">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="39d71-860">引数からは、空白、タブ、および改行文字が取り除かれます。</span><span class="sxs-lookup"><span data-stu-id="39d71-860">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="39d71-861">次の呼び出しには、1615198 という値が返されます。</span><span class="sxs-lookup"><span data-stu-id="39d71-861">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="39d71-862">次の呼び出しには、10 進値-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="39d71-862">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="39d71-863">`Val`関数は、ピリオドのみを認識 (`.`) 有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="39d71-863">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="39d71-864">国際対応のアプリケーションと同様に、別の 10 進区切り記号が使用すると使用`CDbl`または`CInt`代わりに、文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="39d71-864">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="39d71-865">特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して、`Parse(String, IFormatProvider)`メソッド。</span><span class="sxs-lookup"><span data-stu-id="39d71-865">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="39d71-866">たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=nameWithType>を文字列に変換するときに、`Double`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-866">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39d71-867"><xref:System.InvalidCastException>特定一般的でない数値形式への応答で例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="39d71-867">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="39d71-868">たとえば、次のコードは、この例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="39d71-868">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="39d71-869">として書式設定された数の間で競合を`Double`と`Integer`と`Long`型文字は、文字列内に含まれているしない場合、コンパイラによって捕捉されるはずです。</span><span class="sxs-lookup"><span data-stu-id="39d71-869">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="39d71-870">次の例では、`Val`を各文字列に含まれる数値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-870">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="39d71-871">`Val` 最初の数字、数値の修飾子、数値区切り記号、または空白文字として解釈できない文字に変換するには停止します。</span><span class="sxs-lookup"><span data-stu-id="39d71-871">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="39d71-872">
            <paramref name="InputStr" /> が大きすぎます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-872">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-873">
            <paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-873">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-874">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-874">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="39d71-875">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-875">Required.</span>
          </span>
          <span data-ttu-id="39d71-876">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-876">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="39d71-877">
            <c>Expression</c> が <see langword="Object" /> 型の場合、その値が <see langword="String" /> に変換できる必要があります。できない場合は <see cref="T:System.ArgumentException" /> エラーが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-877">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-878">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-878">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-879">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-879">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-880">`Val`関数は、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="39d71-880">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="39d71-881">シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="39d71-881">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="39d71-882">ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の 8 進数) と`&H`(の 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="39d71-882">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="39d71-883">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="39d71-883">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="39d71-884">次の呼び出しには、値 1234123 を返しますが返されます。</span><span class="sxs-lookup"><span data-stu-id="39d71-884">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="39d71-885">次の呼び出しには、10 進値-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="39d71-885">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="39d71-886">`Val`関数は、ピリオドのみを認識 (`.`) 有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="39d71-886">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="39d71-887">国際対応のアプリケーションと同様に、その他の 10 進数の区切り記号を使用する場合を使用して、`CDbl`または`CInt`代わりに、文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="39d71-887">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="39d71-888">特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して、`Parse(String, IFormatProvider)`メソッド。</span><span class="sxs-lookup"><span data-stu-id="39d71-888">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="39d71-889">たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=nameWithType>を文字列に変換するときに、`Double`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-889">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39d71-890"><xref:System.InvalidCastException>特定一般的でない数値形式への応答で例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="39d71-890">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="39d71-891">たとえば、次のコードは、この例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="39d71-891">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="39d71-892">として書式設定された数の間で競合を`Double`と`Integer`と`Long`型文字は、競合は、文字列に含まれていなかった場合、コンパイラによって捕捉されるはずです。</span><span class="sxs-lookup"><span data-stu-id="39d71-892">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="39d71-893">次の例では、`Val`を各文字列に含まれる数値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-893">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="39d71-894">`Val` 最初の数字、数値の修飾子、数値区切り記号、または空白文字として解釈できない文字に変換するには停止します。</span><span class="sxs-lookup"><span data-stu-id="39d71-894">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="39d71-895">
            <paramref name="InputStr" /> が大きすぎます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-895">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-896">
            <paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-896">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-897">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-897">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="39d71-898">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-898">Required.</span>
          </span>
          <span data-ttu-id="39d71-899">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-899">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="39d71-900">
            <c>Expression</c> が <see langword="Object" /> 型の場合、その値が <see langword="String" /> に変換できる必要があります。できない場合は <see cref="T:System.ArgumentException" /> エラーが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-900">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="39d71-901">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-901">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="39d71-902">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-902">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="39d71-903">`Val`関数は、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="39d71-903">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="39d71-904">シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="39d71-904">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="39d71-905">ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の 8 進数) と`&H`(の 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="39d71-905">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="39d71-906">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="39d71-906">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="39d71-907">次の呼び出しには、値 1234123 を返しますが返されます。</span><span class="sxs-lookup"><span data-stu-id="39d71-907">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="39d71-908">次の呼び出しには、10 進値-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="39d71-908">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="39d71-909">`Val`関数は、ピリオドのみを認識 (`.`) 有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="39d71-909">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="39d71-910">国際対応のアプリケーションと同様に、その他の 10 進数の区切り記号を使用する場合を使用して、`CDbl`または`CInt`代わりに、文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="39d71-910">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="39d71-911">特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して、`Parse(String, IFormatProvider)`メソッド。</span><span class="sxs-lookup"><span data-stu-id="39d71-911">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="39d71-912">たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=nameWithType>を文字列に変換するときに、`Double`します。</span><span class="sxs-lookup"><span data-stu-id="39d71-912">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="39d71-913"><xref:System.InvalidCastException>特定一般的でない数値形式への応答で例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="39d71-913">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="39d71-914">たとえば、次のコードは、この例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="39d71-914">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="39d71-915">として書式設定された数の間で競合を`Double`と`Integer`と`Long`型文字は、競合は、文字列に含まれていなかった場合、コンパイラによって捕捉されるはずです。</span><span class="sxs-lookup"><span data-stu-id="39d71-915">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="39d71-916">次の例では、`Val`を各文字列に含まれる数値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="39d71-916">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="39d71-917">`Val` 最初の数字、数値の修飾子、数値区切り記号、または空白文字として解釈できない文字に変換するには停止します。</span><span class="sxs-lookup"><span data-stu-id="39d71-917">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="39d71-918">
            <paramref name="InputStr" /> が大きすぎます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-918">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="39d71-919">
            <paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-919">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="39d71-920">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="39d71-920">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>