<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9765a35a73e33a7e4affa6bc4de891155e6dac2a" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57950150" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b4d23-101"><see langword="Conversion" /> モジュールに含まれるプロシージャを使って、さまざまな変換演算を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-102">このモジュールはサポート、Visual Basic 言語のキーワードと、他の底を 10 進数に変換するランタイム ライブラリ メンバーを別の数値文字列、数値、文字列および 1 つのデータを入力します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-103">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-104">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="b4d23-105">キーワード (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="b4d23-106">Visual Basic ランタイム ライブラリ メンバー</span><span class="sxs-lookup"><span data-stu-id="b4d23-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="b4d23-107">変換対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4d23-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="b4d23-108">変換後のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="b4d23-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="b4d23-109">オブジェクトを指定された型に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="b4d23-110">実行時の種類が要求されたターゲットの種類であるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4d23-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-111">`CTypeDynamic`メソッドとして渡されたオブジェクトの変換、`Expression`パラメーターで指定された型を`TargetType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b4d23-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="b4d23-112">オブジェクトがオブジェクトを動的オブジェクトである場合、`CTypeDynamic`メソッドで使用できる動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="b4d23-113">`CTypeDynamic`メソッドには、オブジェクト自体で定義された変換セマンティクスに従って、動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="b4d23-114">動的オブジェクトから継承している場合<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`メソッドは、まずユーザー定義の静的な変換を使用して、変換の実行を試みます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="b4d23-115">ユーザー定義の静的な変換に失敗した場合、`CTypeDynamic`メソッドは動的な変換を使用して変換を実行しようとしています。</span><span class="sxs-lookup"><span data-stu-id="b4d23-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="b4d23-116">動的オブジェクトが実装されている場合<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`メソッドでは、ユーザー定義の静的な変換を動的への変換からの優先順位が与えられます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-117">次の例では、`CTypeDynamic`動的オブジェクトによって定義された変換を使用して動的オブジェクトを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="b4d23-118">動的オブジェクトの使用 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="b4d23-119">チュートリアル: 動的オブジェクトの作成と使用 (C# および Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="b4d23-120">変換後のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="b4d23-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="b4d23-121">変換対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4d23-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="b4d23-122">指定したジェネリック型にオブジェクトを変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="b4d23-123">要求されたジェネリック型として静的に型指定されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4d23-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-124">`CTypeDynamic`メソッドとして渡されたオブジェクトの変換、`Expression`ジェネリック パラメーターの型で指定された型のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="b4d23-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="b4d23-125">オブジェクトがオブジェクトを動的オブジェクトである場合、`CTypeDynamic`メソッドで使用できる動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="b4d23-126">`CTypeDynamic`メソッドには、オブジェクト自体で定義された変換セマンティクスに従って、動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="b4d23-127">動的オブジェクトから継承している場合<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`メソッドは、まずユーザー定義の静的な変換を使用して、変換の実行を試みます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="b4d23-128">ユーザー定義の静的な変換に失敗した場合、`CTypeDynamic`メソッドは動的な変換を使用して変換を実行しようとしています。</span><span class="sxs-lookup"><span data-stu-id="b4d23-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="b4d23-129">動的オブジェクトが実装されている場合<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`メソッドでは、ユーザー定義の静的な変換を動的への変換からの優先順位が与えられます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-130">次の例では、`CTypeDynamic`動的オブジェクトによって定義された変換を使用して動的オブジェクトを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="b4d23-131">動的オブジェクトの使用 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="b4d23-132">チュートリアル: 動的オブジェクトの作成と使用 (C# および Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4d23-133">特定のエラー番号に対応するエラー メッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b4d23-134">特定のエラー番号に対応するエラー メッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-135">直前の実行時エラーに対応するエラー メッセージ。</span><span class="sxs-lookup"><span data-stu-id="b4d23-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-136">`ErrorToString`関数のプロパティの設定を調べ、`Err`最新の実行時エラーを識別するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4d23-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="b4d23-137">戻り値、`ErrorToString`関数に対応する、`Description`のプロパティ、`Err`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4d23-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="b4d23-138">実行時エラーが発生しなかった場合`ErrorToString`長さ 0 の文字列を返します ("")。</span><span class="sxs-lookup"><span data-stu-id="b4d23-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="b4d23-139">Visual basic 6.0 とそれ以前のバージョンではこの機能によって提供された、`Error`関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-140">次のコードでは、`ErrorToString`指定したエラーの番号に対応するエラー メッセージを表示する関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-141">該当する <paramref name="ErrorNumber" /> がありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="b4d23-142">任意。</span><span class="sxs-lookup"><span data-stu-id="b4d23-142">Optional.</span></span> <span data-ttu-id="b4d23-143">有効なエラー番号。</span><span class="sxs-lookup"><span data-stu-id="b4d23-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="b4d23-144">特定のエラー番号に対応するエラー メッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-145">特定のエラー番号に対応するエラー メッセージ。</span><span class="sxs-lookup"><span data-stu-id="b4d23-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-146">`ErrorToString`関数のプロパティの設定を調べ、`Err`最新の実行時エラーを識別するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4d23-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="b4d23-147">戻り値、`ErrorToString`関数に対応する、`Description`のプロパティ、`Err`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b4d23-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="b4d23-148">場合`ErrorNumber`は有効なエラー番号が定義されていない`ErrorToString`文字列を返します`"Application-defined or object-defined error."`場合`ErrorNumber`が有効でないエラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="b4d23-149">場合`ErrorNumber`を省略すると、メッセージを最新に対応する実行時エラーが返されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="b4d23-150">実行時エラーが発生していない場合または`ErrorNumber`は 0 です。`ErrorToString`長さ 0 の文字列を返します ("")。</span><span class="sxs-lookup"><span data-stu-id="b4d23-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="b4d23-151">Visual basic 6.0 とそれ以前のバージョンではこの機能によって提供された、`Error`関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-152">次のコードでは、`ErrorToString`指定したエラーの番号に対応するエラー メッセージを表示する関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-153">該当する <paramref name="ErrorNumber" /> がありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4d23-154">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-155">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-155">Required.</span></span> <span data-ttu-id="b4d23-156"><see langword="Decimal" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-157">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-158">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-159">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-160">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-161">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-162">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="b4d23-163">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-164">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-165">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-166">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-167">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-168">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-169">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-170">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-171">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-172">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-173">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-174">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-175">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-176">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-177">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-178">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-179">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-179">Required.</span></span> <span data-ttu-id="b4d23-180"><see langword="Double" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-181">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-182">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-183">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-184">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-185">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-186">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="b4d23-187">以降では、Visual Basic 15.8、パフォーマンスの`Double`-に-整数型の変換がによって返される値を渡す場合に最適化された、`Fix`メソッドのいずれかを[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)、または、 `Double`によって返される値`Fix`を整数に変換が暗黙的に[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)設定`Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="b4d23-188">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="b4d23-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="b4d23-189">次の例は、このような最適化された変換を示しています。</span><span class="sxs-lookup"><span data-stu-id="b4d23-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="b4d23-190">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-191">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-192">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-193">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-194">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-195">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-196">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-197">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-198">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-199">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-200">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-201">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-202">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-203">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-204">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-205">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-206">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-206">Required.</span></span> <span data-ttu-id="b4d23-207"><see langword="Short" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-208">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-209">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-210">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-211">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-212">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-213">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-214">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-215">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-216">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-217">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-218">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-219">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-220">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-221">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-222">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-223">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-224">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-225">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-226">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-227">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-228">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-229">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-230">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-230">Required.</span></span> <span data-ttu-id="b4d23-231"><see langword="Integer" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-232">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-233">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-234">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-235">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-236">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-237">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-238">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-239">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-240">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-241">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-242">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-243">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-244">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-245">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-246">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-247">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-248">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-249">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-250">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-251">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-252">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-253">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-254">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-254">Required.</span></span> <span data-ttu-id="b4d23-255"><see langword="Long" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-256">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-257">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-258">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-259">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-260">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-261">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-262">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-263">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-264">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-265">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-266">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-267">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-268">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-269">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-270">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-271">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-272">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-273">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-274">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-275">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-276">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-277">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-278">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-278">Required.</span></span> <span data-ttu-id="b4d23-279"><see langword="Object" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="b4d23-280"><paramref name="Number" /> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="b4d23-281">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-282">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-283">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-284">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-285">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-286">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="b4d23-287">場合は、Visual Basic の 15.8 以降、`Number`引数は、オブジェクトのランタイム型が`Double`または`Single`、によって返される値を渡す場合、浮動-小数点からに整数型の変換のパフォーマンスが最適化された、 `Fix`メソッドのいずれかを[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)、値がによって返される場合、または`Fix`を整数に変換が自動的に[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)オフ に設定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="b4d23-288">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="b4d23-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="b4d23-289">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="b4d23-290">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-291">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-292">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-293">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-294">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-295">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-296">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-297">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-298">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-299">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-300">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-301">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-302">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-303">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-304">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-305">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-306">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-306">Required.</span></span> <span data-ttu-id="b4d23-307"><see langword="Single" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-308">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-309">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-310">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-311">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-312">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-313">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="b4d23-314">以降では、Visual Basic 15.8、パフォーマンスの`Single`-に-整数型の変換がによって返される値を渡す場合に最適化された、`Fix`メソッドのいずれかを[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)、または、 `Single`によって返される値`Fix`を整数に変換が自動的に[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)オフ に設定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="b4d23-315">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="b4d23-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="b4d23-316">次の例は、このような最適化された変換を示しています。</span><span class="sxs-lookup"><span data-stu-id="b4d23-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="b4d23-317">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-318">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-319">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-320">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-321">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-322">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-323">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-324">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-325">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-326">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-327">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-328">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-329">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-330">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-331">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-332">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4d23-333">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-334">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-334">Required.</span></span> <span data-ttu-id="b4d23-335">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-336">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-337">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-338">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-339">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="b4d23-339">If `Number` is</span></span>|<span data-ttu-id="b4d23-340">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="b4d23-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-341">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-341">Empty</span></span>|<span data-ttu-id="b4d23-342">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-342">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-343">任意の数値</span><span class="sxs-lookup"><span data-stu-id="b4d23-343">Any numeric value</span></span>|<span data-ttu-id="b4d23-344">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="b4d23-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="b4d23-345">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="b4d23-346">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-347">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-348"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-349"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-350">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="b4d23-351">方法: 16 進文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-352">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-352">Required.</span></span> <span data-ttu-id="b4d23-353">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-354">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-355">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-356">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-357">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="b4d23-357">If `Number` is</span></span>|<span data-ttu-id="b4d23-358">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="b4d23-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-359">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-359">Empty</span></span>|<span data-ttu-id="b4d23-360">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-360">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-361">任意の数値</span><span class="sxs-lookup"><span data-stu-id="b4d23-361">Any numeric value</span></span>|<span data-ttu-id="b4d23-362">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="b4d23-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="b4d23-363">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="b4d23-364">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-365">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-366"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-367"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-368">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="b4d23-369">方法: 16 進文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-370">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-370">Required.</span></span> <span data-ttu-id="b4d23-371">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-372">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-373">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-374">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-375">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="b4d23-375">If `Number` is</span></span>|<span data-ttu-id="b4d23-376">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="b4d23-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-377">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-377">Empty</span></span>|<span data-ttu-id="b4d23-378">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-378">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-379">任意の数値</span><span class="sxs-lookup"><span data-stu-id="b4d23-379">Any numeric value</span></span>|<span data-ttu-id="b4d23-380">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="b4d23-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="b4d23-381">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="b4d23-382">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-383">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-384"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-385"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-386">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="b4d23-387">方法: 16 進文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-388">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-388">Required.</span></span> <span data-ttu-id="b4d23-389">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-390">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-391">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-392">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-393">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="b4d23-393">If `Number` is</span></span>|<span data-ttu-id="b4d23-394">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="b4d23-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-395">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-395">Empty</span></span>|<span data-ttu-id="b4d23-396">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-396">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-397">任意の数値</span><span class="sxs-lookup"><span data-stu-id="b4d23-397">Any numeric value</span></span>|<span data-ttu-id="b4d23-398">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="b4d23-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="b4d23-399">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="b4d23-400">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-401">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-402"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-403"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-404">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="b4d23-405">方法: 16 進文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-406">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-406">Required.</span></span> <span data-ttu-id="b4d23-407">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-408">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-409">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-410">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-411">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="b4d23-411">If `Number` is</span></span>|<span data-ttu-id="b4d23-412">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="b4d23-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-413">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-413">Empty</span></span>|<span data-ttu-id="b4d23-414">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-414">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-415">任意の数値</span><span class="sxs-lookup"><span data-stu-id="b4d23-415">Any numeric value</span></span>|<span data-ttu-id="b4d23-416">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="b4d23-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="b4d23-417">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="b4d23-418">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-419">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-420"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-421"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-422">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="b4d23-423">方法: 16 進文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-424">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-424">Required.</span></span> <span data-ttu-id="b4d23-425">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-426">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-427">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-428">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-429">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="b4d23-429">If `Number` is</span></span>|<span data-ttu-id="b4d23-430">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="b4d23-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-431">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-431">Empty</span></span>|<span data-ttu-id="b4d23-432">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-432">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-433">任意の数値</span><span class="sxs-lookup"><span data-stu-id="b4d23-433">Any numeric value</span></span>|<span data-ttu-id="b4d23-434">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="b4d23-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="b4d23-435">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="b4d23-436">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-437">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-438"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-439"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-440">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="b4d23-441">方法: 16 進文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-442">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-442">Required.</span></span> <span data-ttu-id="b4d23-443">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-444">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-445">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-446">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-447">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="b4d23-447">If `Number` is</span></span>|<span data-ttu-id="b4d23-448">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="b4d23-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-449">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-449">Empty</span></span>|<span data-ttu-id="b4d23-450">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-450">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-451">任意の数値</span><span class="sxs-lookup"><span data-stu-id="b4d23-451">Any numeric value</span></span>|<span data-ttu-id="b4d23-452">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="b4d23-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="b4d23-453">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="b4d23-454">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-455">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-456"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-457"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-458">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="b4d23-459">方法: 16 進文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-460">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-460">Required.</span></span> <span data-ttu-id="b4d23-461">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-462">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-463">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-464">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-465">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="b4d23-465">If `Number` is</span></span>|<span data-ttu-id="b4d23-466">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="b4d23-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-467">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-467">Empty</span></span>|<span data-ttu-id="b4d23-468">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-468">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-469">任意の数値</span><span class="sxs-lookup"><span data-stu-id="b4d23-469">Any numeric value</span></span>|<span data-ttu-id="b4d23-470">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="b4d23-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="b4d23-471">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="b4d23-472">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-473">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-474"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-475"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-476">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="b4d23-477">方法: 16 進文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-478">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-478">Required.</span></span> <span data-ttu-id="b4d23-479">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-480">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-481">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-482">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-483">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="b4d23-483">If `Number` is</span></span>|<span data-ttu-id="b4d23-484">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="b4d23-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-485">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-485">Empty</span></span>|<span data-ttu-id="b4d23-486">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-486">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-487">任意の数値</span><span class="sxs-lookup"><span data-stu-id="b4d23-487">Any numeric value</span></span>|<span data-ttu-id="b4d23-488">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="b4d23-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="b4d23-489">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="b4d23-490">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-491">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-492"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-493"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-494">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="b4d23-495">方法: 16 進文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4d23-496">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-497">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-497">Required.</span></span> <span data-ttu-id="b4d23-498"><see langword="Decimal" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-499">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-500">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-501">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-502">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-503">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-504">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="b4d23-505">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-506">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-507">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-508">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-509">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-510">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-511">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-512">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-513">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-514">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-515">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-516">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-517">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-518">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-519">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-520">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-521">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-521">Required.</span></span> <span data-ttu-id="b4d23-522"><see langword="Double" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-523">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-524">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-525">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-526">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-527">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-528">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="b4d23-529">Visual Basic 15.8 から始めてにによって返される値を渡す場合、double 型から整数型に変換のパフォーマンスは最適化は、`Int`メソッドのいずれかを[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)、または double 型の値によって返される`Int`を整数に変換が自動的に[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)オフ に設定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="b4d23-530">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="b4d23-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="b4d23-531">次の例は、このような最適化された変換を示しています。</span><span class="sxs-lookup"><span data-stu-id="b4d23-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="b4d23-532">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-533">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-534">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-535">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-536">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-537">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-538">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-539">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-540">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-541">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-542">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-543">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-544">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-545">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-546">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-547">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-548">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-548">Required.</span></span> <span data-ttu-id="b4d23-549"><see langword="Short" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-550">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-551">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-552">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-553">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-554">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-555">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-556">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-557">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-558">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-559">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-560">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-561">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-562">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-563">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-564">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-565">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-566">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-567">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-568">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-569">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-570">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-571">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-572">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-572">Required.</span></span> <span data-ttu-id="b4d23-573"><see langword="Integer" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-574">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-575">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-576">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-577">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-578">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-579">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-580">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-581">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-582">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-583">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-584">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-585">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-586">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-587">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-588">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-589">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-590">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-591">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-592">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-593">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-594">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-595">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-596">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-596">Required.</span></span> <span data-ttu-id="b4d23-597"><see langword="Long" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-598">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-599">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-600">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-601">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-602">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-603">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-604">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-605">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-606">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-607">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-608">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-609">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-610">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-611">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-612">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-613">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-614">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-615">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-616">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-617">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-618">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-619">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-620">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-620">Required.</span></span> <span data-ttu-id="b4d23-621"><see langword="Object" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="b4d23-622"><paramref name="Number" /> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="b4d23-623">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-624">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-625">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-626">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-627">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-628">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="b4d23-629">場合は、Visual Basic の 15.8 以降、`Number`引数は、オブジェクトのランタイム型が`Double`または`Single`、によって返される値を渡す場合、浮動-小数点からに整数型の変換のパフォーマンスが最適化された、 `Int`メソッドのいずれかを[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)、値がによって返される場合、または`Int`を整数に変換が自動的に[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)オフ に設定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="b4d23-630">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="b4d23-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="b4d23-631">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="b4d23-632">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-633">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-634">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-635">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-636">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-637">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-638">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-639">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-640">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-641">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-642">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-643">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-644">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-645">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-646">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-647">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-648">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-648">Required.</span></span> <span data-ttu-id="b4d23-649"><see langword="Single" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-650">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-651">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="b4d23-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-652">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="b4d23-653">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="b4d23-654">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="b4d23-655">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="b4d23-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="b4d23-656">以降では、Visual Basic 15.8、パフォーマンスの`Single`-に-整数型の変換がによって返される値を渡す場合に最適化された、`Int`メソッドのいずれかを[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)、または、 `Single`によって返される値`Int`を整数に変換が自動的に[Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)オフ に設定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="b4d23-657">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="b4d23-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="b4d23-658">次の例は、このような最適化された変換を示しています。</span><span class="sxs-lookup"><span data-stu-id="b4d23-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="b4d23-659">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="b4d23-660">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="b4d23-661">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="b4d23-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="b4d23-662">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="b4d23-663">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="b4d23-664">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="b4d23-665">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="b4d23-666">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="b4d23-667">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-668">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-669">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-670">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="b4d23-671">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="b4d23-672">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="b4d23-673">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b4d23-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-674">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4d23-675">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-676">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-676">Required.</span></span> <span data-ttu-id="b4d23-677">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-678">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-679">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-680">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-681">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="b4d23-681">If Number is</span></span>|<span data-ttu-id="b4d23-682">月を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-683">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-683">Empty</span></span>|<span data-ttu-id="b4d23-684">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-684">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-685">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="b4d23-685">Any other number</span></span>|<span data-ttu-id="b4d23-686">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="b4d23-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="b4d23-687">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="b4d23-688">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-689">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-690"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-691"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-692">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-693">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-694">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-694">Required.</span></span> <span data-ttu-id="b4d23-695">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-696">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-697">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-698">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-699">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="b4d23-699">If Number is</span></span>|<span data-ttu-id="b4d23-700">月を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-701">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-701">Empty</span></span>|<span data-ttu-id="b4d23-702">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-702">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-703">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="b4d23-703">Any other number</span></span>|<span data-ttu-id="b4d23-704">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="b4d23-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="b4d23-705">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="b4d23-706">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-707">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-708"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-709"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-710">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-711">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-712">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-712">Required.</span></span> <span data-ttu-id="b4d23-713">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-714">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-715">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-716">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-717">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="b4d23-717">If Number is</span></span>|<span data-ttu-id="b4d23-718">月を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-719">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-719">Empty</span></span>|<span data-ttu-id="b4d23-720">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-720">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-721">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="b4d23-721">Any other number</span></span>|<span data-ttu-id="b4d23-722">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="b4d23-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="b4d23-723">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="b4d23-724">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-725">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-726"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-727"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-728">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-729">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-730">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-730">Required.</span></span> <span data-ttu-id="b4d23-731">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-732">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-733">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-734">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-735">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="b4d23-735">If Number is</span></span>|<span data-ttu-id="b4d23-736">月を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-737">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-737">Empty</span></span>|<span data-ttu-id="b4d23-738">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-738">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-739">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="b4d23-739">Any other number</span></span>|<span data-ttu-id="b4d23-740">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="b4d23-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="b4d23-741">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="b4d23-742">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-743">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-744"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-745"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-746">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-747">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-748">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-748">Required.</span></span> <span data-ttu-id="b4d23-749">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-750">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-751">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-752">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-753">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="b4d23-753">If Number is</span></span>|<span data-ttu-id="b4d23-754">月を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-755">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-755">Empty</span></span>|<span data-ttu-id="b4d23-756">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-756">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-757">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="b4d23-757">Any other number</span></span>|<span data-ttu-id="b4d23-758">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="b4d23-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="b4d23-759">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="b4d23-760">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-761">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-762"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-763"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-764">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-765">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-766">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-766">Required.</span></span> <span data-ttu-id="b4d23-767">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-768">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-769">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-770">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-771">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="b4d23-771">If Number is</span></span>|<span data-ttu-id="b4d23-772">月を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-773">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-773">Empty</span></span>|<span data-ttu-id="b4d23-774">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-774">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-775">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="b4d23-775">Any other number</span></span>|<span data-ttu-id="b4d23-776">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="b4d23-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="b4d23-777">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="b4d23-778">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-779">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-780"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-781"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-782">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-783">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-784">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-784">Required.</span></span> <span data-ttu-id="b4d23-785">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-786">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-787">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-788">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-789">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="b4d23-789">If Number is</span></span>|<span data-ttu-id="b4d23-790">月を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-791">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-791">Empty</span></span>|<span data-ttu-id="b4d23-792">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-792">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-793">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="b4d23-793">Any other number</span></span>|<span data-ttu-id="b4d23-794">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="b4d23-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="b4d23-795">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="b4d23-796">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-797">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-798"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-799"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-800">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-801">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-802">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-802">Required.</span></span> <span data-ttu-id="b4d23-803">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-804">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-805">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-806">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-807">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="b4d23-807">If Number is</span></span>|<span data-ttu-id="b4d23-808">月を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-809">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-809">Empty</span></span>|<span data-ttu-id="b4d23-810">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-810">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-811">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="b4d23-811">Any other number</span></span>|<span data-ttu-id="b4d23-812">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="b4d23-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="b4d23-813">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="b4d23-814">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-815">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-816"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-817"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-818">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-819">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-820">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-820">Required.</span></span> <span data-ttu-id="b4d23-821">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-822">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-823">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-824">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="b4d23-825">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="b4d23-825">If Number is</span></span>|<span data-ttu-id="b4d23-826">月を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="b4d23-827">Empty</span><span class="sxs-lookup"><span data-stu-id="b4d23-827">Empty</span></span>|<span data-ttu-id="b4d23-828">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="b4d23-828">Zero (0)</span></span>|  
|<span data-ttu-id="b4d23-829">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="b4d23-829">Any other number</span></span>|<span data-ttu-id="b4d23-830">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="b4d23-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="b4d23-831">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="b4d23-832">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-833">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-834"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-835"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-836">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-837">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="b4d23-838">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-838">Required.</span></span> <span data-ttu-id="b4d23-839">任意の有効な数式を含む <see langword="Object" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="b4d23-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="b4d23-840">数値を表す <see langword="String" /> 型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="b4d23-841">数値の <see langword="String" /> 表現です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-842">数値が文字列に変換されると、先頭を空白の符号は常に予約されています`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="b4d23-843">場合`Number`が正、返される文字列に先頭にスペースが含まれていて、プラス記号が暗黙的に指定します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="b4d23-844">負の数には、マイナス記号 (-) と先頭領域がありませんが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="b4d23-845">使用して、`Format`またはその他のユーザー定義の形式で日付、時刻、または通貨として書式設定する数値の値に変換する関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="b4d23-846">異なり、`Str`関数の場合、`Format`関数では、符号の先頭領域は含まれません`Number`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4d23-847">`Str`関数は、ピリオドのみを認識 (`.`) 有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="b4d23-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="b4d23-848">(たとえば、国際対応のアプリケーションで別の 10 進区切り記号を使用する場合は、使用、`CStr`または`Format`数値文字列に変換する関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="b4d23-849">特定のカルチャの数値の文字列形式を取得するには、数値を使用`ToString(IFormatProvider)`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4d23-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="b4d23-850">たとえば、使用して<xref:System.Double.ToString%2A>型の値を変換するときに`Double`文字列にします。</span><span class="sxs-lookup"><span data-stu-id="b4d23-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-851">この例では、`Str`を返す関数、`String`数値の形式。</span><span class="sxs-lookup"><span data-stu-id="b4d23-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="b4d23-852">正の数値が文字列に変換されると、先頭領域は、符号を常に予約されています。</span><span class="sxs-lookup"><span data-stu-id="b4d23-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b4d23-853"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="b4d23-854"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="b4d23-855">変換の概要</span><span class="sxs-lookup"><span data-stu-id="b4d23-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-856">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4d23-857">適切な型の数値として文字列に含まれる数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="b4d23-858">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-858">Required.</span></span> <span data-ttu-id="b4d23-859">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span><span class="sxs-lookup"><span data-stu-id="b4d23-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="b4d23-860"><paramref name="Expression" /> が <see langword="Object" /> 型の場合に、その値が <see langword="String" /> に変換できる必要があります。または <see cref="T:System.ArgumentException" /> エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="b4d23-861">適切な型の数値として文字列に含まれる数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="b4d23-862">適切な型で表された、文字列に含まれる数値。</span><span class="sxs-lookup"><span data-stu-id="b4d23-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-863">`Val`関数は、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="b4d23-864">シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="b4d23-865">ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の 8 進数) と`&H`(の 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="b4d23-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="b4d23-866">引数からは、空白、タブ、および改行文字が取り除かれます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="b4d23-867">次の呼び出しには、1615198 という値が返されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="b4d23-868">次の呼び出しには、10 進値-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="b4d23-869">`Val`関数は、ピリオドのみを認識 (`.`) 有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="b4d23-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="b4d23-870">国際対応のアプリケーションと同様に、別の 10 進区切り記号が使用すると使用`CDbl`または`CInt`代わりに、文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="b4d23-871">特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して、`Parse(String, IFormatProvider)`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4d23-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="b4d23-872">たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=nameWithType>を文字列に変換するときに、`Double`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="b4d23-873"><xref:System.InvalidCastException>特定一般的でない数値形式への応答で例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b4d23-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="b4d23-874">たとえば、次のコードは、この例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="b4d23-875">として書式設定された数の間で競合を`Double`と`Integer`と`Long`型文字は、文字列内に含まれているしない場合、コンパイラによって捕捉されるはずです。</span><span class="sxs-lookup"><span data-stu-id="b4d23-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-876">次の例では、`Val`を各文字列に含まれる数値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="b4d23-877">`Val` 最初の数字、数値の修飾子、数値区切り記号、または空白文字として解釈できない文字に変換するには停止します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b4d23-878"><paramref name="InputStr" /> が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-879"><paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-880">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="b4d23-881">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-881">Required.</span></span> <span data-ttu-id="b4d23-882">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span><span class="sxs-lookup"><span data-stu-id="b4d23-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="b4d23-883"><paramref name="Expression" /> が <see langword="Object" /> 型の場合に、その値が <see langword="String" /> に変換できる必要があります。または <see cref="T:System.ArgumentException" /> エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="b4d23-884">適切な型の数値として文字列に含まれる数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="b4d23-885">適切な型で表された、文字列に含まれる数値。</span><span class="sxs-lookup"><span data-stu-id="b4d23-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-886">`Val`関数は、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="b4d23-887">シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="b4d23-888">ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の 8 進数) と`&H`(の 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="b4d23-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="b4d23-889">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="b4d23-890">次の呼び出しには、値 1234123 を返しますが返されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="b4d23-891">次の呼び出しには、10 進値-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="b4d23-892">`Val`関数は、ピリオドのみを認識 (`.`) 有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="b4d23-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="b4d23-893">国際対応のアプリケーションと同様に、その他の 10 進数の区切り記号を使用する場合を使用して、`CDbl`または`CInt`代わりに、文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="b4d23-894">特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して、`Parse(String, IFormatProvider)`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4d23-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="b4d23-895">たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=nameWithType>を文字列に変換するときに、`Double`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4d23-896"><xref:System.InvalidCastException>特定一般的でない数値形式への応答で例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b4d23-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="b4d23-897">たとえば、次のコードは、この例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="b4d23-898">として書式設定された数の間で競合を`Double`と`Integer`と`Long`型文字は、競合は、文字列に含まれていなかった場合、コンパイラによって捕捉されるはずです。</span><span class="sxs-lookup"><span data-stu-id="b4d23-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-899">次の例では、`Val`を各文字列に含まれる数値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="b4d23-900">`Val` 最初の数字、数値の修飾子、数値区切り記号、または空白文字として解釈できない文字に変換するには停止します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b4d23-901"><paramref name="InputStr" /> が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-902"><paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-903">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="b4d23-904">必須です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-904">Required.</span></span> <span data-ttu-id="b4d23-905">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span><span class="sxs-lookup"><span data-stu-id="b4d23-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="b4d23-906"><paramref name="Expression" /> が <see langword="Object" /> 型の場合に、その値が <see langword="String" /> に変換できる必要があります。または <see cref="T:System.ArgumentException" /> エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="b4d23-907">適切な型の数値として文字列に含まれる数を返します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="b4d23-908">適切な型で表された、文字列に含まれる数値。</span><span class="sxs-lookup"><span data-stu-id="b4d23-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4d23-909">`Val`関数は、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="b4d23-910">シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="b4d23-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="b4d23-911">ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の 8 進数) と`&H`(の 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="b4d23-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="b4d23-912">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="b4d23-913">次の呼び出しには、値 1234123 を返しますが返されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="b4d23-914">次の呼び出しには、10 進値-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="b4d23-915">`Val`関数は、ピリオドのみを認識 (`.`) 有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="b4d23-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="b4d23-916">国際対応のアプリケーションと同様に、その他の 10 進数の区切り記号を使用する場合を使用して、`CDbl`または`CInt`代わりに、文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="b4d23-917">特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して、`Parse(String, IFormatProvider)`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b4d23-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="b4d23-918">たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=nameWithType>を文字列に変換するときに、`Double`します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b4d23-919"><xref:System.InvalidCastException>特定一般的でない数値形式への応答で例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b4d23-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="b4d23-920">たとえば、次のコードは、この例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="b4d23-921">として書式設定された数の間で競合を`Double`と`Integer`と`Long`型文字は、競合は、文字列に含まれていなかった場合、コンパイラによって捕捉されるはずです。</span><span class="sxs-lookup"><span data-stu-id="b4d23-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="b4d23-922">次の例では、`Val`を各文字列に含まれる数値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="b4d23-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="b4d23-923">`Val` 最初の数字、数値の修飾子、数値区切り記号、または空白文字として解釈できない文字に変換するには停止します。</span><span class="sxs-lookup"><span data-stu-id="b4d23-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b4d23-924"><paramref name="InputStr" /> が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="b4d23-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b4d23-925"><paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span><span class="sxs-lookup"><span data-stu-id="b4d23-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="b4d23-926">CString</span><span class="sxs-lookup"><span data-stu-id="b4d23-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>