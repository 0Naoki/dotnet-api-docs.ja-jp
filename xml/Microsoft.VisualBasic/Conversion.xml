<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7407bb75d7178168919956d2b89f54e76db62e99" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37710289" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="caf9f-101">
        <see langword="Conversion" /> モジュールに含まれるプロシージャを使って、さまざまな変換演算を実行します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="caf9f-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-102">このモジュールはサポート、Visual Basic 言語のキーワードと、他の底を 10 進数に変換するランタイム ライブラリ メンバーを別の数値文字列、数値、文字列および 1 つのデータを入力します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-103">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="caf9f-104">変換対象のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-104">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="caf9f-105">変換後のオブジェクトの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-105">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-106">オブジェクトを指定された型に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-106">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-107">実行時の種類が要求されたターゲットの種類であるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-107">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-108">`CTypeDynamic`メソッドとして渡されたオブジェクトの変換、`Expression`パラメーターで指定された型を`TargetType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="caf9f-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="caf9f-109">オブジェクトがオブジェクトを動的オブジェクトである場合、`CTypeDynamic`メソッドで使用できる動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="caf9f-110">`CTypeDynamic`メソッドには、オブジェクト自体で定義された変換セマンティクスに従って、動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="caf9f-111">動的オブジェクトから継承している場合<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`メソッドは、まずユーザー定義の静的な変換を使用して、変換の実行を試みます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="caf9f-112">ユーザー定義の静的な変換に失敗した場合、`CTypeDynamic`メソッドは動的な変換を使用して変換を実行しようとしています。</span><span class="sxs-lookup"><span data-stu-id="caf9f-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="caf9f-113">動的オブジェクトが実装されている場合<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`メソッドでは、ユーザー定義の静的な変換を動的への変換からの優先順位が与えられます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-114">次の例では、`CTypeDynamic`動的オブジェクトによって定義された変換を使用して動的オブジェクトを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="caf9f-115">変換後のオブジェクトの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-115">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="caf9f-116">変換対象のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-116">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-117">指定したジェネリック型にオブジェクトを変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-117">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-118">要求されたジェネリック型として静的に型指定されたオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-118">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-119">`CTypeDynamic`メソッドとして渡されたオブジェクトの変換、`Expression`ジェネリック パラメーターの型で指定された型のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="caf9f-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="caf9f-120">オブジェクトがオブジェクトを動的オブジェクトである場合、`CTypeDynamic`メソッドで使用できる動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="caf9f-121">`CTypeDynamic`メソッドには、オブジェクト自体で定義された変換セマンティクスに従って、動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="caf9f-122">動的オブジェクトから継承している場合<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`メソッドは、まずユーザー定義の静的な変換を使用して、変換の実行を試みます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="caf9f-123">ユーザー定義の静的な変換に失敗した場合、`CTypeDynamic`メソッドは動的な変換を使用して変換を実行しようとしています。</span><span class="sxs-lookup"><span data-stu-id="caf9f-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="caf9f-124">動的オブジェクトが実装されている場合<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`メソッドでは、ユーザー定義の静的な変換を動的への変換からの優先順位が与えられます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-125">次の例では、`CTypeDynamic`動的オブジェクトによって定義された変換を使用して動的オブジェクトを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="caf9f-126">特定のエラー番号に対応するエラー メッセージを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-126">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="caf9f-127">特定のエラー番号に対応するエラー メッセージを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-127">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-128">直前の実行時エラーに対応するエラー メッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-128">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-129">`ErrorToString`関数のプロパティの設定を調べ、`Err`最新の実行時エラーを識別するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="caf9f-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="caf9f-130">戻り値、`ErrorToString`関数に対応する、`Description`のプロパティ、`Err`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="caf9f-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="caf9f-131">実行時エラーが発生しなかった場合`ErrorToString`長さ 0 の文字列を返します ("")。</span><span class="sxs-lookup"><span data-stu-id="caf9f-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="caf9f-132">Visual basic 6.0 とそれ以前のバージョンではこの機能によって提供された、`Error`関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-133">次のコードでは、`ErrorToString`指定したエラーの番号に対応するエラー メッセージを表示する関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-134">
            <paramref name="ErrorNumber" /> が範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-134">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="caf9f-135">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-135">Optional.</span>
          </span>
          <span data-ttu-id="caf9f-136">有効なエラー番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-136">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-137">特定のエラー番号に対応するエラー メッセージを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-137">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-138">特定のエラー番号に対応するエラー メッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-138">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-139">`ErrorToString`関数のプロパティの設定を調べ、`Err`最新の実行時エラーを識別するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="caf9f-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="caf9f-140">戻り値、`ErrorToString`関数に対応する、`Description`のプロパティ、`Err`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="caf9f-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="caf9f-141">場合`ErrorNumber`は有効なエラー番号が定義されていない`ErrorToString`文字列を返します`"Application-defined or object-defined error."`場合`ErrorNumber`が有効でないエラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="caf9f-142">場合`ErrorNumber`を省略すると、メッセージを最新に対応する実行時エラーが返されます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="caf9f-143">実行時エラーが発生していない場合または`ErrorNumber`は 0 です。`ErrorToString`長さ 0 の文字列を返します ("")。</span><span class="sxs-lookup"><span data-stu-id="caf9f-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="caf9f-144">Visual basic 6.0 とそれ以前のバージョンではこの機能によって提供された、`Error`関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-145">次のコードでは、`ErrorToString`指定したエラーの番号に対応するエラー メッセージを表示する関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-146">
            <paramref name="ErrorNumber" /> が範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-146">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="caf9f-147">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-147">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-148">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-148">Required.</span>
          </span>
          <span data-ttu-id="caf9f-149">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-149">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-150">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-151">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-151">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-152">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-152">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-153">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-154">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-155">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-156">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-157">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-158">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-159">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-160">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-161">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-162">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-163">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-164">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-165">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-166">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-166">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-167">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-167">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-168">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-168">Required.</span>
          </span>
          <span data-ttu-id="caf9f-169">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-169">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-170">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-171">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-171">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-172">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-172">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-173">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-174">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-175">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-176">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-177">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-178">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-179">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-180">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-181">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-182">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-183">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-184">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-185">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-186">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-186">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-187">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-187">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-188">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-188">Required.</span>
          </span>
          <span data-ttu-id="caf9f-189">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-189">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-190">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-191">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-191">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-192">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-192">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-193">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-194">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-195">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-196">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-197">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-198">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-199">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-200">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-201">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-202">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-203">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-204">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-205">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-206">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-206">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-207">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-207">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-208">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-208">Required.</span>
          </span>
          <span data-ttu-id="caf9f-209">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-209">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-210">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-211">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-211">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-212">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-212">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-213">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-214">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-215">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-216">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-217">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-218">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-219">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-220">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-221">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-222">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-223">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-224">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-225">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-226">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-226">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-227">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-227">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-228">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-228">Required.</span>
          </span>
          <span data-ttu-id="caf9f-229">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-229">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-230">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-231">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-231">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-232">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-232">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-233">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-234">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-235">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-236">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-237">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-238">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-239">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-240">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-241">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-242">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-243">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-244">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-245">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-246">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-246">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-247">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-247">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-248">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-248">Required.</span>
          </span>
          <span data-ttu-id="caf9f-249">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-249">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-250">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-251">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-251">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-252">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-252">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-253">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-254">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-255">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-256">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-257">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-258">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-259">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-260">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-261">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-262">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-263">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-264">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-265">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-266">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-266">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-267">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-267">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-268">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-268">Required.</span>
          </span>
          <span data-ttu-id="caf9f-269">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-269">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-270">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-271">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-271">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-272">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-272">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-273">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-274">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-275">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-276">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-277">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-278">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-279">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-280">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-281">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-282">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-283">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-284">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-285">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-286">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-286">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-287">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-287">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="caf9f-288">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-288">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-289">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-289">Required.</span>
          </span>
          <span data-ttu-id="caf9f-290">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-290">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-291">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-291">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-292">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-292">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-293">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-294">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="caf9f-294">If `Number` is</span></span>|<span data-ttu-id="caf9f-295">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="caf9f-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-296">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-296">Empty</span></span>|<span data-ttu-id="caf9f-297">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-297">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-298">任意の数値</span><span class="sxs-lookup"><span data-stu-id="caf9f-298">Any numeric value</span></span>|<span data-ttu-id="caf9f-299">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="caf9f-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="caf9f-300">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="caf9f-301">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-302">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-303">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-303">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-304">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-304">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-305">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-305">Required.</span>
          </span>
          <span data-ttu-id="caf9f-306">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-306">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-307">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-307">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-308">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-308">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-309">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-310">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="caf9f-310">If `Number` is</span></span>|<span data-ttu-id="caf9f-311">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="caf9f-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-312">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-312">Empty</span></span>|<span data-ttu-id="caf9f-313">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-313">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-314">任意の数値</span><span class="sxs-lookup"><span data-stu-id="caf9f-314">Any numeric value</span></span>|<span data-ttu-id="caf9f-315">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="caf9f-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="caf9f-316">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="caf9f-317">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-318">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-319">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-319">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-320">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-320">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-321">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-321">Required.</span>
          </span>
          <span data-ttu-id="caf9f-322">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-322">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-323">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-323">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-324">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-324">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-325">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-326">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="caf9f-326">If `Number` is</span></span>|<span data-ttu-id="caf9f-327">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="caf9f-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-328">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-328">Empty</span></span>|<span data-ttu-id="caf9f-329">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-329">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-330">任意の数値</span><span class="sxs-lookup"><span data-stu-id="caf9f-330">Any numeric value</span></span>|<span data-ttu-id="caf9f-331">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="caf9f-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="caf9f-332">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="caf9f-333">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-334">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-335">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-335">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-336">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-336">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-337">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-337">Required.</span>
          </span>
          <span data-ttu-id="caf9f-338">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-338">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-339">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-339">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-340">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-340">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-341">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-342">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="caf9f-342">If `Number` is</span></span>|<span data-ttu-id="caf9f-343">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="caf9f-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-344">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-344">Empty</span></span>|<span data-ttu-id="caf9f-345">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-345">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-346">任意の数値</span><span class="sxs-lookup"><span data-stu-id="caf9f-346">Any numeric value</span></span>|<span data-ttu-id="caf9f-347">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="caf9f-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="caf9f-348">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="caf9f-349">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-350">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-351">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-351">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-352">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-352">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-353">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-353">Required.</span>
          </span>
          <span data-ttu-id="caf9f-354">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-354">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-355">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-355">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-356">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-356">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-357">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-358">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="caf9f-358">If `Number` is</span></span>|<span data-ttu-id="caf9f-359">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="caf9f-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-360">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-360">Empty</span></span>|<span data-ttu-id="caf9f-361">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-361">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-362">任意の数値</span><span class="sxs-lookup"><span data-stu-id="caf9f-362">Any numeric value</span></span>|<span data-ttu-id="caf9f-363">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="caf9f-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="caf9f-364">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="caf9f-365">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-366">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-367">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-367">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-368">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-368">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-369">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-369">Required.</span>
          </span>
          <span data-ttu-id="caf9f-370">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-370">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-371">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-371">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-372">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-372">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-373">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-374">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="caf9f-374">If `Number` is</span></span>|<span data-ttu-id="caf9f-375">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="caf9f-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-376">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-376">Empty</span></span>|<span data-ttu-id="caf9f-377">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-377">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-378">任意の数値</span><span class="sxs-lookup"><span data-stu-id="caf9f-378">Any numeric value</span></span>|<span data-ttu-id="caf9f-379">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="caf9f-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="caf9f-380">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="caf9f-381">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-382">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-383">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-383">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-384">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-384">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-385">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-385">Required.</span>
          </span>
          <span data-ttu-id="caf9f-386">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-387">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-388">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-389">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-390">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="caf9f-390">If `Number` is</span></span>|<span data-ttu-id="caf9f-391">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="caf9f-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-392">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-392">Empty</span></span>|<span data-ttu-id="caf9f-393">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-393">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-394">任意の数値</span><span class="sxs-lookup"><span data-stu-id="caf9f-394">Any numeric value</span></span>|<span data-ttu-id="caf9f-395">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="caf9f-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="caf9f-396">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="caf9f-397">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-398">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-399">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-400">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-401">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-401">Required.</span>
          </span>
          <span data-ttu-id="caf9f-402">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-402">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-403">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-403">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-404">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-404">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-405">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-406">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="caf9f-406">If `Number` is</span></span>|<span data-ttu-id="caf9f-407">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="caf9f-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-408">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-408">Empty</span></span>|<span data-ttu-id="caf9f-409">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-409">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-410">任意の数値</span><span class="sxs-lookup"><span data-stu-id="caf9f-410">Any numeric value</span></span>|<span data-ttu-id="caf9f-411">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="caf9f-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="caf9f-412">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="caf9f-413">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-414">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-415">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-415">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-416">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-416">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-417">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-417">Required.</span>
          </span>
          <span data-ttu-id="caf9f-418">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-418">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-419">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-419">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-420">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-420">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-421">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-422">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="caf9f-422">If `Number` is</span></span>|<span data-ttu-id="caf9f-423">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="caf9f-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-424">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-424">Empty</span></span>|<span data-ttu-id="caf9f-425">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-425">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-426">任意の数値</span><span class="sxs-lookup"><span data-stu-id="caf9f-426">Any numeric value</span></span>|<span data-ttu-id="caf9f-427">最大 16 の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="caf9f-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="caf9f-428">適切な範囲内の数値の前に、直接の 16 進数値を表すことができます`&H`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="caf9f-429">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-430">この例では、`Hex`数値の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-431">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-431">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-432">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-432">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="caf9f-433">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-433">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-434">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-434">Required.</span>
          </span>
          <span data-ttu-id="caf9f-435">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-435">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-436">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-437">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-437">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-438">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-438">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-439">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-440">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-441">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-442">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-443">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-444">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-445">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-446">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-447">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-448">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-449">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-450">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-451">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-452">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-452">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-453">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-453">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-454">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-454">Required.</span>
          </span>
          <span data-ttu-id="caf9f-455">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-455">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-456">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-457">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-457">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-458">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-458">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-459">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-460">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-461">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-462">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-463">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-464">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-465">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-466">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-467">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-468">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-469">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-470">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-471">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-472">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-472">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-473">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-473">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-474">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-474">Required.</span>
          </span>
          <span data-ttu-id="caf9f-475">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-475">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-476">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-477">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-477">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-478">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-478">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-479">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-480">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-481">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-482">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-483">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-484">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-485">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-486">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-487">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-488">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-489">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-490">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-491">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-492">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-492">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-493">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-493">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-494">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-494">Required.</span>
          </span>
          <span data-ttu-id="caf9f-495">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-496">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-497">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-498">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-499">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-500">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-501">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-502">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-503">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-504">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-505">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-506">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-507">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-508">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-509">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-510">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-511">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-512">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-513">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-514">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-514">Required.</span>
          </span>
          <span data-ttu-id="caf9f-515">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-515">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-516">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-517">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-517">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-518">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-518">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-519">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-520">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-521">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-522">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-523">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-524">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-525">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-526">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-527">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-528">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-529">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-530">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-531">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-532">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-532">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-533">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-533">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-534">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-534">Required.</span>
          </span>
          <span data-ttu-id="caf9f-535">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-535">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-536">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-537">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-537">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-538">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-538">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-539">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-540">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-541">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-542">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-543">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-544">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-545">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-546">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-547">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-548">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-549">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-550">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-551">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-552">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-552">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-553">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-553">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-554">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-554">Required.</span>
          </span>
          <span data-ttu-id="caf9f-555">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-555">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="caf9f-556">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-557">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-557">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-558">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-558">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-559">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="caf9f-560">間の差`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`に等しいまたはそれよりも小さい負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="caf9f-561">たとえば、 `Int` -9、-8.4 と`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="caf9f-562">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="caf9f-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-563">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="caf9f-564">負の数の引数の場合、`Int`関数負の値の整数を返します。 数未満、`Fix`関数は数に等しいかより大きい負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="caf9f-565">次の例では、指定する必要があります`Option Strict Off`から暗黙的な変換型`Double`入力`Integer`は許可されていません`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="caf9f-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="caf9f-566">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="caf9f-567">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="caf9f-568">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="caf9f-569">使用することができます、`CInt`関数の呼び出しの結果を`Fix`または`Int`丸められずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="caf9f-570">例:</span><span class="sxs-lookup"><span data-stu-id="caf9f-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="caf9f-571">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-572">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-572">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-573">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-573">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="caf9f-574">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-574">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-575">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-575">Required.</span>
          </span>
          <span data-ttu-id="caf9f-576">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-576">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-577">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-577">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-578">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-578">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-579">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-580">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="caf9f-580">If Number is</span></span>|<span data-ttu-id="caf9f-581">月を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-582">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-582">Empty</span></span>|<span data-ttu-id="caf9f-583">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-583">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-584">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="caf9f-584">Any other number</span></span>|<span data-ttu-id="caf9f-585">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="caf9f-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="caf9f-586">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="caf9f-587">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-588">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-589">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-589">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-590">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-590">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-591">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-591">Required.</span>
          </span>
          <span data-ttu-id="caf9f-592">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-592">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-593">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-593">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-594">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-594">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-595">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-596">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="caf9f-596">If Number is</span></span>|<span data-ttu-id="caf9f-597">月を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-598">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-598">Empty</span></span>|<span data-ttu-id="caf9f-599">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-599">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-600">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="caf9f-600">Any other number</span></span>|<span data-ttu-id="caf9f-601">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="caf9f-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="caf9f-602">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="caf9f-603">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-604">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-605">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-605">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-606">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-606">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-607">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-607">Required.</span>
          </span>
          <span data-ttu-id="caf9f-608">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-608">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-609">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-609">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-610">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-610">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-611">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-612">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="caf9f-612">If Number is</span></span>|<span data-ttu-id="caf9f-613">月を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-614">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-614">Empty</span></span>|<span data-ttu-id="caf9f-615">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-615">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-616">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="caf9f-616">Any other number</span></span>|<span data-ttu-id="caf9f-617">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="caf9f-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="caf9f-618">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="caf9f-619">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-620">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-621">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-621">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-622">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-622">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-623">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-623">Required.</span>
          </span>
          <span data-ttu-id="caf9f-624">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-624">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-625">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-625">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-626">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-626">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-627">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-628">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="caf9f-628">If Number is</span></span>|<span data-ttu-id="caf9f-629">月を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-630">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-630">Empty</span></span>|<span data-ttu-id="caf9f-631">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-631">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-632">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="caf9f-632">Any other number</span></span>|<span data-ttu-id="caf9f-633">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="caf9f-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="caf9f-634">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="caf9f-635">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-636">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-637">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-637">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-638">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-638">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-639">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-639">Required.</span>
          </span>
          <span data-ttu-id="caf9f-640">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-640">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-641">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-641">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-642">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-642">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-643">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-644">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="caf9f-644">If Number is</span></span>|<span data-ttu-id="caf9f-645">月を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-646">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-646">Empty</span></span>|<span data-ttu-id="caf9f-647">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-647">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-648">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="caf9f-648">Any other number</span></span>|<span data-ttu-id="caf9f-649">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="caf9f-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="caf9f-650">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="caf9f-651">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-652">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-653">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-653">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-654">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-654">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-655">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-655">Required.</span>
          </span>
          <span data-ttu-id="caf9f-656">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-656">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-657">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-657">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-658">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-658">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-659">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-660">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="caf9f-660">If Number is</span></span>|<span data-ttu-id="caf9f-661">月を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-662">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-662">Empty</span></span>|<span data-ttu-id="caf9f-663">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-663">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-664">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="caf9f-664">Any other number</span></span>|<span data-ttu-id="caf9f-665">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="caf9f-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="caf9f-666">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="caf9f-667">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-668">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-669">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-669">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-670">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-670">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-671">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-671">Required.</span>
          </span>
          <span data-ttu-id="caf9f-672">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-672">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-673">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-673">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-674">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-674">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-675">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-676">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="caf9f-676">If Number is</span></span>|<span data-ttu-id="caf9f-677">月を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-678">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-678">Empty</span></span>|<span data-ttu-id="caf9f-679">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-679">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-680">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="caf9f-680">Any other number</span></span>|<span data-ttu-id="caf9f-681">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="caf9f-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="caf9f-682">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="caf9f-683">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-684">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-685">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-685">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-686">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-686">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-687">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-687">Required.</span>
          </span>
          <span data-ttu-id="caf9f-688">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-688">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-689">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-689">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-690">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-690">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-691">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-692">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="caf9f-692">If Number is</span></span>|<span data-ttu-id="caf9f-693">月を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-694">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-694">Empty</span></span>|<span data-ttu-id="caf9f-695">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-695">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-696">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="caf9f-696">Any other number</span></span>|<span data-ttu-id="caf9f-697">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="caf9f-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="caf9f-698">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="caf9f-699">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-700">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-701">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-701">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-702">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-702">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-703">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-703">Required.</span>
          </span>
          <span data-ttu-id="caf9f-704">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-704">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-705">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-705">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-706">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-706">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-707">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="caf9f-708">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="caf9f-708">If Number is</span></span>|<span data-ttu-id="caf9f-709">月を返します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="caf9f-710">Empty</span><span class="sxs-lookup"><span data-stu-id="caf9f-710">Empty</span></span>|<span data-ttu-id="caf9f-711">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="caf9f-711">Zero (0)</span></span>|  
|<span data-ttu-id="caf9f-712">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="caf9f-712">Any other number</span></span>|<span data-ttu-id="caf9f-713">8 進文字の最大 22</span><span class="sxs-lookup"><span data-stu-id="caf9f-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="caf9f-714">適切な範囲内の数値の前に、直接、8 進数を表すことができます`&O`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="caf9f-715">たとえば、`&O10`は 10 進数の 8 進数で表記します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-716">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-717">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-717">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-718">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-718">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="caf9f-719">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-719">Required.</span>
          </span>
          <span data-ttu-id="caf9f-720">任意の有効な数式を含む <see langword="Object" /> 型の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-720">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-721">数値を表す <see langword="String" /> 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-721">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-722">数値を表す <see langword="String" /> 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-722">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-723">数値が文字列に変換されると、先頭を空白の符号は常に予約されています`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="caf9f-724">場合`Number`が正、返される文字列に先頭にスペースが含まれていて、プラス記号が暗黙的に指定します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="caf9f-725">負の数には、マイナス記号 (-) と先頭領域がありませんが含まれます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="caf9f-726">使用して、`Format`またはその他のユーザー定義の形式で日付、時刻、または通貨として書式設定する数値の値に変換する関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="caf9f-727">異なり、`Str`関数の場合、`Format`関数では、符号の先頭領域は含まれません`Number`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="caf9f-728">`Str`関数は、ピリオドのみを認識 (`.`) 有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="caf9f-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="caf9f-729">(たとえば、国際対応のアプリケーションで別の 10 進区切り記号を使用する場合は、使用、`CStr`または`Format`数値文字列に変換する関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="caf9f-730">特定のカルチャの数値の文字列形式を取得するには、数値を使用`ToString(IFormatProvider)`メソッド。</span><span class="sxs-lookup"><span data-stu-id="caf9f-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="caf9f-731">たとえば、使用して<xref:System.Double.ToString%2A>型の値を変換するときに`Double`文字列にします。</span><span class="sxs-lookup"><span data-stu-id="caf9f-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-732">この例では、`Str`を返す関数、`String`数値の形式。</span><span class="sxs-lookup"><span data-stu-id="caf9f-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="caf9f-733">正の数値が文字列に変換されると、先頭領域は、符号を常に予約されています。</span><span class="sxs-lookup"><span data-stu-id="caf9f-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="caf9f-734">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-734">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="caf9f-735">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-735">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="caf9f-736">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="caf9f-737">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-737">Required.</span>
          </span>
          <span data-ttu-id="caf9f-738">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="caf9f-739">
            <c>Expression</c> が <see langword="Object" /> 型の場合、その値が <see langword="String" /> に変換できる必要があります。できない場合は <see cref="T:System.ArgumentException" /> エラーが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-740">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-741">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-742">`Val`関数は、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="caf9f-743">シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="caf9f-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="caf9f-744">ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の 8 進数) と`&H`(の 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="caf9f-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="caf9f-745">引数からは、空白、タブ、および改行文字が取り除かれます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="caf9f-746">次の呼び出しには、1615198 という値が返されます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="caf9f-747">次の呼び出しには、10 進値-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="caf9f-748">`Val`関数は、ピリオドのみを認識 (`.`) 有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="caf9f-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="caf9f-749">国際対応のアプリケーションと同様に、別の 10 進区切り記号が使用すると使用`CDbl`または`CInt`代わりに、文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="caf9f-750">特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して、`Parse(String, IFormatProvider)`メソッド。</span><span class="sxs-lookup"><span data-stu-id="caf9f-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="caf9f-751">たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=nameWithType>を文字列に変換するときに、`Double`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="caf9f-752"><xref:System.InvalidCastException>特定一般的でない数値形式への応答で例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="caf9f-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="caf9f-753">たとえば、次のコードは、この例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="caf9f-754">として書式設定された数の間で競合を`Double`と`Integer`と`Long`型文字は、文字列内に含まれているしない場合、コンパイラによって捕捉されるはずです。</span><span class="sxs-lookup"><span data-stu-id="caf9f-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-755">次の例では、`Val`を各文字列に含まれる数値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="caf9f-756">`Val` 最初の数字、数値の修飾子、数値区切り記号、または空白文字として解釈できない文字に変換するには停止します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="caf9f-757">
            <paramref name="InputStr" /> が大きすぎます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-757">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-758">
            <paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-758">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="caf9f-759">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-759">Required.</span>
          </span>
          <span data-ttu-id="caf9f-760">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="caf9f-761">
            <c>Expression</c> が <see langword="Object" /> 型の場合、その値が <see langword="String" /> に変換できる必要があります。できない場合は <see cref="T:System.ArgumentException" /> エラーが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-762">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-763">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-764">`Val`関数は、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="caf9f-765">シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="caf9f-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="caf9f-766">ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の 8 進数) と`&H`(の 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="caf9f-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="caf9f-767">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="caf9f-768">次の呼び出しには、値 1234123 を返しますが返されます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="caf9f-769">次の呼び出しには、10 進値-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="caf9f-770">`Val`関数は、ピリオドのみを認識 (`.`) 有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="caf9f-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="caf9f-771">国際対応のアプリケーションと同様に、その他の 10 進数の区切り記号を使用する場合を使用して、`CDbl`または`CInt`代わりに、文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="caf9f-772">特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して、`Parse(String, IFormatProvider)`メソッド。</span><span class="sxs-lookup"><span data-stu-id="caf9f-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="caf9f-773">たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=nameWithType>を文字列に変換するときに、`Double`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="caf9f-774"><xref:System.InvalidCastException>特定一般的でない数値形式への応答で例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="caf9f-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="caf9f-775">たとえば、次のコードは、この例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="caf9f-776">として書式設定された数の間で競合を`Double`と`Integer`と`Long`型文字は、競合は、文字列に含まれていなかった場合、コンパイラによって捕捉されるはずです。</span><span class="sxs-lookup"><span data-stu-id="caf9f-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-777">次の例では、`Val`を各文字列に含まれる数値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="caf9f-778">`Val` 最初の数字、数値の修飾子、数値区切り記号、または空白文字として解釈できない文字に変換するには停止します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="caf9f-779">
            <paramref name="InputStr" /> が大きすぎます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-779">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-780">
            <paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-780">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="caf9f-781">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-781">Required.</span>
          </span>
          <span data-ttu-id="caf9f-782">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="caf9f-783">
            <c>Expression</c> が <see langword="Object" /> 型の場合、その値が <see langword="String" /> に変換できる必要があります。できない場合は <see cref="T:System.ArgumentException" /> エラーが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="caf9f-784">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="caf9f-785">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="caf9f-786">`Val`関数は、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="caf9f-787">シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="caf9f-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="caf9f-788">ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の 8 進数) と`&H`(の 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="caf9f-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="caf9f-789">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="caf9f-790">次の呼び出しには、値 1234123 を返しますが返されます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="caf9f-791">次の呼び出しには、10 進値-1 が返されます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="caf9f-792">`Val`関数は、ピリオドのみを認識 (`.`) 有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="caf9f-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="caf9f-793">国際対応のアプリケーションと同様に、その他の 10 進数の区切り記号を使用する場合を使用して、`CDbl`または`CInt`代わりに、文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="caf9f-794">特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して、`Parse(String, IFormatProvider)`メソッド。</span><span class="sxs-lookup"><span data-stu-id="caf9f-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="caf9f-795">たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=nameWithType>を文字列に変換するときに、`Double`します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="caf9f-796"><xref:System.InvalidCastException>特定一般的でない数値形式への応答で例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="caf9f-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="caf9f-797">たとえば、次のコードは、この例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="caf9f-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="caf9f-798">として書式設定された数の間で競合を`Double`と`Integer`と`Long`型文字は、競合は、文字列に含まれていなかった場合、コンパイラによって捕捉されるはずです。</span><span class="sxs-lookup"><span data-stu-id="caf9f-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="caf9f-799">次の例では、`Val`を各文字列に含まれる数値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="caf9f-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="caf9f-800">`Val` 最初の数字、数値の修飾子、数値区切り記号、または空白文字として解釈できない文字に変換するには停止します。</span><span class="sxs-lookup"><span data-stu-id="caf9f-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="caf9f-801">
            <paramref name="InputStr" /> が大きすぎます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-801">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="caf9f-802">
            <paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="caf9f-802">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>