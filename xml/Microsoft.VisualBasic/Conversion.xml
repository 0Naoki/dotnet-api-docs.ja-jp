<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a25845144db4c8ac809233e618e67a229b8c9446" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65156353" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="fffa9-101"><see langword="Conversion" /> モジュールに含まれるプロシージャを使って、さまざまな変換演算を実行します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-102">このモジュールは Visual Basic 言語キーワードとランタイムライブラリメンバーをサポートしています。このメンバーは、10進数を他の基数、数値から文字列、数値に変換し、1つのデータ型を別の型に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-103">この例では`Hex` 、関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-104">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="fffa9-105">キーワード (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="fffa9-106">ランタイムライブラリのメンバーの Visual Basic</span><span class="sxs-lookup"><span data-stu-id="fffa9-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="fffa9-107">変換対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fffa9-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="fffa9-108">変換後のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="fffa9-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="fffa9-109">オブジェクトを指定された型に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="fffa9-110">実行時の種類が要求されたターゲットの種類であるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fffa9-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-111">メソッド`CTypeDynamic`は、パラメーター `Expression`として渡されたオブジェクトを、 `TargetType`パラメーターによって指定された型に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="fffa9-112">オブジェクトが動的オブジェクトの場合、メソッドは`CTypeDynamic`使用可能な動的変換を適用します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="fffa9-113">メソッド`CTypeDynamic`は、オブジェクト自体によって定義された変換セマンティクスに従って、動的変換を適用します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="fffa9-114">動的オブジェクトがから<xref:System.Dynamic.DynamicObject>継承する場合、メソッドは`CTypeDynamic`最初にユーザー定義の静的な変換を使用して変換を実行しようとします。</span><span class="sxs-lookup"><span data-stu-id="fffa9-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="fffa9-115">ユーザー定義の静的変換が失敗した場合、 `CTypeDynamic`メソッドは動的変換を使用して変換を実行しようとします。</span><span class="sxs-lookup"><span data-stu-id="fffa9-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="fffa9-116">動的オブジェクトがを実装<xref:System.Dynamic.IDynamicMetaObjectProvider>して`CTypeDynamic`いる場合、メソッドは、ユーザー定義の静的変換を使用した動的変換に優先します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-117">次の例では`CTypeDynamic` 、メソッドを使用して、動的オブジェクトによって定義された変換を使用して、動的オブジェクトを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="fffa9-118">動的オブジェクトの使用 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="fffa9-119">チュートリアル: 動的オブジェクトの作成と使用 (C# および Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="fffa9-120">変換後のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="fffa9-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="fffa9-121">変換対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fffa9-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="fffa9-122">指定したジェネリック型にオブジェクトを変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="fffa9-123">要求されたジェネリック型として静的に型指定されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="fffa9-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-124">メソッド`CTypeDynamic`は、 `Expression`パラメーターとして渡されたオブジェクトを、ジェネリックパラメーターの型によって指定された型に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="fffa9-125">オブジェクトが動的オブジェクトの場合、メソッドは`CTypeDynamic`使用可能な動的変換を適用します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="fffa9-126">メソッド`CTypeDynamic`は、オブジェクト自体によって定義された変換セマンティクスに従って、動的変換を適用します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="fffa9-127">動的オブジェクトがから<xref:System.Dynamic.DynamicObject>継承する場合、メソッドは`CTypeDynamic`最初にユーザー定義の静的な変換を使用して変換を実行しようとします。</span><span class="sxs-lookup"><span data-stu-id="fffa9-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="fffa9-128">ユーザー定義の静的変換が失敗した場合、 `CTypeDynamic`メソッドは動的変換を使用して変換を実行しようとします。</span><span class="sxs-lookup"><span data-stu-id="fffa9-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="fffa9-129">動的オブジェクトがを実装<xref:System.Dynamic.IDynamicMetaObjectProvider>して`CTypeDynamic`いる場合、メソッドは、ユーザー定義の静的変換を使用した動的変換に優先します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-130">次の例では`CTypeDynamic` 、メソッドを使用して、動的オブジェクトによって定義された変換を使用して、動的オブジェクトを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="fffa9-131">動的オブジェクトの使用 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="fffa9-132">チュートリアル: 動的オブジェクトの作成と使用 (C# および Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fffa9-133">特定のエラー番号に対応するエラー メッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fffa9-134">特定のエラー番号に対応するエラー メッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-135">直前の実行時エラーに対応するエラー メッセージ。</span><span class="sxs-lookup"><span data-stu-id="fffa9-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-136">関数`ErrorToString`は、 `Err`オブジェクトのプロパティ設定を調べて、最新の実行時エラーを識別します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="fffa9-137">`ErrorToString`関数の戻り値は、 `Err`オブジェクトの`Description`プロパティに対応します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="fffa9-138">実行時エラーが発生しなかった場合`ErrorToString` 、は長さ0の文字列 ("") を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="fffa9-139">Visual Basic バージョン6.0 以前では、この機能は`Error`関数によって提供されていました。</span><span class="sxs-lookup"><span data-stu-id="fffa9-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-140">次のコードでは`ErrorToString` 、関数を使用して、指定されたエラー番号に対応するエラーメッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-141">該当する <paramref name="ErrorNumber" /> がありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="fffa9-142">任意。</span><span class="sxs-lookup"><span data-stu-id="fffa9-142">Optional.</span></span> <span data-ttu-id="fffa9-143">有効なエラー番号。</span><span class="sxs-lookup"><span data-stu-id="fffa9-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="fffa9-144">特定のエラー番号に対応するエラー メッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-145">特定のエラー番号に対応するエラー メッセージ。</span><span class="sxs-lookup"><span data-stu-id="fffa9-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-146">関数`ErrorToString`は、 `Err`オブジェクトのプロパティ設定を調べて、最新の実行時エラーを識別します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="fffa9-147">`ErrorToString`関数の戻り値は、 `Err`オブジェクトの`Description`プロパティに対応します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="fffa9-148">が有効なエラー番号ですが、が定義さ`ErrorToString`れていない`ErrorNumber`場合は、が有効でない場合は文字列`"Application-defined or object-defined error."`を返し、エラーが発生します。 `ErrorNumber`</span><span class="sxs-lookup"><span data-stu-id="fffa9-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="fffa9-149">を`ErrorNumber`省略した場合は、最新の実行時エラーに対応するメッセージが返されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="fffa9-150">実行時エラーが発生しなかった場合`ErrorNumber` 、または`ErrorToString`が0の場合は、長さ0の文字列 ("") を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="fffa9-151">Visual Basic バージョン6.0 以前では、この機能は`Error`関数によって提供されていました。</span><span class="sxs-lookup"><span data-stu-id="fffa9-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-152">次のコードでは`ErrorToString` 、関数を使用して、指定されたエラー番号に対応するエラーメッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-153">該当する <paramref name="ErrorNumber" /> がありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fffa9-154">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-155">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-155">Required.</span></span> <span data-ttu-id="fffa9-156"><see langword="Decimal" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-157">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-158">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-159">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-160">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-161">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-162">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="fffa9-163">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-164">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-165">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-166">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-167">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-168">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-169">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-170">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-171">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-172">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-173">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-174">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-175">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-176">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-177">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-178">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-179">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-179">Required.</span></span> <span data-ttu-id="fffa9-180"><see langword="Double" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-181">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-182">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-183">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-184">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-185">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-186">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="fffa9-187">Visual Basic 15.8 以降で`Double`は、 `Fix`メソッドによって返された値を任意の[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)に渡した場合、または値が`Double`返された場合、--整数変換のパフォーマンスが最適化されます。by `Fix`は、 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)がに`Off`設定された整数に暗黙的に変換されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="fffa9-188">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="fffa9-189">次の例は、このように最適化された変換を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="fffa9-190">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-191">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-192">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-193">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-194">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-195">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-196">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-197">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-198">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-199">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-200">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-201">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-202">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-203">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-204">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-205">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-206">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-206">Required.</span></span> <span data-ttu-id="fffa9-207"><see langword="Short" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-208">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-209">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-210">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-211">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-212">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-213">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-214">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-215">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-216">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-217">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-218">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-219">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-220">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-221">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-222">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-223">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-224">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-225">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-226">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-227">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-228">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-229">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-230">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-230">Required.</span></span> <span data-ttu-id="fffa9-231"><see langword="Integer" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-232">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-233">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-234">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-235">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-236">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-237">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-238">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-239">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-240">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-241">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-242">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-243">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-244">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-245">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-246">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-247">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-248">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-249">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-250">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-251">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-252">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-253">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-254">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-254">Required.</span></span> <span data-ttu-id="fffa9-255"><see langword="Long" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-256">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-257">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-258">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-259">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-260">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-261">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-262">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-263">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-264">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-265">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-266">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-267">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-268">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-269">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-270">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-271">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-272">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-273">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-274">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-275">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-276">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-277">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-278">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-278">Required.</span></span> <span data-ttu-id="fffa9-279"><see langword="Object" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="fffa9-280"><paramref name="Number" /> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="fffa9-281">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-282">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-283">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-284">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-285">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-286">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="fffa9-287">Visual Basic 15.8 以降`Number`では、引数がランタイム型が`Double`または`Single`のオブジェクトである場合、によって`Fix`返された値を渡すと、浮動小数点から整数への変換のパフォーマンスが最適化されます。任意の[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)へのメソッド。によって`Fix`返される値が、 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)が Off に設定された整数に自動的に変換される場合は。</span><span class="sxs-lookup"><span data-stu-id="fffa9-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="fffa9-288">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="fffa9-289">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="fffa9-290">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-291">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-292">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-293">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-294">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-295">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-296">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-297">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-298">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-299">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-300">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-301">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-302">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-303">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-304">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-305">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-306">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-306">Required.</span></span> <span data-ttu-id="fffa9-307"><see langword="Single" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-308">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-309">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-310">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-311">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-312">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-313">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="fffa9-314">Visual Basic 15.8 以降で`Single`は、 `Fix`メソッドによって返された値を任意の[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)に渡した場合、または値が`Single`返された場合、--整数変換のパフォーマンスが最適化されます。by `Fix`は、 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)が Off に設定された整数に自動的に変換されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="fffa9-315">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="fffa9-316">次の例は、このように最適化された変換を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="fffa9-317">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-318">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-319">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-320">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-321">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-322">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-323">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-324">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-325">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-326">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-327">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-328">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-329">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-330">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-331">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-332">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fffa9-333">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-334">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-334">Required.</span></span> <span data-ttu-id="fffa9-335">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-336">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-337">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-338">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-339">が`Number`の場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-339">If `Number` is</span></span>|<span data-ttu-id="fffa9-340">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-341">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-341">Empty</span></span>|<span data-ttu-id="fffa9-342">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-342">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-343">任意の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-343">Any numeric value</span></span>|<span data-ttu-id="fffa9-344">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="fffa9-345">を使用して、適切な`&H`範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="fffa9-346">たとえば、は`&H10` 16 進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-347">この例では`Hex` 、関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-348"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-349"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-350">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="fffa9-351">方法: 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="fffa9-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-352">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-352">Required.</span></span> <span data-ttu-id="fffa9-353">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-354">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-355">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-356">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-357">が`Number`の場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-357">If `Number` is</span></span>|<span data-ttu-id="fffa9-358">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-359">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-359">Empty</span></span>|<span data-ttu-id="fffa9-360">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-360">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-361">任意の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-361">Any numeric value</span></span>|<span data-ttu-id="fffa9-362">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="fffa9-363">を使用して、適切な`&H`範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="fffa9-364">たとえば、は`&H10` 16 進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-365">この例では`Hex` 、関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-366"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-367"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-368">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="fffa9-369">方法: 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="fffa9-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-370">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-370">Required.</span></span> <span data-ttu-id="fffa9-371">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-372">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-373">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-374">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-375">が`Number`の場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-375">If `Number` is</span></span>|<span data-ttu-id="fffa9-376">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-377">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-377">Empty</span></span>|<span data-ttu-id="fffa9-378">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-378">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-379">任意の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-379">Any numeric value</span></span>|<span data-ttu-id="fffa9-380">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="fffa9-381">を使用して、適切な`&H`範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="fffa9-382">たとえば、は`&H10` 16 進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-383">この例では`Hex` 、関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-384"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-385"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-386">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="fffa9-387">方法: 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="fffa9-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-388">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-388">Required.</span></span> <span data-ttu-id="fffa9-389">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-390">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-391">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-392">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-393">が`Number`の場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-393">If `Number` is</span></span>|<span data-ttu-id="fffa9-394">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-395">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-395">Empty</span></span>|<span data-ttu-id="fffa9-396">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-396">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-397">任意の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-397">Any numeric value</span></span>|<span data-ttu-id="fffa9-398">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="fffa9-399">を使用して、適切な`&H`範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="fffa9-400">たとえば、は`&H10` 16 進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-401">この例では`Hex` 、関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-402"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-403"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-404">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="fffa9-405">方法: 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="fffa9-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-406">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-406">Required.</span></span> <span data-ttu-id="fffa9-407">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-408">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-409">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-410">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-411">が`Number`の場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-411">If `Number` is</span></span>|<span data-ttu-id="fffa9-412">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-413">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-413">Empty</span></span>|<span data-ttu-id="fffa9-414">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-414">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-415">任意の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-415">Any numeric value</span></span>|<span data-ttu-id="fffa9-416">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="fffa9-417">を使用して、適切な`&H`範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="fffa9-418">たとえば、は`&H10` 16 進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-419">この例では`Hex` 、関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-420"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-421"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-422">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="fffa9-423">方法: 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="fffa9-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-424">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-424">Required.</span></span> <span data-ttu-id="fffa9-425">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-426">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-427">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-428">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-429">が`Number`の場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-429">If `Number` is</span></span>|<span data-ttu-id="fffa9-430">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-431">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-431">Empty</span></span>|<span data-ttu-id="fffa9-432">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-432">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-433">任意の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-433">Any numeric value</span></span>|<span data-ttu-id="fffa9-434">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="fffa9-435">を使用して、適切な`&H`範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="fffa9-436">たとえば、は`&H10` 16 進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-437">この例では`Hex` 、関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-438"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-439"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-440">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="fffa9-441">方法: 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="fffa9-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-442">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-442">Required.</span></span> <span data-ttu-id="fffa9-443">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-444">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-445">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-446">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-447">が`Number`の場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-447">If `Number` is</span></span>|<span data-ttu-id="fffa9-448">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-449">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-449">Empty</span></span>|<span data-ttu-id="fffa9-450">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-450">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-451">任意の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-451">Any numeric value</span></span>|<span data-ttu-id="fffa9-452">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="fffa9-453">を使用して、適切な`&H`範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="fffa9-454">たとえば、は`&H10` 16 進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-455">この例では`Hex` 、関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-456"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-457"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-458">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="fffa9-459">方法: 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="fffa9-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-460">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-460">Required.</span></span> <span data-ttu-id="fffa9-461">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-462">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-463">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-464">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-465">が`Number`の場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-465">If `Number` is</span></span>|<span data-ttu-id="fffa9-466">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-467">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-467">Empty</span></span>|<span data-ttu-id="fffa9-468">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-468">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-469">任意の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-469">Any numeric value</span></span>|<span data-ttu-id="fffa9-470">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="fffa9-471">を使用して、適切な`&H`範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="fffa9-472">たとえば、は`&H10` 16 進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-473">この例では`Hex` 、関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-474"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-475"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-476">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="fffa9-477">方法: 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="fffa9-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-478">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-478">Required.</span></span> <span data-ttu-id="fffa9-479">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-480">数値の 16 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-481">数値の 16 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-482">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-483">が`Number`の場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-483">If `Number` is</span></span>|<span data-ttu-id="fffa9-484">16進数の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-485">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-485">Empty</span></span>|<span data-ttu-id="fffa9-486">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-486">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-487">任意の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-487">Any numeric value</span></span>|<span data-ttu-id="fffa9-488">16文字までの16進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="fffa9-489">を使用して、適切な`&H`範囲内の数値を前に指定することで、16進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="fffa9-490">たとえば、は`&H10` 16 進数表記の10進数16進数を表します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-491">この例では`Hex` 、関数を使用して、数値の16進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-492"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-493"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-494">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="fffa9-495">方法: 16 進文字列を数値に変換する</span><span class="sxs-lookup"><span data-stu-id="fffa9-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fffa9-496">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-497">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-497">Required.</span></span> <span data-ttu-id="fffa9-498"><see langword="Decimal" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-499">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-500">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-501">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-502">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-503">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-504">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="fffa9-505">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-506">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-507">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-508">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-509">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-510">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-511">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-512">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-513">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-514">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-515">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-516">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-517">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-518">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-519">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-520">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-521">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-521">Required.</span></span> <span data-ttu-id="fffa9-522"><see langword="Double" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-523">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-524">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-525">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-526">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-527">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-528">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="fffa9-529">Visual Basic 15.8 以降では、 `Int`メソッドによって返された値を任意の[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)に渡した場合、またはによって`Int`返された double 値がの場合に、倍精度整数変換のパフォーマンスが最適化されます。は、 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)が Off に設定されている整数に自動的に変換されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="fffa9-530">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="fffa9-531">次の例は、このように最適化された変換を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="fffa9-532">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-533">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-534">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-535">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-536">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-537">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-538">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-539">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-540">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-541">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-542">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-543">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-544">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-545">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-546">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-547">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-548">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-548">Required.</span></span> <span data-ttu-id="fffa9-549"><see langword="Short" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-550">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-551">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-552">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-553">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-554">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-555">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-556">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-557">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-558">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-559">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-560">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-561">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-562">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-563">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-564">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-565">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-566">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-567">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-568">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-569">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-570">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-571">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-572">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-572">Required.</span></span> <span data-ttu-id="fffa9-573"><see langword="Integer" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-574">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-575">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-576">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-577">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-578">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-579">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-580">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-581">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-582">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-583">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-584">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-585">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-586">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-587">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-588">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-589">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-590">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-591">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-592">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-593">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-594">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-595">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-596">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-596">Required.</span></span> <span data-ttu-id="fffa9-597"><see langword="Long" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-598">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-599">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-600">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-601">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-602">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-603">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-604">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-605">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-606">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-607">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-608">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-609">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-610">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-611">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-612">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-613">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-614">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-615">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-616">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-617">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-618">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-619">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-620">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-620">Required.</span></span> <span data-ttu-id="fffa9-621"><see langword="Object" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="fffa9-622"><paramref name="Number" /> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="fffa9-623">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-624">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-625">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-626">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-627">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-628">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="fffa9-629">Visual Basic 15.8 以降`Number`では、引数がランタイム型が`Double`または`Single`のオブジェクトである場合、によって`Int`返された値を渡すと、浮動小数点から整数への変換のパフォーマンスが最適化されます。任意の[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)へのメソッド。によって`Int`返される値が、 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)が Off に設定された整数に自動的に変換される場合は。</span><span class="sxs-lookup"><span data-stu-id="fffa9-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="fffa9-630">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="fffa9-631">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="fffa9-632">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-633">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-634">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-635">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-636">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-637">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-638">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-639">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-640">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-641">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-642">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-643">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-644">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-645">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-646">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-647">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-648">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-648">Required.</span></span> <span data-ttu-id="fffa9-649"><see langword="Single" /> 型の数字または任意の有効な数式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-650">数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-651">数値の整数部分。</span><span class="sxs-lookup"><span data-stu-id="fffa9-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-652">関数と`Int` `Fix`関数は、の`Number`小数部分を削除し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="fffa9-653">関数`Int`と`Fix` `Number` `Number` `Int`関数の違いは、が負の値の場合は、以下の最初の負の整数が返されますが、は最初の負の整数を返します。 `Fix``Number`以上。</span><span class="sxs-lookup"><span data-stu-id="fffa9-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="fffa9-654">たとえば、は`Int` -8.4 を-9 に変換し`Fix` 、-8.4 を-8 に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="fffa9-655">`Fix(number)`はと同じです。`Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="fffa9-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="fffa9-656">Visual Basic 15.8 以降で`Single`は、 `Int`メソッドによって返された値を任意の[整数変換関数](~/docs/visual-basic/language-reference/functions/conversion-functions.md)に渡した場合、または値が`Single`返された場合、--整数変換のパフォーマンスが最適化されます。by `Int`は、 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md)が Off に設定された整数に自動的に変換されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="fffa9-657">この最適化によって、コードをより速く実行できます。大きい数値の整数型への変換を行うコードでは、最大で 2 倍速くなります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="fffa9-658">次の例は、このように最適化された変換を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="fffa9-659">この例は、関数`Int`と`Fix`関数が数値の整数部分を返す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="fffa9-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="fffa9-660">負の数値引数の場合、関数は`Int` 、数値以下の最初の負の整数を返します。この関数は`Fix` 、数値以上の最初の負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="fffa9-661">次の例では、型`Option Strict Off` `Double`から`Option Strict On`型`Integer`への暗黙的な変換が許可されていないため、を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="fffa9-662">関数を使用する`CInt`と、他のデータ型をで`Option Strict Off`型`Integer`に明示的に変換できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="fffa9-663">ただし、 `CInt`では、数値の小数部が切り捨てられるのではなく、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="fffa9-664">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="fffa9-665">`CInt`関数を使用すると、または`Int`を`Fix`呼び出した結果に対して、丸めを行わずに整数への明示的な変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="fffa9-666">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="fffa9-667">の`CInt`詳細については、「[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="fffa9-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-668">Number が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-669">Number が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-670">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="fffa9-671">データ型の概要 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="fffa9-672">数値演算の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="fffa9-673">数値演算関数 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="fffa9-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-674">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fffa9-675">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-676">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-676">Required.</span></span> <span data-ttu-id="fffa9-677">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-678">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-679">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-680">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-681">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-681">If Number is</span></span>|<span data-ttu-id="fffa9-682">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-683">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-683">Empty</span></span>|<span data-ttu-id="fffa9-684">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-684">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-685">その他の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-685">Any other number</span></span>|<span data-ttu-id="fffa9-686">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="fffa9-687">を使用すると、適切な`&O`範囲内の数値を前に指定して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="fffa9-688">たとえば、 `&O10`は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-689">この例では`Oct` 、関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-690"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-691"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-692">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-693">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-694">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-694">Required.</span></span> <span data-ttu-id="fffa9-695">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-696">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-697">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-698">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-699">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-699">If Number is</span></span>|<span data-ttu-id="fffa9-700">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-701">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-701">Empty</span></span>|<span data-ttu-id="fffa9-702">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-702">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-703">その他の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-703">Any other number</span></span>|<span data-ttu-id="fffa9-704">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="fffa9-705">を使用すると、適切な`&O`範囲内の数値を前に指定して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="fffa9-706">たとえば、 `&O10`は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-707">この例では`Oct` 、関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-708"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-709"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-710">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-711">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-712">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-712">Required.</span></span> <span data-ttu-id="fffa9-713">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-714">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-715">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-716">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-717">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-717">If Number is</span></span>|<span data-ttu-id="fffa9-718">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-719">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-719">Empty</span></span>|<span data-ttu-id="fffa9-720">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-720">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-721">その他の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-721">Any other number</span></span>|<span data-ttu-id="fffa9-722">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="fffa9-723">を使用すると、適切な`&O`範囲内の数値を前に指定して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="fffa9-724">たとえば、 `&O10`は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-725">この例では`Oct` 、関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-726"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-727"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-728">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-729">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-730">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-730">Required.</span></span> <span data-ttu-id="fffa9-731">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-732">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-733">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-734">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-735">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-735">If Number is</span></span>|<span data-ttu-id="fffa9-736">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-737">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-737">Empty</span></span>|<span data-ttu-id="fffa9-738">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-738">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-739">その他の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-739">Any other number</span></span>|<span data-ttu-id="fffa9-740">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="fffa9-741">を使用すると、適切な`&O`範囲内の数値を前に指定して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="fffa9-742">たとえば、 `&O10`は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-743">この例では`Oct` 、関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-744"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-745"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-746">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-747">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-748">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-748">Required.</span></span> <span data-ttu-id="fffa9-749">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-750">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-751">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-752">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-753">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-753">If Number is</span></span>|<span data-ttu-id="fffa9-754">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-755">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-755">Empty</span></span>|<span data-ttu-id="fffa9-756">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-756">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-757">その他の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-757">Any other number</span></span>|<span data-ttu-id="fffa9-758">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="fffa9-759">を使用すると、適切な`&O`範囲内の数値を前に指定して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="fffa9-760">たとえば、 `&O10`は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-761">この例では`Oct` 、関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-762"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-763"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-764">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-765">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-766">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-766">Required.</span></span> <span data-ttu-id="fffa9-767">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-768">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-769">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-770">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-771">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-771">If Number is</span></span>|<span data-ttu-id="fffa9-772">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-773">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-773">Empty</span></span>|<span data-ttu-id="fffa9-774">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-774">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-775">その他の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-775">Any other number</span></span>|<span data-ttu-id="fffa9-776">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="fffa9-777">を使用すると、適切な`&O`範囲内の数値を前に指定して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="fffa9-778">たとえば、 `&O10`は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-779">この例では`Oct` 、関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-780"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-781"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-782">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-783">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-784">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-784">Required.</span></span> <span data-ttu-id="fffa9-785">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-786">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-787">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-788">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-789">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-789">If Number is</span></span>|<span data-ttu-id="fffa9-790">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-791">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-791">Empty</span></span>|<span data-ttu-id="fffa9-792">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-792">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-793">その他の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-793">Any other number</span></span>|<span data-ttu-id="fffa9-794">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="fffa9-795">を使用すると、適切な`&O`範囲内の数値を前に指定して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="fffa9-796">たとえば、 `&O10`は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-797">この例では`Oct` 、関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-798"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-799"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-800">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-801">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-802">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-802">Required.</span></span> <span data-ttu-id="fffa9-803">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-804">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-805">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-806">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-807">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-807">If Number is</span></span>|<span data-ttu-id="fffa9-808">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-809">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-809">Empty</span></span>|<span data-ttu-id="fffa9-810">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-810">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-811">その他の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-811">Any other number</span></span>|<span data-ttu-id="fffa9-812">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="fffa9-813">を使用すると、適切な`&O`範囲内の数値を前に指定して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="fffa9-814">たとえば、 `&O10`は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-815">この例では`Oct` 、関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-816"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-817"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-818">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-819">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-820">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-820">Required.</span></span> <span data-ttu-id="fffa9-821">任意の有効な数式または <see langword="String" /> 型の式。</span><span class="sxs-lookup"><span data-stu-id="fffa9-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-822">数値の 8 進値を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-823">数値の 8 進値を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-824">が`Number`まだ整数でない場合は、評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="fffa9-825">Number がの場合</span><span class="sxs-lookup"><span data-stu-id="fffa9-825">If Number is</span></span>|<span data-ttu-id="fffa9-826">Oct の戻り値</span><span class="sxs-lookup"><span data-stu-id="fffa9-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="fffa9-827">Empty</span><span class="sxs-lookup"><span data-stu-id="fffa9-827">Empty</span></span>|<span data-ttu-id="fffa9-828">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="fffa9-828">Zero (0)</span></span>|  
|<span data-ttu-id="fffa9-829">その他の数値</span><span class="sxs-lookup"><span data-stu-id="fffa9-829">Any other number</span></span>|<span data-ttu-id="fffa9-830">最大22桁の8進数</span><span class="sxs-lookup"><span data-stu-id="fffa9-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="fffa9-831">を使用すると、適切な`&O`範囲内の数値を前に指定して、8進数を直接表すことができます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="fffa9-832">たとえば、 `&O10`は10進数8の8進数表記です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-833">この例では`Oct` 、関数を使用して、数値の8進数の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-834"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-835"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-836">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-837">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="fffa9-838">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-838">Required.</span></span> <span data-ttu-id="fffa9-839">任意の有効な数式を含む <see langword="Object" /> 型の値。</span><span class="sxs-lookup"><span data-stu-id="fffa9-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="fffa9-840">数値を表す <see langword="String" /> 型の値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="fffa9-841">数値の <see langword="String" /> 表現です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-842">数値を文字列に変換した場合、先頭のスペースは常にの`Number`符号に予約されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="fffa9-843">が`Number`正の値の場合、返される文字列には先頭のスペースが含まれ、正符号は暗黙的に指定されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="fffa9-844">負の値にはマイナス記号 (-) が含まれ、先頭にスペースは挿入されません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="fffa9-845">`Format`関数を使用して、日付、時刻、通貨、または他のユーザー定義形式で書式設定する数値を変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="fffa9-846">関数とは異なり、 `Format`関数には、の`Number`符号の先頭のスペースは含まれません。 `Str`</span><span class="sxs-lookup"><span data-stu-id="fffa9-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fffa9-847">関数`Str`は、有効な小数点`.`区切り記号としてピリオド () のみを認識します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="fffa9-848">異なる小数点区切り記号が使用されている場合 (国際対応アプリケーションの`CStr`場合`Format`など) は、関数または関数を使用して、数値を文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="fffa9-849">特定のカルチャの数値の文字列形式を取得するには、数値の`ToString(IFormatProvider)`メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="fffa9-850">たとえば、型`Double`の<xref:System.Double.ToString%2A>値を文字列に変換する場合は、を使用します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-851">この例では`Str` 、関数を使用`String`して、数値の表現を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="fffa9-852">正の数値を文字列に変換した場合、先頭のスペースは常にその符号に予約されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fffa9-853"><paramref name="Number" /> が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="fffa9-854"><paramref name="Number" /> が数値型ではありません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="fffa9-855">変換の概要</span><span class="sxs-lookup"><span data-stu-id="fffa9-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-856">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fffa9-857">適切な型の数値として文字列に含まれる数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="fffa9-858">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-858">Required.</span></span> <span data-ttu-id="fffa9-859">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span><span class="sxs-lookup"><span data-stu-id="fffa9-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="fffa9-860"><paramref name="Expression" /> が <see langword="Object" /> 型の場合に、その値が <see langword="String" /> に変換できる必要があります。または <see cref="T:System.ArgumentException" /> エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="fffa9-861">適切な型の数値として文字列に含まれる数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="fffa9-862">適切な型で表された、文字列に含まれる数値。</span><span class="sxs-lookup"><span data-stu-id="fffa9-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-863">関数`Val`は、数値の一部として認識できない最初の文字の文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="fffa9-864">多くの場合、ドル記号やコンマなど、数値の一部と見なされる記号と文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="fffa9-865">ただし、関数は、基数プレフィックス`&O` (8 進数の場合) と`&H` (16 進数の場合) を認識します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="fffa9-866">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="fffa9-867">次の呼び出しでは、値1615198が返されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="fffa9-868">次の呼び出しは、10進値-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="fffa9-869">関数`Val`は、有効な小数点`.`区切り記号としてピリオド () のみを認識します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="fffa9-870">異なる小数点区切り記号を使用する場合は、国際対応`CDbl`アプリケーション`CInt`の場合と同様に、文字列を数値に変換するためにまたはを使用します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="fffa9-871">特定のカルチャに含まれる数値の文字列形式を数値に変換するには、数値型の`Parse(String, IFormatProvider)`メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="fffa9-872">たとえば、文字列を<xref:System.Double.Parse%2A?displayProperty=nameWithType> `Double`に変換する場合は、を使用します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="fffa9-873">特定<xref:System.InvalidCastException>の一般的ではない数値形式に応答して、例外がスローされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="fffa9-874">たとえば、次のコードではこの例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="fffa9-875">として`Double` `Integer`書式設定された数値と型文字の間の競合は、文字列に含まれていない場合、コンパイラによってキャッチされます。`Long`</span><span class="sxs-lookup"><span data-stu-id="fffa9-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-876">次の例では`Val` 、関数を使用して、各文字列に含まれている数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="fffa9-877">`Val`数字、数値修飾子、数値の区切り記号、または空白文字として解釈できない最初の文字での変換を停止します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="fffa9-878"><paramref name="InputStr" /> が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-879"><paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-880">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="fffa9-881">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-881">Required.</span></span> <span data-ttu-id="fffa9-882">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span><span class="sxs-lookup"><span data-stu-id="fffa9-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="fffa9-883"><paramref name="Expression" /> が <see langword="Object" /> 型の場合に、その値が <see langword="String" /> に変換できる必要があります。または <see cref="T:System.ArgumentException" /> エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="fffa9-884">適切な型の数値として文字列に含まれる数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="fffa9-885">適切な型で表された、文字列に含まれる数値。</span><span class="sxs-lookup"><span data-stu-id="fffa9-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-886">関数`Val`は、数値の一部として認識できない最初の文字の文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="fffa9-887">多くの場合、ドル記号やコンマなど、数値の一部と見なされる記号と文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="fffa9-888">ただし、関数は、基数プレフィックス`&O` (8 進数の場合) と`&H` (16 進数の場合) を認識します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="fffa9-889">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="fffa9-890">次の呼び出しでは、値1234123が返されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="fffa9-891">次の呼び出しは、10進値-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="fffa9-892">関数`Val`は、有効な小数点`.`区切り記号としてピリオド () のみを認識します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="fffa9-893">他の小数点区切り記号を使用する場合は、国際`CDbl`対応`CInt`アプリケーションの場合と同じように、またはを使用して文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="fffa9-894">特定のカルチャに含まれる数値の文字列形式を数値に変換するには、数値型の`Parse(String, IFormatProvider)`メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="fffa9-895">たとえば、文字列を<xref:System.Double.Parse%2A?displayProperty=nameWithType> `Double`に変換する場合は、を使用します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fffa9-896">特定<xref:System.InvalidCastException>の一般的ではない数値形式に応答して、例外がスローされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="fffa9-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="fffa9-897">たとえば、次のコードではこの例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="fffa9-898">として`Double` `Integer`書式設定された数値と型文字の間の競合は、競合が文字列に含まれていない場合、コンパイラによってキャッチされます。`Long`</span><span class="sxs-lookup"><span data-stu-id="fffa9-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-899">次の例では`Val` 、関数を使用して、各文字列に含まれている数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="fffa9-900">`Val`数字、数値修飾子、数値の区切り記号、または空白文字として解釈できない最初の文字での変換を停止します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="fffa9-901"><paramref name="InputStr" /> が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-902"><paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-903">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="fffa9-904">必須です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-904">Required.</span></span> <span data-ttu-id="fffa9-905">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span><span class="sxs-lookup"><span data-stu-id="fffa9-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="fffa9-906"><paramref name="Expression" /> が <see langword="Object" /> 型の場合に、その値が <see langword="String" /> に変換できる必要があります。または <see cref="T:System.ArgumentException" /> エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="fffa9-907">適切な型の数値として文字列に含まれる数を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="fffa9-908">適切な型で表された、文字列に含まれる数値。</span><span class="sxs-lookup"><span data-stu-id="fffa9-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fffa9-909">関数`Val`は、数値の一部として認識できない最初の文字の文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="fffa9-910">多くの場合、ドル記号やコンマなど、数値の一部と見なされる記号と文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="fffa9-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="fffa9-911">ただし、関数は、基数プレフィックス`&O` (8 進数の場合) と`&H` (16 進数の場合) を認識します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="fffa9-912">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="fffa9-913">次の呼び出しでは、値1234123が返されます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="fffa9-914">次の呼び出しは、10進値-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="fffa9-915">関数`Val`は、有効な小数点`.`区切り記号としてピリオド () のみを認識します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="fffa9-916">他の小数点区切り記号を使用する場合は、国際`CDbl`対応`CInt`アプリケーションの場合と同じように、またはを使用して文字列を数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="fffa9-917">特定のカルチャに含まれる数値の文字列形式を数値に変換するには、数値型の`Parse(String, IFormatProvider)`メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="fffa9-918">たとえば、文字列を<xref:System.Double.Parse%2A?displayProperty=nameWithType> `Double`に変換する場合は、を使用します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fffa9-919">特定の一般的ではない数値形式に応答して例外が発生する可能性があります。<xref:System.InvalidCastException></span><span class="sxs-lookup"><span data-stu-id="fffa9-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="fffa9-920">たとえば、次のコードではこの例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="fffa9-921">として`Double` `Integer`書式設定された数値と型文字の間の競合は、競合が文字列に含まれていない場合、コンパイラによってキャッチされます。`Long`</span><span class="sxs-lookup"><span data-stu-id="fffa9-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="fffa9-922">次の例では`Val` 、関数を使用して、各文字列に含まれている数値を返します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="fffa9-923">`Val`数字、数値修飾子、数値の区切り記号、または空白文字として解釈できない最初の文字での変換を停止します。</span><span class="sxs-lookup"><span data-stu-id="fffa9-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="fffa9-924"><paramref name="InputStr" /> が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="fffa9-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="fffa9-925"><paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span><span class="sxs-lookup"><span data-stu-id="fffa9-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="fffa9-926">CString</span><span class="sxs-lookup"><span data-stu-id="fffa9-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>