<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8e0e14960480e0249f53d698cc92d75e8301b99" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659022" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ff506-101">
        <see langword="Conversion" /> モジュールに含まれるプロシージャを使って、さまざまな変換演算を実行します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ff506-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-102">このモジュールは、Visual Basic 言語のキーワードとランタイム ライブラリ メンバーを 10 進数に変換するサポートを別の数値の文字列、数値、文字列および 1 つのデータを入力します。</span><span class="sxs-lookup"><span data-stu-id="ff506-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-103">この例では、`Hex`数の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ff506-104">変換対象のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-104">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="ff506-105">変換後のオブジェクトの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-105">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-106">オブジェクトを指定された型に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-106">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-107">実行時の種類が要求されたターゲットの種類であるオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-107">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-108">`CTypeDynamic`メソッドとして渡されたオブジェクトの変換、`Expression`パラメーターで指定された型を`TargetType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="ff506-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="ff506-109">オブジェクトがオブジェクトを動的オブジェクトである場合、`CTypeDynamic`メソッドには、使用できる動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="ff506-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="ff506-110">`CTypeDynamic`メソッドには、オブジェクト自体で定義された変換セマンティクスに従っての動的変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="ff506-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="ff506-111">動的オブジェクトから継承している場合<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`メソッドが最初に、ユーザー定義の静的な変換を使用して、変換を実行しようとします。</span><span class="sxs-lookup"><span data-stu-id="ff506-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="ff506-112">ユーザー定義の静的な変換に失敗した場合、`CTypeDynamic`メソッドは動的な変換を使用して変換を実行しようとしています。</span><span class="sxs-lookup"><span data-stu-id="ff506-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="ff506-113">動的オブジェクトを実装する場合<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`メソッドでは、ユーザー定義の静的な変換での動的変換を優先順位が得られます。</span><span class="sxs-lookup"><span data-stu-id="ff506-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-114">次の例では、`CTypeDynamic`動的オブジェクトによって定義された変換を使用して動的オブジェクトを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="ff506-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="ff506-115">変換後のオブジェクトの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-115">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="ff506-116">変換対象のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-116">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-117">指定したジェネリック型にオブジェクトを変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-117">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-118">要求されたジェネリック型として静的に型指定されたオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-118">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-119">`CTypeDynamic`メソッドとして渡されたオブジェクトの変換、`Expression`ジェネリック パラメーターの型によって指定された型のパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="ff506-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="ff506-120">オブジェクトがオブジェクトを動的オブジェクトである場合、`CTypeDynamic`メソッドには、使用できる動的な変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="ff506-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="ff506-121">`CTypeDynamic`メソッドには、オブジェクト自体で定義された変換セマンティクスに従っての動的変換が適用されます。</span><span class="sxs-lookup"><span data-stu-id="ff506-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="ff506-122">動的オブジェクトから継承している場合<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`メソッドが最初に、ユーザー定義の静的な変換を使用して、変換を実行しようとします。</span><span class="sxs-lookup"><span data-stu-id="ff506-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="ff506-123">ユーザー定義の静的な変換に失敗した場合、`CTypeDynamic`メソッドは動的な変換を使用して変換を実行しようとしています。</span><span class="sxs-lookup"><span data-stu-id="ff506-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="ff506-124">動的オブジェクトを実装する場合<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`メソッドでは、ユーザー定義の静的な変換での動的変換を優先順位が得られます。</span><span class="sxs-lookup"><span data-stu-id="ff506-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-125">次の例では、`CTypeDynamic`動的オブジェクトによって定義された変換を使用して動的オブジェクトを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="ff506-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ff506-126">特定のエラー番号に対応するエラー メッセージを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-126">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ff506-127">特定のエラー番号に対応するエラー メッセージを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-127">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-128">直前の実行時エラーに対応するエラー メッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-128">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-129">`ErrorToString`関数のプロパティの設定を調べ、`Err`を最新の実行時エラーを識別するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ff506-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="ff506-130">戻り値、`ErrorToString`に対応する関数、`Description`のプロパティ、`Err`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ff506-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="ff506-131">実行時エラーが発生していない場合`ErrorToString`長さ 0 の文字列を返します ("") です。</span><span class="sxs-lookup"><span data-stu-id="ff506-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="ff506-132">Visual basic 6.0 とそれ以前のバージョンではこの機能によって提供された、`Error`関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-133">次のコードでは、`ErrorToString`関数を指定したエラーの番号に対応するエラー メッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="ff506-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-134">
            <paramref name="ErrorNumber" /> が範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-134">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="ff506-135">任意。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-135">Optional.</span>
          </span>
          <span data-ttu-id="ff506-136">有効なエラー番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-136">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-137">特定のエラー番号に対応するエラー メッセージを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-137">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-138">特定のエラー番号に対応するエラー メッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-138">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-139">`ErrorToString`関数のプロパティの設定を調べ、`Err`を最新の実行時エラーを識別するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ff506-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="ff506-140">戻り値、`ErrorToString`に対応する関数、`Description`のプロパティ、`Err`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ff506-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="ff506-141">場合`ErrorNumber`有効なエラー番号が定義されていないが`ErrorToString`文字列を返します`"Application-defined or object-defined error."`場合`ErrorNumber`が有効でないエラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="ff506-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="ff506-142">場合`ErrorNumber`を省略すると、メッセージ、一番最近に対応する実行時エラーが返されます。</span><span class="sxs-lookup"><span data-stu-id="ff506-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="ff506-143">実行時エラーが発生していない場合または`ErrorNumber`0 の場合は、`ErrorToString`長さ 0 の文字列を返します ("") です。</span><span class="sxs-lookup"><span data-stu-id="ff506-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="ff506-144">Visual basic 6.0 とそれ以前のバージョンではこの機能によって提供された、`Error`関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-145">次のコードでは、`ErrorToString`関数を指定したエラーの番号に対応するエラー メッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="ff506-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-146">
            <paramref name="ErrorNumber" /> が範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-146">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ff506-147">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-147">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-148">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-148">Required.</span>
          </span>
          <span data-ttu-id="ff506-149">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-149">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-150">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-151">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-151">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-152">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-152">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-153">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-154">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-155">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-156">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-157">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-158">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-159">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-160">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-161">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-162">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-163">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-164">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-165">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-166">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-166">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-167">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-167">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-168">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-168">Required.</span>
          </span>
          <span data-ttu-id="ff506-169">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-169">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-170">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-171">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-171">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-172">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-172">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-173">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-174">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-175">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-176">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-177">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-178">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-179">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-180">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-181">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-182">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-183">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-184">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-185">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-186">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-186">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-187">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-187">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-188">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-188">Required.</span>
          </span>
          <span data-ttu-id="ff506-189">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-189">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-190">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-191">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-191">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-192">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-192">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-193">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-194">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-195">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-196">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-197">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-198">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-199">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-200">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-201">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-202">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-203">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-204">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-205">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-206">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-206">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-207">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-207">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-208">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-208">Required.</span>
          </span>
          <span data-ttu-id="ff506-209">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-209">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-210">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-211">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-211">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-212">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-212">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-213">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-214">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-215">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-216">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-217">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-218">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-219">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-220">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-221">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-222">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-223">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-224">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-225">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-226">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-226">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-227">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-227">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-228">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-228">Required.</span>
          </span>
          <span data-ttu-id="ff506-229">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-229">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-230">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-231">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-231">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-232">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-232">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-233">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-234">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-235">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-236">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-237">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-238">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-239">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-240">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-241">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-242">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-243">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-244">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-245">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-246">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-246">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-247">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-247">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-248">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-248">Required.</span>
          </span>
          <span data-ttu-id="ff506-249">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-249">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-250">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-251">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-251">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-252">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-252">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-253">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-254">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-255">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-256">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-257">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-258">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-259">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-260">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-261">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-262">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-263">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-264">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-265">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-266">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-266">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-267">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-267">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-268">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-268">Required.</span>
          </span>
          <span data-ttu-id="ff506-269">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-269">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-270">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-271">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-271">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-272">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-272">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-273">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-274">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-275">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-276">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-277">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-278">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-279">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-280">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-281">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-282">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-283">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-284">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-285">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-286">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-286">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-287">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-287">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ff506-288">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-288">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-289">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-289">Required.</span>
          </span>
          <span data-ttu-id="ff506-290">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-290">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-291">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-291">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-292">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-292">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-293">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-294">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="ff506-294">If `Number` is</span></span>|<span data-ttu-id="ff506-295">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="ff506-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-296">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-296">Empty</span></span>|<span data-ttu-id="ff506-297">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-297">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-298">任意の数値</span><span class="sxs-lookup"><span data-stu-id="ff506-298">Any numeric value</span></span>|<span data-ttu-id="ff506-299">最大 16 個の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="ff506-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ff506-300">適切な範囲の数値の前に直接 16 進数を表すことができる`&H`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ff506-301">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="ff506-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-302">この例では、`Hex`数の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-303">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-303">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-304">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-304">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-305">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-305">Required.</span>
          </span>
          <span data-ttu-id="ff506-306">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-306">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-307">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-307">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-308">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-308">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-309">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-310">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="ff506-310">If `Number` is</span></span>|<span data-ttu-id="ff506-311">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="ff506-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-312">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-312">Empty</span></span>|<span data-ttu-id="ff506-313">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-313">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-314">任意の数値</span><span class="sxs-lookup"><span data-stu-id="ff506-314">Any numeric value</span></span>|<span data-ttu-id="ff506-315">最大 16 個の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="ff506-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ff506-316">適切な範囲の数値の前に直接 16 進数を表すことができる`&H`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ff506-317">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="ff506-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-318">この例では、`Hex`数の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-319">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-319">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-320">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-320">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-321">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-321">Required.</span>
          </span>
          <span data-ttu-id="ff506-322">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-322">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-323">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-323">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-324">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-324">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-325">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-326">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="ff506-326">If `Number` is</span></span>|<span data-ttu-id="ff506-327">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="ff506-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-328">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-328">Empty</span></span>|<span data-ttu-id="ff506-329">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-329">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-330">任意の数値</span><span class="sxs-lookup"><span data-stu-id="ff506-330">Any numeric value</span></span>|<span data-ttu-id="ff506-331">最大 16 個の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="ff506-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ff506-332">適切な範囲の数値の前に直接 16 進数を表すことができる`&H`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ff506-333">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="ff506-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-334">この例では、`Hex`数の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-335">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-335">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-336">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-336">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-337">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-337">Required.</span>
          </span>
          <span data-ttu-id="ff506-338">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-338">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-339">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-339">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-340">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-340">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-341">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-342">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="ff506-342">If `Number` is</span></span>|<span data-ttu-id="ff506-343">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="ff506-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-344">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-344">Empty</span></span>|<span data-ttu-id="ff506-345">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-345">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-346">任意の数値</span><span class="sxs-lookup"><span data-stu-id="ff506-346">Any numeric value</span></span>|<span data-ttu-id="ff506-347">最大 16 個の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="ff506-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ff506-348">適切な範囲の数値の前に直接 16 進数を表すことができる`&H`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ff506-349">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="ff506-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-350">この例では、`Hex`数の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-351">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-351">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-352">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-352">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-353">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-353">Required.</span>
          </span>
          <span data-ttu-id="ff506-354">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-354">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-355">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-355">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-356">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-356">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-357">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-358">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="ff506-358">If `Number` is</span></span>|<span data-ttu-id="ff506-359">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="ff506-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-360">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-360">Empty</span></span>|<span data-ttu-id="ff506-361">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-361">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-362">任意の数値</span><span class="sxs-lookup"><span data-stu-id="ff506-362">Any numeric value</span></span>|<span data-ttu-id="ff506-363">最大 16 個の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="ff506-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ff506-364">適切な範囲の数値の前に直接 16 進数を表すことができる`&H`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ff506-365">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="ff506-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-366">この例では、`Hex`数の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-367">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-367">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-368">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-368">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-369">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-369">Required.</span>
          </span>
          <span data-ttu-id="ff506-370">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-370">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-371">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-371">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-372">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-372">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-373">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-374">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="ff506-374">If `Number` is</span></span>|<span data-ttu-id="ff506-375">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="ff506-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-376">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-376">Empty</span></span>|<span data-ttu-id="ff506-377">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-377">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-378">任意の数値</span><span class="sxs-lookup"><span data-stu-id="ff506-378">Any numeric value</span></span>|<span data-ttu-id="ff506-379">最大 16 個の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="ff506-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ff506-380">適切な範囲の数値の前に直接 16 進数を表すことができる`&H`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ff506-381">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="ff506-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-382">この例では、`Hex`数の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-383">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-383">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-384">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-384">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-385">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-385">Required.</span>
          </span>
          <span data-ttu-id="ff506-386">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-387">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-388">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-389">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-390">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="ff506-390">If `Number` is</span></span>|<span data-ttu-id="ff506-391">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="ff506-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-392">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-392">Empty</span></span>|<span data-ttu-id="ff506-393">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-393">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-394">任意の数値</span><span class="sxs-lookup"><span data-stu-id="ff506-394">Any numeric value</span></span>|<span data-ttu-id="ff506-395">最大 16 個の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="ff506-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ff506-396">適切な範囲の数値の前に直接 16 進数を表すことができる`&H`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ff506-397">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="ff506-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-398">この例では、`Hex`数の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-399">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-400">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-401">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-401">Required.</span>
          </span>
          <span data-ttu-id="ff506-402">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-402">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-403">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-403">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-404">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-404">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-405">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-406">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="ff506-406">If `Number` is</span></span>|<span data-ttu-id="ff506-407">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="ff506-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-408">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-408">Empty</span></span>|<span data-ttu-id="ff506-409">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-409">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-410">任意の数値</span><span class="sxs-lookup"><span data-stu-id="ff506-410">Any numeric value</span></span>|<span data-ttu-id="ff506-411">最大 16 個の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="ff506-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ff506-412">適切な範囲の数値の前に直接 16 進数を表すことができる`&H`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ff506-413">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="ff506-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-414">この例では、`Hex`数の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-415">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-415">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-416">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-416">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-417">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-417">Required.</span>
          </span>
          <span data-ttu-id="ff506-418">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-418">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-419">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-419">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-420">数値の 16 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-420">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-421">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-422">場合`Number`は</span><span class="sxs-lookup"><span data-stu-id="ff506-422">If `Number` is</span></span>|<span data-ttu-id="ff506-423">16 進数を返します</span><span class="sxs-lookup"><span data-stu-id="ff506-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-424">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-424">Empty</span></span>|<span data-ttu-id="ff506-425">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-425">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-426">任意の数値</span><span class="sxs-lookup"><span data-stu-id="ff506-426">Any numeric value</span></span>|<span data-ttu-id="ff506-427">最大 16 個の 16 進文字</span><span class="sxs-lookup"><span data-stu-id="ff506-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ff506-428">適切な範囲の数値の前に直接 16 進数を表すことができる`&H`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ff506-429">たとえば、 `&H10` 16 進表記で 16 進数を表します。</span><span class="sxs-lookup"><span data-stu-id="ff506-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-430">この例では、`Hex`数の 16 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-431">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-431">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-432">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-432">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ff506-433">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-433">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-434">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-434">Required.</span>
          </span>
          <span data-ttu-id="ff506-435">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-435">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-436">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-437">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-437">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-438">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-438">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-439">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-440">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-441">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-442">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-443">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-444">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-445">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-446">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-447">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-448">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-449">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-450">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-451">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-452">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-452">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-453">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-453">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-454">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-454">Required.</span>
          </span>
          <span data-ttu-id="ff506-455">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-455">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-456">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-457">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-457">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-458">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-458">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-459">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-460">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-461">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-462">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-463">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-464">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-465">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-466">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-467">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-468">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-469">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-470">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-471">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-472">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-472">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-473">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-473">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-474">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-474">Required.</span>
          </span>
          <span data-ttu-id="ff506-475">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-475">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-476">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-477">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-477">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-478">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-478">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-479">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-480">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-481">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-482">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-483">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-484">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-485">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-486">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-487">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-488">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-489">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-490">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-491">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-492">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-492">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-493">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-493">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-494">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-494">Required.</span>
          </span>
          <span data-ttu-id="ff506-495">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-496">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-497">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-498">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-499">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-500">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-501">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-502">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-503">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-504">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-505">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-506">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-507">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-508">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-509">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-510">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-511">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-512">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-513">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-514">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-514">Required.</span>
          </span>
          <span data-ttu-id="ff506-515">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-515">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-516">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-517">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-517">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-518">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-518">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-519">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-520">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-521">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-522">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-523">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-524">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-525">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-526">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-527">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-528">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-529">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-530">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-531">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-532">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-532">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-533">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-533">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-534">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-534">Required.</span>
          </span>
          <span data-ttu-id="ff506-535">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-535">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-536">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-537">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-537">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-538">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-538">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-539">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-540">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-541">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-542">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-543">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-544">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-545">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-546">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-547">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-548">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-549">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-550">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-551">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-552">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-552">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-553">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-553">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-554">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-554">Required.</span>
          </span>
          <span data-ttu-id="ff506-555">
            <see langword="Double" /> 型の数字または任意の有効な数式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-555">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ff506-556">
            <c>Number</c> に <see langword="Nothing" /> が含まれている場合は、<see langword="Nothing" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-557">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-557">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-558">数値の整数部分を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-558">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-559">両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ff506-560">間の違い`Int`と`Fix`関数は、その場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`負の整数を返します大きいまたは等しい`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ff506-561">たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ff506-562">`Fix(number)` 等価します。 `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ff506-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-563">この例では、どのように`Int`と`Fix`関数は数値の整数部分を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ff506-564">負の数の引数の場合、`Int`関数負の整数を返します数です。 小さい、`Fix`関数は、数以上に負の整数を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ff506-565">次の例では、指定する必要があります`Option Strict Off`暗黙の型から変換のため`Double`を入力する`Integer`では許可されていない`Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ff506-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ff506-566">使用することができます、`CInt`型に他のデータ型を明示的に変換する関数`Integer`で`Option Strict Off`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ff506-567">ただし、`CInt`数値の小数部の切り捨てではなく、最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="ff506-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ff506-568">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ff506-569">使用することができます、`CInt`関数への呼び出しの結果に`Fix`または`Int`丸め処理を行わずに整数に明示的な変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="ff506-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ff506-570">例:</span><span class="sxs-lookup"><span data-stu-id="ff506-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ff506-571">詳細については`CInt`を参照してください[型変換関数](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)です。</span><span class="sxs-lookup"><span data-stu-id="ff506-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-572">Number が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-572">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-573">Number が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-573">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ff506-574">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-574">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-575">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-575">Required.</span>
          </span>
          <span data-ttu-id="ff506-576">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-576">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-577">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-577">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-578">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-578">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-579">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-580">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="ff506-580">If Number is</span></span>|<span data-ttu-id="ff506-581">年 10 月を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-582">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-582">Empty</span></span>|<span data-ttu-id="ff506-583">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-583">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-584">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="ff506-584">Any other number</span></span>|<span data-ttu-id="ff506-585">最大 22 8 進数の文字</span><span class="sxs-lookup"><span data-stu-id="ff506-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ff506-586">適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ff506-587">たとえば、 `&O10` 10 進数 8 進表記です。</span><span class="sxs-lookup"><span data-stu-id="ff506-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-588">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-589">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-589">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-590">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-590">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-591">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-591">Required.</span>
          </span>
          <span data-ttu-id="ff506-592">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-592">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-593">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-593">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-594">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-594">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-595">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-596">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="ff506-596">If Number is</span></span>|<span data-ttu-id="ff506-597">年 10 月を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-598">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-598">Empty</span></span>|<span data-ttu-id="ff506-599">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-599">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-600">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="ff506-600">Any other number</span></span>|<span data-ttu-id="ff506-601">最大 22 8 進数の文字</span><span class="sxs-lookup"><span data-stu-id="ff506-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ff506-602">適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ff506-603">たとえば、 `&O10` 10 進数 8 進表記です。</span><span class="sxs-lookup"><span data-stu-id="ff506-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-604">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-605">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-605">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-606">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-606">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-607">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-607">Required.</span>
          </span>
          <span data-ttu-id="ff506-608">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-608">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-609">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-609">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-610">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-610">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-611">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-612">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="ff506-612">If Number is</span></span>|<span data-ttu-id="ff506-613">年 10 月を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-614">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-614">Empty</span></span>|<span data-ttu-id="ff506-615">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-615">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-616">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="ff506-616">Any other number</span></span>|<span data-ttu-id="ff506-617">最大 22 8 進数の文字</span><span class="sxs-lookup"><span data-stu-id="ff506-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ff506-618">適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ff506-619">たとえば、 `&O10` 10 進数 8 進表記です。</span><span class="sxs-lookup"><span data-stu-id="ff506-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-620">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-621">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-621">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-622">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-622">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-623">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-623">Required.</span>
          </span>
          <span data-ttu-id="ff506-624">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-624">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-625">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-625">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-626">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-626">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-627">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-628">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="ff506-628">If Number is</span></span>|<span data-ttu-id="ff506-629">年 10 月を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-630">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-630">Empty</span></span>|<span data-ttu-id="ff506-631">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-631">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-632">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="ff506-632">Any other number</span></span>|<span data-ttu-id="ff506-633">最大 22 8 進数の文字</span><span class="sxs-lookup"><span data-stu-id="ff506-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ff506-634">適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ff506-635">たとえば、 `&O10` 10 進数 8 進表記です。</span><span class="sxs-lookup"><span data-stu-id="ff506-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-636">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-637">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-637">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-638">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-638">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-639">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-639">Required.</span>
          </span>
          <span data-ttu-id="ff506-640">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-640">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-641">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-641">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-642">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-642">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-643">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-644">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="ff506-644">If Number is</span></span>|<span data-ttu-id="ff506-645">年 10 月を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-646">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-646">Empty</span></span>|<span data-ttu-id="ff506-647">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-647">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-648">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="ff506-648">Any other number</span></span>|<span data-ttu-id="ff506-649">最大 22 8 進数の文字</span><span class="sxs-lookup"><span data-stu-id="ff506-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ff506-650">適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ff506-651">たとえば、 `&O10` 10 進数 8 進表記です。</span><span class="sxs-lookup"><span data-stu-id="ff506-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-652">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-653">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-653">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-654">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-654">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-655">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-655">Required.</span>
          </span>
          <span data-ttu-id="ff506-656">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-656">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-657">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-657">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-658">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-658">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-659">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-660">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="ff506-660">If Number is</span></span>|<span data-ttu-id="ff506-661">年 10 月を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-662">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-662">Empty</span></span>|<span data-ttu-id="ff506-663">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-663">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-664">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="ff506-664">Any other number</span></span>|<span data-ttu-id="ff506-665">最大 22 8 進数の文字</span><span class="sxs-lookup"><span data-stu-id="ff506-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ff506-666">適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ff506-667">たとえば、 `&O10` 10 進数 8 進表記です。</span><span class="sxs-lookup"><span data-stu-id="ff506-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-668">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-669">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-669">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-670">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-670">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-671">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-671">Required.</span>
          </span>
          <span data-ttu-id="ff506-672">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-672">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-673">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-673">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-674">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-674">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-675">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-676">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="ff506-676">If Number is</span></span>|<span data-ttu-id="ff506-677">年 10 月を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-678">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-678">Empty</span></span>|<span data-ttu-id="ff506-679">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-679">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-680">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="ff506-680">Any other number</span></span>|<span data-ttu-id="ff506-681">最大 22 8 進数の文字</span><span class="sxs-lookup"><span data-stu-id="ff506-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ff506-682">適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ff506-683">たとえば、 `&O10` 10 進数 8 進表記です。</span><span class="sxs-lookup"><span data-stu-id="ff506-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-684">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-685">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-685">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-686">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-686">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-687">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-687">Required.</span>
          </span>
          <span data-ttu-id="ff506-688">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-688">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-689">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-689">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-690">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-690">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-691">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-692">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="ff506-692">If Number is</span></span>|<span data-ttu-id="ff506-693">年 10 月を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-694">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-694">Empty</span></span>|<span data-ttu-id="ff506-695">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-695">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-696">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="ff506-696">Any other number</span></span>|<span data-ttu-id="ff506-697">最大 22 8 進数の文字</span><span class="sxs-lookup"><span data-stu-id="ff506-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ff506-698">適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ff506-699">たとえば、 `&O10` 10 進数 8 進表記です。</span><span class="sxs-lookup"><span data-stu-id="ff506-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-700">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-701">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-701">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-702">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-702">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-703">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-703">Required.</span>
          </span>
          <span data-ttu-id="ff506-704">任意の有効な数式または <see langword="String" /> 型の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-704">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-705">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-705">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-706">数値の 8 進値を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-706">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-707">場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="ff506-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ff506-708">数値がの場合</span><span class="sxs-lookup"><span data-stu-id="ff506-708">If Number is</span></span>|<span data-ttu-id="ff506-709">年 10 月を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ff506-710">Empty</span><span class="sxs-lookup"><span data-stu-id="ff506-710">Empty</span></span>|<span data-ttu-id="ff506-711">ゼロ (0)</span><span class="sxs-lookup"><span data-stu-id="ff506-711">Zero (0)</span></span>|  
|<span data-ttu-id="ff506-712">その他の任意の数</span><span class="sxs-lookup"><span data-stu-id="ff506-712">Any other number</span></span>|<span data-ttu-id="ff506-713">最大 22 8 進数の文字</span><span class="sxs-lookup"><span data-stu-id="ff506-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ff506-714">適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ff506-715">たとえば、 `&O10` 10 進数 8 進表記です。</span><span class="sxs-lookup"><span data-stu-id="ff506-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-716">この例では、`Oct`数値の 8 進数の値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-717">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-717">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-718">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-718">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ff506-719">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-719">Required.</span>
          </span>
          <span data-ttu-id="ff506-720">任意の有効な数式を含む <see langword="Object" /> 型の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-720">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-721">数値を表す <see langword="String" /> 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-721">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-722">数値を表す <see langword="String" /> 型の値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-722">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-723">符号の先頭にスペースが予約されています常に数値が文字列に変換されると、`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="ff506-724">場合`Number`が正の値、返される文字列には、先頭にスペースが含まれているし、プラス記号を暗黙的に指定します。</span><span class="sxs-lookup"><span data-stu-id="ff506-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="ff506-725">マイナス記号 (-) と主要な領域がない、負の値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="ff506-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="ff506-726">使用して、`Format`数値を日付、時刻、または通貨として、または他のユーザー定義形式に変換する関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="ff506-727">異なり、 `Str` 、関数、`Format`関数がの符号の先頭にスペースを含まない`Number`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ff506-728">`Str`関数は、ピリオドだけを認識 (`.`) は有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="ff506-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="ff506-729">(たとえば、国際対応のアプリケーションで別の桁区切り記号を使用している場合を使用して、`CStr`または`Format`数値を文字列に変換する関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="ff506-730">特定のカルチャの数値の文字列形式を取得するには、数値を使用`ToString(IFormatProvider)`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="ff506-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="ff506-731">たとえば、使用して<xref:System.Double.ToString%2A>型の値を変換するときに`Double`を文字列にします。</span><span class="sxs-lookup"><span data-stu-id="ff506-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff506-732">この例では、`Str`を返す関数を`String`数値の形式です。</span><span class="sxs-lookup"><span data-stu-id="ff506-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="ff506-733">正の数値を文字列に変換するときに、先頭を空白は、符号を常に予約されています。</span><span class="sxs-lookup"><span data-stu-id="ff506-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff506-734">
            <paramref name="Number" /> が指定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-734">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="ff506-735">
            <paramref name="Number" /> が数値型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-735">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ff506-736">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ff506-737">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-737">Required.</span>
          </span>
          <span data-ttu-id="ff506-738">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="ff506-739">
            <c>Expression</c> が <see langword="Object" /> 型の場合、その値が <see langword="String" /> に変換できる必要があります。できない場合は <see cref="T:System.ArgumentException" /> エラーが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-740">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-741">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-742">`Val`関数では、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="ff506-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="ff506-743">シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="ff506-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="ff506-744">ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の 8 進数) と`&H`(の 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="ff506-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="ff506-745">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="ff506-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="ff506-746">次の呼び出しでは、1615198 という値を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="ff506-747">次の呼び出しでは、10 進値-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="ff506-748">`Val`関数は、ピリオドだけを認識 (`.`) は有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="ff506-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="ff506-749">国際対応のアプリケーションと同様に、別の桁区切り記号が使用すると使用`CDbl`または`CInt`代わりに、文字列を数値に変換するためです。</span><span class="sxs-lookup"><span data-stu-id="ff506-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="ff506-750">特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して`Parse(String, IFormatProvider)`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="ff506-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="ff506-751">たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=nameWithType>を文字列に変換するときに、`Double`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ff506-752"><xref:System.InvalidCastException>特定一般的でない数値の形式への応答での例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ff506-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="ff506-753">たとえば、次のコードでは、この例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="ff506-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="ff506-754">として書式設定された数の間での競合、`Double`と`Integer`と`Long`型文字は、文字列に含まれていない場合、コンパイラによってキャッチとします。</span><span class="sxs-lookup"><span data-stu-id="ff506-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="ff506-755">次の例では、`Val`各文字列に含まれている数値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="ff506-756">`Val` 数値、数値の修飾子、数値区切り記号、または空白文字として解釈できない場合、最初の文字に変換するを停止します。</span><span class="sxs-lookup"><span data-stu-id="ff506-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="ff506-757">
            <paramref name="InputStr" /> が大きすぎます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-757">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-758">
            <paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-758">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ff506-759">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-759">Required.</span>
          </span>
          <span data-ttu-id="ff506-760">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="ff506-761">
            <c>Expression</c> が <see langword="Object" /> 型の場合、その値が <see langword="String" /> に変換できる必要があります。できない場合は <see cref="T:System.ArgumentException" /> エラーが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-762">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-763">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-764">`Val`関数では、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="ff506-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="ff506-765">シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="ff506-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="ff506-766">ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の 8 進数) と`&H`(の 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="ff506-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="ff506-767">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="ff506-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="ff506-768">次の呼び出しでは、値 1234123 を返しますを返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="ff506-769">次の呼び出しでは、10 進値-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="ff506-770">`Val`関数は、ピリオドだけを認識 (`.`) は有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="ff506-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="ff506-771">国際対応のアプリケーションと同様に、その他の 10 進区切り記号が使用すると使用`CDbl`または`CInt`代わりに、文字列を数値に変換するためです。</span><span class="sxs-lookup"><span data-stu-id="ff506-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="ff506-772">特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して`Parse(String, IFormatProvider)`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="ff506-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="ff506-773">たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=nameWithType>を文字列に変換するときに、`Double`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ff506-774"><xref:System.InvalidCastException>特定一般的でない数値の形式への応答での例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ff506-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="ff506-775">たとえば、次のコードでは、この例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="ff506-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="ff506-776">として書式設定された数の間での競合、`Double`と`Integer`と`Long`型文字は、競合は、文字列に含まれていなかった場合、コンパイラによってキャッチはします。</span><span class="sxs-lookup"><span data-stu-id="ff506-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="ff506-777">次の例では、`Val`各文字列に含まれている数値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="ff506-778">`Val` 数値、数値の修飾子、数値区切り記号、または空白文字として解釈できない場合、最初の文字に変換するを停止します。</span><span class="sxs-lookup"><span data-stu-id="ff506-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="ff506-779">
            <paramref name="InputStr" /> が大きすぎます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-779">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-780">
            <paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-780">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="ff506-781">必須。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-781">Required.</span>
          </span>
          <span data-ttu-id="ff506-782">任意の有効な <see langword="String" /> 式、<see langword="Object" /> 変数、または <see langword="Char" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="ff506-783">
            <c>Expression</c> が <see langword="Object" /> 型の場合、その値が <see langword="String" /> に変換できる必要があります。できない場合は <see cref="T:System.ArgumentException" /> エラーが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff506-784">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff506-785">適切な型の数値として文字列に含まれる数を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff506-786">`Val`関数では、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。</span><span class="sxs-lookup"><span data-stu-id="ff506-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="ff506-787">シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。</span><span class="sxs-lookup"><span data-stu-id="ff506-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="ff506-788">ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の 8 進数) と`&H`(の 16 進数)。</span><span class="sxs-lookup"><span data-stu-id="ff506-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="ff506-789">空白、タブ、および改行文字は、引数から削除されます。</span><span class="sxs-lookup"><span data-stu-id="ff506-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="ff506-790">次の呼び出しでは、値 1234123 を返しますを返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="ff506-791">次の呼び出しでは、10 進値-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="ff506-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="ff506-792">`Val`関数は、ピリオドだけを認識 (`.`) は有効な小数点区切り文字として。</span><span class="sxs-lookup"><span data-stu-id="ff506-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="ff506-793">国際対応のアプリケーションと同様に、その他の 10 進区切り記号が使用すると使用`CDbl`または`CInt`代わりに、文字列を数値に変換するためです。</span><span class="sxs-lookup"><span data-stu-id="ff506-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="ff506-794">特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して`Parse(String, IFormatProvider)`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="ff506-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="ff506-795">たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=nameWithType>を文字列に変換するときに、`Double`です。</span><span class="sxs-lookup"><span data-stu-id="ff506-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ff506-796"><xref:System.InvalidCastException>特定一般的でない数値の形式への応答での例外が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="ff506-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="ff506-797">たとえば、次のコードでは、この例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="ff506-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="ff506-798">として書式設定された数の間での競合、`Double`と`Integer`と`Long`型文字は、競合は、文字列に含まれていなかった場合、コンパイラによってキャッチはします。</span><span class="sxs-lookup"><span data-stu-id="ff506-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="ff506-799">次の例では、`Val`各文字列に含まれている数値を返す関数。</span><span class="sxs-lookup"><span data-stu-id="ff506-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="ff506-800">`Val` 数値、数値の修飾子、数値区切り記号、または空白文字として解釈できない場合、最初の文字に変換するを停止します。</span><span class="sxs-lookup"><span data-stu-id="ff506-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="ff506-801">
            <paramref name="InputStr" /> が大きすぎます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-801">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff506-802">
            <paramref name="Expression" /> は <see langword="String" /> に変換できない <see langword="Object" /> 型の式です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff506-802">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>