<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4686960282aaa5c88ca13b9310a5f0a2656ed483" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36658846" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Financial" /> モジュールに含まれるプロシージャを使って、財務関連の操作を実行します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このモジュールは、減価償却、現在および将来の値、金利、戻り値、および支払いの速度などの財務計算を実行する Visual Basic ランタイム ライブラリ メンバーをサポートします。  
  
   
  
## Examples  
 この例では、`Rate`支払の合計数を指定されたローンの目的の割合を計算する関数 (`TotPmts`)、ローン支払の量 (`Payment`)、現在の値またはローンのプリンシパル (`PVal`)、将来ローンの値 (`FVal`)、支払いの期限が先頭または末尾の支払い期間がかどうかを示す数値 (`PayType`)、および予期される利率の概算値 (`Guess`)。  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必須。 資産を購入した時点での価格を示す <see langword="Double" /> 型の値。</param>
        <param name="Salvage">必須。 耐用年数が終了した時点での資産の価格を示す <see langword="Double" /> 型の値。</param>
        <param name="Life">必須。 資産の耐用年数を示す <see langword="Double" /> 型の値。</param>
        <param name="Period">必須。 減価償却費を計算する期を示す <see langword="Double" /> 型の値。</param>
        <param name="Factor">任意。 減価償却率を示す <see langword="Double" /> 型の値。 省略した場合は、2 (倍率逓減法) を指定したものと見なされます。</param>
        <summary>倍率逓減法などの指定した方法を使って特定の期における資産の減価償却費を示す、<see langword="Double" /> 型の値を返します。</summary>
        <returns>倍率逓減法などの指定した方法を使って特定の期における資産の減価償却費を示す、<see langword="Double" /> 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 倍率逓減法では、迅速なレートで減価償却費を計算します。 減価償却では、最初の期間が最も高くし、連続する期間に減少します。  
  
 `Life`と`Period`引数は、同じ単位で表す必要があります。 たとえば場合、`Life`月単位で指定された`Period`も月単位で指定する必要があります。 すべての引数は正の数値である必要があります。  
  
 `DDB`関数では、次の数式を使用して、特定の期間に対する減価償却費を計算します。  
  
 減価償却/期間 = ((Cost – Salvage) * 係数)/有効期間  
  
   
  
## Examples  
 この例では、`DDB`を指定した期間の初期コストを指定した資産の減価償却を返す関数 (`InitCost`)、資産の耐用年数の最後に部分的な救済値 (`SalvageVal`)、(年単位で資産の合計の有効期間`LifeTime`)、および年減価償却費を計算する期間 (`Depr`)。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Factor" /> &lt;= 0、<paramref name="Salvage" /> &lt; 0、<paramref name="Period" /> &lt;= 0、または <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じて一定の利率を示す <see langword="Double" /> 型の値。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
        <param name="NPer">必須。 投資期間全体での支払い回数の合計を示す <see langword="Double" /> 型の値。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
        <param name="Pmt">必須。 毎回の支払い額を示す <see langword="Double" /> 型の値。 通常、支払い額には元金と利息が含まれます。支払い額を投資期間内に変更することはできません。</param>
        <param name="PV">任意。 現在の投資額、つまり将来行われる一連の支払いを現時点で一括支払いした場合の合計金額を示す <see langword="Double" /> 型の値。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。 省略した場合は、0 と見なされます。</param>
        <param name="Due">任意。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 各期の期末に支払う場合は <see langword="DueDate.EndOfPeriod" /> を、各期の期首に支払う場合は <see langword="DueDate.BegOfPeriod" /> をそれぞれ引数に指定します。 省略した場合は、<see langword="DueDate.EndOfPeriod" /> を指定したものと見なされます。</param>
        <summary>定期的な定額の支払いおよび一定した利率に基づいて、投資の将来価値を指定する <see langword="Double" /> 型の値を返します。</summary>
        <returns>定期的な定額の支払いおよび一定した利率に基づいて、投資の将来価値を指定する <see langword="Double" /> 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金は、一連の支払いを時間の経過と共に行うです。 年金には、住宅ローン) などのローンまたは (毎月のコスト削減プラン) など、投資収益率を指定できます。  
  
 `Rate`と`NPer`引数は、同じ単位で支払い期間を使用して計算する必要があります。 たとえば場合、`Rate`か月間を使用して計算されます`NPer`か月間を使用して計算する必要があります。  
  
 すべての引数、預金) など配当は負の数値で表されます。(被除数をチェックします) などに受信したキャッシュは、正の数値で表されます。  
  
   
  
## Examples  
 この例では、 `FV` 、割合投資の将来の値を返す関数を評価する期間ごとに想定される (`APR / 12`)、支払の合計数 (`TotPmts`)、payment (`Payment`) の現在の値、投資収益率 (`PVal`)、および先頭または末尾の支払い期間で支払いが行われるかどうかを示す数値 (`PayType`)。 注意してください`Payment`支払額を表す負の数値であります。  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じて一定の利率を示す <see langword="Double" /> 型の値。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
        <param name="Per">必須。 支払い期間を示す、1 から <c>NPer</c> の範囲の <see langword="Double" /> 型の値。</param>
        <param name="NPer">必須。 投資期間全体での支払い回数の合計を示す <see langword="Double" /> 型の値。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
        <param name="PV">必須。 現在の投資額、つまり将来行われる一連の支払いや受け取りを現時点で一括した場合の合計金額を示す <see langword="Double" /> 型の値。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
        <param name="FV">任意。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を示す <see langword="Double" /> 型の値。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
        <param name="Due">任意。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>定期的な定額の支払いおよび一定した利率に基づいて、特定の期に支払う金利を指定する <see langword="Double" /> 型の値を返します。</summary>
        <returns>定期的な定額の支払いおよび一定した利率に基づいて、特定の期に支払う金利を指定する <see langword="Double" /> 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金は、一連の支払いを時間の経過と共に行うです。 年金には、住宅ローン) などのローンまたは (毎月のコスト削減プラン) など、投資収益率を指定できます。  
  
 `Rate`と`NPer`引数は、同じ単位で支払い期間を使用して計算する必要があります。 たとえば場合、`Rate`か月間を使用して計算されます`NPer`か月間を使用して計算する必要があります。  
  
 すべての引数、預金) など配当は負の数値で表されます。(被除数をチェックします) などに受信したキャッシュは、正の数値で表されます。  
  
   
  
## Examples  
 この例では、`IPmt`がどの程度支払利息すべての支払額がの場合と同じを計算する関数。 期間ごとに利率割合は、指定された (`APR / 12`)、関心領域が必要な支払い期間 (`Period`)、支払の合計数 (`TotPmts`)、現在の値またはローンのプリンシパル (`PVal`) では、ローンの将来の値 (`FVal`)、および、支払いの期限が先頭または末尾の支払い期間がかどうかを示す数値 (`PayType`)。  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;= 0 または <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR :  * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必須。 キャッシュ フローの値を示す <see langword="Double" /> 型の配列。 配列には、負の値 (支払い額) と正の値 (受け取り額) が少なくとも 1 つずつ含まれている必要があります。</param>
        <param name="Guess">任意。 <see langword="IRR" /> 関数によって返される推定値を示すオブジェクト。 省略した場合、<c>Guess</c> は 0.1 (10%) となります。</param>
        <summary>一連の定期的なキャッシュ フロー (支払いと受け取り) の内部利益率を指定する <see langword="Double" /> 型の値を返します。</summary>
        <returns>一連の定期的なキャッシュ フロー (支払いと受け取り) の内部利益率を指定する <see langword="Double" /> 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内部利益率は、支払いと受け取り一定の間隔で発生するので構成される投資に対する利率です。  
  
 `IRR`関数では、配列内の値の順序を使用して、支払いと受け取りの順序を解釈します。 必ず、正しいシーケンスで支払いと受信確認の値を入力してください。 年金は、各期間のキャッシュ フローは修正するのには必要ありません。  
  
 `IRR` イテレーションによって計算されます。 値で始まる`Guess`、`IRR`結果が 0.00001% 以内に正確になるまで、計算を切り替えます。 場合`IRR`20 後の結果が、失敗した場合に見つけることができません。  
  
   
  
## Examples  
 この例では、`IRR`関数を配列に格納されている 5 つのキャッシュ フローの系列に対する内部利益率を返します`Values()`です。 配列の最初の要素は、ビジネスの操業を表す負の値のキャッシュ フローです。 残りの 4 つのキャッシュ フローは、後続の 4 年間の正のキャッシュ フローを表します。 `Guess` 推定の内部収益率がします。  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">配列引数の値が無効または <paramref name="Guess" /> &lt;= -1 です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR :  * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必須。 キャッシュ フローの値を示す <see langword="Double" /> 型の配列。 配列には、負の値 (支払い額) と正の値 (受け取り額) が少なくとも 1 つずつ含まれている必要があります。</param>
        <param name="FinanceRate">必須。 支払い額に対する利率を示す <see langword="Double" /> 型の値。</param>
        <param name="ReinvestRate">必須。 現金の再投資に対する受け取り利率を示す <see langword="Double" /> 型の値。</param>
        <summary>一連の定期的なキャッシュ フロー (支払いと受け取り) の修正内部利益率を指定する <see langword="Double" /> 型の値を返します。</summary>
        <returns>一連の定期的なキャッシュ フロー (支払いと受け取り) の修正内部利益率を指定する <see langword="Double" /> 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変更された内部利益率は、内部の戻り値の支払いと受け取りを異なるレートで管理する場合です。 `MIRR`関数では、投資収益率のコストの両方を考慮に入れます (`FinanceRate`) と収益利率 (`ReinvestRate`)。  
  
 `FinanceRate`と`ReinvestRatearguments`10 進数値で表した比率です。 たとえば、12% は、0.12 として表されます。  
  
 `MIRR`関数では、配列内の値の順序を使用して、支払いと受け取りの順序を解釈します。 必ず、正しいシーケンスで支払いと受信確認の値を入力してください。  
  
   
  
## Examples  
 この例では、`MIRR`関数を配列に含まれているキャッシュ フローの系列の戻り値の変更された内部収益率を返します`Values()`です。 `LoanAPR` ファイナンスの目的を表すと`InvAPR`貸付に利率を表します。  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ValueArray" /> のランクが 1 ではない、<paramref name="FinanceRate" /> = -1、または <paramref name="ReinvestRate" /> = -1。</exception>
        <exception cref="T:System.DivideByZeroException">0 による除算が行われました。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じて一定の利率を示す <see langword="Double" /> 型の値。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
        <param name="Pmt">必須。 毎回の支払い額を示す <see langword="Double" /> 型の値。 通常、支払い額には元金と利息が含まれます。支払い額を投資期間内に変更することはできません。</param>
        <param name="PV">必須。 現在の投資額、つまり将来行われる一連の支払いや受け取りを現時点で一括した場合の合計金額を示す <see langword="Double" /> 型の値。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
        <param name="FV">任意。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を示す <see langword="Double" /> 型の値。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
        <param name="Due">任意。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>定期的な定額の支払いおよび一定した利率に基づいて、投資に必要な期間を指定する <see langword="Double" /> 型の値を返します。</summary>
        <returns>定期的な定額の支払いおよび一定した利率に基づいて、投資に必要な期間を指定する <see langword="Double" /> 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金は、一連の支払いを一定期間の時間です。 年金には、住宅ローン) などのローンまたは (毎月のコスト削減プラン) など、投資収益率を指定できます。  
  
 すべての引数、預金) など配当は負の数値で表されます。(被除数をチェックします) などに受信したキャッシュは、正の数値で表されます。  
  
   
  
## Examples  
 この例では、`NPer`にによって、値を持つローン支払に支払いを行う必要があります期間の数を返す関数が含まれて`PVal`です。 また、一定期間割合金利 (`APR / 12`)、payment (`Payment`)、ローンの将来の値 (`FVal`)、および、支払いの期限が先頭または末尾の支払い期間がかどうかを示す数値 (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rate" /> = 0 かつ <paramref name="Pmt" /> = 0 です。</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double *  -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じて一定である公定歩合を小数点を使用して示す <see langword="Double" /> 型の値。</param>
        <param name="ValueArray">必須。 キャッシュ フローの値を示す <see langword="Double" /> 型の配列。 配列には、負の値 (支払い額) と正の値 (受け取り額) が少なくとも 1 つずつ含まれている必要があります。</param>
        <summary>一連の定期的なキャッシュ フロー (支払いと受け取り) および公定歩合に基づいて、出資の正味現在価値を指定する <see langword="Double" /> 型の値を返します。</summary>
        <returns>一連の定期的なキャッシュ フロー (支払いと受け取り) および公定歩合に基づいて、出資の正味現在価値を指定する <see langword="Double" /> 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 投資の正味現在価値は、支払いと受け取りの将来のシリーズの現在の値です。  
  
 `NPV`関数では、配列内の値の順序を使用して、支払いと受け取りの順序を解釈します。 必ず、正しいシーケンスで支払いと受信確認の値を入力してください。  
  
 `NPV`投資した日付より前に、のキャッシュ フローの最初の値の 1 つのピリオドを開始し、配列の最後のキャッシュ フローの値で終了します。  
  
 正味現在価値の計算は、将来のキャッシュ フローに基づいています。 によって返される値を最初の値を追加する必要があります、先頭の最初の期間の最初のキャッシュ フローする場合は、`NPV`キャッシュ フローの値に含まれていない必要があります`ValueArray`です。  
  
 `NPV`関数がに似ていますが、`PV`関数 (現在の値) ことを除いて、`PV`関数により、キャッシュ フローの終了またはピリオドの先頭での作業を開始します。 変数とは異なり`NPV`キャッシュ フローの値、`PV`投資収益率全体でのキャッシュ フローを固定する必要があります。  
  
   
  
## Examples  
 この例では、`NPV`関数を配列に含まれているキャッシュ フローの系列の正味現在価値を返します`values()`です。 格納されている、戻り値`FixedRetRate`、固定内部利益率を表します。  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ValueArray" /> が <see langword="Nothing" />、<paramref name="ValueArray" /> のランクが &lt;&gt; 1、または <paramref name="Rate" /> = -1 です</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じて一定の利率を示す <see langword="Double" /> 型の値。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
        <param name="NPer">必須。 投資期間全体での支払い回数の合計を示す <see langword="Double" /> 型の値。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
        <param name="PV">必須。 現在の投資額、つまり将来行われる一連の支払いを現時点で一括支払いした場合の合計金額を示す <see langword="Double" /> 型の値を返します。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
        <param name="FV">任意。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を示す <see langword="Double" /> 型の値。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
        <param name="Due">任意。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>定期的な定額の支払いおよび一定した利率に基づいて、投資に必要な定期支払い額を指定する <see langword="Double" /> 型の値を返します。</summary>
        <returns>定期的な定額の支払いおよび一定した利率に基づいて、投資に必要な定期支払い額を指定する <see langword="Double" /> 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金は、一連の支払いを時間の期間中に行うです。 年金には、住宅ローン) などのローンまたは (毎月のコスト削減プラン) など、投資収益率を指定できます。  
  
 `Rate`と`NPer`引数は、同じ単位で支払い期間を使用して計算する必要があります。 たとえば場合、`Rate`か月間を使用して計算されます`NPer`か月間を使用して計算する必要があります。  
  
 すべての引数、預金) などの支払額は負の数値で表されます。(被除数をチェックします) などに受信したキャッシュは、正の数値で表されます。  
  
   
  
## Examples  
 この例では、`Pmt`を一定の期間中にローンの毎月の支払いを返す関数。 期間ごとに利率割合は、指定された (`APR / 12`)、支払の合計数 (`TotPmts`)、現在の値またはローンのプリンシパル (`PVal`)、ローンの将来の値 (`FVal`) とを示す数かどうか、支払期限は、先頭またはお支払い期間の終了 `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じて一定の利率を示す <see langword="Double" /> 型の値。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
        <param name="Per">必須。 <see langword="Double" /> は、支払い期間を 1 から <c>NPer</c> の範囲で指定します。</param>
        <param name="NPer">必須。 投資期間全体での支払い回数の合計を示す <see langword="Double" /> 型の値。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
        <param name="PV">必須。 将来行われる一連の支払いや受け取りを現時点で一括した場合の合計金額を示す <see langword="Double" /> 型の値。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
        <param name="FV">任意。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を示す <see langword="Double" /> 型の値。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
        <param name="Due">任意。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>定期的な定額の支払いおよび一定した利率に基づいて、指定された期間の元金の支払いを示す <see langword="Double" /> 型の値を返します。</summary>
        <returns>定期的な定額の支払いおよび一定した利率に基づいて、指定された期間の元金の支払いを示す <see langword="Double" /> 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金は、一連の支払いを一定期間の時間です。 年金には、住宅ローン) などのローンまたは (毎月のコスト削減プラン) など、投資収益率を指定できます。  
  
 `Rate`と`NPer`引数は、同じ単位で支払い期間を使用して計算する必要があります。 たとえば場合、`Rate`か月間を使用して計算されます`NPer`か月間を使用して計算する必要があります。  
  
 すべての引数、預金) などの支払額は負の数値で表されます。(被除数をチェックします) などに受信したキャッシュは、正の数値で表されます。  
  
   
  
## Examples  
 この例では、`PPmt`がどの程度の特定の期間プリンシパルすべての支払額がの場合と同じを計算する関数。 一定期間割合金利を指定された (`APR / 12`)、プリンシパルの部分が必要な支払い期間 (`Period`)、支払の合計数 (`TotPmts`)、現在の値またはローンのプリンシパル (`PVal`) では、ローンの将来の値 (`FVal`)、および、支払いの期限が先頭または末尾の支払い期間がかどうかを示す数値 (`PayType`)。  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;=0 または <paramref name="Per" /> &gt; <paramref name="NPer" /> です。</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須。 投資期間を通じて一定の利率を示す <see langword="Double" /> 型の値。 たとえば、10% の年率 (APR) で自動車ローンを利用する際、毎月の支払いを指定した場合の月々の利率は 0.1/12 (0.0083) になります。</param>
        <param name="NPer">必須。 投資期間全体での支払い回数の合計を示す <see langword="Double" /> 型の値。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、4 × 12 (= 48) の返済期間があることになります。</param>
        <param name="Pmt">必須。 毎回の支払い額を示す <see langword="Double" /> 型の値。 通常、支払い額には元金と利息が含まれます。支払い額を投資期間内に変更することはできません。</param>
        <param name="FV">任意。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を示す <see langword="Double" /> 型の値。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
        <param name="Due">任意。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>将来の定期的な定額の支払いおよび一定した利率に基づいて、投資の現在価値を指定する <see langword="Double" /> 型の値を返します。</summary>
        <returns>将来の定期的な定額の支払いおよび一定した利率に基づいて、投資の現在価値を指定する <see langword="Double" /> 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金は、一連の支払いを一定期間の時間です。 年金には、住宅ローン) などのローンまたは (毎月のコスト削減プラン) など、投資収益率を指定できます。  
  
 `Rate`と`NPer`引数は、同じ単位で支払い期間を使用して計算する必要があります。 たとえば場合、`Rate`か月間を使用して計算されます`NPer`か月間を使用して計算する必要があります。  
  
 すべての引数、預金) など配当は負の数値で表されます。(被除数をチェックします) などに受信したキャッシュは、正の数値で表されます。  
  
   
  
## Examples  
 この例では、 `PV` $ 20 年後の年、50,000 を提供する $1,000,000 年金の現在の値を返します。 指定されたは、予想される年率 (`APR`)、支払の合計数 (`TotPmts`) の各支払額を (`YrIncome`)、投資収益率の合計の将来値 (`FVal`) とを示す数値かどうか各先頭または末尾の支払い期間で支払いが行われる (`PayType`)。 なお`YrIncome`配当投資から各年を表すためには負の数値がします。  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">必須。 投資期間全体での支払い回数の合計を示す <see langword="Double" /> 型の値。 たとえば、4 年間、月々分割払い自動車ローンを利用した場合、合計で 4 × 12 (= 48) の返済期間があることになります。</param>
        <param name="Pmt">必須。 毎回の支払い額を示す <see langword="Double" /> 型の値。 通常、支払い額には元金と利息が含まれます。支払い額を投資期間内に変更することはできません。</param>
        <param name="PV">必須。 現在の投資額、つまり将来行われる一連の支払いや受け取りを現時点で一括した場合の合計金額を示す <see langword="Double" /> 型の値。 たとえば、自動車を購入するために資金を借り入れた場合、ローン金額は、毎月の返済の対象となる貸手にとっての現在価値を表します。</param>
        <param name="FV">任意。 投資の将来価値、つまり最後の支払いを行った後に残る現金の収支を示す <see langword="Double" /> 型の値。 たとえば、ローンの将来価値は 0 です。最終支払い後の価値であるためです。 ただし、子供の教育費のため、18 年間かけて 50 万円を貯金する場合、この 50 万円は将来価値になります。 省略した場合は、0 と見なされます。</param>
        <param name="Due">任意。 支払い期日を示すオブジェクト型 <see cref="T:Microsoft.VisualBasic.DueDate" /> の値。 この引数には、支払期末に支払う場合は <c>DueDate.EndOfPeriod</c> を、期首に支払う場合は <c>DueDate.BegOfPeriod</c> を指定する必要があります。 省略した場合は、<c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <param name="Guess">任意。 <see langword="Double" /> によって返される推定値を示す <see langword="Rate" /> 型の値。 省略した場合、<c>Guess</c> は 0.1 (10%) となります。</param>
        <summary>投資期間を通じての利率を指定する <see langword="Double" /> 型の値を返します。</summary>
        <returns>投資期間を通じての利率を指定する <see langword="Double" /> 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金は、一連の支払いを一定期間の時間です。 年金には、住宅ローン) などのローンまたは (毎月のコスト削減プラン) など、投資収益率を指定できます。  
  
 すべての引数、預金) など配当は負の数値で表されます。(被除数をチェックします) などに受信したキャッシュは、正の数値で表されます。  
  
 `Rate` イテレーションによって計算されます。 値で始まる`Guess`、`Rate`結果が 0.00001% 以内に正確になるまで、計算を切り替えます。 場合`Rate`20 後の結果が、失敗した場合に見つけることができません。 推定値が 10% の場合と`Rate`失敗した場合、再試行の値が異なる`Guess`です。  
  
   
  
## Examples  
 この例では、`Rate`ローン支払の合計数を指定の目的の割合を計算する関数 (`TotPmts`)、ローン支払の量 (`Payment`)、現在の値またはローンのプリンシパル (`PVal`)、将来ローンの値 (`FVal`)、支払いの期限が先頭または末尾の支払い期間がかどうかを示す数値 (`PayType`)、および予期される利率の概算値 (`Guess`)。  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> &lt;= 0 です。</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必須。 資産を購入した時点での価格を示す <see langword="Double" /> 型の値。</param>
        <param name="Salvage">必須。 耐用年数が終了した時点での資産の価格を示す <see langword="Double" /> 型の値。</param>
        <param name="Life">必須。 資産の耐用年数を示す <see langword="Double" /> 型の値。</param>
        <summary>定額法を用いて資産の 1 期あたりの減価償却費を示す <see langword="Double" /> 型の値を返します。</summary>
        <returns>定額法を用いて資産の 1 期あたりの減価償却費を示す <see langword="Double" /> 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 減価償却の期間と同じ単位で表す必要があります、`Life`引数。 すべての引数は正の数値である必要があります。  
  
   
  
## Examples  
 この例では、`SLN`アセットの初期コストを指定した単一期間に対する資産の定額償却を返す関数 (`InitCost`)、資産の耐用年数の最後に部分的な救済値 (`SalvageVal`)、およびの合計の有効期間年単位で、資産 (`LifeTime`)。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必須。 資産を購入した時点での価格を示す <see langword="Double" /> 型の値。</param>
        <param name="Salvage">必須。 耐用年数が終了した時点での資産の価格を示す <see langword="Double" /> 型の値。</param>
        <param name="Life">必須。 資産の耐用年数を示す <see langword="Double" /> 型の値。</param>
        <param name="Period">必須。 減価償却費を計算する期を示す <see langword="Double" /> 型の値。</param>
        <summary>定額逓減法を使って指定した期の減価償却費を示す <see langword="Double" /> 型の値を返します。</summary>
        <returns>定額逓減法を使って指定した期の減価償却費を示す <see langword="Double" /> 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Life`と`Period`引数は、同じ単位で表す必要があります。 たとえば場合、`Life`月単位で指定された`Period`も月単位で指定する必要があります。 すべての引数は正の数値である必要があります。  
  
   
  
## Examples  
 この例では、`SYD`アセットの初期コストを指定された、指定した期間、資産の減価償却を返す関数 (`InitCost`)、資産の耐用年数の最後に部分的な救済値 (`SalvageVal`)、およびのアセットの合計の有効期間年 (`LifeTime`)。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Salvage" /> &lt; 0、<paramref name="Period" /> &gt; <paramref name="Life" />、または <paramref name="Period" /> &lt;=0 です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>