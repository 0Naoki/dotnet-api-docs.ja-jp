<Type Name="VBMath" FullName="Microsoft.VisualBasic.VBMath">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="637cfa37fc9558f429d81ef2ec94474ee408dcbf" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48596876" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VBMath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed VBMath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.VBMath" />
  <TypeSignature Language="VB.NET" Value="Public Module VBMath" />
  <TypeSignature Language="C++ CLI" Value="public ref class VBMath sealed" />
  <TypeSignature Language="F#" Value="type VBMath = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="VbMath" /> モジュールに含まれるプロシージャを使って、数値演算を実行します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このモジュールは、乱数を生成するため、Visual Basic 言語のキーワードとランタイム ライブラリ メンバーをサポートします。  
  
   
  
## Examples  
 この例では、 `Rnd` 1 と 6 の範囲内でランダムな整数値を生成する関数。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">数値演算の概要</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/derived-math-functions.md">数値演算関数の導出 (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">キーワード (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic ランタイム ライブラリ メンバー</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Randomize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>乱数ジェネレーターを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Randomize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Randomize();" />
      <MemberSignature Language="F#" Value="static member Randomize : unit -&gt; unit" Usage="Microsoft.VisualBasic.VBMath.Randomize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>乱数ジェネレーターを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロード、`Randomize`メソッドは、シード値を取りません。 代わりに、システムのタイマーによって返される値は、新しいシード値として使用されます。  
  
 場合`Randomize`が使用されていない、`Rnd`関数を引数なしで) 使用同数シードとして初めてが呼び出され、それ以降のシード値として最後に生成された番号を使用します。  
  
> [!NOTE]
>  ランダムな数値のシーケンスを繰り返すを呼び出す`Rnd`負の値を使用する前に、すぐに引数を持つ`Randomize`数値の引数。  
  
> [!IMPORTANT]
>  `Random`ステートメントおよび`Rnd`結果が生成するために使用されるアルゴリズムを知っている人に予測可能な可能性があります、関数のシード値で始まり、有限の範囲内にある数値を生成します。 その結果、`Random`ステートメントと`Rnd`暗号化で使用するためのランダムな数値を生成する関数を使用する必要があります。 詳細については、「<xref:System.Security.Cryptography.RandomNumberGenerator>」を参照してください。  
  
   
  
## Examples  
 この例では、`Randomize`乱数ジェネレーターを初期化するステートメント。 数値の引数が省略されているため、`Randomize`からの戻り値を使用して、`Timer`新しいシード値として機能します。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">数値演算の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Randomize (Number As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Randomize(double Number);" />
      <MemberSignature Language="F#" Value="static member Randomize : double -&gt; unit" Usage="Microsoft.VisualBasic.VBMath.Randomize Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">任意。 <see langword="Object" /> または任意の有効な数式。</param>
        <summary>乱数ジェネレーターを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Randomize` 使用して`Number`初期化するために、`Rnd`関数の乱数ジェネレーター、新しいシード値を指定することです。 省略した場合`Number`システムのタイマーによって返される値は、新しいシード値として使用されます。  
  
 場合`Randomize`が使用されていない、`Rnd`関数を引数なしで) 使用同数シードとして初めてが呼び出され、それ以降のシード値として最後に生成された番号を使用します。  
  
> [!NOTE]
>  ランダムな数値のシーケンスを繰り返すを呼び出す`Rnd`負の値を使用する前に、すぐに引数を持つ`Randomize`数値の引数。 使用して`Randomize`の値が同じで`Number`前のシーケンスを繰り返しません。  
  
> [!IMPORTANT]
>  `Random`ステートメントおよび`Rnd`結果が生成するために使用されるアルゴリズムを知っている人に予測可能な可能性があります、関数のシード値で始まり、有限の範囲内にある数値を生成します。 その結果、`Random`ステートメントと`Rnd`暗号化で使用するためのランダムな数値を生成する関数を使用する必要があります。 詳細については、「<xref:System.Security.Cryptography.RandomNumberGenerator>」を参照してください。  
  
   
  
## Examples  
 この例では、`Randomize`乱数ジェネレーターを初期化するステートメント。 数値の引数が省略されているため、`Randomize`からの戻り値を使用して、`Timer`新しいシード値として機能します。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">数値演算の概要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Rnd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>型 <see langword="Single" /> の乱数を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd" />
      <MemberSignature Language="VB.NET" Value="Public Function Rnd () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Rnd();" />
      <MemberSignature Language="F#" Value="static member Rnd : unit -&gt; single" Usage="Microsoft.VisualBasic.VBMath.Rnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>型 <see langword="Single" /> の乱数を返します。</summary>
        <returns>乱数系列の次の乱数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Rnd`未満、1 より大きいまたは 0 に等しい、関数が値を返します。  
  
 呼び出しの前に`Rnd`を使用して、`Randomize`乱数ジェネレーターでシードを初期化するために、引数なしのステートメントがシステム タイマーに基づきます。  
  
 特定の範囲の整数の乱数を生成するには、次の数式を使用します。  
  
 [!code-vb[VbVbalrMath#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 ここでは、 `upperbound` 、範囲の最大数と`lowerbound`は範囲の最小数。  
  
> [!NOTE]
>  ランダムな数値のシーケンスを繰り返すを呼び出す`Rnd`負の値を使用する前に、すぐに引数を持つ`Randomize`数値の引数。  
  
> [!IMPORTANT]
>  `Random`ステートメントおよび`Rnd`結果が生成するために使用されるアルゴリズムを知っている人に予測可能な可能性があります、関数のシード値で始まり、有限の範囲内にある数値を生成します。 その結果、`Random`ステートメントと`Rnd`暗号化で使用するためのランダムな数値を生成する関数を使用する必要があります。  
  
   
  
## Examples  
 この例では、 `Rnd` 1 と 6 の範囲内でランダムな整数値を生成する関数。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">数値演算の概要</related>
      </Docs>
    </Member>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rnd (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Rnd(float Number);" />
      <MemberSignature Language="F#" Value="static member Rnd : single -&gt; single" Usage="Microsoft.VisualBasic.VBMath.Rnd Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">任意。 <see langword="Single" /> 値または任意の有効な <see langword="Single" /> 型の式。</param>
        <summary>型 <see langword="Single" /> の乱数を返します。</summary>
        <returns>数値が 0 未満の場合、Rnd は <paramref name="Number" /> をシードとして使用して、毎回同じ数値を生成します。 数値が 0 よりも大きい場合、Rnd はシーケンスの次の乱数を生成します。 数値が 0 の場合、Rnd は最後に生成された数値を生成します。 数値が指定されていない場合、Rnd はシーケンスの次の乱数を生成します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Rnd`未満、1 より大きいまたは 0 に等しい、関数が値を返します。  
  
 値`Number`決定方法`Rnd`乱数を生成します。  
  
 ため、初期シードの同じ番号のシーケンスが生成される連続した呼び出しごとに、`Rnd`関数は、次のシーケンス番号のシードとして以前に生成された番号を使用します。  
  
 呼び出しの前に`Rnd`を使用して、`Randomize`乱数ジェネレーターでシードを初期化するために、引数なしのステートメントがシステム タイマーに基づきます。  
  
 特定の範囲の整数の乱数を生成するには、次の数式を使用します。  
  
 [!code-vb[VbVbalrMath#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 ここでは、 `upperbound` 、範囲の最大数と`lowerbound`は範囲の最小数。  
  
> [!NOTE]
>  ランダムな数値のシーケンスを繰り返すを呼び出す`Rnd`負の値を使用する前に、すぐに引数を持つ`Randomize`数値の引数。 使用して`Randomize`の値が同じで`Number`前のシーケンスを繰り返しません。  
  
> [!IMPORTANT]
>  `Random`ステートメントおよび`Rnd`結果が生成するために使用されるアルゴリズムを知っている人に予測可能な可能性があります、関数のシード値で始まり、有限の範囲内にある数値を生成します。 その結果、`Random`ステートメントと`Rnd`暗号化で使用するためのランダムな数値を生成する関数を使用する必要があります。  
  
   
  
## Examples  
 この例では、 `Rnd` 1 と 6 の範囲内でランダムな整数値を生成する関数。  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">数値演算の概要</related>
      </Docs>
    </Member>
  </Members>
</Type>